{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache) {\n  const _component_vue_audio_recorder_and_player = _resolveComponent(\"vue-audio-recorder-and-player\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_vue_audio_recorder_and_player, {\n    onRecordingstop: _ctx.recordingStopped\n  }, null, 8 /* PROPS */, [\"onRecordingstop\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_vue_audio_recorder_and_player","onRecordingstop","_ctx","recordingStopped"],"sources":["D:\\Project\\Nerd_herd\\accounting\\accounting\\src\\components\\RecordVoice.vue"],"sourcesContent":["<template>\r\n\t<div>\r\n\t\t<vue-audio-recorder-and-player @recordingstop=\"recordingStopped\" />\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\nimport vue-audio-recorder-and-player from 'vue-audio-recorder-and-player';\r\n\r\nexport default{\r\n    methods: {\r\n    async recordingStopped(blob) {\r\n\r\n      const readBlobAsBase64 = (blob) => {\r\n          var reader = new FileReader();\r\n          return new Promise((resolve) => {\r\n            reader.addEventListener(\"load\", function() {\r\n              resolve(reader.result);\r\n            });\r\n            reader.readAsDataURL( blob );\r\n              });\r\n        };\r\n\r\n      try {\r\n          this.audioURL = await readBlobAsBase64(blob)\r\n        } catch (e) {\r\n          console.warn(e.message)\r\n        }\r\n\r\n      console.log(\"here\", this.audioURL) // Audio blob as base 64 string\r\n    }\r\n}}\r\n</script>\r\n"],"mappings":";;;uBACCA,mBAAA,CAEM,cADLC,YAAA,CAAmEC,wCAAA;IAAnCC,eAAa,EAAEC,IAAA,CAAAC;EAAgB,6C"},"metadata":{},"sourceType":"module","externalDependencies":[]}