{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nrequire(\"core-js/modules/web.url-search-params.size.js\");\n(async () => {\n  let leftchannel = [];\n  let rightchannel = [];\n  let recorder = null;\n  let recording = false;\n  let recordingLength = 0;\n  let volume = null;\n  let audioInput = null;\n  let sampleRate = null;\n  let AudioContext = window.AudioContext || window.webkitAudioContext;\n  let context = null;\n  let analyser = null;\n  let canvas = document.querySelector(\"canvas\");\n  let canvasCtx = canvas.getContext(\"2d\");\n  let visualSelect = document.querySelector(\"#visSelect\");\n  let micSelect = document.querySelector(\"#micSelect\");\n  let stream = null;\n  let tested = false;\n  try {\n    window.stream = stream = await getStream();\n    console.log(\"Got stream\");\n  } catch (err) {\n    alert(\"Issue getting mic\", err);\n  }\n  const deviceInfos = await navigator.mediaDevices.enumerateDevices();\n  var mics = [];\n  for (let i = 0; i !== deviceInfos.length; ++i) {\n    let deviceInfo = deviceInfos[i];\n    if (deviceInfo.kind === \"audioinput\") {\n      mics.push(deviceInfo);\n      let label = deviceInfo.label || \"Microphone \" + mics.length;\n      console.log(\"Mic \", label + \" \" + deviceInfo.deviceId);\n      const option = document.createElement(\"option\");\n      option.value = deviceInfo.deviceId;\n      option.text = label;\n      micSelect.appendChild(option);\n    }\n  }\n  function getStream(constraints) {\n    if (!constraints) {\n      constraints = {\n        audio: true,\n        video: false\n      };\n    }\n    return navigator.mediaDevices.getUserMedia(constraints);\n  }\n  setUpRecording();\n  function setUpRecording() {\n    context = new AudioContext();\n    sampleRate = context.sampleRate;\n\n    // creates a gain node\n    volume = context.createGain();\n\n    // creates an audio node from teh microphone incoming stream\n    audioInput = context.createMediaStreamSource(stream);\n\n    // Create analyser\n    analyser = context.createAnalyser();\n\n    // connect audio input to the analyser\n    audioInput.connect(analyser);\n\n    // connect analyser to the volume control\n    // analyser.connect(volume);\n\n    let bufferSize = 2048;\n    let recorder = context.createScriptProcessor(bufferSize, 2, 2);\n\n    // we connect the volume control to the processor\n    // volume.connect(recorder);\n\n    analyser.connect(recorder);\n\n    // finally connect the processor to the output\n    recorder.connect(context.destination);\n    recorder.onaudioprocess = function (e) {\n      // Check\n      if (!recording) return;\n      // Do something with the data, i.e Convert this to WAV\n      console.log(\"recording\");\n      let left = e.inputBuffer.getChannelData(0);\n      let right = e.inputBuffer.getChannelData(1);\n      if (!tested) {\n        tested = true;\n        // if this reduces to 0 we are not getting any sound\n        if (!left.reduce((a, b) => a + b)) {\n          alert(\"There seems to be an issue with your Mic\");\n          // clean up;\n          stop();\n          stream.getTracks().forEach(function (track) {\n            track.stop();\n          });\n          context.close();\n        }\n      }\n      // we clone the samples\n      leftchannel.push(new Float32Array(left));\n      rightchannel.push(new Float32Array(right));\n      recordingLength += bufferSize;\n    };\n    visualize();\n  }\n  function mergeBuffers(channelBuffer, recordingLength) {\n    let result = new Float32Array(recordingLength);\n    let offset = 0;\n    let lng = channelBuffer.length;\n    for (let i = 0; i < lng; i++) {\n      let buffer = channelBuffer[i];\n      result.set(buffer, offset);\n      offset += buffer.length;\n    }\n    return result;\n  }\n  function interleave(leftChannel, rightChannel) {\n    let length = leftChannel.length + rightChannel.length;\n    let result = new Float32Array(length);\n    let inputIndex = 0;\n    for (let index = 0; index < length;) {\n      result[index++] = leftChannel[inputIndex];\n      result[index++] = rightChannel[inputIndex];\n      inputIndex++;\n    }\n    return result;\n  }\n  function writeUTFBytes(view, offset, string) {\n    let lng = string.length;\n    for (let i = 0; i < lng; i++) {\n      view.setUint8(offset + i, string.charCodeAt(i));\n    }\n  }\n  function start() {\n    recording = true;\n    document.querySelector(\"#msg\").style.visibility = \"visible\";\n    // reset the buffers for the new recording\n    leftchannel.length = rightchannel.length = 0;\n    recordingLength = 0;\n    console.log(\"context: \", !!context);\n    if (!context) setUpRecording();\n  }\n  function stop() {\n    console.log(\"Stop\");\n    recording = false;\n    document.querySelector(\"#msg\").style.visibility = \"hidden\";\n\n    // we flat the left and right channels down\n    let leftBuffer = mergeBuffers(leftchannel, recordingLength);\n    let rightBuffer = mergeBuffers(rightchannel, recordingLength);\n    // we interleave both channels together\n    let interleaved = interleave(leftBuffer, rightBuffer);\n\n    ///////////// WAV Encode /////////////////\n    // from http://typedarray.org/from-microphone-to-wav-with-getusermedia-and-web-audio/\n    //\n\n    // we create our wav file\n    let buffer = new ArrayBuffer(44 + interleaved.length * 2);\n    let view = new DataView(buffer);\n\n    // RIFF chunk descriptor\n    writeUTFBytes(view, 0, \"RIFF\");\n    view.setUint32(4, 44 + interleaved.length * 2, true);\n    writeUTFBytes(view, 8, \"WAVE\");\n    // FMT sub-chunk\n    writeUTFBytes(view, 12, \"fmt \");\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    // stereo (2 channels)\n    view.setUint16(22, 2, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, sampleRate * 4, true);\n    view.setUint16(32, 4, true);\n    view.setUint16(34, 16, true);\n    // data sub-chunk\n    writeUTFBytes(view, 36, \"data\");\n    view.setUint32(40, interleaved.length * 2, true);\n\n    // write the PCM samples\n    let lng = interleaved.length;\n    let index = 44;\n    let volume = 1;\n    for (let i = 0; i < lng; i++) {\n      view.setInt16(index, interleaved[i] * (0x7fff * volume), true);\n      index += 2;\n    }\n\n    // our final binary blob\n    const blob = new Blob([view], {\n      type: \"audio/wav\"\n    });\n    const audioUrl = URL.createObjectURL(blob);\n    console.log(\"BLOB \", blob);\n    console.log(\"URL \", audioUrl);\n    document.querySelector(\"#audio\").setAttribute(\"src\", audioUrl);\n    const link = document.querySelector(\"#download\");\n    link.setAttribute(\"href\", audioUrl);\n    link.download = \"output.wav\";\n  }\n\n  // Visualizer function from\n  // https://webaudiodemos.appspot.com/AudioRecorder/index.html\n  //\n  function visualize() {\n    WIDTH = canvas.width;\n    HEIGHT = canvas.height;\n    CENTERX = canvas.width / 2;\n    CENTERY = canvas.height / 2;\n    let visualSetting = visualSelect.value;\n    console.log(visualSetting);\n    if (!analyser) return;\n    if (visualSetting === \"sinewave\") {\n      analyser.fftSize = 2048;\n      var bufferLength = analyser.fftSize;\n      console.log(bufferLength);\n      var dataArray = new Uint8Array(bufferLength);\n      canvasCtx.clearRect(0, 0, WIDTH, HEIGHT);\n      var draw = function () {\n        drawVisual = requestAnimationFrame(draw);\n        analyser.getByteTimeDomainData(dataArray);\n        canvasCtx.fillStyle = \"rgb(200, 200, 200)\";\n        canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\n        canvasCtx.lineWidth = 2;\n        canvasCtx.strokeStyle = \"rgb(0, 0, 0)\";\n        canvasCtx.beginPath();\n        var sliceWidth = WIDTH * 1.0 / bufferLength;\n        var x = 0;\n        for (var i = 0; i < bufferLength; i++) {\n          var v = dataArray[i] / 128.0;\n          var y = v * HEIGHT / 2;\n          if (i === 0) {\n            canvasCtx.moveTo(x, y);\n          } else {\n            canvasCtx.lineTo(x, y);\n          }\n          x += sliceWidth;\n        }\n        canvasCtx.lineTo(canvas.width, canvas.height / 2);\n        canvasCtx.stroke();\n      };\n      draw();\n    } else if (visualSetting == \"frequencybars\") {\n      analyser.fftSize = 64;\n      var bufferLengthAlt = analyser.frequencyBinCount;\n      console.log(bufferLengthAlt);\n      var dataArrayAlt = new Uint8Array(bufferLengthAlt);\n      canvasCtx.clearRect(0, 0, WIDTH, HEIGHT);\n      var drawAlt = function () {\n        drawVisual = requestAnimationFrame(drawAlt);\n        analyser.getByteFrequencyData(dataArrayAlt);\n        canvasCtx.fillStyle = \"rgb(0, 0, 0)\";\n        canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\n        var barWidth = WIDTH / bufferLengthAlt;\n        var barHeight;\n        var x = 0;\n        for (var i = 0; i < bufferLengthAlt; i++) {\n          barHeight = dataArrayAlt[i];\n          canvasCtx.fillStyle = \"rgb(\" + (barHeight + 100) + \",50,50)\";\n          canvasCtx.fillRect(x, HEIGHT - barHeight / 2, barWidth, barHeight / 2);\n          x += barWidth + 1;\n        }\n      };\n      drawAlt();\n    } else if (visualSetting == \"circle\") {\n      analyser.fftSize = 32;\n      let bufferLength = analyser.frequencyBinCount;\n      console.log(bufferLength);\n      let dataArray = new Uint8Array(bufferLength);\n      canvasCtx.clearRect(0, 0, WIDTH, HEIGHT);\n      let draw = () => {\n        drawVisual = requestAnimationFrame(draw);\n        analyser.getByteFrequencyData(dataArray);\n        canvasCtx.fillStyle = \"rgb(0, 0, 0)\";\n        canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\n\n        // let radius = dataArray.reduce((a,b) => a + b) / bufferLength;\n        let radius = dataArray[2] / 2;\n        if (radius < 20) radius = 20;\n        if (radius > 100) radius = 100;\n        // console.log('Radius ', radius)\n        canvasCtx.beginPath();\n        canvasCtx.arc(CENTERX, CENTERY, radius, 0, 2 * Math.PI, false);\n        // canvasCtx.fillStyle = 'rgb(50,50,' + (radius+100) +')';\n        // canvasCtx.fill();\n        canvasCtx.lineWidth = 6;\n        canvasCtx.strokeStyle = \"rgb(50,50,\" + (radius + 100) + \")\";\n        canvasCtx.stroke();\n      };\n      draw();\n    }\n  }\n  visualSelect.onchange = function () {\n    window.cancelAnimationFrame(drawVisual);\n    visualize();\n  };\n  micSelect.onchange = async e => {\n    console.log(\"now use device \", micSelect.value);\n    stream.getTracks().forEach(function (track) {\n      track.stop();\n    });\n    context.close();\n    stream = await getStream({\n      audio: {\n        deviceId: {\n          exact: micSelect.value\n        }\n      },\n      video: false\n    });\n    setUpRecording();\n  };\n  function pause() {\n    recording = false;\n    context.suspend();\n  }\n  function resume() {\n    recording = true;\n    context.resume();\n  }\n  document.querySelector(\"#record\").onclick = e => {\n    console.log(\"Start recording\");\n    start();\n  };\n  document.querySelector(\"#stop\").onclick = e => {\n    stop();\n  };\n})();","map":{"version":3,"names":["leftchannel","rightchannel","recorder","recording","recordingLength","volume","audioInput","sampleRate","AudioContext","window","webkitAudioContext","context","analyser","canvas","document","querySelector","canvasCtx","getContext","visualSelect","micSelect","stream","tested","getStream","console","log","err","alert","deviceInfos","navigator","mediaDevices","enumerateDevices","mics","i","length","deviceInfo","kind","push","label","deviceId","option","createElement","value","text","appendChild","constraints","audio","video","getUserMedia","setUpRecording","createGain","createMediaStreamSource","createAnalyser","connect","bufferSize","createScriptProcessor","destination","onaudioprocess","e","left","inputBuffer","getChannelData","right","reduce","a","b","stop","getTracks","forEach","track","close","Float32Array","visualize","mergeBuffers","channelBuffer","result","offset","lng","buffer","set","interleave","leftChannel","rightChannel","inputIndex","index","writeUTFBytes","view","string","setUint8","charCodeAt","start","style","visibility","leftBuffer","rightBuffer","interleaved","ArrayBuffer","DataView","setUint32","setUint16","setInt16","blob","Blob","type","audioUrl","URL","createObjectURL","setAttribute","link","download","WIDTH","width","HEIGHT","height","CENTERX","CENTERY","visualSetting","fftSize","bufferLength","dataArray","Uint8Array","clearRect","draw","drawVisual","requestAnimationFrame","getByteTimeDomainData","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","v","y","moveTo","lineTo","stroke","bufferLengthAlt","frequencyBinCount","dataArrayAlt","drawAlt","getByteFrequencyData","barWidth","barHeight","radius","arc","Math","PI","onchange","cancelAnimationFrame","exact","pause","suspend","resume","onclick"],"sources":["D:\\Project\\Nerd_herd\\accounting\\accounting\\src\\components\\RecordVoice.vue"],"sourcesContent":["<template>\r\n\t<select name=\"\" id=\"micSelect\"></select>\r\n\r\n\t<select id=\"visSelect\">\r\n\t\t<option value=\"frequencybars\">Bar</option>\r\n\t\t<option value=\"sinewave\">Wave</option>\r\n\t\t<option value=\"circle\">Circle</option>\r\n\t</select>\r\n\r\n\t<a id=\"download\">Download</a>\r\n\r\n\t<div class=\"audio-controls\">\r\n\t\t<button id=\"record\">Record</button>\r\n\t\t<button id=\"stop\">Stop</button>\r\n\t\t<audio id=\"audio\" controls></audio>\r\n\t</div>\r\n\r\n\t<div id=\"msg\">Recording...</div>\r\n\t<canvas width=\"500\" height=\"300\"></canvas>\r\n</template>\r\n\r\n<script>\r\n(async () => {\r\n\tlet leftchannel = [];\r\n\tlet rightchannel = [];\r\n\tlet recorder = null;\r\n\tlet recording = false;\r\n\tlet recordingLength = 0;\r\n\tlet volume = null;\r\n\tlet audioInput = null;\r\n\tlet sampleRate = null;\r\n\tlet AudioContext = window.AudioContext || window.webkitAudioContext;\r\n\tlet context = null;\r\n\tlet analyser = null;\r\n\tlet canvas = document.querySelector(\"canvas\");\r\n\tlet canvasCtx = canvas.getContext(\"2d\");\r\n\tlet visualSelect = document.querySelector(\"#visSelect\");\r\n\tlet micSelect = document.querySelector(\"#micSelect\");\r\n\tlet stream = null;\r\n\tlet tested = false;\r\n\r\n\ttry {\r\n\t\twindow.stream = stream = await getStream();\r\n\t\tconsole.log(\"Got stream\");\r\n\t} catch (err) {\r\n\t\talert(\"Issue getting mic\", err);\r\n\t}\r\n\r\n\tconst deviceInfos = await navigator.mediaDevices.enumerateDevices();\r\n\r\n\tvar mics = [];\r\n\tfor (let i = 0; i !== deviceInfos.length; ++i) {\r\n\t\tlet deviceInfo = deviceInfos[i];\r\n\t\tif (deviceInfo.kind === \"audioinput\") {\r\n\t\t\tmics.push(deviceInfo);\r\n\t\t\tlet label = deviceInfo.label || \"Microphone \" + mics.length;\r\n\t\t\tconsole.log(\"Mic \", label + \" \" + deviceInfo.deviceId);\r\n\t\t\tconst option = document.createElement(\"option\");\r\n\t\t\toption.value = deviceInfo.deviceId;\r\n\t\t\toption.text = label;\r\n\t\t\tmicSelect.appendChild(option);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getStream(constraints) {\r\n\t\tif (!constraints) {\r\n\t\t\tconstraints = {audio: true, video: false};\r\n\t\t}\r\n\t\treturn navigator.mediaDevices.getUserMedia(constraints);\r\n\t}\r\n\r\n\tsetUpRecording();\r\n\r\n\tfunction setUpRecording() {\r\n\t\tcontext = new AudioContext();\r\n\t\tsampleRate = context.sampleRate;\r\n\r\n\t\t// creates a gain node\r\n\t\tvolume = context.createGain();\r\n\r\n\t\t// creates an audio node from teh microphone incoming stream\r\n\t\taudioInput = context.createMediaStreamSource(stream);\r\n\r\n\t\t// Create analyser\r\n\t\tanalyser = context.createAnalyser();\r\n\r\n\t\t// connect audio input to the analyser\r\n\t\taudioInput.connect(analyser);\r\n\r\n\t\t// connect analyser to the volume control\r\n\t\t// analyser.connect(volume);\r\n\r\n\t\tlet bufferSize = 2048;\r\n\t\tlet recorder = context.createScriptProcessor(bufferSize, 2, 2);\r\n\r\n\t\t// we connect the volume control to the processor\r\n\t\t// volume.connect(recorder);\r\n\r\n\t\tanalyser.connect(recorder);\r\n\r\n\t\t// finally connect the processor to the output\r\n\t\trecorder.connect(context.destination);\r\n\r\n\t\trecorder.onaudioprocess = function (e) {\r\n\t\t\t// Check\r\n\t\t\tif (!recording) return;\r\n\t\t\t// Do something with the data, i.e Convert this to WAV\r\n\t\t\tconsole.log(\"recording\");\r\n\t\t\tlet left = e.inputBuffer.getChannelData(0);\r\n\t\t\tlet right = e.inputBuffer.getChannelData(1);\r\n\t\t\tif (!tested) {\r\n\t\t\t\ttested = true;\r\n\t\t\t\t// if this reduces to 0 we are not getting any sound\r\n\t\t\t\tif (!left.reduce((a, b) => a + b)) {\r\n\t\t\t\t\talert(\"There seems to be an issue with your Mic\");\r\n\t\t\t\t\t// clean up;\r\n\t\t\t\t\tstop();\r\n\t\t\t\t\tstream.getTracks().forEach(function (track) {\r\n\t\t\t\t\t\ttrack.stop();\r\n\t\t\t\t\t});\r\n\t\t\t\t\tcontext.close();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// we clone the samples\r\n\t\t\tleftchannel.push(new Float32Array(left));\r\n\t\t\trightchannel.push(new Float32Array(right));\r\n\t\t\trecordingLength += bufferSize;\r\n\t\t};\r\n\t\tvisualize();\r\n\t}\r\n\r\n\tfunction mergeBuffers(channelBuffer, recordingLength) {\r\n\t\tlet result = new Float32Array(recordingLength);\r\n\t\tlet offset = 0;\r\n\t\tlet lng = channelBuffer.length;\r\n\t\tfor (let i = 0; i < lng; i++) {\r\n\t\t\tlet buffer = channelBuffer[i];\r\n\t\t\tresult.set(buffer, offset);\r\n\t\t\toffset += buffer.length;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction interleave(leftChannel, rightChannel) {\r\n\t\tlet length = leftChannel.length + rightChannel.length;\r\n\t\tlet result = new Float32Array(length);\r\n\r\n\t\tlet inputIndex = 0;\r\n\r\n\t\tfor (let index = 0; index < length; ) {\r\n\t\t\tresult[index++] = leftChannel[inputIndex];\r\n\t\t\tresult[index++] = rightChannel[inputIndex];\r\n\t\t\tinputIndex++;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction writeUTFBytes(view, offset, string) {\r\n\t\tlet lng = string.length;\r\n\t\tfor (let i = 0; i < lng; i++) {\r\n\t\t\tview.setUint8(offset + i, string.charCodeAt(i));\r\n\t\t}\r\n\t}\r\n\r\n\tfunction start() {\r\n\t\trecording = true;\r\n\t\tdocument.querySelector(\"#msg\").style.visibility = \"visible\";\r\n\t\t// reset the buffers for the new recording\r\n\t\tleftchannel.length = rightchannel.length = 0;\r\n\t\trecordingLength = 0;\r\n\t\tconsole.log(\"context: \", !!context);\r\n\t\tif (!context) setUpRecording();\r\n\t}\r\n\r\n\tfunction stop() {\r\n\t\tconsole.log(\"Stop\");\r\n\t\trecording = false;\r\n\t\tdocument.querySelector(\"#msg\").style.visibility = \"hidden\";\r\n\r\n\t\t// we flat the left and right channels down\r\n\t\tlet leftBuffer = mergeBuffers(leftchannel, recordingLength);\r\n\t\tlet rightBuffer = mergeBuffers(rightchannel, recordingLength);\r\n\t\t// we interleave both channels together\r\n\t\tlet interleaved = interleave(leftBuffer, rightBuffer);\r\n\r\n\t\t///////////// WAV Encode /////////////////\r\n\t\t// from http://typedarray.org/from-microphone-to-wav-with-getusermedia-and-web-audio/\r\n\t\t//\r\n\r\n\t\t// we create our wav file\r\n\t\tlet buffer = new ArrayBuffer(44 + interleaved.length * 2);\r\n\t\tlet view = new DataView(buffer);\r\n\r\n\t\t// RIFF chunk descriptor\r\n\t\twriteUTFBytes(view, 0, \"RIFF\");\r\n\t\tview.setUint32(4, 44 + interleaved.length * 2, true);\r\n\t\twriteUTFBytes(view, 8, \"WAVE\");\r\n\t\t// FMT sub-chunk\r\n\t\twriteUTFBytes(view, 12, \"fmt \");\r\n\t\tview.setUint32(16, 16, true);\r\n\t\tview.setUint16(20, 1, true);\r\n\t\t// stereo (2 channels)\r\n\t\tview.setUint16(22, 2, true);\r\n\t\tview.setUint32(24, sampleRate, true);\r\n\t\tview.setUint32(28, sampleRate * 4, true);\r\n\t\tview.setUint16(32, 4, true);\r\n\t\tview.setUint16(34, 16, true);\r\n\t\t// data sub-chunk\r\n\t\twriteUTFBytes(view, 36, \"data\");\r\n\t\tview.setUint32(40, interleaved.length * 2, true);\r\n\r\n\t\t// write the PCM samples\r\n\t\tlet lng = interleaved.length;\r\n\t\tlet index = 44;\r\n\t\tlet volume = 1;\r\n\t\tfor (let i = 0; i < lng; i++) {\r\n\t\t\tview.setInt16(index, interleaved[i] * (0x7fff * volume), true);\r\n\t\t\tindex += 2;\r\n\t\t}\r\n\r\n\t\t// our final binary blob\r\n\t\tconst blob = new Blob([view], {type: \"audio/wav\"});\r\n\r\n\t\tconst audioUrl = URL.createObjectURL(blob);\r\n\t\tconsole.log(\"BLOB \", blob);\r\n\t\tconsole.log(\"URL \", audioUrl);\r\n\t\tdocument.querySelector(\"#audio\").setAttribute(\"src\", audioUrl);\r\n\t\tconst link = document.querySelector(\"#download\");\r\n\t\tlink.setAttribute(\"href\", audioUrl);\r\n\t\tlink.download = \"output.wav\";\r\n\t}\r\n\r\n\t// Visualizer function from\r\n\t// https://webaudiodemos.appspot.com/AudioRecorder/index.html\r\n\t//\r\n\tfunction visualize() {\r\n\t\tWIDTH = canvas.width;\r\n\t\tHEIGHT = canvas.height;\r\n\t\tCENTERX = canvas.width / 2;\r\n\t\tCENTERY = canvas.height / 2;\r\n\r\n\t\tlet visualSetting = visualSelect.value;\r\n\t\tconsole.log(visualSetting);\r\n\t\tif (!analyser) return;\r\n\r\n\t\tif (visualSetting === \"sinewave\") {\r\n\t\t\tanalyser.fftSize = 2048;\r\n\t\t\tvar bufferLength = analyser.fftSize;\r\n\t\t\tconsole.log(bufferLength);\r\n\t\t\tvar dataArray = new Uint8Array(bufferLength);\r\n\r\n\t\t\tcanvasCtx.clearRect(0, 0, WIDTH, HEIGHT);\r\n\r\n\t\t\tvar draw = function () {\r\n\t\t\t\tdrawVisual = requestAnimationFrame(draw);\r\n\r\n\t\t\t\tanalyser.getByteTimeDomainData(dataArray);\r\n\r\n\t\t\t\tcanvasCtx.fillStyle = \"rgb(200, 200, 200)\";\r\n\t\t\t\tcanvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\r\n\r\n\t\t\t\tcanvasCtx.lineWidth = 2;\r\n\t\t\t\tcanvasCtx.strokeStyle = \"rgb(0, 0, 0)\";\r\n\r\n\t\t\t\tcanvasCtx.beginPath();\r\n\r\n\t\t\t\tvar sliceWidth = (WIDTH * 1.0) / bufferLength;\r\n\t\t\t\tvar x = 0;\r\n\r\n\t\t\t\tfor (var i = 0; i < bufferLength; i++) {\r\n\t\t\t\t\tvar v = dataArray[i] / 128.0;\r\n\t\t\t\t\tvar y = (v * HEIGHT) / 2;\r\n\r\n\t\t\t\t\tif (i === 0) {\r\n\t\t\t\t\t\tcanvasCtx.moveTo(x, y);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcanvasCtx.lineTo(x, y);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tx += sliceWidth;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcanvasCtx.lineTo(canvas.width, canvas.height / 2);\r\n\t\t\t\tcanvasCtx.stroke();\r\n\t\t\t};\r\n\r\n\t\t\tdraw();\r\n\t\t} else if (visualSetting == \"frequencybars\") {\r\n\t\t\tanalyser.fftSize = 64;\r\n\t\t\tvar bufferLengthAlt = analyser.frequencyBinCount;\r\n\t\t\tconsole.log(bufferLengthAlt);\r\n\t\t\tvar dataArrayAlt = new Uint8Array(bufferLengthAlt);\r\n\r\n\t\t\tcanvasCtx.clearRect(0, 0, WIDTH, HEIGHT);\r\n\r\n\t\t\tvar drawAlt = function () {\r\n\t\t\t\tdrawVisual = requestAnimationFrame(drawAlt);\r\n\r\n\t\t\t\tanalyser.getByteFrequencyData(dataArrayAlt);\r\n\r\n\t\t\t\tcanvasCtx.fillStyle = \"rgb(0, 0, 0)\";\r\n\t\t\t\tcanvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\r\n\r\n\t\t\t\tvar barWidth = WIDTH / bufferLengthAlt;\r\n\t\t\t\tvar barHeight;\r\n\t\t\t\tvar x = 0;\r\n\r\n\t\t\t\tfor (var i = 0; i < bufferLengthAlt; i++) {\r\n\t\t\t\t\tbarHeight = dataArrayAlt[i];\r\n\r\n\t\t\t\t\tcanvasCtx.fillStyle = \"rgb(\" + (barHeight + 100) + \",50,50)\";\r\n\t\t\t\t\tcanvasCtx.fillRect(\r\n\t\t\t\t\t\tx,\r\n\t\t\t\t\t\tHEIGHT - barHeight / 2,\r\n\t\t\t\t\t\tbarWidth,\r\n\t\t\t\t\t\tbarHeight / 2\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tx += barWidth + 1;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tdrawAlt();\r\n\t\t} else if (visualSetting == \"circle\") {\r\n\t\t\tanalyser.fftSize = 32;\r\n\t\t\tlet bufferLength = analyser.frequencyBinCount;\r\n\t\t\tconsole.log(bufferLength);\r\n\t\t\tlet dataArray = new Uint8Array(bufferLength);\r\n\r\n\t\t\tcanvasCtx.clearRect(0, 0, WIDTH, HEIGHT);\r\n\r\n\t\t\tlet draw = () => {\r\n\t\t\t\tdrawVisual = requestAnimationFrame(draw);\r\n\r\n\t\t\t\tanalyser.getByteFrequencyData(dataArray);\r\n\t\t\t\tcanvasCtx.fillStyle = \"rgb(0, 0, 0)\";\r\n\t\t\t\tcanvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\r\n\r\n\t\t\t\t// let radius = dataArray.reduce((a,b) => a + b) / bufferLength;\r\n\t\t\t\tlet radius = dataArray[2] / 2;\r\n\t\t\t\tif (radius < 20) radius = 20;\r\n\t\t\t\tif (radius > 100) radius = 100;\r\n\t\t\t\t// console.log('Radius ', radius)\r\n\t\t\t\tcanvasCtx.beginPath();\r\n\t\t\t\tcanvasCtx.arc(CENTERX, CENTERY, radius, 0, 2 * Math.PI, false);\r\n\t\t\t\t// canvasCtx.fillStyle = 'rgb(50,50,' + (radius+100) +')';\r\n\t\t\t\t// canvasCtx.fill();\r\n\t\t\t\tcanvasCtx.lineWidth = 6;\r\n\t\t\t\tcanvasCtx.strokeStyle = \"rgb(50,50,\" + (radius + 100) + \")\";\r\n\t\t\t\tcanvasCtx.stroke();\r\n\t\t\t};\r\n\t\t\tdraw();\r\n\t\t}\r\n\t}\r\n\r\n\tvisualSelect.onchange = function () {\r\n\t\twindow.cancelAnimationFrame(drawVisual);\r\n\t\tvisualize();\r\n\t};\r\n\r\n\tmicSelect.onchange = async (e) => {\r\n\t\tconsole.log(\"now use device \", micSelect.value);\r\n\t\tstream.getTracks().forEach(function (track) {\r\n\t\t\ttrack.stop();\r\n\t\t});\r\n\t\tcontext.close();\r\n\r\n\t\tstream = await getStream({\r\n\t\t\taudio: {\r\n\t\t\t\tdeviceId: {exact: micSelect.value},\r\n\t\t\t},\r\n\t\t\tvideo: false,\r\n\t\t});\r\n\t\tsetUpRecording();\r\n\t};\r\n\r\n\tfunction pause() {\r\n\t\trecording = false;\r\n\t\tcontext.suspend();\r\n\t}\r\n\r\n\tfunction resume() {\r\n\t\trecording = true;\r\n\t\tcontext.resume();\r\n\t}\r\n\r\n\tdocument.querySelector(\"#record\").onclick = (e) => {\r\n\t\tconsole.log(\"Start recording\");\r\n\t\tstart();\r\n\t};\r\n\r\n\tdocument.querySelector(\"#stop\").onclick = (e) => {\r\n\t\tstop();\r\n\t};\r\n})();\r\n</script>\r\n"],"mappings":";;;;;AAsBA,CAAC,YAAY;EACZ,IAAIA,WAAU,GAAI,EAAE;EACpB,IAAIC,YAAW,GAAI,EAAE;EACrB,IAAIC,QAAO,GAAI,IAAI;EACnB,IAAIC,SAAQ,GAAI,KAAK;EACrB,IAAIC,eAAc,GAAI,CAAC;EACvB,IAAIC,MAAK,GAAI,IAAI;EACjB,IAAIC,UAAS,GAAI,IAAI;EACrB,IAAIC,UAAS,GAAI,IAAI;EACrB,IAAIC,YAAW,GAAIC,MAAM,CAACD,YAAW,IAAKC,MAAM,CAACC,kBAAkB;EACnE,IAAIC,OAAM,GAAI,IAAI;EAClB,IAAIC,QAAO,GAAI,IAAI;EACnB,IAAIC,MAAK,GAAIC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EAC7C,IAAIC,SAAQ,GAAIH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;EACvC,IAAIC,YAAW,GAAIJ,QAAQ,CAACC,aAAa,CAAC,YAAY,CAAC;EACvD,IAAII,SAAQ,GAAIL,QAAQ,CAACC,aAAa,CAAC,YAAY,CAAC;EACpD,IAAIK,MAAK,GAAI,IAAI;EACjB,IAAIC,MAAK,GAAI,KAAK;EAElB,IAAI;IACHZ,MAAM,CAACW,MAAK,GAAIA,MAAK,GAAI,MAAME,SAAS,CAAC,CAAC;IAC1CC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;EAC1B,EAAE,OAAOC,GAAG,EAAE;IACbC,KAAK,CAAC,mBAAmB,EAAED,GAAG,CAAC;EAChC;EAEA,MAAME,WAAU,GAAI,MAAMC,SAAS,CAACC,YAAY,CAACC,gBAAgB,CAAC,CAAC;EAEnE,IAAIC,IAAG,GAAI,EAAE;EACb,KAAK,IAAIC,CAAA,GAAI,CAAC,EAAEA,CAAA,KAAML,WAAW,CAACM,MAAM,EAAE,EAAED,CAAC,EAAE;IAC9C,IAAIE,UAAS,GAAIP,WAAW,CAACK,CAAC,CAAC;IAC/B,IAAIE,UAAU,CAACC,IAAG,KAAM,YAAY,EAAE;MACrCJ,IAAI,CAACK,IAAI,CAACF,UAAU,CAAC;MACrB,IAAIG,KAAI,GAAIH,UAAU,CAACG,KAAI,IAAK,aAAY,GAAIN,IAAI,CAACE,MAAM;MAC3DV,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEa,KAAI,GAAI,GAAE,GAAIH,UAAU,CAACI,QAAQ,CAAC;MACtD,MAAMC,MAAK,GAAIzB,QAAQ,CAAC0B,aAAa,CAAC,QAAQ,CAAC;MAC/CD,MAAM,CAACE,KAAI,GAAIP,UAAU,CAACI,QAAQ;MAClCC,MAAM,CAACG,IAAG,GAAIL,KAAK;MACnBlB,SAAS,CAACwB,WAAW,CAACJ,MAAM,CAAC;IAC9B;EACD;EAEA,SAASjB,SAASA,CAACsB,WAAW,EAAE;IAC/B,IAAI,CAACA,WAAW,EAAE;MACjBA,WAAU,GAAI;QAACC,KAAK,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC;IAC1C;IACA,OAAOlB,SAAS,CAACC,YAAY,CAACkB,YAAY,CAACH,WAAW,CAAC;EACxD;EAEAI,cAAc,CAAC,CAAC;EAEhB,SAASA,cAAcA,CAAA,EAAG;IACzBrC,OAAM,GAAI,IAAIH,YAAY,CAAC,CAAC;IAC5BD,UAAS,GAAII,OAAO,CAACJ,UAAU;;IAE/B;IACAF,MAAK,GAAIM,OAAO,CAACsC,UAAU,CAAC,CAAC;;IAE7B;IACA3C,UAAS,GAAIK,OAAO,CAACuC,uBAAuB,CAAC9B,MAAM,CAAC;;IAEpD;IACAR,QAAO,GAAID,OAAO,CAACwC,cAAc,CAAC,CAAC;;IAEnC;IACA7C,UAAU,CAAC8C,OAAO,CAACxC,QAAQ,CAAC;;IAE5B;IACA;;IAEA,IAAIyC,UAAS,GAAI,IAAI;IACrB,IAAInD,QAAO,GAAIS,OAAO,CAAC2C,qBAAqB,CAACD,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;;IAE9D;IACA;;IAEAzC,QAAQ,CAACwC,OAAO,CAAClD,QAAQ,CAAC;;IAE1B;IACAA,QAAQ,CAACkD,OAAO,CAACzC,OAAO,CAAC4C,WAAW,CAAC;IAErCrD,QAAQ,CAACsD,cAAa,GAAI,UAAUC,CAAC,EAAE;MACtC;MACA,IAAI,CAACtD,SAAS,EAAE;MAChB;MACAoB,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MACxB,IAAIkC,IAAG,GAAID,CAAC,CAACE,WAAW,CAACC,cAAc,CAAC,CAAC,CAAC;MAC1C,IAAIC,KAAI,GAAIJ,CAAC,CAACE,WAAW,CAACC,cAAc,CAAC,CAAC,CAAC;MAC3C,IAAI,CAACvC,MAAM,EAAE;QACZA,MAAK,GAAI,IAAI;QACb;QACA,IAAI,CAACqC,IAAI,CAACI,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAA,GAAIC,CAAC,CAAC,EAAE;UAClCtC,KAAK,CAAC,0CAA0C,CAAC;UACjD;UACAuC,IAAI,CAAC,CAAC;UACN7C,MAAM,CAAC8C,SAAS,CAAC,CAAC,CAACC,OAAO,CAAC,UAAUC,KAAK,EAAE;YAC3CA,KAAK,CAACH,IAAI,CAAC,CAAC;UACb,CAAC,CAAC;UACFtD,OAAO,CAAC0D,KAAK,CAAC,CAAC;QAChB;MACD;MACA;MACArE,WAAW,CAACoC,IAAI,CAAC,IAAIkC,YAAY,CAACZ,IAAI,CAAC,CAAC;MACxCzD,YAAY,CAACmC,IAAI,CAAC,IAAIkC,YAAY,CAACT,KAAK,CAAC,CAAC;MAC1CzD,eAAc,IAAKiD,UAAU;IAC9B,CAAC;IACDkB,SAAS,CAAC,CAAC;EACZ;EAEA,SAASC,YAAYA,CAACC,aAAa,EAAErE,eAAe,EAAE;IACrD,IAAIsE,MAAK,GAAI,IAAIJ,YAAY,CAAClE,eAAe,CAAC;IAC9C,IAAIuE,MAAK,GAAI,CAAC;IACd,IAAIC,GAAE,GAAIH,aAAa,CAACxC,MAAM;IAC9B,KAAK,IAAID,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI4C,GAAG,EAAE5C,CAAC,EAAE,EAAE;MAC7B,IAAI6C,MAAK,GAAIJ,aAAa,CAACzC,CAAC,CAAC;MAC7B0C,MAAM,CAACI,GAAG,CAACD,MAAM,EAAEF,MAAM,CAAC;MAC1BA,MAAK,IAAKE,MAAM,CAAC5C,MAAM;IACxB;IACA,OAAOyC,MAAM;EACd;EAEA,SAASK,UAAUA,CAACC,WAAW,EAAEC,YAAY,EAAE;IAC9C,IAAIhD,MAAK,GAAI+C,WAAW,CAAC/C,MAAK,GAAIgD,YAAY,CAAChD,MAAM;IACrD,IAAIyC,MAAK,GAAI,IAAIJ,YAAY,CAACrC,MAAM,CAAC;IAErC,IAAIiD,UAAS,GAAI,CAAC;IAElB,KAAK,IAAIC,KAAI,GAAI,CAAC,EAAEA,KAAI,GAAIlD,MAAM,GAAI;MACrCyC,MAAM,CAACS,KAAK,EAAE,IAAIH,WAAW,CAACE,UAAU,CAAC;MACzCR,MAAM,CAACS,KAAK,EAAE,IAAIF,YAAY,CAACC,UAAU,CAAC;MAC1CA,UAAU,EAAE;IACb;IACA,OAAOR,MAAM;EACd;EAEA,SAASU,aAAaA,CAACC,IAAI,EAAEV,MAAM,EAAEW,MAAM,EAAE;IAC5C,IAAIV,GAAE,GAAIU,MAAM,CAACrD,MAAM;IACvB,KAAK,IAAID,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI4C,GAAG,EAAE5C,CAAC,EAAE,EAAE;MAC7BqD,IAAI,CAACE,QAAQ,CAACZ,MAAK,GAAI3C,CAAC,EAAEsD,MAAM,CAACE,UAAU,CAACxD,CAAC,CAAC,CAAC;IAChD;EACD;EAEA,SAASyD,KAAKA,CAAA,EAAG;IAChBtF,SAAQ,GAAI,IAAI;IAChBW,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC,CAAC2E,KAAK,CAACC,UAAS,GAAI,SAAS;IAC3D;IACA3F,WAAW,CAACiC,MAAK,GAAIhC,YAAY,CAACgC,MAAK,GAAI,CAAC;IAC5C7B,eAAc,GAAI,CAAC;IACnBmB,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE,CAAC,CAACb,OAAO,CAAC;IACnC,IAAI,CAACA,OAAO,EAAEqC,cAAc,CAAC,CAAC;EAC/B;EAEA,SAASiB,IAAIA,CAAA,EAAG;IACf1C,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnBrB,SAAQ,GAAI,KAAK;IACjBW,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC,CAAC2E,KAAK,CAACC,UAAS,GAAI,QAAQ;;IAE1D;IACA,IAAIC,UAAS,GAAIpB,YAAY,CAACxE,WAAW,EAAEI,eAAe,CAAC;IAC3D,IAAIyF,WAAU,GAAIrB,YAAY,CAACvE,YAAY,EAAEG,eAAe,CAAC;IAC7D;IACA,IAAI0F,WAAU,GAAIf,UAAU,CAACa,UAAU,EAAEC,WAAW,CAAC;;IAErD;IACA;IACA;;IAEA;IACA,IAAIhB,MAAK,GAAI,IAAIkB,WAAW,CAAC,EAAC,GAAID,WAAW,CAAC7D,MAAK,GAAI,CAAC,CAAC;IACzD,IAAIoD,IAAG,GAAI,IAAIW,QAAQ,CAACnB,MAAM,CAAC;;IAE/B;IACAO,aAAa,CAACC,IAAI,EAAE,CAAC,EAAE,MAAM,CAAC;IAC9BA,IAAI,CAACY,SAAS,CAAC,CAAC,EAAE,EAAC,GAAIH,WAAW,CAAC7D,MAAK,GAAI,CAAC,EAAE,IAAI,CAAC;IACpDmD,aAAa,CAACC,IAAI,EAAE,CAAC,EAAE,MAAM,CAAC;IAC9B;IACAD,aAAa,CAACC,IAAI,EAAE,EAAE,EAAE,MAAM,CAAC;IAC/BA,IAAI,CAACY,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC;IAC5BZ,IAAI,CAACa,SAAS,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC;IAC3B;IACAb,IAAI,CAACa,SAAS,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC;IAC3Bb,IAAI,CAACY,SAAS,CAAC,EAAE,EAAE1F,UAAU,EAAE,IAAI,CAAC;IACpC8E,IAAI,CAACY,SAAS,CAAC,EAAE,EAAE1F,UAAS,GAAI,CAAC,EAAE,IAAI,CAAC;IACxC8E,IAAI,CAACa,SAAS,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC;IAC3Bb,IAAI,CAACa,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC;IAC5B;IACAd,aAAa,CAACC,IAAI,EAAE,EAAE,EAAE,MAAM,CAAC;IAC/BA,IAAI,CAACY,SAAS,CAAC,EAAE,EAAEH,WAAW,CAAC7D,MAAK,GAAI,CAAC,EAAE,IAAI,CAAC;;IAEhD;IACA,IAAI2C,GAAE,GAAIkB,WAAW,CAAC7D,MAAM;IAC5B,IAAIkD,KAAI,GAAI,EAAE;IACd,IAAI9E,MAAK,GAAI,CAAC;IACd,KAAK,IAAI2B,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI4C,GAAG,EAAE5C,CAAC,EAAE,EAAE;MAC7BqD,IAAI,CAACc,QAAQ,CAAChB,KAAK,EAAEW,WAAW,CAAC9D,CAAC,KAAK,MAAK,GAAI3B,MAAM,CAAC,EAAE,IAAI,CAAC;MAC9D8E,KAAI,IAAK,CAAC;IACX;;IAEA;IACA,MAAMiB,IAAG,GAAI,IAAIC,IAAI,CAAC,CAAChB,IAAI,CAAC,EAAE;MAACiB,IAAI,EAAE;IAAW,CAAC,CAAC;IAElD,MAAMC,QAAO,GAAIC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;IAC1C7E,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE4E,IAAI,CAAC;IAC1B7E,OAAO,CAACC,GAAG,CAAC,MAAM,EAAE+E,QAAQ,CAAC;IAC7BzF,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC,CAAC2F,YAAY,CAAC,KAAK,EAAEH,QAAQ,CAAC;IAC9D,MAAMI,IAAG,GAAI7F,QAAQ,CAACC,aAAa,CAAC,WAAW,CAAC;IAChD4F,IAAI,CAACD,YAAY,CAAC,MAAM,EAAEH,QAAQ,CAAC;IACnCI,IAAI,CAACC,QAAO,GAAI,YAAY;EAC7B;;EAEA;EACA;EACA;EACA,SAASrC,SAASA,CAAA,EAAG;IACpBsC,KAAI,GAAIhG,MAAM,CAACiG,KAAK;IACpBC,MAAK,GAAIlG,MAAM,CAACmG,MAAM;IACtBC,OAAM,GAAIpG,MAAM,CAACiG,KAAI,GAAI,CAAC;IAC1BI,OAAM,GAAIrG,MAAM,CAACmG,MAAK,GAAI,CAAC;IAE3B,IAAIG,aAAY,GAAIjG,YAAY,CAACuB,KAAK;IACtClB,OAAO,CAACC,GAAG,CAAC2F,aAAa,CAAC;IAC1B,IAAI,CAACvG,QAAQ,EAAE;IAEf,IAAIuG,aAAY,KAAM,UAAU,EAAE;MACjCvG,QAAQ,CAACwG,OAAM,GAAI,IAAI;MACvB,IAAIC,YAAW,GAAIzG,QAAQ,CAACwG,OAAO;MACnC7F,OAAO,CAACC,GAAG,CAAC6F,YAAY,CAAC;MACzB,IAAIC,SAAQ,GAAI,IAAIC,UAAU,CAACF,YAAY,CAAC;MAE5CrG,SAAS,CAACwG,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEX,KAAK,EAAEE,MAAM,CAAC;MAExC,IAAIU,IAAG,GAAI,SAAAA,CAAA,EAAY;QACtBC,UAAS,GAAIC,qBAAqB,CAACF,IAAI,CAAC;QAExC7G,QAAQ,CAACgH,qBAAqB,CAACN,SAAS,CAAC;QAEzCtG,SAAS,CAAC6G,SAAQ,GAAI,oBAAoB;QAC1C7G,SAAS,CAAC8G,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEjB,KAAK,EAAEE,MAAM,CAAC;QAEvC/F,SAAS,CAAC+G,SAAQ,GAAI,CAAC;QACvB/G,SAAS,CAACgH,WAAU,GAAI,cAAc;QAEtChH,SAAS,CAACiH,SAAS,CAAC,CAAC;QAErB,IAAIC,UAAS,GAAKrB,KAAI,GAAI,GAAG,GAAIQ,YAAY;QAC7C,IAAIc,CAAA,GAAI,CAAC;QAET,KAAK,IAAInG,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIqF,YAAY,EAAErF,CAAC,EAAE,EAAE;UACtC,IAAIoG,CAAA,GAAId,SAAS,CAACtF,CAAC,IAAI,KAAK;UAC5B,IAAIqG,CAAA,GAAKD,CAAA,GAAIrB,MAAM,GAAI,CAAC;UAExB,IAAI/E,CAAA,KAAM,CAAC,EAAE;YACZhB,SAAS,CAACsH,MAAM,CAACH,CAAC,EAAEE,CAAC,CAAC;UACvB,OAAO;YACNrH,SAAS,CAACuH,MAAM,CAACJ,CAAC,EAAEE,CAAC,CAAC;UACvB;UAEAF,CAAA,IAAKD,UAAU;QAChB;QAEAlH,SAAS,CAACuH,MAAM,CAAC1H,MAAM,CAACiG,KAAK,EAAEjG,MAAM,CAACmG,MAAK,GAAI,CAAC,CAAC;QACjDhG,SAAS,CAACwH,MAAM,CAAC,CAAC;MACnB,CAAC;MAEDf,IAAI,CAAC,CAAC;IACP,OAAO,IAAIN,aAAY,IAAK,eAAe,EAAE;MAC5CvG,QAAQ,CAACwG,OAAM,GAAI,EAAE;MACrB,IAAIqB,eAAc,GAAI7H,QAAQ,CAAC8H,iBAAiB;MAChDnH,OAAO,CAACC,GAAG,CAACiH,eAAe,CAAC;MAC5B,IAAIE,YAAW,GAAI,IAAIpB,UAAU,CAACkB,eAAe,CAAC;MAElDzH,SAAS,CAACwG,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEX,KAAK,EAAEE,MAAM,CAAC;MAExC,IAAI6B,OAAM,GAAI,SAAAA,CAAA,EAAY;QACzBlB,UAAS,GAAIC,qBAAqB,CAACiB,OAAO,CAAC;QAE3ChI,QAAQ,CAACiI,oBAAoB,CAACF,YAAY,CAAC;QAE3C3H,SAAS,CAAC6G,SAAQ,GAAI,cAAc;QACpC7G,SAAS,CAAC8G,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEjB,KAAK,EAAEE,MAAM,CAAC;QAEvC,IAAI+B,QAAO,GAAIjC,KAAI,GAAI4B,eAAe;QACtC,IAAIM,SAAS;QACb,IAAIZ,CAAA,GAAI,CAAC;QAET,KAAK,IAAInG,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIyG,eAAe,EAAEzG,CAAC,EAAE,EAAE;UACzC+G,SAAQ,GAAIJ,YAAY,CAAC3G,CAAC,CAAC;UAE3BhB,SAAS,CAAC6G,SAAQ,GAAI,MAAK,IAAKkB,SAAQ,GAAI,GAAG,IAAI,SAAS;UAC5D/H,SAAS,CAAC8G,QAAQ,CACjBK,CAAC,EACDpB,MAAK,GAAIgC,SAAQ,GAAI,CAAC,EACtBD,QAAQ,EACRC,SAAQ,GAAI,CACb,CAAC;UAEDZ,CAAA,IAAKW,QAAO,GAAI,CAAC;QAClB;MACD,CAAC;MAEDF,OAAO,CAAC,CAAC;IACV,OAAO,IAAIzB,aAAY,IAAK,QAAQ,EAAE;MACrCvG,QAAQ,CAACwG,OAAM,GAAI,EAAE;MACrB,IAAIC,YAAW,GAAIzG,QAAQ,CAAC8H,iBAAiB;MAC7CnH,OAAO,CAACC,GAAG,CAAC6F,YAAY,CAAC;MACzB,IAAIC,SAAQ,GAAI,IAAIC,UAAU,CAACF,YAAY,CAAC;MAE5CrG,SAAS,CAACwG,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEX,KAAK,EAAEE,MAAM,CAAC;MAExC,IAAIU,IAAG,GAAIA,CAAA,KAAM;QAChBC,UAAS,GAAIC,qBAAqB,CAACF,IAAI,CAAC;QAExC7G,QAAQ,CAACiI,oBAAoB,CAACvB,SAAS,CAAC;QACxCtG,SAAS,CAAC6G,SAAQ,GAAI,cAAc;QACpC7G,SAAS,CAAC8G,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEjB,KAAK,EAAEE,MAAM,CAAC;;QAEvC;QACA,IAAIiC,MAAK,GAAI1B,SAAS,CAAC,CAAC,IAAI,CAAC;QAC7B,IAAI0B,MAAK,GAAI,EAAE,EAAEA,MAAK,GAAI,EAAE;QAC5B,IAAIA,MAAK,GAAI,GAAG,EAAEA,MAAK,GAAI,GAAG;QAC9B;QACAhI,SAAS,CAACiH,SAAS,CAAC,CAAC;QACrBjH,SAAS,CAACiI,GAAG,CAAChC,OAAO,EAAEC,OAAO,EAAE8B,MAAM,EAAE,CAAC,EAAE,IAAIE,IAAI,CAACC,EAAE,EAAE,KAAK,CAAC;QAC9D;QACA;QACAnI,SAAS,CAAC+G,SAAQ,GAAI,CAAC;QACvB/G,SAAS,CAACgH,WAAU,GAAI,YAAW,IAAKgB,MAAK,GAAI,GAAG,IAAI,GAAG;QAC3DhI,SAAS,CAACwH,MAAM,CAAC,CAAC;MACnB,CAAC;MACDf,IAAI,CAAC,CAAC;IACP;EACD;EAEAvG,YAAY,CAACkI,QAAO,GAAI,YAAY;IACnC3I,MAAM,CAAC4I,oBAAoB,CAAC3B,UAAU,CAAC;IACvCnD,SAAS,CAAC,CAAC;EACZ,CAAC;EAEDpD,SAAS,CAACiI,QAAO,GAAI,MAAO3F,CAAC,IAAK;IACjClC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEL,SAAS,CAACsB,KAAK,CAAC;IAC/CrB,MAAM,CAAC8C,SAAS,CAAC,CAAC,CAACC,OAAO,CAAC,UAAUC,KAAK,EAAE;MAC3CA,KAAK,CAACH,IAAI,CAAC,CAAC;IACb,CAAC,CAAC;IACFtD,OAAO,CAAC0D,KAAK,CAAC,CAAC;IAEfjD,MAAK,GAAI,MAAME,SAAS,CAAC;MACxBuB,KAAK,EAAE;QACNP,QAAQ,EAAE;UAACgH,KAAK,EAAEnI,SAAS,CAACsB;QAAK;MAClC,CAAC;MACDK,KAAK,EAAE;IACR,CAAC,CAAC;IACFE,cAAc,CAAC,CAAC;EACjB,CAAC;EAED,SAASuG,KAAKA,CAAA,EAAG;IAChBpJ,SAAQ,GAAI,KAAK;IACjBQ,OAAO,CAAC6I,OAAO,CAAC,CAAC;EAClB;EAEA,SAASC,MAAMA,CAAA,EAAG;IACjBtJ,SAAQ,GAAI,IAAI;IAChBQ,OAAO,CAAC8I,MAAM,CAAC,CAAC;EACjB;EAEA3I,QAAQ,CAACC,aAAa,CAAC,SAAS,CAAC,CAAC2I,OAAM,GAAKjG,CAAC,IAAK;IAClDlC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9BiE,KAAK,CAAC,CAAC;EACR,CAAC;EAED3E,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC,CAAC2I,OAAM,GAAKjG,CAAC,IAAK;IAChDQ,IAAI,CAAC,CAAC;EACP,CAAC;AACF,CAAC,EAAE,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}