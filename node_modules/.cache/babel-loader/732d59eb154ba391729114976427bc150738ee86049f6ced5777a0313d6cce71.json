{"ast":null,"code":"require(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/web.dom-exception.stack.js\");\nrequire(\"core-js/modules/es.regexp.flags.js\");\nrequire(\"core-js/modules/web.url-search-params.size.js\");\n!function (e, t) {\n  \"object\" == typeof exports && \"object\" == typeof module ? module.exports = t() : \"function\" == typeof define && define.amd ? define(\"VueAudioRecorder\", [], t) : \"object\" == typeof exports ? exports.VueAudioRecorder = t() : e.VueAudioRecorder = t();\n}(window, function () {\n  return function (n) {\n    var a = {};\n    function r(e) {\n      if (a[e]) return a[e].exports;\n      var t = a[e] = {\n        i: e,\n        l: !1,\n        exports: {}\n      };\n      return n[e].call(t.exports, t, t.exports, r), t.l = !0, t.exports;\n    }\n    return r.m = n, r.c = a, r.d = function (e, t, n) {\n      r.o(e, t) || Object.defineProperty(e, t, {\n        enumerable: !0,\n        get: n\n      });\n    }, r.r = function (e) {\n      \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n        value: \"Module\"\n      }), Object.defineProperty(e, \"__esModule\", {\n        value: !0\n      });\n    }, r.t = function (t, e) {\n      if (1 & e && (t = r(t)), 8 & e) return t;\n      if (4 & e && \"object\" == typeof t && t && t.__esModule) return t;\n      var n = Object.create(null);\n      if (r.r(n), Object.defineProperty(n, \"default\", {\n        enumerable: !0,\n        value: t\n      }), 2 & e && \"string\" != typeof t) for (var a in t) r.d(n, a, function (e) {\n        return t[e];\n      }.bind(null, a));\n      return n;\n    }, r.n = function (e) {\n      var t = e && e.__esModule ? function () {\n        return e.default;\n      } : function () {\n        return e;\n      };\n      return r.d(t, \"a\", t), t;\n    }, r.o = function (e, t) {\n      return Object.prototype.hasOwnProperty.call(e, t);\n    }, r.p = \"\", r(r.s = 49);\n  }([function (e, t) {\n    function s(e) {\n      return new Int16Array(e);\n    }\n    function i(e) {\n      return new Int32Array(e);\n    }\n    function o(e) {\n      return new Float32Array(e);\n    }\n    var n = {\n        fill: function (e, t, n, a) {\n          if (2 == arguments.length) for (var r = 0; r < e.length; r++) e[r] = t;else for (r = t; r < n; r++) e[r] = a;\n        }\n      },\n      a = {\n        arraycopy: function (e, t, n, a, r) {\n          for (var s = t + r; t < s;) n[a++] = e[t++];\n        }\n      },\n      r = {};\n    function _(e) {\n      this.ordinal = e;\n    }\n    r.SQRT2 = 1.4142135623730951, r.FAST_LOG10 = function (e) {\n      return Math.log10(e);\n    }, r.FAST_LOG10_X = function (e, t) {\n      return Math.log10(e) * t;\n    }, _.short_block_allowed = new _(0), _.short_block_coupled = new _(1), _.short_block_dispensed = new _(2), _.short_block_forced = new _(3);\n    var l = {};\n    function f(e) {\n      this.ordinal = e;\n    }\n    l.MAX_VALUE = 34028235e31, f.vbr_off = new f(0), f.vbr_mt = new f(1), f.vbr_rh = new f(2), f.vbr_abr = new f(3), f.vbr_mtrh = new f(4), f.vbr_default = f.vbr_mtrh;\n    e.exports = {\n      System: a,\n      VbrMode: f,\n      Float: l,\n      ShortBlock: _,\n      Util: r,\n      Arrays: n,\n      new_array_n: function e(t) {\n        if (1 == t.length) return new Array(t[0]);\n        var n = t[0];\n        t = t.slice(1);\n        for (var a = [], r = 0; r < n; r++) a.push(e(t));\n        return a;\n      },\n      new_byte: function (e) {\n        return new Int8Array(e);\n      },\n      new_double: function (e) {\n        return new Float64Array(e);\n      },\n      new_float: o,\n      new_float_n: function e(t) {\n        if (1 == t.length) return o(t[0]);\n        var n = t[0];\n        t = t.slice(1);\n        for (var a = [], r = 0; r < n; r++) a.push(e(t));\n        return a;\n      },\n      new_int: i,\n      new_int_n: function e(t) {\n        if (1 == t.length) return i(t[0]);\n        var n = t[0];\n        t = t.slice(1);\n        for (var a = [], r = 0; r < n; r++) a.push(e(t));\n        return a;\n      },\n      new_short: s,\n      new_short_n: function e(t) {\n        if (1 == t.length) return s(t[0]);\n        var n = t[0];\n        t = t.slice(1);\n        for (var a = [], r = 0; r < n; r++) a.push(e(t));\n        return a;\n      },\n      assert: function (e) {}\n    };\n  }, function (e, t, n) {\n    var a = n(0),\n      F = a.System,\n      C = a.VbrMode,\n      D = (a.Float, a.ShortBlock, a.Util, a.Arrays, a.new_array_n),\n      X = (a.new_byte, a.new_double, a.new_float),\n      q = a.new_float_n,\n      Y = a.new_int,\n      j = (a.new_int_n, a.assert);\n    function U() {\n      var e = n(30),\n        k = n(31),\n        P = U.FFTOFFSET,\n        L = U.MPG_MD_MS_LR,\n        I = null,\n        V = this.psy = null,\n        H = null,\n        O = null;\n      this.setModules = function (e, t, n, a) {\n        I = e, this.psy = t, V = t, H = a, O = n;\n      };\n      var N = new e();\n      this.lame_encode_mp3_frame = function (e, t, n, a, r, s) {\n        var i,\n          o = D([2, 2]);\n        o[0][0] = new k(), o[0][1] = new k(), o[1][0] = new k(), o[1][1] = new k();\n        var _,\n          l = D([2, 2]);\n        l[0][0] = new k(), l[0][1] = new k(), l[1][0] = new k(), l[1][1] = new k();\n        var f,\n          c,\n          u,\n          h = [null, null],\n          p = e.internal_flags,\n          d = q([2, 4]),\n          b = [.5, .5],\n          m = [[0, 0], [0, 0]],\n          v = [[0, 0], [0, 0]];\n        if (h[0] = t, h[1] = n, 0 == p.lame_encode_frame_init && function (e, t) {\n          var n,\n            a,\n            r = e.internal_flags;\n          if (0 == r.lame_encode_frame_init) {\n            var s,\n              i,\n              o = X(2014),\n              _ = X(2014);\n            for (r.lame_encode_frame_init = 1, i = s = 0; s < 286 + 576 * (1 + r.mode_gr); ++s) s < 576 * r.mode_gr ? (o[s] = 0, 2 == r.channels_out && (_[s] = 0)) : (o[s] = t[0][i], 2 == r.channels_out && (_[s] = t[1][i]), ++i);\n            for (a = 0; a < r.mode_gr; a++) for (n = 0; n < r.channels_out; n++) r.l3_side.tt[a][n].block_type = U.SHORT_TYPE;\n            N.mdct_sub48(r, o, _), j(U.FFTOFFSET <= 576), j(r.mf_size >= U.BLKSIZE + e.framesize - U.FFTOFFSET), j(r.mf_size >= 512 + e.framesize - 32);\n          }\n        }(e, h), p.padding = 0, (p.slot_lag -= p.frac_SpF) < 0 && (p.slot_lag += e.out_samplerate, p.padding = 1), 0 != p.psymodel) {\n          var g = [null, null],\n            w = 0,\n            S = Y(2);\n          for (u = 0; u < p.mode_gr; u++) {\n            for (c = 0; c < p.channels_out; c++) g[c] = h[c], w = 576 + 576 * u - U.FFTOFFSET;\n            if (0 != (e.VBR == C.vbr_mtrh || e.VBR == C.vbr_mt ? V.L3psycho_anal_vbr(e, g, w, u, o, l, m[u], v[u], d[u], S) : V.L3psycho_anal_ns(e, g, w, u, o, l, m[u], v[u], d[u], S))) return -4;\n            for (e.mode == MPEGMode.JOINT_STEREO && (b[u] = d[u][2] + d[u][3], 0 < b[u] && (b[u] = d[u][3] / b[u])), c = 0; c < p.channels_out; c++) {\n              var y = p.l3_side.tt[u][c];\n              y.block_type = S[c], y.mixed_block_flag = 0;\n            }\n          }\n        } else for (u = 0; u < p.mode_gr; u++) for (c = 0; c < p.channels_out; c++) p.l3_side.tt[u][c].block_type = U.NORM_TYPE, p.l3_side.tt[u][c].mixed_block_flag = 0, v[u][c] = m[u][c] = 700;\n        if (function (e) {\n          var t, n;\n          if (0 != e.ATH.useAdjust) {\n            if (n = e.loudness_sq[0][0], t = e.loudness_sq[1][0], 2 == e.channels_out ? (n += e.loudness_sq[0][1], t += e.loudness_sq[1][1]) : (n += n, t += t), 2 == e.mode_gr && (n = Math.max(n, t)), n *= .5, .03125 < (n *= e.ATH.aaSensitivityP)) 1 <= e.ATH.adjust ? e.ATH.adjust = 1 : e.ATH.adjust < e.ATH.adjustLimit && (e.ATH.adjust = e.ATH.adjustLimit), e.ATH.adjustLimit = 1;else {\n              var a = 31.98 * n + 625e-6;\n              e.ATH.adjust >= a ? (e.ATH.adjust *= .075 * a + .925, e.ATH.adjust < a && (e.ATH.adjust = a)) : e.ATH.adjustLimit >= a ? e.ATH.adjust = a : e.ATH.adjust < e.ATH.adjustLimit && (e.ATH.adjust = e.ATH.adjustLimit), e.ATH.adjustLimit = a;\n            }\n          } else e.ATH.adjust = 1;\n        }(p), N.mdct_sub48(p, h[0], h[1]), p.mode_ext = U.MPG_MD_LR_LR, e.force_ms) p.mode_ext = U.MPG_MD_MS_LR;else if (e.mode == MPEGMode.JOINT_STEREO) {\n          var M = 0,\n            x = 0;\n          for (u = 0; u < p.mode_gr; u++) for (c = 0; c < p.channels_out; c++) M += v[u][c], x += m[u][c];\n          if (M <= 1 * x) {\n            var R = p.l3_side.tt[0],\n              A = p.l3_side.tt[p.mode_gr - 1];\n            R[0].block_type == R[1].block_type && A[0].block_type == A[1].block_type && (p.mode_ext = U.MPG_MD_MS_LR);\n          }\n        }\n        if (f = p.mode_ext == L ? (_ = l, v) : (_ = o, m), e.analysis && null != p.pinfo) for (u = 0; u < p.mode_gr; u++) for (c = 0; c < p.channels_out; c++) p.pinfo.ms_ratio[u] = p.ms_ratio[u], p.pinfo.ms_ener_ratio[u] = b[u], p.pinfo.blocktype[u][c] = p.l3_side.tt[u][c].block_type, p.pinfo.pe[u][c] = f[u][c], F.arraycopy(p.l3_side.tt[u][c].xr, 0, p.pinfo.xr[u][c], 0, 576), p.mode_ext == L && (p.pinfo.ers[u][c] = p.pinfo.ers[u][c + 2], F.arraycopy(p.pinfo.energy[u][c + 2], 0, p.pinfo.energy[u][c], 0, p.pinfo.energy[u][c].length));\n        if (e.VBR == C.vbr_off || e.VBR == C.vbr_abr) {\n          var B, E;\n          for (B = 0; B < 18; B++) p.nsPsy.pefirbuf[B] = p.nsPsy.pefirbuf[B + 1];\n          for (u = E = 0; u < p.mode_gr; u++) for (c = 0; c < p.channels_out; c++) E += f[u][c];\n          for (p.nsPsy.pefirbuf[18] = E, E = p.nsPsy.pefirbuf[9], B = 0; B < 9; B++) E += (p.nsPsy.pefirbuf[B] + p.nsPsy.pefirbuf[18 - B]) * U.fircoef[B];\n          for (E = 3350 * p.mode_gr * p.channels_out / E, u = 0; u < p.mode_gr; u++) for (c = 0; c < p.channels_out; c++) f[u][c] *= E;\n        }\n        if (p.iteration_loop.iteration_loop(e, f, b, _), I.format_bitstream(e), i = I.copy_buffer(p, a, r, s, 1), e.bWriteVbrTag && H.addVbrFrame(e), e.analysis && null != p.pinfo) {\n          for (c = 0; c < p.channels_out; c++) {\n            var T;\n            for (T = 0; T < P; T++) p.pinfo.pcmdata[c][T] = p.pinfo.pcmdata[c][T + e.framesize];\n            for (T = P; T < 1600; T++) p.pinfo.pcmdata[c][T] = h[c][T - P];\n          }\n          O.set_frame_pinfo(e, _);\n        }\n        return function (e) {\n          var t, n;\n          for (j(0 <= e.bitrate_index && e.bitrate_index < 16), j(0 <= e.mode_ext && e.mode_ext < 4), e.bitrate_stereoMode_Hist[e.bitrate_index][4]++, e.bitrate_stereoMode_Hist[15][4]++, 2 == e.channels_out && (e.bitrate_stereoMode_Hist[e.bitrate_index][e.mode_ext]++, e.bitrate_stereoMode_Hist[15][e.mode_ext]++), t = 0; t < e.mode_gr; ++t) for (n = 0; n < e.channels_out; ++n) {\n            var a = 0 | e.l3_side.tt[t][n].block_type;\n            0 != e.l3_side.tt[t][n].mixed_block_flag && (a = 4), e.bitrate_blockType_Hist[e.bitrate_index][a]++, e.bitrate_blockType_Hist[e.bitrate_index][5]++, e.bitrate_blockType_Hist[15][a]++, e.bitrate_blockType_Hist[15][5]++;\n          }\n        }(p), i;\n      };\n    }\n    U.ENCDELAY = 576, U.POSTDELAY = 1152, U.FFTOFFSET = 224 + (U.MDCTDELAY = 48), U.DECDELAY = 528, U.SBLIMIT = 32, U.CBANDS = 64, U.SBPSY_l = 21, U.SBPSY_s = 12, U.SBMAX_l = 22, U.SBMAX_s = 13, U.PSFB21 = 6, U.PSFB12 = 6, U.HBLKSIZE = (U.BLKSIZE = 1024) / 2 + 1, U.HBLKSIZE_s = (U.BLKSIZE_s = 256) / 2 + 1, U.NORM_TYPE = 0, U.START_TYPE = 1, U.SHORT_TYPE = 2, U.STOP_TYPE = 3, U.MPG_MD_LR_LR = 0, U.MPG_MD_LR_I = 1, U.MPG_MD_MS_LR = 2, U.MPG_MD_MS_I = 3, U.fircoef = [-.1039435, -.1892065, 5 * -.0432472, -.155915, 3898045e-23, .0467745 * 5, .50455, .756825, .187098 * 5], e.exports = U;\n  }, function (e, t) {\n    e.exports = function (n) {\n      var i = [];\n      return i.toString = function () {\n        return this.map(function (e) {\n          var t = function (e, t) {\n            var n = e[1] || \"\",\n              a = e[3];\n            if (!a) return n;\n            if (t && \"function\" == typeof btoa) {\n              var r = (i = a, \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(i)))) + \" */\"),\n                s = a.sources.map(function (e) {\n                  return \"/*# sourceURL=\" + a.sourceRoot + e + \" */\";\n                });\n              return [n].concat(s).concat([r]).join(\"\\n\");\n            }\n            var i;\n            return [n].join(\"\\n\");\n          }(e, n);\n          return e[2] ? \"@media \" + e[2] + \"{\" + t + \"}\" : t;\n        }).join(\"\");\n      }, i.i = function (e, t) {\n        \"string\" == typeof e && (e = [[null, e, \"\"]]);\n        for (var n = {}, a = 0; a < this.length; a++) {\n          var r = this[a][0];\n          \"number\" == typeof r && (n[r] = !0);\n        }\n        for (a = 0; a < e.length; a++) {\n          var s = e[a];\n          \"number\" == typeof s[0] && n[s[0]] || (t && !s[2] ? s[2] = t : t && (s[2] = \"(\" + s[2] + \") and (\" + t + \")\"), i.push(s));\n        }\n      }, i;\n    };\n  }, function (e, t, n) {\n    \"use strict\";\n\n    function _(e, t) {\n      for (var n = [], a = {}, r = 0; r < t.length; r++) {\n        var s = t[r],\n          i = s[0],\n          o = {\n            id: e + \":\" + r,\n            css: s[1],\n            media: s[2],\n            sourceMap: s[3]\n          };\n        a[i] ? a[i].parts.push(o) : n.push(a[i] = {\n          id: i,\n          parts: [o]\n        });\n      }\n      return n;\n    }\n    n.r(t), n.d(t, \"default\", function () {\n      return p;\n    });\n    var a = \"undefined\" != typeof document;\n    if (\"undefined\" != typeof DEBUG && DEBUG && !a) throw new Error(\"vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\");\n    var l = {},\n      r = a && (document.head || document.getElementsByTagName(\"head\")[0]),\n      s = null,\n      i = 0,\n      f = !1,\n      o = function () {},\n      c = null,\n      u = \"data-vue-ssr-id\",\n      h = \"undefined\" != typeof navigator && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());\n    function p(i, e, t, n) {\n      f = t, c = n || {};\n      var o = _(i, e);\n      return d(o), function (e) {\n        for (var t = [], n = 0; n < o.length; n++) {\n          var a = o[n];\n          (r = l[a.id]).refs--, t.push(r);\n        }\n        e ? d(o = _(i, e)) : o = [];\n        for (n = 0; n < t.length; n++) {\n          var r;\n          if (0 === (r = t[n]).refs) {\n            for (var s = 0; s < r.parts.length; s++) r.parts[s]();\n            delete l[r.id];\n          }\n        }\n      };\n    }\n    function d(e) {\n      for (var t = 0; t < e.length; t++) {\n        var n = e[t],\n          a = l[n.id];\n        if (a) {\n          a.refs++;\n          for (var r = 0; r < a.parts.length; r++) a.parts[r](n.parts[r]);\n          for (; r < n.parts.length; r++) a.parts.push(m(n.parts[r]));\n          a.parts.length > n.parts.length && (a.parts.length = n.parts.length);\n        } else {\n          var s = [];\n          for (r = 0; r < n.parts.length; r++) s.push(m(n.parts[r]));\n          l[n.id] = {\n            id: n.id,\n            refs: 1,\n            parts: s\n          };\n        }\n      }\n    }\n    function b() {\n      var e = document.createElement(\"style\");\n      return e.type = \"text/css\", r.appendChild(e), e;\n    }\n    function m(t) {\n      var n,\n        a,\n        e = document.querySelector(\"style[\" + u + '~=\"' + t.id + '\"]');\n      if (e) {\n        if (f) return o;\n        e.parentNode.removeChild(e);\n      }\n      if (h) {\n        var r = i++;\n        e = s || (s = b()), n = w.bind(null, e, r, !1), a = w.bind(null, e, r, !0);\n      } else e = b(), n = function (e, t) {\n        var n = t.css,\n          a = t.media,\n          r = t.sourceMap;\n        a && e.setAttribute(\"media\", a);\n        c.ssrId && e.setAttribute(u, t.id);\n        r && (n += \"\\n/*# sourceURL=\" + r.sources[0] + \" */\", n += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(r)))) + \" */\");\n        if (e.styleSheet) e.styleSheet.cssText = n;else {\n          for (; e.firstChild;) e.removeChild(e.firstChild);\n          e.appendChild(document.createTextNode(n));\n        }\n      }.bind(null, e), a = function () {\n        e.parentNode.removeChild(e);\n      };\n      return n(t), function (e) {\n        if (e) {\n          if (e.css === t.css && e.media === t.media && e.sourceMap === t.sourceMap) return;\n          n(t = e);\n        } else a();\n      };\n    }\n    var v,\n      g = (v = [], function (e, t) {\n        return v[e] = t, v.filter(Boolean).join(\"\\n\");\n      });\n    function w(e, t, n, a) {\n      var r = n ? \"\" : a.css;\n      if (e.styleSheet) e.styleSheet.cssText = g(t, r);else {\n        var s = document.createTextNode(r),\n          i = e.childNodes;\n        i[t] && e.removeChild(i[t]), i.length ? e.insertBefore(s, i[t]) : e.appendChild(s);\n      }\n    }\n  }, function (e, t, n) {\n    var a = n(0),\n      r = (a.System, a.VbrMode, a.Float, a.ShortBlock, a.Util, a.Arrays, a.new_array_n, a.new_byte),\n      s = a.new_double,\n      i = a.new_float,\n      o = a.new_float_n,\n      _ = a.new_int,\n      l = a.new_int_n,\n      f = (a.assert, n(33)),\n      c = n(10),\n      u = n(34),\n      h = n(35),\n      p = n(8),\n      d = n(1),\n      b = n(5);\n    function m() {\n      var e = 40;\n      function t() {\n        this.write_timing = 0, this.ptr = 0, this.buf = r(e);\n      }\n      this.Class_ID = 0, this.lame_encode_frame_init = 0, this.iteration_init_init = 0, this.fill_buffer_resample_init = 0, this.mfbuf = o([2, m.MFSIZE]), this.mode_gr = 0, this.channels_in = 0, this.channels_out = 0, this.resample_ratio = 0, this.mf_samples_to_encode = 0, this.mf_size = 0, this.VBR_min_bitrate = 0, this.VBR_max_bitrate = 0, this.bitrate_index = 0, this.samplerate_index = 0, this.mode_ext = 0, this.lowpass1 = 0, this.lowpass2 = 0, this.highpass1 = 0, this.highpass2 = 0, this.noise_shaping = 0, this.noise_shaping_amp = 0, this.substep_shaping = 0, this.psymodel = 0, this.noise_shaping_stop = 0, this.subblock_gain = 0, this.use_best_huffman = 0, this.full_outer_loop = 0, this.l3_side = new f(), this.ms_ratio = i(2), this.padding = 0, this.frac_SpF = 0, this.slot_lag = 0, this.tag_spec = null, this.nMusicCRC = 0, this.OldValue = _(2), this.CurrentStep = _(2), this.masking_lower = 0, this.bv_scf = _(576), this.pseudohalf = _(b.SFBMAX), this.sfb21_extra = !1, this.inbuf_old = new Array(2), this.blackfilt = new Array(2 * m.BPC + 1), this.itime = s(2), this.sideinfo_len = 0, this.sb_sample = o([2, 2, 18, d.SBLIMIT]), this.amp_filter = i(32), this.header = new Array(m.MAX_HEADER_BUF), this.h_ptr = 0, this.w_ptr = 0, this.ancillary_flag = 0, this.ResvSize = 0, this.ResvMax = 0, this.scalefac_band = new c(), this.minval_l = i(d.CBANDS), this.minval_s = i(d.CBANDS), this.nb_1 = o([4, d.CBANDS]), this.nb_2 = o([4, d.CBANDS]), this.nb_s1 = o([4, d.CBANDS]), this.nb_s2 = o([4, d.CBANDS]), this.s3_ss = null, this.s3_ll = null, this.decay = 0, this.thm = new Array(4), this.en = new Array(4), this.tot_ener = i(4), this.loudness_sq = o([2, 2]), this.loudness_sq_save = i(2), this.mld_l = i(d.SBMAX_l), this.mld_s = i(d.SBMAX_s), this.bm_l = _(d.SBMAX_l), this.bo_l = _(d.SBMAX_l), this.bm_s = _(d.SBMAX_s), this.bo_s = _(d.SBMAX_s), this.npart_l = 0, this.npart_s = 0, this.s3ind = l([d.CBANDS, 2]), this.s3ind_s = l([d.CBANDS, 2]), this.numlines_s = _(d.CBANDS), this.numlines_l = _(d.CBANDS), this.rnumlines_l = i(d.CBANDS), this.mld_cb_l = i(d.CBANDS), this.mld_cb_s = i(d.CBANDS), this.numlines_s_num1 = 0, this.numlines_l_num1 = 0, this.pe = i(4), this.ms_ratio_s_old = 0, this.ms_ratio_l_old = 0, this.ms_ener_ratio_old = 0, this.blocktype_old = _(2), this.nsPsy = new u(), this.VBR_seek_table = new h(), this.ATH = null, this.PSY = null, this.nogap_total = 0, this.nogap_current = 0, this.decode_on_the_fly = !0, this.findReplayGain = !0, this.findPeakSample = !0, this.PeakSample = 0, this.RadioGain = 0, this.AudiophileGain = 0, this.rgdata = null, this.noclipGainChange = 0, this.noclipScale = 0, this.bitrate_stereoMode_Hist = l([16, 5]), this.bitrate_blockType_Hist = l([16, 6]), this.pinfo = null, this.hip = null, this.in_buffer_nsamples = 0, this.in_buffer_0 = null, this.in_buffer_1 = null, this.iteration_loop = null;\n      for (var n = 0; n < this.en.length; n++) this.en[n] = new p();\n      for (n = 0; n < this.thm.length; n++) this.thm[n] = new p();\n      for (n = 0; n < this.header.length; n++) this.header[n] = new t();\n    }\n    m.MFSIZE = 3456 + d.ENCDELAY - d.MDCTDELAY, m.MAX_HEADER_BUF = 256, m.MAX_BITS_PER_CHANNEL = 4095, m.MAX_BITS_PER_GRANULE = 7680, m.BPC = 320, e.exports = m;\n  }, function (e, t, n) {\n    var a = n(1),\n      r = {};\n    r.SFBMAX = 3 * a.SBMAX_s, e.exports = r;\n  }, function (e, t, n) {\n    var a = n(0),\n      r = (a.System, a.VbrMode, a.Float, a.ShortBlock, a.Util, a.Arrays, a.new_array_n, a.new_byte, a.new_double, a.new_float),\n      s = (a.new_float_n, a.new_int),\n      i = (a.new_int_n, a.assert, n(5));\n    e.exports = function () {\n      this.xr = r(576), this.l3_enc = s(576), this.scalefac = s(i.SFBMAX), this.xrpow_max = 0, this.part2_3_length = 0, this.big_values = 0, this.count1 = 0, this.global_gain = 0, this.scalefac_compress = 0, this.block_type = 0, this.mixed_block_flag = 0, this.table_select = s(3), this.subblock_gain = s(4), this.region0_count = 0, this.region1_count = 0, this.preflag = 0, this.scalefac_scale = 0, this.count1table_select = 0, this.part2_length = 0, this.sfb_lmax = 0, this.sfb_smin = 0, this.psy_lmax = 0, this.sfbmax = 0, this.psymax = 0, this.sfbdivide = 0, this.width = s(i.SFBMAX), this.window = s(i.SFBMAX), this.count1bits = 0, this.sfb_partition_table = null, this.slen = s(4), this.max_nonzero_coeff = 0;\n      var n = this;\n      function a(e) {\n        return new Int32Array(e);\n      }\n      this.assign = function (e) {\n        var t;\n        n.xr = (t = e.xr, new Float32Array(t)), n.l3_enc = a(e.l3_enc), n.scalefac = a(e.scalefac), n.xrpow_max = e.xrpow_max, n.part2_3_length = e.part2_3_length, n.big_values = e.big_values, n.count1 = e.count1, n.global_gain = e.global_gain, n.scalefac_compress = e.scalefac_compress, n.block_type = e.block_type, n.mixed_block_flag = e.mixed_block_flag, n.table_select = a(e.table_select), n.subblock_gain = a(e.subblock_gain), n.region0_count = e.region0_count, n.region1_count = e.region1_count, n.preflag = e.preflag, n.scalefac_scale = e.scalefac_scale, n.count1table_select = e.count1table_select, n.part2_length = e.part2_length, n.sfb_lmax = e.sfb_lmax, n.sfb_smin = e.sfb_smin, n.psy_lmax = e.psy_lmax, n.sfbmax = e.sfbmax, n.psymax = e.psymax, n.sfbdivide = e.sfbdivide, n.width = a(e.width), n.window = a(e.window), n.count1bits = e.count1bits, n.sfb_partition_table = e.sfb_partition_table.slice(0), n.slen = a(e.slen), n.max_nonzero_coeff = e.max_nonzero_coeff;\n      };\n    };\n  }, function (e, t) {\n    function n(e, t, n, a) {\n      this.xlen = e, this.linmax = t, this.table = n, this.hlen = a;\n    }\n    var a = {\n      t1HB: [1, 1, 1, 0],\n      t2HB: [1, 2, 1, 3, 1, 1, 3, 2, 0],\n      t3HB: [3, 2, 1, 1, 1, 1, 3, 2, 0],\n      t5HB: [1, 2, 6, 5, 3, 1, 4, 4, 7, 5, 7, 1, 6, 1, 1, 0],\n      t6HB: [7, 3, 5, 1, 6, 2, 3, 2, 5, 4, 4, 1, 3, 3, 2, 0],\n      t7HB: [1, 2, 10, 19, 16, 10, 3, 3, 7, 10, 5, 3, 11, 4, 13, 17, 8, 4, 12, 11, 18, 15, 11, 2, 7, 6, 9, 14, 3, 1, 6, 4, 5, 3, 2, 0],\n      t8HB: [3, 4, 6, 18, 12, 5, 5, 1, 2, 16, 9, 3, 7, 3, 5, 14, 7, 3, 19, 17, 15, 13, 10, 4, 13, 5, 8, 11, 5, 1, 12, 4, 4, 1, 1, 0],\n      t9HB: [7, 5, 9, 14, 15, 7, 6, 4, 5, 5, 6, 7, 7, 6, 8, 8, 8, 5, 15, 6, 9, 10, 5, 1, 11, 7, 9, 6, 4, 1, 14, 4, 6, 2, 6, 0],\n      t10HB: [1, 2, 10, 23, 35, 30, 12, 17, 3, 3, 8, 12, 18, 21, 12, 7, 11, 9, 15, 21, 32, 40, 19, 6, 14, 13, 22, 34, 46, 23, 18, 7, 20, 19, 33, 47, 27, 22, 9, 3, 31, 22, 41, 26, 21, 20, 5, 3, 14, 13, 10, 11, 16, 6, 5, 1, 9, 8, 7, 8, 4, 4, 2, 0],\n      t11HB: [3, 4, 10, 24, 34, 33, 21, 15, 5, 3, 4, 10, 32, 17, 11, 10, 11, 7, 13, 18, 30, 31, 20, 5, 25, 11, 19, 59, 27, 18, 12, 5, 35, 33, 31, 58, 30, 16, 7, 5, 28, 26, 32, 19, 17, 15, 8, 14, 14, 12, 9, 13, 14, 9, 4, 1, 11, 4, 6, 6, 6, 3, 2, 0],\n      t12HB: [9, 6, 16, 33, 41, 39, 38, 26, 7, 5, 6, 9, 23, 16, 26, 11, 17, 7, 11, 14, 21, 30, 10, 7, 17, 10, 15, 12, 18, 28, 14, 5, 32, 13, 22, 19, 18, 16, 9, 5, 40, 17, 31, 29, 17, 13, 4, 2, 27, 12, 11, 15, 10, 7, 4, 1, 27, 12, 8, 12, 6, 3, 1, 0],\n      t13HB: [1, 5, 14, 21, 34, 51, 46, 71, 42, 52, 68, 52, 67, 44, 43, 19, 3, 4, 12, 19, 31, 26, 44, 33, 31, 24, 32, 24, 31, 35, 22, 14, 15, 13, 23, 36, 59, 49, 77, 65, 29, 40, 30, 40, 27, 33, 42, 16, 22, 20, 37, 61, 56, 79, 73, 64, 43, 76, 56, 37, 26, 31, 25, 14, 35, 16, 60, 57, 97, 75, 114, 91, 54, 73, 55, 41, 48, 53, 23, 24, 58, 27, 50, 96, 76, 70, 93, 84, 77, 58, 79, 29, 74, 49, 41, 17, 47, 45, 78, 74, 115, 94, 90, 79, 69, 83, 71, 50, 59, 38, 36, 15, 72, 34, 56, 95, 92, 85, 91, 90, 86, 73, 77, 65, 51, 44, 43, 42, 43, 20, 30, 44, 55, 78, 72, 87, 78, 61, 46, 54, 37, 30, 20, 16, 53, 25, 41, 37, 44, 59, 54, 81, 66, 76, 57, 54, 37, 18, 39, 11, 35, 33, 31, 57, 42, 82, 72, 80, 47, 58, 55, 21, 22, 26, 38, 22, 53, 25, 23, 38, 70, 60, 51, 36, 55, 26, 34, 23, 27, 14, 9, 7, 34, 32, 28, 39, 49, 75, 30, 52, 48, 40, 52, 28, 18, 17, 9, 5, 45, 21, 34, 64, 56, 50, 49, 45, 31, 19, 12, 15, 10, 7, 6, 3, 48, 23, 20, 39, 36, 35, 53, 21, 16, 23, 13, 10, 6, 1, 4, 2, 16, 15, 17, 27, 25, 20, 29, 11, 17, 12, 16, 8, 1, 1, 0, 1],\n      t15HB: [7, 12, 18, 53, 47, 76, 124, 108, 89, 123, 108, 119, 107, 81, 122, 63, 13, 5, 16, 27, 46, 36, 61, 51, 42, 70, 52, 83, 65, 41, 59, 36, 19, 17, 15, 24, 41, 34, 59, 48, 40, 64, 50, 78, 62, 80, 56, 33, 29, 28, 25, 43, 39, 63, 55, 93, 76, 59, 93, 72, 54, 75, 50, 29, 52, 22, 42, 40, 67, 57, 95, 79, 72, 57, 89, 69, 49, 66, 46, 27, 77, 37, 35, 66, 58, 52, 91, 74, 62, 48, 79, 63, 90, 62, 40, 38, 125, 32, 60, 56, 50, 92, 78, 65, 55, 87, 71, 51, 73, 51, 70, 30, 109, 53, 49, 94, 88, 75, 66, 122, 91, 73, 56, 42, 64, 44, 21, 25, 90, 43, 41, 77, 73, 63, 56, 92, 77, 66, 47, 67, 48, 53, 36, 20, 71, 34, 67, 60, 58, 49, 88, 76, 67, 106, 71, 54, 38, 39, 23, 15, 109, 53, 51, 47, 90, 82, 58, 57, 48, 72, 57, 41, 23, 27, 62, 9, 86, 42, 40, 37, 70, 64, 52, 43, 70, 55, 42, 25, 29, 18, 11, 11, 118, 68, 30, 55, 50, 46, 74, 65, 49, 39, 24, 16, 22, 13, 14, 7, 91, 44, 39, 38, 34, 63, 52, 45, 31, 52, 28, 19, 14, 8, 9, 3, 123, 60, 58, 53, 47, 43, 32, 22, 37, 24, 17, 12, 15, 10, 2, 1, 71, 37, 34, 30, 28, 20, 17, 26, 21, 16, 10, 6, 8, 6, 2, 0],\n      t16HB: [1, 5, 14, 44, 74, 63, 110, 93, 172, 149, 138, 242, 225, 195, 376, 17, 3, 4, 12, 20, 35, 62, 53, 47, 83, 75, 68, 119, 201, 107, 207, 9, 15, 13, 23, 38, 67, 58, 103, 90, 161, 72, 127, 117, 110, 209, 206, 16, 45, 21, 39, 69, 64, 114, 99, 87, 158, 140, 252, 212, 199, 387, 365, 26, 75, 36, 68, 65, 115, 101, 179, 164, 155, 264, 246, 226, 395, 382, 362, 9, 66, 30, 59, 56, 102, 185, 173, 265, 142, 253, 232, 400, 388, 378, 445, 16, 111, 54, 52, 100, 184, 178, 160, 133, 257, 244, 228, 217, 385, 366, 715, 10, 98, 48, 91, 88, 165, 157, 148, 261, 248, 407, 397, 372, 380, 889, 884, 8, 85, 84, 81, 159, 156, 143, 260, 249, 427, 401, 392, 383, 727, 713, 708, 7, 154, 76, 73, 141, 131, 256, 245, 426, 406, 394, 384, 735, 359, 710, 352, 11, 139, 129, 67, 125, 247, 233, 229, 219, 393, 743, 737, 720, 885, 882, 439, 4, 243, 120, 118, 115, 227, 223, 396, 746, 742, 736, 721, 712, 706, 223, 436, 6, 202, 224, 222, 218, 216, 389, 386, 381, 364, 888, 443, 707, 440, 437, 1728, 4, 747, 211, 210, 208, 370, 379, 734, 723, 714, 1735, 883, 877, 876, 3459, 865, 2, 377, 369, 102, 187, 726, 722, 358, 711, 709, 866, 1734, 871, 3458, 870, 434, 0, 12, 10, 7, 11, 10, 17, 11, 9, 13, 12, 10, 7, 5, 3, 1, 3],\n      t24HB: [15, 13, 46, 80, 146, 262, 248, 434, 426, 669, 653, 649, 621, 517, 1032, 88, 14, 12, 21, 38, 71, 130, 122, 216, 209, 198, 327, 345, 319, 297, 279, 42, 47, 22, 41, 74, 68, 128, 120, 221, 207, 194, 182, 340, 315, 295, 541, 18, 81, 39, 75, 70, 134, 125, 116, 220, 204, 190, 178, 325, 311, 293, 271, 16, 147, 72, 69, 135, 127, 118, 112, 210, 200, 188, 352, 323, 306, 285, 540, 14, 263, 66, 129, 126, 119, 114, 214, 202, 192, 180, 341, 317, 301, 281, 262, 12, 249, 123, 121, 117, 113, 215, 206, 195, 185, 347, 330, 308, 291, 272, 520, 10, 435, 115, 111, 109, 211, 203, 196, 187, 353, 332, 313, 298, 283, 531, 381, 17, 427, 212, 208, 205, 201, 193, 186, 177, 169, 320, 303, 286, 268, 514, 377, 16, 335, 199, 197, 191, 189, 181, 174, 333, 321, 305, 289, 275, 521, 379, 371, 11, 668, 184, 183, 179, 175, 344, 331, 314, 304, 290, 277, 530, 383, 373, 366, 10, 652, 346, 171, 168, 164, 318, 309, 299, 287, 276, 263, 513, 375, 368, 362, 6, 648, 322, 316, 312, 307, 302, 292, 284, 269, 261, 512, 376, 370, 364, 359, 4, 620, 300, 296, 294, 288, 282, 273, 266, 515, 380, 374, 369, 365, 361, 357, 2, 1033, 280, 278, 274, 267, 264, 259, 382, 378, 372, 367, 363, 360, 358, 356, 0, 43, 20, 19, 17, 15, 13, 11, 9, 7, 6, 4, 7, 5, 3, 1, 3],\n      t32HB: [1, 10, 8, 20, 12, 20, 16, 32, 14, 12, 24, 0, 28, 16, 24, 16],\n      t33HB: [15, 28, 26, 48, 22, 40, 36, 64, 14, 24, 20, 32, 12, 16, 8, 0],\n      t1l: [1, 4, 3, 5],\n      t2l: [1, 4, 7, 4, 5, 7, 6, 7, 8],\n      t3l: [2, 3, 7, 4, 4, 7, 6, 7, 8],\n      t5l: [1, 4, 7, 8, 4, 5, 8, 9, 7, 8, 9, 10, 8, 8, 9, 10],\n      t6l: [3, 4, 6, 8, 4, 4, 6, 7, 5, 6, 7, 8, 7, 7, 8, 9],\n      t7l: [1, 4, 7, 9, 9, 10, 4, 6, 8, 9, 9, 10, 7, 7, 9, 10, 10, 11, 8, 9, 10, 11, 11, 11, 8, 9, 10, 11, 11, 12, 9, 10, 11, 12, 12, 12],\n      t8l: [2, 4, 7, 9, 9, 10, 4, 4, 6, 10, 10, 10, 7, 6, 8, 10, 10, 11, 9, 10, 10, 11, 11, 12, 9, 9, 10, 11, 12, 12, 10, 10, 11, 11, 13, 13],\n      t9l: [3, 4, 6, 7, 9, 10, 4, 5, 6, 7, 8, 10, 5, 6, 7, 8, 9, 10, 7, 7, 8, 9, 9, 10, 8, 8, 9, 9, 10, 11, 9, 9, 10, 10, 11, 11],\n      t10l: [1, 4, 7, 9, 10, 10, 10, 11, 4, 6, 8, 9, 10, 11, 10, 10, 7, 8, 9, 10, 11, 12, 11, 11, 8, 9, 10, 11, 12, 12, 11, 12, 9, 10, 11, 12, 12, 12, 12, 12, 10, 11, 12, 12, 13, 13, 12, 13, 9, 10, 11, 12, 12, 12, 13, 13, 10, 10, 11, 12, 12, 13, 13, 13],\n      t11l: [2, 4, 6, 8, 9, 10, 9, 10, 4, 5, 6, 8, 10, 10, 9, 10, 6, 7, 8, 9, 10, 11, 10, 10, 8, 8, 9, 11, 10, 12, 10, 11, 9, 10, 10, 11, 11, 12, 11, 12, 9, 10, 11, 12, 12, 13, 12, 13, 9, 9, 9, 10, 11, 12, 12, 12, 9, 9, 10, 11, 12, 12, 12, 12],\n      t12l: [4, 4, 6, 8, 9, 10, 10, 10, 4, 5, 6, 7, 9, 9, 10, 10, 6, 6, 7, 8, 9, 10, 9, 10, 7, 7, 8, 8, 9, 10, 10, 10, 8, 8, 9, 9, 10, 10, 10, 11, 9, 9, 10, 10, 10, 11, 10, 11, 9, 9, 9, 10, 10, 11, 11, 12, 10, 10, 10, 11, 11, 11, 11, 12],\n      t13l: [1, 5, 7, 8, 9, 10, 10, 11, 10, 11, 12, 12, 13, 13, 14, 14, 4, 6, 8, 9, 10, 10, 11, 11, 11, 11, 12, 12, 13, 14, 14, 14, 7, 8, 9, 10, 11, 11, 12, 12, 11, 12, 12, 13, 13, 14, 15, 15, 8, 9, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 15, 15, 9, 9, 11, 11, 12, 12, 13, 13, 12, 13, 13, 14, 14, 15, 15, 16, 10, 10, 11, 12, 12, 12, 13, 13, 13, 13, 14, 13, 15, 15, 16, 16, 10, 11, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 16, 16, 11, 11, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 16, 18, 18, 10, 10, 11, 12, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 17, 17, 11, 11, 12, 12, 13, 13, 13, 15, 14, 15, 15, 16, 16, 16, 18, 17, 11, 12, 12, 13, 13, 14, 14, 15, 14, 15, 16, 15, 16, 17, 18, 19, 12, 12, 12, 13, 14, 14, 14, 14, 15, 15, 15, 16, 17, 17, 17, 18, 12, 13, 13, 14, 14, 15, 14, 15, 16, 16, 17, 17, 17, 18, 18, 18, 13, 13, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 17, 18, 18, 14, 14, 14, 15, 15, 15, 17, 16, 16, 19, 17, 17, 17, 19, 18, 18, 13, 14, 15, 16, 16, 16, 17, 16, 17, 17, 18, 18, 21, 20, 21, 18],\n      t15l: [3, 5, 6, 8, 8, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 14, 5, 5, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 6, 7, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 13, 13, 7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 8, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 13, 13, 13, 14, 10, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 14, 14, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 14, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 14, 14, 14, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 15, 14, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 12, 12, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 15, 15, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 14, 15, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15],\n      t16_5l: [1, 5, 7, 9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 11, 4, 6, 8, 9, 10, 11, 11, 11, 12, 12, 12, 13, 14, 13, 14, 11, 7, 8, 9, 10, 11, 11, 12, 12, 13, 12, 13, 13, 13, 14, 14, 12, 9, 9, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 13, 10, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 12, 10, 10, 11, 11, 12, 13, 13, 14, 13, 14, 14, 15, 15, 15, 16, 13, 11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 13, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 17, 17, 13, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 13, 12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 15, 16, 15, 14, 12, 13, 12, 13, 14, 14, 14, 14, 15, 16, 16, 16, 17, 17, 16, 13, 13, 13, 13, 13, 14, 14, 15, 16, 16, 16, 16, 16, 16, 15, 16, 14, 13, 14, 14, 14, 14, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 14, 15, 14, 14, 14, 15, 15, 16, 16, 16, 18, 17, 17, 17, 19, 17, 14, 14, 15, 13, 14, 16, 16, 15, 16, 16, 17, 18, 17, 19, 17, 16, 14, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 12],\n      t16l: [1, 5, 7, 9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 10, 4, 6, 8, 9, 10, 11, 11, 11, 12, 12, 12, 13, 14, 13, 14, 10, 7, 8, 9, 10, 11, 11, 12, 12, 13, 12, 13, 13, 13, 14, 14, 11, 9, 9, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 12, 10, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 11, 10, 10, 11, 11, 12, 13, 13, 14, 13, 14, 14, 15, 15, 15, 16, 12, 11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 12, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 17, 17, 12, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 12, 12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 15, 16, 15, 13, 12, 13, 12, 13, 14, 14, 14, 14, 15, 16, 16, 16, 17, 17, 16, 12, 13, 13, 13, 13, 14, 14, 15, 16, 16, 16, 16, 16, 16, 15, 16, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 13, 15, 14, 14, 14, 15, 15, 16, 16, 16, 18, 17, 17, 17, 19, 17, 13, 14, 15, 13, 14, 16, 16, 15, 16, 16, 17, 18, 17, 19, 17, 16, 13, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 10],\n      t24l: [4, 5, 7, 8, 9, 10, 10, 11, 11, 12, 12, 12, 12, 12, 13, 10, 5, 6, 7, 8, 9, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 10, 7, 7, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 9, 8, 8, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 13, 9, 10, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 9, 11, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 10, 12, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 10, 12, 12, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 10, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 10, 13, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 6],\n      t32l: [1, 5, 5, 7, 5, 8, 7, 9, 5, 7, 7, 9, 7, 9, 9, 10],\n      t33l: [4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8]\n    };\n    a.ht = [new n(0, 0, null, null), new n(2, 0, a.t1HB, a.t1l), new n(3, 0, a.t2HB, a.t2l), new n(3, 0, a.t3HB, a.t3l), new n(0, 0, null, null), new n(4, 0, a.t5HB, a.t5l), new n(4, 0, a.t6HB, a.t6l), new n(6, 0, a.t7HB, a.t7l), new n(6, 0, a.t8HB, a.t8l), new n(6, 0, a.t9HB, a.t9l), new n(8, 0, a.t10HB, a.t10l), new n(8, 0, a.t11HB, a.t11l), new n(8, 0, a.t12HB, a.t12l), new n(16, 0, a.t13HB, a.t13l), new n(0, 0, null, a.t16_5l), new n(16, 0, a.t15HB, a.t15l), new n(1, 1, a.t16HB, a.t16l), new n(2, 3, a.t16HB, a.t16l), new n(3, 7, a.t16HB, a.t16l), new n(4, 15, a.t16HB, a.t16l), new n(6, 63, a.t16HB, a.t16l), new n(8, 255, a.t16HB, a.t16l), new n(10, 1023, a.t16HB, a.t16l), new n(13, 8191, a.t16HB, a.t16l), new n(4, 15, a.t24HB, a.t24l), new n(5, 31, a.t24HB, a.t24l), new n(6, 63, a.t24HB, a.t24l), new n(7, 127, a.t24HB, a.t24l), new n(8, 255, a.t24HB, a.t24l), new n(9, 511, a.t24HB, a.t24l), new n(11, 2047, a.t24HB, a.t24l), new n(13, 8191, a.t24HB, a.t24l), new n(0, 0, a.t32HB, a.t32l), new n(0, 0, a.t33HB, a.t33l)], a.largetbl = [65540, 327685, 458759, 589832, 655369, 655370, 720906, 720907, 786443, 786444, 786444, 851980, 851980, 851980, 917517, 655370, 262149, 393222, 524295, 589832, 655369, 720906, 720906, 720907, 786443, 786443, 786444, 851980, 917516, 851980, 917516, 655370, 458759, 524295, 589832, 655369, 720905, 720906, 786442, 786443, 851979, 786443, 851979, 851980, 851980, 917516, 917517, 720905, 589832, 589832, 655369, 720905, 720906, 786442, 786442, 786443, 851979, 851979, 917515, 917516, 917516, 983052, 983052, 786441, 655369, 655369, 720905, 720906, 786442, 786442, 851978, 851979, 851979, 917515, 917516, 917516, 983052, 983052, 983053, 720905, 655370, 655369, 720906, 720906, 786442, 851978, 851979, 917515, 851979, 917515, 917516, 983052, 983052, 983052, 1048588, 786441, 720906, 720906, 720906, 786442, 851978, 851979, 851979, 851979, 917515, 917516, 917516, 917516, 983052, 983052, 1048589, 786441, 720907, 720906, 786442, 786442, 851979, 851979, 851979, 917515, 917516, 983052, 983052, 983052, 983052, 1114125, 1114125, 786442, 720907, 786443, 786443, 851979, 851979, 851979, 917515, 917515, 983051, 983052, 983052, 983052, 1048588, 1048589, 1048589, 786442, 786443, 786443, 786443, 851979, 851979, 917515, 917515, 983052, 983052, 983052, 983052, 1048588, 983053, 1048589, 983053, 851978, 786444, 851979, 786443, 851979, 917515, 917516, 917516, 917516, 983052, 1048588, 1048588, 1048589, 1114125, 1114125, 1048589, 786442, 851980, 851980, 851979, 851979, 917515, 917516, 983052, 1048588, 1048588, 1048588, 1048588, 1048589, 1048589, 983053, 1048589, 851978, 851980, 917516, 917516, 917516, 917516, 983052, 983052, 983052, 983052, 1114124, 1048589, 1048589, 1048589, 1048589, 1179661, 851978, 983052, 917516, 917516, 917516, 983052, 983052, 1048588, 1048588, 1048589, 1179661, 1114125, 1114125, 1114125, 1245197, 1114125, 851978, 917517, 983052, 851980, 917516, 1048588, 1048588, 983052, 1048589, 1048589, 1114125, 1179661, 1114125, 1245197, 1114125, 1048589, 851978, 655369, 655369, 655369, 720905, 720905, 786441, 786441, 786441, 851977, 851977, 851977, 851978, 851978, 851978, 851978, 655366], a.table23 = [65538, 262147, 458759, 262148, 327684, 458759, 393222, 458759, 524296], a.table56 = [65539, 262148, 458758, 524296, 262148, 327684, 524294, 589831, 458757, 524294, 589831, 655368, 524295, 524295, 589832, 655369], a.bitrate_table = [[0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, -1], [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1], [0, 8, 16, 24, 32, 40, 48, 56, 64, -1, -1, -1, -1, -1, -1, -1]], a.samplerate_table = [[22050, 24e3, 16e3, -1], [44100, 48e3, 32e3, -1], [11025, 12e3, 8e3, -1]], a.scfsi_band = [0, 6, 11, 16, 21], e.exports = a;\n  }, function (e, t, n) {\n    var r = n(1),\n      a = n(0),\n      s = a.System,\n      i = (a.VbrMode, a.Float, a.ShortBlock, a.Util, a.Arrays, a.new_array_n, a.new_byte, a.new_double, a.new_float),\n      o = a.new_float_n;\n    a.new_int, a.new_int_n, a.assert;\n    e.exports = function () {\n      this.l = i(r.SBMAX_l), this.s = o([r.SBMAX_s, 3]);\n      var a = this;\n      this.assign = function (e) {\n        s.arraycopy(e.l, 0, a.l, 0, r.SBMAX_l);\n        for (var t = 0; t < r.SBMAX_s; t++) for (var n = 0; n < 3; n++) a.s[t][n] = e.s[t][n];\n      };\n    };\n  }, function (e, t) {\n    function n(e) {\n      var t = e;\n      this.ordinal = function () {\n        return t;\n      };\n    }\n    n.STEREO = new n(0), n.JOINT_STEREO = new n(1), n.DUAL_CHANNEL = new n(2), n.MONO = new n(3), n.NOT_SET = new n(4), e.exports = n;\n  }, function (e, t, n) {\n    var a = n(0),\n      i = a.System,\n      o = (a.VbrMode, a.Float, a.ShortBlock, a.Util, a.Arrays, a.new_array_n, a.new_byte, a.new_double, a.new_float, a.new_float_n, a.new_int),\n      _ = (a.new_int_n, a.assert, n(1));\n    e.exports = function (e, t, n, a) {\n      this.l = o(1 + _.SBMAX_l), this.s = o(1 + _.SBMAX_s), this.psfb21 = o(1 + _.PSFB21), this.psfb12 = o(1 + _.PSFB12);\n      var r = this.l,\n        s = this.s;\n      4 == arguments.length && (this.arrL = e, this.arrS = t, this.arr21 = n, this.arr12 = a, i.arraycopy(this.arrL, 0, r, 0, Math.min(this.arrL.length, this.l.length)), i.arraycopy(this.arrS, 0, s, 0, Math.min(this.arrS.length, this.s.length)), i.arraycopy(this.arr21, 0, this.psfb21, 0, Math.min(this.arr21.length, this.psfb21.length)), i.arraycopy(this.arr12, 0, this.psfb12, 0, Math.min(this.arr12.length, this.psfb12.length)));\n    };\n  }, function (e, t, n) {\n    var a = n(0),\n      y = a.System,\n      s = (a.VbrMode, a.Float, a.ShortBlock, a.Util, a.Arrays);\n    a.new_array_n, a.new_byte, a.new_double, a.new_float, a.new_float_n, a.new_int, a.new_int_n, a.assert;\n    function M() {\n      var a = M.RMS_WINDOW_TIME_NUMERATOR,\n        r = M.RMS_WINDOW_TIME_DENOMINATOR,\n        m = [[.038575994352, -3.84664617118067, -.02160367184185, 7.81501653005538, -.00123395316851, -11.34170355132042, -9291677959e-14, 13.05504219327545, -.01655260341619, -12.28759895145294, .02161526843274, 9.4829380631979, -.02074045215285, -5.87257861775999, .00594298065125, 2.75465861874613, .00306428023191, -.86984376593551, .00012025322027, .13919314567432, .00288463683916], [.0541865640643, -3.47845948550071, -.02911007808948, 6.36317777566148, -.00848709379851, -8.54751527471874, -.00851165645469, 9.4769360780128, -.00834990904936, -8.81498681370155, .02245293253339, 6.85401540936998, -.02596338512915, -4.39470996079559, .01624864962975, 2.19611684890774, -.00240879051584, -.75104302451432, .00674613682247, .13149317958808, -.00187763777362], [.15457299681924, -2.37898834973084, -.09331049056315, 2.84868151156327, -.06247880153653, -2.64577170229825, .02163541888798, 2.23697657451713, -.05588393329856, -1.67148153367602, .04781476674921, 1.00595954808547, .00222312597743, -.45953458054983, .03174092540049, .16378164858596, -.01390589421898, -.05032077717131, .00651420667831, .0234789740702, -.00881362733839], [.30296907319327, -1.61273165137247, -.22613988682123, 1.0797749225997, -.08587323730772, -.2565625775407, .03282930172664, -.1627671912044, -.00915702933434, -.22638893773906, -.02364141202522, .39120800788284, -.00584456039913, -.22138138954925, .06276101321749, .04500235387352, -828086748e-14, .02005851806501, .00205861885564, .00302439095741, -.02950134983287], [.33642304856132, -1.49858979367799, -.2557224142557, .87350271418188, -.11828570177555, .12205022308084, .11921148675203, -.80774944671438, -.07834489609479, .47854794562326, -.0046997791438, -.12453458140019, -.0058950022444, -.04067510197014, .05724228140351, .08333755284107, .00832043980773, -.04237348025746, -.0163538138454, .02977207319925, -.0176017656815], [.4491525660845, -.62820619233671, -.14351757464547, .29661783706366, -.22784394429749, -.372563729424, -.01419140100551, .00213767857124, .04078262797139, -.42029820170918, -.12398163381748, .22199650564824, .04097565135648, .00613424350682, .10478503600251, .06747620744683, -.01863887810927, .05784820375801, -.03193428438915, .03222754072173, .00541907748707], [.56619470757641, -1.04800335126349, -.75464456939302, .29156311971249, .1624213774223, -.26806001042947, .16744243493672, .00819999645858, -.18901604199609, .45054734505008, .3093178284183, -.33032403314006, -.27562961986224, .0673936833311, .00647310677246, -.04784254229033, .08647503780351, .01639907836189, -.0378898455484, .01807364323573, -.00588215443421], [.58100494960553, -.51035327095184, -.53174909058578, -.31863563325245, -.14289799034253, -.20256413484477, .17520704835522, .1472815413433, .02377945217615, .38952639978999, .15558449135573, -.23313271880868, -.25344790059353, -.05246019024463, .01628462406333, -.02505961724053, .06920467763959, .02442357316099, -.03721611395801, .01818801111503, -.00749618797172], [.53648789255105, -.2504987195602, -.42163034350696, -.43193942311114, -.00275953611929, -.03424681017675, .04267842219415, -.04678328784242, -.10214864179676, .26408300200955, .14590772289388, .15113130533216, -.02459864859345, -.17556493366449, -.11202315195388, -.18823009262115, -.04060034127, .05477720428674, .0478866554818, .0470440968812, -.02217936801134]],\n        v = [[.98621192462708, -1.97223372919527, -1.97242384925416, .97261396931306, .98621192462708], [.98500175787242, -1.96977855582618, -1.97000351574484, .9702284756635, .98500175787242], [.97938932735214, -1.95835380975398, -1.95877865470428, .95920349965459, .97938932735214], [.97531843204928, -1.95002759149878, -1.95063686409857, .95124613669835, .97531843204928], [.97316523498161, -1.94561023566527, -1.94633046996323, .94705070426118, .97316523498161], [.96454515552826, -1.92783286977036, -1.92909031105652, .93034775234268, .96454515552826], [.96009142950541, -1.91858953033784, -1.92018285901082, .92177618768381, .96009142950541], [.95856916599601, -1.9154210807478, -1.91713833199203, .91885558323625, .95856916599601], [.94597685600279, -1.88903307939452, -1.89195371200558, .89487434461664, .94597685600279]];\n      function g(e, t, n, a, r, s) {\n        for (; 0 != r--;) n[a] = 1e-10 + e[t + 0] * s[0] - n[a - 1] * s[1] + e[t - 1] * s[2] - n[a - 2] * s[3] + e[t - 2] * s[4] - n[a - 3] * s[5] + e[t - 3] * s[6] - n[a - 4] * s[7] + e[t - 4] * s[8] - n[a - 5] * s[9] + e[t - 5] * s[10] - n[a - 6] * s[11] + e[t - 6] * s[12] - n[a - 7] * s[13] + e[t - 7] * s[14] - n[a - 8] * s[15] + e[t - 8] * s[16] - n[a - 9] * s[17] + e[t - 9] * s[18] - n[a - 10] * s[19] + e[t - 10] * s[20], ++a, ++t;\n      }\n      function w(e, t, n, a, r, s) {\n        for (; 0 != r--;) n[a] = e[t + 0] * s[0] - n[a - 1] * s[1] + e[t - 1] * s[2] - n[a - 2] * s[3] + e[t - 2] * s[4], ++a, ++t;\n      }\n      function S(e) {\n        return e * e;\n      }\n      this.InitGainAnalysis = function (e, t) {\n        return function (e, t) {\n          for (var n = 0; n < MAX_ORDER; n++) e.linprebuf[n] = e.lstepbuf[n] = e.loutbuf[n] = e.rinprebuf[n] = e.rstepbuf[n] = e.routbuf[n] = 0;\n          switch (0 | t) {\n            case 48e3:\n              e.reqindex = 0;\n              break;\n            case 44100:\n              e.reqindex = 1;\n              break;\n            case 32e3:\n              e.reqindex = 2;\n              break;\n            case 24e3:\n              e.reqindex = 3;\n              break;\n            case 22050:\n              e.reqindex = 4;\n              break;\n            case 16e3:\n              e.reqindex = 5;\n              break;\n            case 12e3:\n              e.reqindex = 6;\n              break;\n            case 11025:\n              e.reqindex = 7;\n              break;\n            case 8e3:\n              e.reqindex = 8;\n              break;\n            default:\n              return INIT_GAIN_ANALYSIS_ERROR;\n          }\n          return e.sampleWindow = 0 | (t * a + r - 1) / r, e.lsum = 0, e.rsum = 0, e.totsamp = 0, s.ill(e.A, 0), INIT_GAIN_ANALYSIS_OK;\n        }(e, t) != INIT_GAIN_ANALYSIS_OK ? INIT_GAIN_ANALYSIS_ERROR : (e.linpre = MAX_ORDER, e.rinpre = MAX_ORDER, e.lstep = MAX_ORDER, e.rstep = MAX_ORDER, e.lout = MAX_ORDER, e.rout = MAX_ORDER, s.fill(e.B, 0), INIT_GAIN_ANALYSIS_OK);\n      }, this.AnalyzeSamples = function (e, t, n, a, r, s, i) {\n        var o, _, l, f, c, u, h;\n        if (0 == s) return GAIN_ANALYSIS_OK;\n        switch (h = 0, c = s, i) {\n          case 1:\n            a = t, r = n;\n            break;\n          case 2:\n            break;\n          default:\n            return GAIN_ANALYSIS_ERROR;\n        }\n        for (s < MAX_ORDER ? (y.arraycopy(t, n, e.linprebuf, MAX_ORDER, s), y.arraycopy(a, r, e.rinprebuf, MAX_ORDER, s)) : (y.arraycopy(t, n, e.linprebuf, MAX_ORDER, MAX_ORDER), y.arraycopy(a, r, e.rinprebuf, MAX_ORDER, MAX_ORDER)); 0 < c;) {\n          u = c > e.sampleWindow - e.totsamp ? e.sampleWindow - e.totsamp : c, h < MAX_ORDER ? (o = e.linpre + h, _ = e.linprebuf, l = e.rinpre + h, f = e.rinprebuf, u > MAX_ORDER - h && (u = MAX_ORDER - h)) : (o = n + h, _ = t, l = r + h, f = a), g(_, o, e.lstepbuf, e.lstep + e.totsamp, u, m[e.reqindex]), g(f, l, e.rstepbuf, e.rstep + e.totsamp, u, m[e.reqindex]), w(e.lstepbuf, e.lstep + e.totsamp, e.loutbuf, e.lout + e.totsamp, u, v[e.reqindex]), w(e.rstepbuf, e.rstep + e.totsamp, e.routbuf, e.rout + e.totsamp, u, v[e.reqindex]), o = e.lout + e.totsamp, _ = e.loutbuf, l = e.rout + e.totsamp, f = e.routbuf;\n          for (var p = u % 8; 0 != p--;) e.lsum += S(_[o++]), e.rsum += S(f[l++]);\n          for (p = u / 8; 0 != p--;) e.lsum += S(_[o + 0]) + S(_[o + 1]) + S(_[o + 2]) + S(_[o + 3]) + S(_[o + 4]) + S(_[o + 5]) + S(_[o + 6]) + S(_[o + 7]), o += 8, e.rsum += S(f[l + 0]) + S(f[l + 1]) + S(f[l + 2]) + S(f[l + 3]) + S(f[l + 4]) + S(f[l + 5]) + S(f[l + 6]) + S(f[l + 7]), l += 8;\n          if (c -= u, h += u, e.totsamp += u, e.totsamp == e.sampleWindow) {\n            var d = 10 * M.STEPS_per_dB * Math.log10((e.lsum + e.rsum) / e.totsamp * .5 + 1e-37),\n              b = d <= 0 ? 0 : 0 | d;\n            b >= e.A.length && (b = e.A.length - 1), e.A[b]++, e.lsum = e.rsum = 0, y.arraycopy(e.loutbuf, e.totsamp, e.loutbuf, 0, MAX_ORDER), y.arraycopy(e.routbuf, e.totsamp, e.routbuf, 0, MAX_ORDER), y.arraycopy(e.lstepbuf, e.totsamp, e.lstepbuf, 0, MAX_ORDER), y.arraycopy(e.rstepbuf, e.totsamp, e.rstepbuf, 0, MAX_ORDER), e.totsamp = 0;\n          }\n          if (e.totsamp > e.sampleWindow) return GAIN_ANALYSIS_ERROR;\n        }\n        return s < MAX_ORDER ? (y.arraycopy(e.linprebuf, s, e.linprebuf, 0, MAX_ORDER - s), y.arraycopy(e.rinprebuf, s, e.rinprebuf, 0, MAX_ORDER - s), y.arraycopy(t, n, e.linprebuf, MAX_ORDER - s, s), y.arraycopy(a, r, e.rinprebuf, MAX_ORDER - s, s)) : (y.arraycopy(t, n + s - MAX_ORDER, e.linprebuf, 0, MAX_ORDER), y.arraycopy(a, r + s - MAX_ORDER, e.rinprebuf, 0, MAX_ORDER)), GAIN_ANALYSIS_OK;\n      }, this.GetTitleGain = function (e) {\n        for (var t = function (e, t) {\n            var n,\n              a = 0;\n            for (n = 0; n < t; n++) a += e[n];\n            if (0 == a) return GAIN_NOT_ENOUGH_SAMPLES;\n            var r = 0 | Math.ceil(a * (1 - .95));\n            for (n = t; 0 < n-- && !((r -= e[n]) <= 0););\n            return 64.82 - n / M.STEPS_per_dB;\n          }(e.A, e.A.length), n = 0; n < e.A.length; n++) e.B[n] += e.A[n], e.A[n] = 0;\n        for (n = 0; n < MAX_ORDER; n++) e.linprebuf[n] = e.lstepbuf[n] = e.loutbuf[n] = e.rinprebuf[n] = e.rstepbuf[n] = e.routbuf[n] = 0;\n        return e.totsamp = 0, e.lsum = e.rsum = 0, t;\n      };\n    }\n    M.STEPS_per_dB = 100, M.MAX_dB = 120, M.GAIN_NOT_ENOUGH_SAMPLES = -24601, M.GAIN_ANALYSIS_ERROR = 0, M.GAIN_ANALYSIS_OK = 1, M.INIT_GAIN_ANALYSIS_ERROR = 0, M.INIT_GAIN_ANALYSIS_OK = 1, M.MAX_ORDER = M.YULE_ORDER = 10, M.MAX_SAMPLES_PER_WINDOW = (M.MAX_SAMP_FREQ = 48e3) * (M.RMS_WINDOW_TIME_NUMERATOR = 1) / (M.RMS_WINDOW_TIME_DENOMINATOR = 20) + 1, e.exports = M;\n  }, function (e, t) {\n    e.exports = function (e) {\n      this.bits = e;\n    };\n  }, function (e, t, n) {\n    var a = n(0),\n      R = a.System,\n      A = (a.VbrMode, a.Float, a.ShortBlock, a.Util, a.Arrays),\n      B = (a.new_array_n, a.new_byte),\n      E = (a.new_double, a.new_float, a.new_float_n),\n      T = a.new_int,\n      k = (a.new_int_n, a.assert),\n      P = n(14),\n      L = n(7),\n      I = n(1),\n      V = n(4);\n    function r() {\n      var _ = this,\n        m = 32,\n        c = null,\n        u = null,\n        s = null,\n        h = null;\n      this.setModules = function (e, t, n, a) {\n        c = e, u = t, s = n, h = a;\n      };\n      var p = null,\n        l = 0,\n        d = 0,\n        b = 0;\n      function v(e, t, n) {\n        for (k(n < m - 2); 0 < n;) {\n          var a;\n          0 == b && (b = 8, k(++d < Lame.LAME_MAXMP3BUFFER), k(e.header[e.w_ptr].write_timing >= l), e.header[e.w_ptr].write_timing == l && (r = e, R.arraycopy(r.header[r.w_ptr].buf, 0, p, d, r.sideinfo_len), d += r.sideinfo_len, l += 8 * r.sideinfo_len, r.w_ptr = r.w_ptr + 1 & V.MAX_HEADER_BUF - 1), p[d] = 0), a = Math.min(n, b), b -= a, k((n -= a) < m), k(b < m), p[d] |= t >> n << b, l += a;\n        }\n        var r;\n      }\n      function i(e, t, n) {\n        for (k(n < m - 2); 0 < n;) {\n          var a;\n          0 == b && (b = 8, k(++d < Lame.LAME_MAXMP3BUFFER), p[d] = 0), a = Math.min(n, b), b -= a, k((n -= a) < m), k(b < m), p[d] |= t >> n << b, l += a;\n        }\n      }\n      function o(e, t) {\n        var n,\n          a = e.internal_flags;\n        if (k(0 <= t), 8 <= t && (v(a, 76, 8), t -= 8), 8 <= t && (v(a, 65, 8), t -= 8), 8 <= t && (v(a, 77, 8), t -= 8), 8 <= t && (v(a, 69, 8), t -= 8), 32 <= t) {\n          var r = s.getLameShortVersion();\n          if (32 <= t) for (n = 0; n < r.length && 8 <= t; ++n) t -= 8, v(a, r.charAt(n), 8);\n        }\n        for (; 1 <= t; t -= 1) v(a, a.ancillary_flag, 1), a.ancillary_flag ^= e.disable_reservoir ? 0 : 1;\n        k(0 == t);\n      }\n      function f(e, t, n) {\n        for (var a = e.header[e.h_ptr].ptr; 0 < n;) {\n          var r = Math.min(n, 8 - (7 & a));\n          k((n -= r) < m), e.header[e.h_ptr].buf[a >> 3] |= t >> n << 8 - (7 & a) - r, a += r;\n        }\n        e.header[e.h_ptr].ptr = a;\n      }\n      function r(e, t) {\n        e <<= 8;\n        for (var n = 0; n < 8; n++) 0 != (65536 & ((t <<= 1) ^ (e <<= 1))) && (t ^= 32773);\n        return t;\n      }\n      function g(e, t) {\n        var n,\n          a = L.ht[t.count1table_select + 32],\n          r = 0,\n          s = t.big_values,\n          i = t.big_values;\n        for (k(t.count1table_select < 2), n = (t.count1 - t.big_values) / 4; 0 < n; --n) {\n          var o,\n            _ = 0,\n            l = 0;\n          0 != (o = t.l3_enc[s + 0]) && (l += 8, t.xr[i + 0] < 0 && _++, k(o <= 1)), 0 != (o = t.l3_enc[s + 1]) && (l += 4, _ *= 2, t.xr[i + 1] < 0 && _++, k(o <= 1)), 0 != (o = t.l3_enc[s + 2]) && (l += 2, _ *= 2, t.xr[i + 2] < 0 && _++, k(o <= 1)), 0 != (o = t.l3_enc[s + 3]) && (l++, _ *= 2, t.xr[i + 3] < 0 && _++, k(o <= 1)), s += 4, i += 4, v(e, _ + a.table[l], a.hlen[l]), r += a.hlen[l];\n        }\n        return r;\n      }\n      function w(e, t, n, a, r) {\n        var s = L.ht[t],\n          i = 0;\n        if (k(t < 32), 0 == t) return i;\n        for (var o = n; o < a; o += 2) {\n          var _ = 0,\n            l = 0,\n            f = s.xlen,\n            c = s.xlen,\n            u = 0,\n            h = r.l3_enc[o],\n            p = r.l3_enc[o + 1];\n          if (0 != h && (r.xr[o] < 0 && u++, _--), 15 < t) {\n            if (14 < h) {\n              var d = h - 15;\n              k(d <= s.linmax), u |= d << 1, l = f, h = 15;\n            }\n            if (14 < p) {\n              var b = p - 15;\n              k(b <= s.linmax), u <<= f, u |= b, l += f, p = 15;\n            }\n            c = 16;\n          }\n          0 != p && (u <<= 1, r.xr[o + 1] < 0 && u++, _--), k((h | p) < 16), h = h * c + p, l -= _, _ += s.hlen[h], k(_ <= m), k(l <= m), v(e, s.table[h], _), v(e, u, l), i += _ + l;\n        }\n        return i;\n      }\n      function S(e, t) {\n        var n = 3 * e.scalefac_band.s[3];\n        n > t.big_values && (n = t.big_values);\n        var a = w(e, t.table_select[0], 0, n, t);\n        return a += w(e, t.table_select[1], n, t.big_values, t);\n      }\n      function y(e, t) {\n        var n, a, r, s;\n        n = t.big_values, k(0 <= n && n <= 576);\n        var i = t.region0_count + 1;\n        return k(0 <= i), k(i < e.scalefac_band.l.length), r = e.scalefac_band.l[i], i += t.region1_count + 1, k(0 <= i), k(i < e.scalefac_band.l.length), n < r && (r = n), n < (s = e.scalefac_band.l[i]) && (s = n), a = w(e, t.table_select[0], 0, r, t), a += w(e, t.table_select[1], r, s, t), a += w(e, t.table_select[2], s, n, t);\n      }\n      function M() {\n        this.total = 0;\n      }\n      function x(e, t) {\n        var n,\n          a,\n          r,\n          s,\n          i,\n          o = e.internal_flags;\n        return i = o.w_ptr, -1 == (s = o.h_ptr - 1) && (s = V.MAX_HEADER_BUF - 1), n = o.header[s].write_timing - l, 0 <= (t.total = n) && (a = 1 + s - i, s < i && (a = 1 + s - i + V.MAX_HEADER_BUF), n -= 8 * a * o.sideinfo_len), n += r = _.getframebits(e), t.total += r, t.total % 8 != 0 ? t.total = 1 + t.total / 8 : t.total = t.total / 8, t.total += d + 1, n < 0 && R.err.println(\"strange error flushing buffer ... \\n\"), n;\n      }\n      this.getframebits = function (e) {\n        var t,\n          n = e.internal_flags;\n        return t = 0 != n.bitrate_index ? L.bitrate_table[e.version][n.bitrate_index] : e.brate, k(8 <= t && t <= 640), 8 * (0 | 72e3 * (e.version + 1) * t / e.out_samplerate + n.padding);\n      }, this.CRC_writeheader = function (e, t) {\n        var n = 65535;\n        n = r(255 & t[2], n), n = r(255 & t[3], n);\n        for (var a = 6; a < e.sideinfo_len; a++) n = r(255 & t[a], n);\n        t[4] = byte(n >> 8), t[5] = byte(255 & n);\n      }, this.flush_bitstream = function (e) {\n        var t,\n          n,\n          a = e.internal_flags,\n          r = a.h_ptr - 1;\n        if (-1 == r && (r = V.MAX_HEADER_BUF - 1), t = a.l3_side, !((n = x(e, new M())) < 0)) {\n          if (o(e, n), k(a.header[r].write_timing + this.getframebits(e) == l), a.ResvSize = 0, t.main_data_begin = 0, a.findReplayGain) {\n            var s = c.GetTitleGain(a.rgdata);\n            k(NEQ(s, GainAnalysis.GAIN_NOT_ENOUGH_SAMPLES)), a.RadioGain = 0 | Math.floor(10 * s + .5);\n          }\n          a.findPeakSample && (a.noclipGainChange = 0 | Math.ceil(20 * Math.log10(a.PeakSample / 32767) * 10), 0 < a.noclipGainChange && (EQ(e.scale, 1) || EQ(e.scale, 0)) ? a.noclipScale = Math.floor(32767 / a.PeakSample * 100) / 100 : a.noclipScale = -1);\n        }\n      }, this.add_dummy_byte = function (e, t, n) {\n        for (var a, r = e.internal_flags; 0 < n--;) for (i(0, t, 8), a = 0; a < V.MAX_HEADER_BUF; ++a) r.header[a].write_timing += 8;\n      }, this.format_bitstream = function (e) {\n        var t,\n          n = e.internal_flags;\n        t = n.l3_side;\n        var a = this.getframebits(e);\n        o(e, t.resvDrain_pre), function (e, t) {\n          var n,\n            a,\n            r,\n            s = e.internal_flags;\n          if (n = s.l3_side, s.header[s.h_ptr].ptr = 0, A.fill(s.header[s.h_ptr].buf, 0, s.sideinfo_len, 0), e.out_samplerate < 16e3 ? f(s, 4094, 12) : f(s, 4095, 12), f(s, e.version, 1), f(s, 1, 2), f(s, e.error_protection ? 0 : 1, 1), f(s, s.bitrate_index, 4), f(s, s.samplerate_index, 2), f(s, s.padding, 1), f(s, e.extension, 1), f(s, e.mode.ordinal(), 2), f(s, s.mode_ext, 2), f(s, e.copyright, 1), f(s, e.original, 1), f(s, e.emphasis, 2), e.error_protection && f(s, 0, 16), 1 == e.version) {\n            for (k(0 <= n.main_data_begin), f(s, n.main_data_begin, 9), 2 == s.channels_out ? f(s, n.private_bits, 3) : f(s, n.private_bits, 5), r = 0; r < s.channels_out; r++) {\n              var i;\n              for (i = 0; i < 4; i++) f(s, n.scfsi[r][i], 1);\n            }\n            for (a = 0; a < 2; a++) for (r = 0; r < s.channels_out; r++) f(s, (o = n.tt[a][r]).part2_3_length + o.part2_length, 12), f(s, o.big_values / 2, 9), f(s, o.global_gain, 8), f(s, o.scalefac_compress, 4), o.block_type != I.NORM_TYPE ? (f(s, 1, 1), f(s, o.block_type, 2), f(s, o.mixed_block_flag, 1), 14 == o.table_select[0] && (o.table_select[0] = 16), f(s, o.table_select[0], 5), 14 == o.table_select[1] && (o.table_select[1] = 16), f(s, o.table_select[1], 5), f(s, o.subblock_gain[0], 3), f(s, o.subblock_gain[1], 3), f(s, o.subblock_gain[2], 3)) : (f(s, 0, 1), 14 == o.table_select[0] && (o.table_select[0] = 16), f(s, o.table_select[0], 5), 14 == o.table_select[1] && (o.table_select[1] = 16), f(s, o.table_select[1], 5), 14 == o.table_select[2] && (o.table_select[2] = 16), f(s, o.table_select[2], 5), k(0 <= o.region0_count && o.region0_count < 16), k(0 <= o.region1_count && o.region1_count < 8), f(s, o.region0_count, 4), f(s, o.region1_count, 3)), f(s, o.preflag, 1), f(s, o.scalefac_scale, 1), f(s, o.count1table_select, 1);\n          } else for (k(0 <= n.main_data_begin), f(s, n.main_data_begin, 8), f(s, n.private_bits, s.channels_out), r = a = 0; r < s.channels_out; r++) {\n            var o;\n            f(s, (o = n.tt[a][r]).part2_3_length + o.part2_length, 12), f(s, o.big_values / 2, 9), f(s, o.global_gain, 8), f(s, o.scalefac_compress, 9), o.block_type != I.NORM_TYPE ? (f(s, 1, 1), f(s, o.block_type, 2), f(s, o.mixed_block_flag, 1), 14 == o.table_select[0] && (o.table_select[0] = 16), f(s, o.table_select[0], 5), 14 == o.table_select[1] && (o.table_select[1] = 16), f(s, o.table_select[1], 5), f(s, o.subblock_gain[0], 3), f(s, o.subblock_gain[1], 3), f(s, o.subblock_gain[2], 3)) : (f(s, 0, 1), 14 == o.table_select[0] && (o.table_select[0] = 16), f(s, o.table_select[0], 5), 14 == o.table_select[1] && (o.table_select[1] = 16), f(s, o.table_select[1], 5), 14 == o.table_select[2] && (o.table_select[2] = 16), f(s, o.table_select[2], 5), k(0 <= o.region0_count && o.region0_count < 16), k(0 <= o.region1_count && o.region1_count < 8), f(s, o.region0_count, 4), f(s, o.region1_count, 3)), f(s, o.scalefac_scale, 1), f(s, o.count1table_select, 1);\n          }\n          e.error_protection && CRC_writeheader(s, s.header[s.h_ptr].buf);\n          var _ = s.h_ptr;\n          k(s.header[_].ptr == 8 * s.sideinfo_len), s.h_ptr = _ + 1 & V.MAX_HEADER_BUF - 1, s.header[s.h_ptr].write_timing = s.header[_].write_timing + t, s.h_ptr == s.w_ptr && R.err.println(\"Error: MAX_HEADER_BUF too small in bitstream.c \\n\");\n        }(e, a);\n        var r = 8 * n.sideinfo_len;\n        if (r += function (e) {\n          var t,\n            n,\n            a,\n            r,\n            s = 0,\n            i = e.internal_flags,\n            o = i.l3_side;\n          if (1 == e.version) for (t = 0; t < 2; t++) for (n = 0; n < i.channels_out; n++) {\n            var _ = o.tt[t][n],\n              l = P.slen1_tab[_.scalefac_compress],\n              f = P.slen2_tab[_.scalefac_compress];\n            for (a = r = 0; a < _.sfbdivide; a++) -1 != _.scalefac[a] && (v(i, _.scalefac[a], l), r += l);\n            for (; a < _.sfbmax; a++) -1 != _.scalefac[a] && (v(i, _.scalefac[a], f), r += f);\n            k(r == _.part2_length), _.block_type == I.SHORT_TYPE ? r += S(i, _) : r += y(i, _), r += g(i, _), k(r == _.part2_3_length + _.part2_length), s += r;\n          } else for (n = t = 0; n < i.channels_out; n++) {\n            _ = o.tt[t][n];\n            var c,\n              u,\n              h = 0;\n            if (k(null != _.sfb_partition_table), u = a = r = 0, _.block_type == I.SHORT_TYPE) {\n              for (; u < 4; u++) {\n                var p = _.sfb_partition_table[u] / 3,\n                  d = _.slen[u];\n                for (c = 0; c < p; c++, a++) v(i, Math.max(_.scalefac[3 * a + 0], 0), d), v(i, Math.max(_.scalefac[3 * a + 1], 0), d), v(i, Math.max(_.scalefac[3 * a + 2], 0), d), h += 3 * d;\n              }\n              r += S(i, _);\n            } else {\n              for (; u < 4; u++) for (p = _.sfb_partition_table[u], d = _.slen[u], c = 0; c < p; c++, a++) v(i, Math.max(_.scalefac[a], 0), d), h += d;\n              r += y(i, _);\n            }\n            r += g(i, _), k(r == _.part2_3_length), k(h == _.part2_length), s += h + r;\n          }\n          return s;\n        }(e), o(e, t.resvDrain_post), r += t.resvDrain_post, t.main_data_begin += (a - r) / 8, x(e, new M()) != n.ResvSize && R.err.println(\"Internal buffer inconsistency. flushbits <> ResvSize\"), 8 * t.main_data_begin != n.ResvSize && (R.err.printf(\"bit reservoir error: \\nl3_side.main_data_begin: %d \\nResvoir size:             %d \\nresv drain (post)         %d \\nresv drain (pre)          %d \\nheader and sideinfo:      %d \\ndata bits:                %d \\ntotal bits:               %d (remainder: %d) \\nbitsperframe:             %d \\n\", 8 * t.main_data_begin, n.ResvSize, t.resvDrain_post, t.resvDrain_pre, 8 * n.sideinfo_len, r - t.resvDrain_post - 8 * n.sideinfo_len, r, r % 8, a), R.err.println(\"This is a fatal error.  It has several possible causes:\"), R.err.println(\"90%%  LAME compiled with buggy version of gcc using advanced optimizations\"), R.err.println(\" 9%%  Your system is overclocked\"), R.err.println(\" 1%%  bug in LAME encoding library\"), n.ResvSize = 8 * t.main_data_begin), k(l % 8 == 0), 1e9 < l) {\n          var s;\n          for (s = 0; s < V.MAX_HEADER_BUF; ++s) n.header[s].write_timing -= l;\n          l = 0;\n        }\n        return 0;\n      }, this.copy_buffer = function (e, t, n, a, r) {\n        var s = d + 1;\n        if (s <= 0) return 0;\n        if (0 != a && a < s) return -1;\n        if (R.arraycopy(p, 0, t, n, s), d = -1, (b = 0) != r) {\n          var i = T(1);\n          if (i[0] = e.nMusicCRC, h.updateMusicCRC(i, t, n, s), e.nMusicCRC = i[0], 0 < s && (e.VBR_seek_table.nBytesWritten += s), e.decode_on_the_fly) for (var o, _ = E([2, 1152]), l = s, f = -1; 0 != f;) if (f = u.hip_decode1_unclipped(e.hip, t, n, l, _[0], _[1]), l = 0, -1 == f && (f = 0), 0 < f) {\n            if (k(f <= 1152), e.findPeakSample) {\n              for (o = 0; o < f; o++) _[0][o] > e.PeakSample ? e.PeakSample = _[0][o] : -_[0][o] > e.PeakSample && (e.PeakSample = -_[0][o]);\n              if (1 < e.channels_out) for (o = 0; o < f; o++) _[1][o] > e.PeakSample ? e.PeakSample = _[1][o] : -_[1][o] > e.PeakSample && (e.PeakSample = -_[1][o]);\n            }\n            if (e.findReplayGain && c.AnalyzeSamples(e.rgdata, _[0], 0, _[1], 0, f, e.channels_out) == GainAnalysis.GAIN_ANALYSIS_ERROR) return -6;\n          }\n        }\n        return s;\n      }, this.init_bit_stream_w = function (e) {\n        p = B(Lame.LAME_MAXMP3BUFFER), e.h_ptr = e.w_ptr = 0, e.header[e.h_ptr].write_timing = 0, d = -1, l = b = 0;\n      };\n    }\n    r.EQ = function (e, t) {\n      return Math.abs(e) > Math.abs(t) ? Math.abs(e - t) <= 1e-6 * Math.abs(e) : Math.abs(e - t) <= 1e-6 * Math.abs(t);\n    }, r.NEQ = function (e, t) {\n      return !r.EQ(e, t);\n    }, e.exports = r;\n  }, function (e, t, n) {\n    var a = n(0),\n      x = a.System,\n      R = (a.VbrMode, a.Float, a.ShortBlock, a.Util, a.Arrays),\n      A = (a.new_array_n, a.new_byte, a.new_double, a.new_float, a.new_float_n, a.new_int),\n      B = (a.new_int_n, a.assert),\n      E = n(1),\n      T = n(7),\n      k = n(6),\n      P = n(15);\n    e.exports = function e() {\n      var S = null;\n      function m(e) {\n        this.bits = 0 | e;\n      }\n      this.qupvt = null, this.setModules = function (e) {\n        this.qupvt = e, S = e;\n      };\n      var r = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 1], [1, 1], [1, 1], [1, 2], [2, 2], [2, 3], [2, 3], [3, 4], [3, 4], [3, 4], [4, 5], [4, 5], [4, 6], [5, 6], [5, 6], [5, 7], [6, 7], [6, 7]];\n      function y(e, t, n, a, r, s) {\n        var i = .5946 / t;\n        for (B(0 < e), e >>= 1; 0 != e--;) r[s++] = i > n[a++] ? 0 : 1, r[s++] = i > n[a++] ? 0 : 1;\n      }\n      function M(e, t, n, a, r, s) {\n        B(0 < e);\n        var i = (e >>= 1) % 2;\n        for (e >>= 1; 0 != e--;) {\n          var o, _, l, f, c, u, h, p;\n          o = n[a++] * t, _ = n[a++] * t, c = 0 | o, l = n[a++] * t, u = 0 | _, f = n[a++] * t, h = 0 | l, o += S.adj43[c], p = 0 | f, _ += S.adj43[u], r[s++] = 0 | o, l += S.adj43[h], r[s++] = 0 | _, f += S.adj43[p], r[s++] = 0 | l, r[s++] = 0 | f;\n        }\n        0 != i && (c = 0 | (o = n[a++] * t), u = 0 | (_ = n[a++] * t), o += S.adj43[c], _ += S.adj43[u], r[s++] = 0 | o, r[s++] = 0 | _);\n      }\n      var o = [1, 2, 5, 7, 7, 10, 10, 13, 13, 13, 13, 13, 13, 13, 13];\n      function v(e, t, n, a) {\n        var r = function (e, t, n) {\n          var a = 0,\n            r = 0;\n          do {\n            var s = e[t++],\n              i = e[t++];\n            a < s && (a = s), r < i && (r = i);\n          } while (t < n);\n          return a < r && (a = r), a;\n        }(e, t, n);\n        switch (r) {\n          case 0:\n            return r;\n          case 1:\n            return function (e, t, n, a) {\n              var r = 0,\n                s = T.ht[1].hlen;\n              do {\n                var i = 2 * e[t + 0] + e[t + 1];\n                t += 2, r += s[i];\n              } while (t < n);\n              return a.bits += r, 1;\n            }(e, t, n, a);\n          case 2:\n          case 3:\n            return function (e, t, n, a, r) {\n              var s,\n                i,\n                o = 0,\n                _ = T.ht[a].xlen;\n              i = 2 == a ? T.table23 : T.table56;\n              do {\n                var l = e[t + 0] * _ + e[t + 1];\n                t += 2, o += i[l];\n              } while (t < n);\n              return (s = 65535 & o) < (o >>= 16) && (o = s, a++), r.bits += o, a;\n            }(e, t, n, o[r - 1], a);\n          case 4:\n          case 5:\n          case 6:\n          case 7:\n          case 8:\n          case 9:\n          case 10:\n          case 11:\n          case 12:\n          case 13:\n          case 14:\n          case 15:\n            return function (e, t, n, a, r) {\n              var s = 0,\n                i = 0,\n                o = 0,\n                _ = T.ht[a].xlen,\n                l = T.ht[a].hlen,\n                f = T.ht[a + 1].hlen,\n                c = T.ht[a + 2].hlen;\n              do {\n                var u = e[t + 0] * _ + e[t + 1];\n                t += 2, s += l[u], i += f[u], o += c[u];\n              } while (t < n);\n              var h = a;\n              return i < s && (s = i, h++), o < s && (s = o, h = a + 2), r.bits += s, h;\n            }(e, t, n, o[r - 1], a);\n          default:\n            if (r > P.IXMAX_VAL) return a.bits = P.LARGE_BITS, -1;\n            var s, i;\n            for (r -= 15, s = 24; s < 32 && !(T.ht[s].linmax >= r); s++);\n            for (i = s - 8; i < 24 && !(T.ht[i].linmax >= r); i++);\n            return function (e, t, n, a, r, s) {\n              var i,\n                o = 65536 * T.ht[a].xlen + T.ht[r].xlen,\n                _ = 0;\n              do {\n                var l = e[t++],\n                  f = e[t++];\n                0 != l && (14 < l && (l = 15, _ += o), l *= 16), 0 != f && (14 < f && (f = 15, _ += o), l += f), _ += T.largetbl[l];\n              } while (t < n);\n              return (i = 65535 & _) < (_ >>= 16) && (_ = i, a = r), s.bits += _, a;\n            }(e, t, n, i, s, a);\n        }\n      }\n      function h(e, t, n, a, r, s, i, o) {\n        for (var _ = t.big_values, l = 2; l < E.SBMAX_l + 1; l++) {\n          var f = e.scalefac_band.l[l];\n          if (_ <= f) break;\n          var c = r[l - 2] + t.count1bits;\n          if (n.part2_3_length <= c) break;\n          var u = new m(c),\n            h = v(a, f, _, u);\n          c = u.bits, n.part2_3_length <= c || (n.assign(t), n.part2_3_length = c, n.region0_count = s[l - 2], n.region1_count = l - 2 - s[l - 2], n.table_select[0] = i[l - 2], n.table_select[1] = o[l - 2], n.table_select[2] = h);\n        }\n      }\n      this.noquant_count_bits = function (e, t, n) {\n        var a = t.l3_enc,\n          r = Math.min(576, t.max_nonzero_coeff + 2 >> 1 << 1);\n        for (null != n && (n.sfb_count1 = 0); 1 < r && 0 == (a[r - 1] | a[r - 2]); r -= 2);\n        t.count1 = r;\n        for (var s = 0, i = 0; 3 < r; r -= 4) {\n          var o;\n          if (1 < (2147483647 & (a[r - 1] | a[r - 2] | a[r - 3] | a[r - 4]))) break;\n          o = 2 * (2 * (2 * a[r - 4] + a[r - 3]) + a[r - 2]) + a[r - 1], s += T.t32l[o], i += T.t33l[o];\n        }\n        var _ = s;\n        if (t.count1table_select = 0, i < s && (_ = i, t.count1table_select = 1), t.count1bits = _, 0 == (t.big_values = r)) return _;\n        if (t.block_type == E.SHORT_TYPE) (s = 3 * e.scalefac_band.s[3]) > t.big_values && (s = t.big_values), i = t.big_values;else if (t.block_type == E.NORM_TYPE) {\n          if (B(r <= 576), s = t.region0_count = e.bv_scf[r - 2], i = t.region1_count = e.bv_scf[r - 1], B(s + i + 2 < E.SBPSY_l), i = e.scalefac_band.l[s + i + 2], s = e.scalefac_band.l[s + 1], i < r) {\n            var l = new m(_);\n            t.table_select[2] = v(a, i, r, l), _ = l.bits;\n          }\n        } else t.region0_count = 7, t.region1_count = E.SBMAX_l - 1 - 7 - 1, (i = r) < (s = e.scalefac_band.l[8]) && (s = i);\n        if (s = Math.min(s, r), i = Math.min(i, r), B(0 <= s), B(0 <= i), 0 < s && (l = new m(_), t.table_select[0] = v(a, 0, s, l), _ = l.bits), s < i && (l = new m(_), t.table_select[1] = v(a, s, i, l), _ = l.bits), 2 == e.use_best_huffman && (t.part2_3_length = _, best_huffman_divide(e, t), _ = t.part2_3_length), null != n && t.block_type == E.NORM_TYPE) {\n          for (var f = 0; e.scalefac_band.l[f] < t.big_values;) f++;\n          n.sfb_count1 = f;\n        }\n        return _;\n      }, this.count_bits = function (e, t, n, a) {\n        var r = n.l3_enc,\n          s = P.IXMAX_VAL / S.IPOW20(n.global_gain);\n        if (n.xrpow_max > s) return P.LARGE_BITS;\n        if (function (e, t, n, a, r) {\n          var s,\n            i,\n            o,\n            _ = 0,\n            l = 0,\n            f = 0,\n            c = 0,\n            u = t,\n            h = 0,\n            p = u,\n            d = 0,\n            b = e,\n            m = 0;\n          for (o = null != r && a.global_gain == r.global_gain, i = a.block_type == E.SHORT_TYPE ? 38 : 21, s = 0; s <= i; s++) {\n            var v = -1;\n            if ((o || a.block_type == E.NORM_TYPE) && (v = a.global_gain - (a.scalefac[s] + (0 != a.preflag ? S.pretab[s] : 0) << a.scalefac_scale + 1) - 8 * a.subblock_gain[a.window[s]]), B(0 <= a.width[s]), o && r.step[s] == v) 0 != l && (M(l, n, b, m, p, d), l = 0), 0 != f && (y(f, n, b, m, p, d), f = 0);else {\n              var g,\n                w = a.width[s];\n              if (_ + a.width[s] > a.max_nonzero_coeff && (g = a.max_nonzero_coeff - _ + 1, R.fill(t, a.max_nonzero_coeff, 576, 0), (w = g) < 0 && (w = 0), s = i + 1), 0 == l && 0 == f && (p = u, d = h, b = e, m = c), null != r && 0 < r.sfb_count1 && s >= r.sfb_count1 && 0 < r.step[s] && v >= r.step[s] ? (0 != l && (M(l, n, b, m, p, d), l = 0, p = u, d = h, b = e, m = c), f += w) : (0 != f && (y(f, n, b, m, p, d), f = 0, p = u, d = h, b = e, m = c), l += w), w <= 0) {\n                0 != f && (y(f, n, b, m, p, d), f = 0), 0 != l && (M(l, n, b, m, p, d), l = 0);\n                break;\n              }\n            }\n            s <= i && (h += a.width[s], c += a.width[s], _ += a.width[s]);\n          }\n          0 != l && (M(l, n, b, m, p, d), l = 0), 0 != f && (y(f, n, b, m, p, d), f = 0);\n        }(t, r, S.IPOW20(n.global_gain), n, a), 0 != (2 & e.substep_shaping)) for (var i = 0, o = n.global_gain + n.scalefac_scale, _ = .634521682242439 / S.IPOW20(o), l = 0; l < n.sfbmax; l++) {\n          var f,\n            c = n.width[l];\n          if (B(0 <= c), 0 == e.pseudohalf[l]) i += c;else for (f = i, i += c; f < i; ++f) r[f] = t[f] >= _ ? r[f] : 0;\n        }\n        return this.noquant_count_bits(e, n, a);\n      }, this.best_huffman_divide = function (e, t) {\n        var n = new k(),\n          a = t.l3_enc,\n          r = A(23),\n          s = A(23),\n          i = A(23),\n          o = A(23);\n        if (t.block_type != E.SHORT_TYPE || 1 != e.mode_gr) {\n          n.assign(t), t.block_type == E.NORM_TYPE && (function (e, t, n, a, r, s, i) {\n            for (var o = t.big_values, _ = 0; _ <= 22; _++) a[_] = P.LARGE_BITS;\n            for (_ = 0; _ < 16; _++) {\n              var l = e.scalefac_band.l[_ + 1];\n              if (o <= l) break;\n              var f = 0,\n                c = new m(f),\n                u = v(n, 0, l, c);\n              f = c.bits;\n              for (var h = 0; h < 8; h++) {\n                var p = e.scalefac_band.l[_ + h + 2];\n                if (o <= p) break;\n                var d = f,\n                  b = v(n, l, p, c = new m(d));\n                d = c.bits, a[_ + h] > d && (a[_ + h] = d, s[(r[_ + h] = _) + h] = u, i[_ + h] = b);\n              }\n            }\n          }(e, t, a, r, s, i, o), h(e, n, t, a, r, s, i, o));\n          var _ = n.big_values;\n          if (!(0 == _ || 1 < (a[_ - 2] | a[_ - 1]) || 576 < (_ = t.count1 + 2))) {\n            n.assign(t), n.count1 = _;\n            var l = 0,\n              f = 0;\n            for (B(_ <= 576); _ > n.big_values; _ -= 4) {\n              var c = 2 * (2 * (2 * a[_ - 4] + a[_ - 3]) + a[_ - 2]) + a[_ - 1];\n              l += T.t32l[c], f += T.t33l[c];\n            }\n            if (n.big_values = _, n.count1table_select = 0, f < l && (l = f, n.count1table_select = 1), n.count1bits = l, n.block_type == E.NORM_TYPE) h(e, n, t, a, r, s, i, o);else {\n              if (n.part2_3_length = l, _ < (l = e.scalefac_band.l[8]) && (l = _), 0 < l) {\n                var u = new m(n.part2_3_length);\n                n.table_select[0] = v(a, 0, l, u), n.part2_3_length = u.bits;\n              }\n              l < _ && (u = new m(n.part2_3_length), n.table_select[1] = v(a, l, _, u), n.part2_3_length = u.bits), t.part2_3_length > n.part2_3_length && t.assign(n);\n            }\n          }\n        }\n      };\n      var u = [1, 1, 1, 1, 8, 2, 2, 2, 4, 4, 4, 8, 8, 8, 16, 16],\n        p = [1, 2, 4, 8, 1, 2, 4, 8, 2, 4, 8, 2, 4, 8, 4, 8],\n        d = [0, 0, 0, 0, 3, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4],\n        b = [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3];\n      e.slen1_tab = d, e.slen2_tab = b, this.best_scalefac_store = function (e, t, n, a) {\n        var r,\n          s,\n          i,\n          o,\n          _ = a.tt[t][n],\n          l = 0;\n        for (r = i = 0; r < _.sfbmax; r++) {\n          var f = _.width[r];\n          for (B(0 <= f), i += f, o = -f; o < 0 && 0 == _.l3_enc[o + i]; o++);\n          0 == o && (_.scalefac[r] = l = -2);\n        }\n        if (0 == _.scalefac_scale && 0 == _.preflag) {\n          var c = 0;\n          for (r = 0; r < _.sfbmax; r++) 0 < _.scalefac[r] && (c |= _.scalefac[r]);\n          if (0 == (1 & c) && 0 != c) {\n            for (r = 0; r < _.sfbmax; r++) 0 < _.scalefac[r] && (_.scalefac[r] >>= 1);\n            _.scalefac_scale = l = 1;\n          }\n        }\n        if (0 == _.preflag && _.block_type != E.SHORT_TYPE && 2 == e.mode_gr) {\n          for (r = 11; r < E.SBPSY_l && !(_.scalefac[r] < S.pretab[r] && -2 != _.scalefac[r]); r++);\n          if (r == E.SBPSY_l) {\n            for (r = 11; r < E.SBPSY_l; r++) 0 < _.scalefac[r] && (_.scalefac[r] -= S.pretab[r]);\n            _.preflag = l = 1;\n          }\n        }\n        for (s = 0; s < 4; s++) a.scfsi[n][s] = 0;\n        for (2 == e.mode_gr && 1 == t && a.tt[0][n].block_type != E.SHORT_TYPE && a.tt[1][n].block_type != E.SHORT_TYPE && (function (e, t) {\n          for (var n, a = t.tt[1][e], r = t.tt[0][e], s = 0; s < T.scfsi_band.length - 1; s++) {\n            for (n = T.scfsi_band[s]; n < T.scfsi_band[s + 1] && !(r.scalefac[n] != a.scalefac[n] && 0 <= a.scalefac[n]); n++);\n            if (n == T.scfsi_band[s + 1]) {\n              for (n = T.scfsi_band[s]; n < T.scfsi_band[s + 1]; n++) a.scalefac[n] = -1;\n              t.scfsi[e][s] = 1;\n            }\n          }\n          var i = 0,\n            o = 0;\n          for (n = 0; n < 11; n++) -1 != a.scalefac[n] && (o++, i < a.scalefac[n] && (i = a.scalefac[n]));\n          for (var _ = 0, l = 0; n < E.SBPSY_l; n++) -1 != a.scalefac[n] && (l++, _ < a.scalefac[n] && (_ = a.scalefac[n]));\n          for (s = 0; s < 16; s++) if (i < u[s] && _ < p[s]) {\n            var f = d[s] * o + b[s] * l;\n            a.part2_length > f && (a.part2_length = f, a.scalefac_compress = s);\n          }\n        }(n, a), l = 0), r = 0; r < _.sfbmax; r++) -2 == _.scalefac[r] && (_.scalefac[r] = 0);\n        0 != l && (2 == e.mode_gr ? this.scale_bitcount(_) : this.scale_bitcount_lsf(e, _));\n      };\n      var _ = [0, 18, 36, 54, 54, 36, 54, 72, 54, 72, 90, 72, 90, 108, 108, 126],\n        l = [0, 18, 36, 54, 51, 35, 53, 71, 52, 70, 88, 69, 87, 105, 104, 122],\n        f = [0, 10, 20, 30, 33, 21, 31, 41, 32, 42, 52, 43, 53, 63, 64, 74];\n      this.scale_bitcount = function (e) {\n        var t,\n          n,\n          a,\n          r = 0,\n          s = 0,\n          i = e.scalefac;\n        if (B(function (e, t) {\n          for (var n = 0; n < t; ++n) if (e[n] < 0) return !1;\n          return !0;\n        }(i, e.sfbmax)), e.block_type == E.SHORT_TYPE) a = _, 0 != e.mixed_block_flag && (a = l);else if (a = f, 0 == e.preflag) {\n          for (n = 11; n < E.SBPSY_l && !(i[n] < S.pretab[n]); n++);\n          if (n == E.SBPSY_l) for (e.preflag = 1, n = 11; n < E.SBPSY_l; n++) i[n] -= S.pretab[n];\n        }\n        for (n = 0; n < e.sfbdivide; n++) r < i[n] && (r = i[n]);\n        for (; n < e.sfbmax; n++) s < i[n] && (s = i[n]);\n        for (e.part2_length = P.LARGE_BITS, t = 0; t < 16; t++) r < u[t] && s < p[t] && e.part2_length > a[t] && (e.part2_length = a[t], e.scalefac_compress = t);\n        return e.part2_length == P.LARGE_BITS;\n      };\n      var g = [[15, 15, 7, 7], [15, 15, 7, 0], [7, 3, 0, 0], [15, 31, 31, 0], [7, 7, 7, 0], [3, 3, 0, 0]];\n      this.scale_bitcount_lsf = function (e, t) {\n        var n,\n          a,\n          r,\n          s,\n          i,\n          o,\n          _,\n          l,\n          f = A(4),\n          c = t.scalefac;\n        for (n = 0 != t.preflag ? 2 : 0, _ = 0; _ < 4; _++) f[_] = 0;\n        if (t.block_type == E.SHORT_TYPE) {\n          a = 1;\n          var u = S.nr_of_sfb_block[n][a];\n          for (r = l = 0; r < 4; r++) for (s = u[r] / 3, _ = 0; _ < s; _++, l++) for (i = 0; i < 3; i++) c[3 * l + i] > f[r] && (f[r] = c[3 * l + i]);\n        } else for (a = 0, u = S.nr_of_sfb_block[n][a], r = l = 0; r < 4; r++) for (s = u[r], _ = 0; _ < s; _++, l++) c[l] > f[r] && (f[r] = c[l]);\n        for (o = !1, r = 0; r < 4; r++) f[r] > g[n][r] && (o = !0);\n        if (!o) {\n          var h, p, d, b;\n          for (t.sfb_partition_table = S.nr_of_sfb_block[n][a], r = 0; r < 4; r++) t.slen[r] = w[f[r]];\n          switch (h = t.slen[0], p = t.slen[1], d = t.slen[2], b = t.slen[3], n) {\n            case 0:\n              t.scalefac_compress = (5 * h + p << 4) + (d << 2) + b;\n              break;\n            case 1:\n              t.scalefac_compress = 400 + (5 * h + p << 2) + d;\n              break;\n            case 2:\n              t.scalefac_compress = 500 + 3 * h + p;\n              break;\n            default:\n              x.err.printf(\"intensity stereo not implemented yet\\n\");\n          }\n        }\n        if (!o) for (B(null != t.sfb_partition_table), r = t.part2_length = 0; r < 4; r++) t.part2_length += t.slen[r] * t.sfb_partition_table[r];\n        return o;\n      };\n      var w = [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4];\n      this.huffman_init = function (e) {\n        for (var t = 2; t <= 576; t += 2) {\n          for (var n, a = 0; e.scalefac_band.l[++a] < t;);\n          for (n = r[a][0]; e.scalefac_band.l[n + 1] > t;) n--;\n          for (n < 0 && (n = r[a][0]), e.bv_scf[t - 2] = n, n = r[a][1]; e.scalefac_band.l[n + e.bv_scf[t - 2] + 2] > t;) n--;\n          n < 0 && (n = r[a][1]), e.bv_scf[t - 1] = n;\n        }\n      };\n    };\n  }, function (e, t, n) {\n    var s = n(10),\n      a = n(0),\n      T = (a.System, a.VbrMode),\n      v = a.Float,\n      A = (a.ShortBlock, a.Util),\n      S = (a.Arrays, a.new_array_n, a.new_byte, a.new_double, a.new_float),\n      g = (a.new_float_n, a.new_int),\n      B = (a.new_int_n, a.assert),\n      k = n(1),\n      w = n(12),\n      y = n(4);\n    function P() {\n      var l = null,\n        d = null,\n        a = null;\n      this.setModules = function (e, t, n) {\n        l = e, d = t, a = n;\n      }, this.IPOW20 = function (e) {\n        return B(0 <= e && e < P.Q_MAX), h[e];\n      };\n      var E = 2220446049250313e-31,\n        f = P.IXMAX_VAL + 2,\n        c = P.Q_MAX,\n        u = P.Q_MAX2,\n        r = 100;\n      this.nr_of_sfb_block = [[[6, 5, 5, 5], [9, 9, 9, 9], [6, 9, 9, 9]], [[6, 5, 7, 3], [9, 9, 12, 6], [6, 9, 12, 6]], [[11, 10, 0, 0], [18, 18, 0, 0], [15, 18, 0, 0]], [[7, 7, 7, 0], [12, 12, 12, 0], [6, 15, 12, 0]], [[6, 6, 6, 3], [12, 9, 9, 6], [6, 12, 9, 6]], [[8, 8, 5, 0], [15, 12, 9, 0], [6, 18, 9, 0]]];\n      var M = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 3, 3, 3, 2, 0];\n      this.pretab = M, this.sfBandIndex = [new s([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464, 522, 576], [0, 4, 8, 12, 18, 24, 32, 42, 56, 74, 100, 132, 174, 192], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]), new s([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 114, 136, 162, 194, 232, 278, 332, 394, 464, 540, 576], [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 136, 180, 192], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]), new s([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464, 522, 576], [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 134, 174, 192], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]), new s([0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 52, 62, 74, 90, 110, 134, 162, 196, 238, 288, 342, 418, 576], [0, 4, 8, 12, 16, 22, 30, 40, 52, 66, 84, 106, 136, 192], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]), new s([0, 4, 8, 12, 16, 20, 24, 30, 36, 42, 50, 60, 72, 88, 106, 128, 156, 190, 230, 276, 330, 384, 576], [0, 4, 8, 12, 16, 22, 28, 38, 50, 64, 80, 100, 126, 192], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]), new s([0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 54, 66, 82, 102, 126, 156, 194, 240, 296, 364, 448, 550, 576], [0, 4, 8, 12, 16, 22, 30, 42, 58, 78, 104, 138, 180, 192], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]), new s([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464, 522, 576], [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 134, 174, 192], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]), new s([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464, 522, 576], [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 134, 174, 192], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]), new s([0, 12, 24, 36, 48, 60, 72, 88, 108, 132, 160, 192, 232, 280, 336, 400, 476, 566, 568, 570, 572, 574, 576], [0, 8, 16, 24, 36, 52, 72, 96, 124, 160, 162, 164, 166, 192], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0])];\n      var x = S(c + u + 1),\n        h = S(c),\n        p = S(f),\n        b = S(f);\n      function m(e, t) {\n        var n = a.ATHformula(t, e);\n        return n -= r, n = Math.pow(10, n / 10 + e.ATHlower);\n      }\n      function R(e) {\n        this.s = e;\n      }\n      this.adj43 = b, this.iteration_init = function (e) {\n        var t,\n          n = e.internal_flags,\n          a = n.l3_side;\n        if (0 == n.iteration_init_init) {\n          for (n.iteration_init_init = 1, a.main_data_begin = 0, function (e) {\n            for (var t = e.internal_flags.ATH.l, n = e.internal_flags.ATH.psfb21, a = e.internal_flags.ATH.s, r = e.internal_flags.ATH.psfb12, s = e.internal_flags, i = e.out_samplerate, o = 0; o < k.SBMAX_l; o++) {\n              var _ = s.scalefac_band.l[o],\n                l = s.scalefac_band.l[o + 1];\n              t[o] = v.MAX_VALUE;\n              for (var f = _; f < l; f++) {\n                var c = m(e, f * i / 1152);\n                t[o] = Math.min(t[o], c);\n              }\n            }\n            for (o = 0; o < k.PSFB21; o++) for (_ = s.scalefac_band.psfb21[o], l = s.scalefac_band.psfb21[o + 1], n[o] = v.MAX_VALUE, f = _; f < l; f++) c = m(e, f * i / 1152), n[o] = Math.min(n[o], c);\n            for (o = 0; o < k.SBMAX_s; o++) {\n              for (_ = s.scalefac_band.s[o], l = s.scalefac_band.s[o + 1], a[o] = v.MAX_VALUE, f = _; f < l; f++) c = m(e, f * i / 384), a[o] = Math.min(a[o], c);\n              a[o] *= s.scalefac_band.s[o + 1] - s.scalefac_band.s[o];\n            }\n            for (o = 0; o < k.PSFB12; o++) {\n              for (_ = s.scalefac_band.psfb12[o], l = s.scalefac_band.psfb12[o + 1], r[o] = v.MAX_VALUE, f = _; f < l; f++) c = m(e, f * i / 384), r[o] = Math.min(r[o], c);\n              r[o] *= s.scalefac_band.s[13] - s.scalefac_band.s[12];\n            }\n            if (e.noATH) {\n              for (o = 0; o < k.SBMAX_l; o++) t[o] = 1e-20;\n              for (o = 0; o < k.PSFB21; o++) n[o] = 1e-20;\n              for (o = 0; o < k.SBMAX_s; o++) a[o] = 1e-20;\n              for (o = 0; o < k.PSFB12; o++) r[o] = 1e-20;\n            }\n            s.ATH.floor = 10 * Math.log10(m(e, -1));\n          }(e), p[0] = 0, t = 1; t < f; t++) p[t] = Math.pow(t, 4 / 3);\n          for (t = 0; t < f - 1; t++) b[t] = t + 1 - Math.pow(.5 * (p[t] + p[t + 1]), .75);\n          for (b[t] = .5, t = 0; t < c; t++) h[t] = Math.pow(2, -.1875 * (t - 210));\n          for (t = 0; t <= c + u; t++) x[t] = Math.pow(2, .25 * (t - 210 - u));\n          var r, s, i, o;\n          for (l.huffman_init(n), 32 <= (t = e.exp_nspsytune >> 2 & 63) && (t -= 64), r = Math.pow(10, t / 4 / 10), 32 <= (t = e.exp_nspsytune >> 8 & 63) && (t -= 64), s = Math.pow(10, t / 4 / 10), 32 <= (t = e.exp_nspsytune >> 14 & 63) && (t -= 64), i = Math.pow(10, t / 4 / 10), 32 <= (t = e.exp_nspsytune >> 20 & 63) && (t -= 64), o = i * Math.pow(10, t / 4 / 10), t = 0; t < k.SBMAX_l; t++) {\n            _ = t <= 6 ? r : t <= 13 ? s : t <= 20 ? i : o, n.nsPsy.longfact[t] = _;\n          }\n          for (t = 0; t < k.SBMAX_s; t++) {\n            var _;\n            _ = t <= 5 ? r : t <= 10 ? s : t <= 11 ? i : o, n.nsPsy.shortfact[t] = _;\n          }\n        }\n      }, this.on_pe = function (e, t, n, a, r, s) {\n        var i,\n          o,\n          _ = e.internal_flags,\n          l = 0,\n          f = g(2),\n          c = new w(l),\n          u = d.ResvMaxBits(e, a, c, s),\n          h = (l = c.bits) + u;\n        for (h > y.MAX_BITS_PER_GRANULE && (h = y.MAX_BITS_PER_GRANULE), o = i = 0; o < _.channels_out; ++o) n[o] = Math.min(y.MAX_BITS_PER_CHANNEL, l / _.channels_out), f[o] = 0 | n[o] * t[r][o] / 700 - n[o], f[o] > 3 * a / 4 && (f[o] = 3 * a / 4), f[o] < 0 && (f[o] = 0), f[o] + n[o] > y.MAX_BITS_PER_CHANNEL && (f[o] = Math.max(0, y.MAX_BITS_PER_CHANNEL - n[o])), i += f[o];\n        if (u < i) for (o = 0; o < _.channels_out; ++o) f[o] = u * f[o] / i;\n        for (o = 0; o < _.channels_out; ++o) n[o] += f[o], u -= f[o];\n        for (o = i = 0; o < _.channels_out; ++o) i += n[o];\n        if (i > y.MAX_BITS_PER_GRANULE) {\n          var p = 0;\n          for (o = 0; o < _.channels_out; ++o) n[o] *= y.MAX_BITS_PER_GRANULE, n[o] /= i, p += n[o];\n          B(p <= y.MAX_BITS_PER_GRANULE);\n        }\n        return h;\n      }, this.reduce_side = function (e, t, n, a) {\n        B(a <= y.MAX_BITS_PER_GRANULE), B(e[0] + e[1] <= y.MAX_BITS_PER_GRANULE);\n        var r = .33 * (.5 - t) / .5;\n        r < 0 && (r = 0), .5 < r && (r = .5);\n        var s = 0 | .5 * r * (e[0] + e[1]);\n        s > y.MAX_BITS_PER_CHANNEL - e[0] && (s = y.MAX_BITS_PER_CHANNEL - e[0]), s < 0 && (s = 0), 125 <= e[1] && (125 < e[1] - s ? (e[0] < n && (e[0] += s), e[1] -= s) : (e[0] += e[1] - 125, e[1] = 125)), a < (s = e[0] + e[1]) && (e[0] = a * e[0] / s, e[1] = a * e[1] / s), B(e[0] <= y.MAX_BITS_PER_CHANNEL), B(e[1] <= y.MAX_BITS_PER_CHANNEL), B(e[0] + e[1] <= y.MAX_BITS_PER_GRANULE);\n      }, this.athAdjust = function (e, t, n) {\n        var a = 90.30873362,\n          r = A.FAST_LOG10_X(t, 10),\n          s = e * e,\n          i = 0;\n        return r -= n, 1e-20 < s && (i = 1 + A.FAST_LOG10_X(s, 10 / a)), i < 0 && (i = 0), r *= i, r += n + a - 94.82444863, Math.pow(10, .1 * r);\n      }, this.calc_xmin = function (e, t, n, a) {\n        var r,\n          s = 0,\n          i = e.internal_flags,\n          o = 0,\n          _ = 0,\n          l = i.ATH,\n          f = n.xr,\n          c = e.VBR == T.vbr_mtrh ? 1 : 0,\n          u = i.masking_lower;\n        for (e.VBR != T.vbr_mtrh && e.VBR != T.vbr_mt || (u = 1), r = 0; r < n.psy_lmax; r++) {\n          w = (g = e.VBR == T.vbr_rh || e.VBR == T.vbr_mtrh ? athAdjust(l.adjust, l.l[r], l.floor) : l.adjust * l.l[r]) / (b = n.width[r]), S = E, R = b >> 1, x = 0;\n          do {\n            x += A = f[o] * f[o], S += A < w ? A : w, x += B = f[++o] * f[o], S += B < w ? B : w, o++;\n          } while (0 < --R);\n          if (g < x && _++, r == k.SBPSY_l) S < (M = g * i.nsPsy.longfact[r]) && (S = M);\n          if (0 != c && (g = S), !e.ATHonly) if (0 < (y = t.en.l[r])) M = x * t.thm.l[r] * u / y, 0 != c && (M *= i.nsPsy.longfact[r]), g < M && (g = M);\n          a[s++] = 0 != c ? g : g * i.nsPsy.longfact[r];\n        }\n        var h = 575;\n        if (n.block_type != k.SHORT_TYPE) for (var p = 576; 0 != p-- && BitStream.EQ(f[p], 0);) h = p;\n        n.max_nonzero_coeff = h;\n        for (var d = n.sfb_smin; r < n.psymax; d++, r += 3) {\n          var b, m, v;\n          for (v = e.VBR == T.vbr_rh || e.VBR == T.vbr_mtrh ? athAdjust(l.adjust, l.s[d], l.floor) : l.adjust * l.s[d], b = n.width[r], m = 0; m < 3; m++) {\n            var g,\n              w,\n              S,\n              y,\n              M,\n              x = 0,\n              R = b >> 1;\n            w = v / b, S = E;\n            do {\n              var A, B;\n              x += A = f[o] * f[o], S += A < w ? A : w, x += B = f[++o] * f[o], S += B < w ? B : w, o++;\n            } while (0 < --R);\n            if (v < x && _++, d == k.SBPSY_s) S < (M = v * i.nsPsy.shortfact[d]) && (S = M);\n            if (g = 0 != c ? S : v, !e.ATHonly && !e.ATHshort) if (0 < (y = t.en.s[d][m])) M = x * t.thm.s[d][m] * u / y, 0 != c && (M *= i.nsPsy.shortfact[d]), g < M && (g = M);\n            a[s++] = 0 != c ? g : g * i.nsPsy.shortfact[d];\n          }\n          e.useTemporal && (a[s - 3] > a[s - 3 + 1] && (a[s - 3 + 1] += (a[s - 3] - a[s - 3 + 1]) * i.decay), a[s - 3 + 1] > a[s - 3 + 2] && (a[s - 3 + 2] += (a[s - 3 + 1] - a[s - 3 + 2]) * i.decay));\n        }\n        return _;\n      }, this.calc_noise_core = function (e, t, n, a) {\n        var r = 0,\n          s = t.s,\n          i = e.l3_enc;\n        if (s > e.count1) for (; 0 != n--;) {\n          _ = e.xr[s], s++, r += _ * _, _ = e.xr[s], s++, r += _ * _;\n        } else if (s > e.big_values) {\n          var o = S(2);\n          for (o[0] = 0, o[1] = a; 0 != n--;) {\n            _ = Math.abs(e.xr[s]) - o[i[s]], s++, r += _ * _, _ = Math.abs(e.xr[s]) - o[i[s]], s++, r += _ * _;\n          }\n        } else for (; 0 != n--;) {\n          var _;\n          _ = Math.abs(e.xr[s]) - p[i[s]] * a, s++, r += _ * _, _ = Math.abs(e.xr[s]) - p[i[s]] * a, s++, r += _ * _;\n        }\n        return t.s = s, r;\n      }, this.calc_noise = function (e, t, n, a, r) {\n        var s,\n          i,\n          o,\n          _ = 0,\n          l = 0,\n          f = 0,\n          c = 0,\n          u = 0,\n          h = -20,\n          p = 0,\n          d = e.scalefac,\n          b = 0;\n        for (s = a.over_SSD = 0; s < e.psymax; s++) {\n          var m,\n            v = e.global_gain - (d[b++] + (0 != e.preflag ? M[s] : 0) << e.scalefac_scale + 1) - 8 * e.subblock_gain[e.window[s]],\n            g = 0;\n          if (null != r && r.step[s] == v) g = r.noise[s], p += e.width[s], n[_++] = g / t[l++], g = r.noise_log[s];else {\n            var w,\n              S = (B(0 <= (o = v) + P.Q_MAX2 && o < P.Q_MAX), x[o + P.Q_MAX2]);\n            if (i = e.width[s] >> 1, p + e.width[s] > e.max_nonzero_coeff) i = 0 < (w = e.max_nonzero_coeff - p + 1) ? w >> 1 : 0;\n            var y = new R(p);\n            g = this.calc_noise_core(e, y, i, S), p = y.s, null != r && (r.step[s] = v, r.noise[s] = g), g = n[_++] = g / t[l++], g = A.FAST_LOG10(Math.max(g, 1e-20)), null != r && (r.noise_log[s] = g);\n          }\n          if (null != r && (r.global_gain = e.global_gain), u += g, 0 < g) m = Math.max(0 | 10 * g + .5, 1), a.over_SSD += m * m, f++, c += g;\n          h = Math.max(h, g);\n        }\n        return a.over_count = f, a.tot_noise = u, a.over_noise = c, a.max_noise = h, f;\n      }, this.set_pinfo = function (e, t, n, a, r) {\n        var s,\n          i,\n          o,\n          _,\n          l,\n          f = e.internal_flags,\n          c = 0 == t.scalefac_scale ? .5 : 1,\n          u = t.scalefac,\n          h = S(L3Side.SFBMAX),\n          p = S(L3Side.SFBMAX),\n          d = new CalcNoiseResult();\n        calc_xmin(e, n, t, h), calc_noise(t, h, p, d, null);\n        var b = 0;\n        for (i = t.sfb_lmax, t.block_type != k.SHORT_TYPE && 0 == t.mixed_block_flag && (i = 22), s = 0; s < i; s++) {\n          var m = f.scalefac_band.l[s],\n            v = (g = f.scalefac_band.l[s + 1]) - m;\n          for (_ = 0; b < g; b++) _ += t.xr[b] * t.xr[b];\n          _ /= v, l = 1e15, f.pinfo.en[a][r][s] = l * _, f.pinfo.xfsf[a][r][s] = l * h[s] * p[s] / v, 0 < n.en.l[s] && !e.ATHonly ? _ /= n.en.l[s] : _ = 0, f.pinfo.thr[a][r][s] = l * Math.max(_ * n.thm.l[s], f.ATH.l[s]), (f.pinfo.LAMEsfb[a][r][s] = 0) != t.preflag && 11 <= s && (f.pinfo.LAMEsfb[a][r][s] = -c * M[s]), s < k.SBPSY_l && (B(0 <= u[s]), f.pinfo.LAMEsfb[a][r][s] -= c * u[s]);\n        }\n        if (t.block_type == k.SHORT_TYPE) for (i = s, s = t.sfb_smin; s < k.SBMAX_s; s++) {\n          m = f.scalefac_band.s[s], v = (g = f.scalefac_band.s[s + 1]) - m;\n          for (var g, w = 0; w < 3; w++) {\n            for (_ = 0, o = m; o < g; o++) _ += t.xr[b] * t.xr[b], b++;\n            _ = Math.max(_ / v, 1e-20), l = 1e15, f.pinfo.en_s[a][r][3 * s + w] = l * _, f.pinfo.xfsf_s[a][r][3 * s + w] = l * h[i] * p[i] / v, 0 < n.en.s[s][w] ? _ /= n.en.s[s][w] : _ = 0, (e.ATHonly || e.ATHshort) && (_ = 0), f.pinfo.thr_s[a][r][3 * s + w] = l * Math.max(_ * n.thm.s[s][w], f.ATH.s[s]), f.pinfo.LAMEsfb_s[a][r][3 * s + w] = -2 * t.subblock_gain[w], s < k.SBPSY_s && (f.pinfo.LAMEsfb_s[a][r][3 * s + w] -= c * u[i]), i++;\n          }\n        }\n        f.pinfo.LAMEqss[a][r] = t.global_gain, f.pinfo.LAMEmainbits[a][r] = t.part2_3_length + t.part2_length, f.pinfo.LAMEsfbits[a][r] = t.part2_length, f.pinfo.over[a][r] = d.over_count, f.pinfo.max_noise[a][r] = 10 * d.max_noise, f.pinfo.over_noise[a][r] = 10 * d.over_noise, f.pinfo.tot_noise[a][r] = 10 * d.tot_noise, f.pinfo.over_SSD[a][r] = d.over_SSD;\n      };\n    }\n    P.Q_MAX = 257, P.Q_MAX2 = 116, P.LARGE_BITS = 1e5, P.IXMAX_VAL = 8206, e.exports = P;\n  }, function (e, t, n) {\n    var a = n(0),\n      y = (a.System, a.VbrMode, a.Float, a.ShortBlock, a.Util, a.Arrays, a.new_array_n, a.new_byte),\n      M = (a.new_double, a.new_float, a.new_float_n, a.new_int, a.new_int_n, a.assert);\n    Lame = n(27), Presets = n(39), GainAnalysis = n(11), QuantizePVT = n(15), Quantize = n(40), Takehiro = n(14), Reservoir = n(44), MPEGMode = n(9), BitStream = n(13);\n    n(1);\n    var x = n(45),\n      R = n(46);\n    function A() {\n      this.setModules = function (e, t) {\n        e, t;\n      };\n    }\n    function B() {\n      this.setModules = function (e, t, n) {\n        e, t, n;\n      };\n    }\n    function E() {}\n    function T() {\n      this.setModules = function (e, t) {\n        e, t;\n      };\n    }\n    function o() {\n      this.dataOffset = 0, this.dataLen = 0, this.channels = 0, this.sampleRate = 0;\n    }\n    function r(e) {\n      return e.charCodeAt(0) << 24 | e.charCodeAt(1) << 16 | e.charCodeAt(2) << 8 | e.charCodeAt(3);\n    }\n    o.RIFF = r(\"RIFF\"), o.WAVE = r(\"WAVE\"), o.fmt_ = r(\"fmt \"), o.data = r(\"data\"), o.readHeader = function (e) {\n      var t = new o(),\n        n = e.getUint32(0, !1);\n      if (o.RIFF == n) {\n        e.getUint32(4, !0);\n        if (o.WAVE == e.getUint32(8, !1) && o.fmt_ == e.getUint32(12, !1)) {\n          var a = e.getUint32(16, !0),\n            r = 20;\n          switch (a) {\n            case 16:\n            case 18:\n              t.channels = e.getUint16(r + 2, !0), t.sampleRate = e.getUint32(r + 4, !0);\n              break;\n            default:\n              throw \"extended fmt chunk not implemented\";\n          }\n          r += a;\n          for (var s = o.data, i = 0; s != n && (n = e.getUint32(r, !1), i = e.getUint32(r + 4, !0), s != n);) r += i + 8;\n          return t.dataLen = i, t.dataOffset = r + 8, t;\n        }\n      }\n    }, e.exports.Mp3Encoder = function (a, e, t) {\n      3 != arguments.length && (console.error(\"WARN: Mp3Encoder(channels, samplerate, kbps) not specified\"), a = 1, e = 44100, t = 128);\n      var r = new Lame(),\n        n = new A(),\n        s = new GainAnalysis(),\n        i = new BitStream(),\n        o = new Presets(),\n        _ = new QuantizePVT(),\n        l = new Quantize(),\n        f = new R(),\n        c = new x(),\n        u = new T(),\n        h = new Reservoir(),\n        p = new Takehiro(),\n        d = new B(),\n        b = new E();\n      r.setModules(s, i, o, _, l, f, c, u, b), i.setModules(s, b, c, f), u.setModules(i, c), o.setModules(r), l.setModules(i, h, _, p), _.setModules(p, h, r.enc.psy), h.setModules(i), p.setModules(_), f.setModules(r, i, c), n.setModules(d, b), d.setModules(c, u, o);\n      var m = r.lame_init();\n      m.num_channels = a, m.in_samplerate = e, m.brate = t, m.mode = MPEGMode.STEREO, m.quality = 3, m.bWriteVbrTag = !1, m.disable_reservoir = !0, m.write_id3tag_automatic = !1;\n      var v = r.lame_init_params(m);\n      M(0 == v);\n      var g = 1152,\n        w = 0 | 1.25 * g + 7200,\n        S = y(w);\n      this.encodeBuffer = function (e, t) {\n        1 == a && (t = e), M(e.length == t.length), e.length > g && (g = e.length, S = y(w = 0 | 1.25 * g + 7200));\n        var n = r.lame_encode_buffer(m, e, t, e.length, S, 0, w);\n        return new Int8Array(S.subarray(0, n));\n      }, this.flush = function () {\n        var e = r.lame_encode_flush(m, S, 0, w);\n        return new Int8Array(S.subarray(0, e));\n      };\n    }, e.exports.WavHeader = o;\n  }, function (e, t, n) {\n    var a = n(18);\n    \"string\" == typeof a && (a = [[e.i, a, \"\"]]), a.locals && (e.exports = a.locals);\n    (0, n(3).default)(\"9d62102e\", a, !1, {});\n  }, function (e, t, n) {\n    (e.exports = n(2)(!1)).push([e.i, \"\\n.ar-player {\\n  width: 380px;\\n  height: unset;\\n  border: 0;\\n  border-radius: 0;\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n  justify-content: center;\\n  background-color: unset;\\n  font-family: 'Roboto', sans-serif;\\n}\\n.ar-player > .ar-player-bar {\\n    border: 1px solid #E8E8E8;\\n    border-radius: 24px;\\n    margin: 0 0 0 5px;\\n}\\n.ar-player > .ar-player-bar > .ar-player__progress {\\n      width: 125px;\\n}\\n.ar-player-bar {\\n    display: flex;\\n    align-items: center;\\n    height: 38px;\\n    padding: 0 12px;\\n    margin: 0 5px;\\n}\\n.ar-player-actions {\\n    width: 55%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: space-around;\\n}\\n.ar-player__progress {\\n    width: 160px;\\n    margin: 0 8px;\\n}\\n.ar-player__time {\\n    color: rgba(84, 84, 84, 0.5);\\n    font-size: 16px;\\n    width: 41px;\\n}\\n.ar-player__play {\\n    width: 45px;\\n    height: 45px;\\n    background-color: #FFFFFF;\\n    box-shadow: 0 2px 11px 11px rgba(0, 0, 0, 0.07);\\n}\\n.ar-player__play--active {\\n      fill: white !important;\\n      background-color: #05CBCD !important;\\n}\\n.ar-icon {\\n  fill: #747474;\\n  border-radius: 50%;\\n  border: 1px solid #05CBCD;\\n  background-color: #FFFFFF;\\n  padding: 5px;\\n  cursor: pointer;\\n  transition: .2s;\\n}\\n.ar-icon--no-border {\\n    border: 0;\\n    border-radius: 0;\\n    padding: 0;\\n}\\n.ar-icon--rec {\\n    fill: white;\\n    background-color: #FF6B64;\\n    border-color: transparent;\\n}\\n.ar-icon--pulse {\\n    animation: ripple .5s linear infinite;\\n}\\n@keyframes ripple {\\n0% {\\n    box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.1), 0 0 0 1px rgba(255, 0, 0, 0.1), 0 0 0 5px rgba(255, 0, 0, 0.1);\\n}\\n100% {\\n    box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.1), 0 0 0 10px rgba(255, 0, 0, 0.1), 0 0 0 20px rgba(255, 0, 0, 0);\\n}\\n}\\n.ar-icon__xs {\\n    width: 18px;\\n    height: 18px;\\n    line-height: 18px;\\n}\\n.ar-icon__sm {\\n    width: 30px;\\n    height: 30px;\\n    line-height: 30px;\\n}\\n.ar-icon__lg {\\n    width: 45px;\\n    height: 45px;\\n    line-height: 45px;\\n    box-shadow: 0 2px 5px 1px rgba(158, 158, 158, 0.5);\\n}\\n\", \"\"]);\n  }, function (e, t, n) {\n    var a = n(20);\n    \"string\" == typeof a && (a = [[e.i, a, \"\"]]), a.locals && (e.exports = a.locals);\n    (0, n(3).default)(\"722c44a2\", a, !1, {});\n  }, function (e, t, n) {\n    (e.exports = n(2)(!1)).push([e.i, \"\\n.ar-line-control {\\n  position: relative;\\n  height: 8px;\\n  border-radius: 5px;\\n  background-color: #E6E6E6;\\n}\\n.ar-line-control__head {\\n    position: absolute;\\n    height: inherit;\\n    background-color: #616161;\\n    border-radius: inherit;\\n}\\n\", \"\"]);\n  }, function (e, t, n) {\n    var a = n(22);\n    \"string\" == typeof a && (a = [[e.i, a, \"\"]]), a.locals && (e.exports = a.locals);\n    (0, n(3).default)(\"7e43270a\", a, !1, {});\n  }, function (e, t, n) {\n    (e.exports = n(2)(!1)).push([e.i, \"\\n.ar-volume {\\n  display: flex;\\n  align-items: center;\\n  line-height: 10px;\\n}\\n.ar-volume-bar {\\n    width: 50px;\\n    height: 6px;\\n    background: #E6E6E6;\\n    border-radius: 4px;\\n    position: relative;\\n}\\n.ar-volume__icon {\\n    fill: #747474;\\n    width: 24px;\\n    height: 24px;\\n    border: 0;\\n    border-radius: 0;\\n    padding: 0;\\n    background-color: unset;\\n    margin-right: 3px;\\n}\\n\", \"\"]);\n  }, function (e, t, n) {\n    var a = n(24);\n    \"string\" == typeof a && (a = [[e.i, a, \"\"]]), a.locals && (e.exports = a.locals);\n    (0, n(3).default)(\"00c7c6ba\", a, !1, {});\n  }, function (e, t, n) {\n    (e.exports = n(2)(!1)).push([e.i, \"\\n.ar {\\n  width: 420px;\\n  font-family: 'Roboto', sans-serif;\\n  border-radius: 16px;\\n  background-color: #FAFAFA;\\n  box-shadow: 0 4px 18px 0 rgba(0, 0, 0, 0.17);\\n  position: relative;\\n  box-sizing: content-box;\\n}\\n.ar-content {\\n    padding: 16px;\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n}\\n.ar-records {\\n    height: 138px;\\n    padding-top: 1px;\\n    overflow-y: auto;\\n    margin-bottom: 20px;\\n}\\n.ar-records__record {\\n      width: 320px;\\n      height: 45px;\\n      padding: 0 10px;\\n      margin: 0 auto;\\n      line-height: 45px;\\n      display: flex;\\n      justify-content: space-between;\\n      border-bottom: 1px solid #E8E8E8;\\n      position: relative;\\n}\\n.ar-records__record--selected {\\n        border: 1px solid #E8E8E8;\\n        border-radius: 24px;\\n        background-color: #FFFFFF;\\n        margin-top: -1px;\\n        padding: 0 34px;\\n}\\n.ar-recorder {\\n    position: relative;\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n}\\n.ar-recorder__duration {\\n      color: #AEAEAE;\\n      font-size: 32px;\\n      font-weight: 500;\\n      margin-top: 20px;\\n      margin-bottom: 16px;\\n}\\n.ar-recorder__stop {\\n      position: absolute;\\n      top: 10px;\\n      right: -52px;\\n}\\n.ar-recorder__time-limit {\\n      position: absolute;\\n      color: #AEAEAE;\\n      font-size: 12px;\\n      top: 128px;\\n}\\n.ar-recorder__records-limit {\\n      position: absolute;\\n      color: #AEAEAE;\\n      font-size: 13px;\\n      top: 78px;\\n}\\n.ar-spinner {\\n    display: flex;\\n    height: 30px;\\n    position: absolute;\\n    left: 0;\\n    right: 0;\\n    top: 0;\\n    bottom: 0;\\n    margin: auto;\\n    width: 144px;\\n    z-index: 10;\\n}\\n.ar-spinner__dot {\\n      display: block;\\n      margin: 0 8px;\\n      border-radius: 50%;\\n      width: 30px;\\n      height: 30px;\\n      background: #05CBCD;\\n      animation-name: blink;\\n      animation-duration: 1.4s;\\n      animation-iteration-count: infinite;\\n      animation-fill-mode: both;\\n}\\n.ar-spinner__dot:nth-child(2) {\\n        animation-delay: .2s;\\n}\\n.ar-spinner__dot:nth-child(3) {\\n        animation-delay: .4s;\\n}\\n@keyframes blink {\\n0% {\\n    opacity: .2;\\n}\\n20% {\\n    opacity: 1;\\n}\\n100% {\\n    opacity: .2;\\n}\\n}\\n.ar__text {\\n    color: rgba(84, 84, 84, 0.5);\\n    font-size: 16px;\\n}\\n.ar__blur {\\n    filter: blur(2px);\\n    opacity: 0.7;\\n}\\n.ar__overlay {\\n    position: absolute;\\n    width: 100%;\\n    height: 100%;\\n    z-index: 10;\\n}\\n.ar__upload-status {\\n    text-align: center;\\n    font-size: 10px;\\n    padding: 2px;\\n    letter-spacing: 1px;\\n    position: absolute;\\n    bottom: 0;\\n}\\n.ar__upload-status--success {\\n      color: green;\\n}\\n.ar__upload-status--fail {\\n      color: red;\\n}\\n.ar__rm {\\n    cursor: pointer;\\n    position: absolute;\\n    width: 6px;\\n    height: 6px;\\n    padding: 6px;\\n    line-height: 6px;\\n    margin: auto;\\n    left: 10px;\\n    bottom: 0;\\n    top: 0;\\n    color: #f4785a;\\n}\\n.ar__downloader, .ar__uploader {\\n    position: absolute;\\n    top: 0;\\n    bottom: 0;\\n    margin: auto;\\n}\\n.ar__downloader {\\n    right: 115px;\\n}\\n.ar__uploader {\\n    right: 85px;\\n}\\n.ar-icon {\\n  fill: #747474;\\n  border-radius: 50%;\\n  border: 1px solid #05CBCD;\\n  background-color: #FFFFFF;\\n  padding: 5px;\\n  cursor: pointer;\\n  transition: .2s;\\n}\\n.ar-icon--no-border {\\n    border: 0;\\n    border-radius: 0;\\n    padding: 0;\\n}\\n.ar-icon--rec {\\n    fill: white;\\n    background-color: #FF6B64;\\n    border-color: transparent;\\n}\\n.ar-icon--pulse {\\n    animation: ripple .5s linear infinite;\\n}\\n@keyframes ripple {\\n0% {\\n    box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.1), 0 0 0 1px rgba(255, 0, 0, 0.1), 0 0 0 5px rgba(255, 0, 0, 0.1);\\n}\\n100% {\\n    box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.1), 0 0 0 10px rgba(255, 0, 0, 0.1), 0 0 0 20px rgba(255, 0, 0, 0);\\n}\\n}\\n.ar-icon__xs {\\n    width: 18px;\\n    height: 18px;\\n    line-height: 18px;\\n}\\n.ar-icon__sm {\\n    width: 30px;\\n    height: 30px;\\n    line-height: 30px;\\n}\\n.ar-icon__lg {\\n    width: 45px;\\n    height: 45px;\\n    line-height: 45px;\\n    box-shadow: 0 2px 5px 1px rgba(158, 158, 158, 0.5);\\n}\\n\", \"\"]);\n  }, function (e, t, n) {\n    var a = n(26);\n    \"string\" == typeof a && (a = [[e.i, a, \"\"]]), a.locals && (e.exports = a.locals);\n    (0, n(3).default)(\"07a135de\", a, !1, {});\n  }, function (e, t, n) {\n    (e.exports = n(2)(!1)).push([e.i, \"\\n.ar-icon {\\n  fill: #747474;\\n  border-radius: 50%;\\n  border: 1px solid #05CBCD;\\n  background-color: #FFFFFF;\\n  padding: 5px;\\n  cursor: pointer;\\n  transition: .2s;\\n}\\n.ar-icon--no-border {\\n    border: 0;\\n    border-radius: 0;\\n    padding: 0;\\n}\\n.ar-icon--rec {\\n    fill: white;\\n    background-color: #FF6B64;\\n    border-color: transparent;\\n}\\n.ar-icon--pulse {\\n    animation: ripple .5s linear infinite;\\n}\\n@keyframes ripple {\\n0% {\\n    box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.1), 0 0 0 1px rgba(255, 0, 0, 0.1), 0 0 0 5px rgba(255, 0, 0, 0.1);\\n}\\n100% {\\n    box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.1), 0 0 0 10px rgba(255, 0, 0, 0.1), 0 0 0 20px rgba(255, 0, 0, 0);\\n}\\n}\\n.ar-icon__xs {\\n    width: 18px;\\n    height: 18px;\\n    line-height: 18px;\\n}\\n.ar-icon__sm {\\n    width: 30px;\\n    height: 30px;\\n    line-height: 30px;\\n}\\n.ar-icon__lg {\\n    width: 45px;\\n    height: 45px;\\n    line-height: 45px;\\n    box-shadow: 0 2px 5px 1px rgba(158, 158, 158, 0.5);\\n}\\n\", \"\"]);\n  }, function (e, t, n) {\n    var a = n(0),\n      X = a.System,\n      q = a.VbrMode,\n      Y = (a.Float, a.ShortBlock),\n      j = (a.Util, a.Arrays, a.new_array_n, a.new_byte, a.new_double, a.new_float),\n      U = (a.new_float_n, a.new_int, a.new_int_n),\n      d = a.new_short_n,\n      z = a.assert,\n      G = n(28),\n      s = n(32),\n      K = n(4),\n      Z = n(36),\n      Q = n(37),\n      W = n(38),\n      $ = n(13),\n      J = n(7),\n      ee = n(1);\n    e.exports = function e() {\n      var T = this;\n      e.V9 = 410, e.V8 = 420, e.V7 = 430, e.V6 = 440, e.V5 = 450, e.V4 = 460, e.V3 = 470, e.V2 = 480, e.V1 = 490, e.V0 = 500, e.R3MIX = 1e3, e.STANDARD = 1001, e.EXTREME = 1002, e.INSANE = 1003, e.STANDARD_FAST = 1004, e.EXTREME_FAST = 1005, e.MEDIUM = 1006, e.MEDIUM_FAST = 1007;\n      var k, P, g, w, S;\n      e.LAME_MAXMP3BUFFER = 147456;\n      var y,\n        M,\n        x,\n        R = new G();\n      function A() {\n        this.mask_adjust = 0, this.mask_adjust_short = 0, this.bo_l_weight = j(ee.SBMAX_l), this.bo_s_weight = j(ee.SBMAX_s);\n      }\n      function B() {\n        this.lowerlimit = 0;\n      }\n      function r(e, t) {\n        this.lowpass = t;\n      }\n      this.enc = new ee(), this.setModules = function (e, t, n, a, r, s, i, o, _) {\n        k = e, P = t, g = n, w = a, S = r, y = s, M = o, x = _, this.enc.setModules(P, R, w, y);\n      };\n      var L = 4294479419;\n      function E(e) {\n        return 1 < e ? 0 : e <= 0 ? 1 : Math.cos(Math.PI / 2 * e);\n      }\n      function I(e, t) {\n        switch (e) {\n          case 44100:\n            return t.version = 1, 0;\n          case 48e3:\n            return t.version = 1;\n          case 32e3:\n            return t.version = 1, 2;\n          case 22050:\n            return t.version = 0;\n          case 24e3:\n            return t.version = 0, 1;\n          case 16e3:\n            return t.version = 0, 2;\n          case 11025:\n            return t.version = 0;\n          case 12e3:\n            return t.version = 0, 1;\n          case 8e3:\n            return t.version = 0, 2;\n          default:\n            return t.version = 0, -1;\n        }\n      }\n      function V(e, t, n) {\n        n < 16e3 && (t = 2);\n        for (var a = J.bitrate_table[t][1], r = 2; r <= 14; r++) 0 < J.bitrate_table[t][r] && Math.abs(J.bitrate_table[t][r] - e) < Math.abs(a - e) && (a = J.bitrate_table[t][r]);\n        return a;\n      }\n      function H(e, t, n) {\n        n < 16e3 && (t = 2);\n        for (var a = 0; a <= 14; a++) if (0 < J.bitrate_table[t][a] && J.bitrate_table[t][a] == e) return a;\n        return -1;\n      }\n      function O(e, t) {\n        var n = [new r(8, 2e3), new r(16, 3700), new r(24, 3900), new r(32, 5500), new r(40, 7e3), new r(48, 7500), new r(56, 1e4), new r(64, 11e3), new r(80, 13500), new r(96, 15100), new r(112, 15600), new r(128, 17e3), new r(160, 17500), new r(192, 18600), new r(224, 19400), new r(256, 19700), new r(320, 20500)],\n          a = T.nearestBitrateFullIndex(t);\n        e.lowerlimit = n[a].lowpass;\n      }\n      function N(e) {\n        var t = ee.BLKSIZE + e.framesize - ee.FFTOFFSET;\n        return t = Math.max(t, 512 + e.framesize - 32), z(K.MFSIZE >= t), t;\n      }\n      function F() {\n        this.n_in = 0, this.n_out = 0;\n      }\n      function f() {\n        this.num_used = 0;\n      }\n      function C(e, t, n) {\n        var a = Math.PI * t;\n        (e /= n) < 0 && (e = 0), 1 < e && (e = 1);\n        var r = e - .5,\n          s = .42 - .5 * Math.cos(2 * e * Math.PI) + .08 * Math.cos(4 * e * Math.PI);\n        return Math.abs(r) < 1e-9 ? a / Math.PI : s * Math.sin(n * a * r) / (Math.PI * n * r);\n      }\n      function c(e, t, n, a, r, s, i, o, _) {\n        var l,\n          f,\n          c = e.internal_flags,\n          u = 0,\n          h = e.out_samplerate / function e(t, n) {\n            return 0 != n ? e(n, t % n) : t;\n          }(e.out_samplerate, e.in_samplerate);\n        h > K.BPC && (h = K.BPC);\n        var p = Math.abs(c.resample_ratio - Math.floor(.5 + c.resample_ratio)) < 1e-4 ? 1 : 0,\n          d = 1 / c.resample_ratio;\n        1 < d && (d = 1);\n        var b = 31;\n        0 == b % 2 && --b;\n        var m = (b += p) + 1;\n        if (0 == c.fill_buffer_resample_init) {\n          for (c.inbuf_old[0] = j(m), c.inbuf_old[1] = j(m), l = 0; l <= 2 * h; ++l) c.blackfilt[l] = j(m);\n          for (c.itime[0] = 0, u = c.itime[1] = 0; u <= 2 * h; u++) {\n            var v = 0,\n              g = (u - h) / (2 * h);\n            for (l = 0; l <= b; l++) v += c.blackfilt[u][l] = C(l - g, d, b);\n            for (l = 0; l <= b; l++) c.blackfilt[u][l] /= v;\n          }\n          c.fill_buffer_resample_init = 1;\n        }\n        var w = c.inbuf_old[_];\n        for (f = 0; f < a; f++) {\n          var S, y;\n          if (S = f * c.resample_ratio, i <= b + (u = 0 | Math.floor(S - c.itime[_])) - b / 2) break;\n          g = S - c.itime[_] - (u + b % 2 * .5), z(Math.abs(g) <= .501), y = 0 | Math.floor(2 * g * h + h + .5);\n          var M = 0;\n          for (l = 0; l <= b; ++l) {\n            var x = l + u - b / 2;\n            z(x < i), z(0 <= x + m), M += (x < 0 ? w[m + x] : r[s + x]) * c.blackfilt[y][l];\n          }\n          t[n + f] = M;\n        }\n        if (o.num_used = Math.min(i, b + u - b / 2), c.itime[_] += o.num_used - f * c.resample_ratio, o.num_used >= m) for (l = 0; l < m; l++) w[l] = r[s + o.num_used + l - m];else {\n          var R = m - o.num_used;\n          for (l = 0; l < R; ++l) w[l] = w[l + o.num_used];\n          for (u = 0; l < m; ++l, ++u) w[l] = r[s + u];\n          z(u == o.num_used);\n        }\n        return f;\n      }\n      function D(e, t, n, a, r, s) {\n        var i = e.internal_flags;\n        if (i.resample_ratio < .9999 || 1.0001 < i.resample_ratio) for (var o = 0; o < i.channels_out; o++) {\n          var _ = new f();\n          s.n_out = c(e, t[o], i.mf_size, e.framesize, n[o], a, r, _, o), s.n_in = _.num_used;\n        } else {\n          s.n_out = Math.min(e.framesize, r), s.n_in = s.n_out;\n          for (var l = 0; l < s.n_out; ++l) t[0][i.mf_size + l] = n[0][a + l], 2 == i.channels_out && (t[1][i.mf_size + l] = n[1][a + l]);\n        }\n      }\n      this.lame_init = function () {\n        var e,\n          t,\n          n = new s();\n        return 0 != ((e = n).class_id = L, t = e.internal_flags = new K(), e.mode = MPEGMode.NOT_SET, e.original = 1, e.in_samplerate = 44100, e.num_channels = 2, e.num_samples = -1, e.bWriteVbrTag = !0, e.quality = -1, e.short_blocks = null, t.subblock_gain = -1, e.lowpassfreq = 0, e.highpassfreq = 0, e.lowpasswidth = -1, e.highpasswidth = -1, e.VBR = q.vbr_off, e.VBR_q = 4, e.ATHcurve = -1, e.VBR_mean_bitrate_kbps = 128, e.VBR_min_bitrate_kbps = 0, e.VBR_max_bitrate_kbps = 0, e.VBR_hard_min = 0, t.VBR_min_bitrate = 1, t.VBR_max_bitrate = 13, e.quant_comp = -1, e.quant_comp_short = -1, e.msfix = -1, t.resample_ratio = 1, t.OldValue[0] = 180, t.OldValue[1] = 180, t.CurrentStep[0] = 4, t.CurrentStep[1] = 4, t.masking_lower = 1, t.nsPsy.attackthre = -1, t.nsPsy.attackthre_s = -1, e.scale = -1, e.athaa_type = -1, e.ATHtype = -1, e.athaa_loudapprox = -1, e.athaa_sensitivity = 0, e.useTemporal = null, e.interChRatio = -1, t.mf_samples_to_encode = ee.ENCDELAY + ee.POSTDELAY, e.encoder_padding = 0, t.mf_size = ee.ENCDELAY - ee.MDCTDELAY, e.findReplayGain = !1, e.decode_on_the_fly = !1, t.decode_on_the_fly = !1, t.findReplayGain = !1, t.findPeakSample = !1, t.RadioGain = 0, t.AudiophileGain = 0, t.noclipGainChange = 0, t.noclipScale = -1, e.preset = 0, e.write_id3tag_automatic = !0, 0) ? null : (n.lame_allocated_gfp = 1, n);\n      }, this.nearestBitrateFullIndex = function (e) {\n        var t = [8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320],\n          n = 0,\n          a = 0,\n          r = 0,\n          s = 0;\n        s = t[16], a = t[r = 16], n = 16;\n        for (var i = 0; i < 16; i++) if (Math.max(e, t[i + 1]) != e) {\n          s = t[i + 1], r = i + 1, a = t[i], n = i;\n          break;\n        }\n        return e - a < s - e ? n : r;\n      }, this.lame_init_params = function (e) {\n        var t,\n          n,\n          a,\n          r = e.internal_flags;\n        if (r.Class_ID = 0, null == r.ATH && (r.ATH = new Z()), null == r.PSY && (r.PSY = new A()), null == r.rgdata && (r.rgdata = new Q()), r.channels_in = e.num_channels, 1 == r.channels_in && (e.mode = MPEGMode.MONO), r.channels_out = e.mode == MPEGMode.MONO ? 1 : 2, r.mode_ext = ee.MPG_MD_MS_LR, e.mode == MPEGMode.MONO && (e.force_ms = !1), e.VBR == q.vbr_off && 128 != e.VBR_mean_bitrate_kbps && 0 == e.brate && (e.brate = e.VBR_mean_bitrate_kbps), e.VBR == q.vbr_off || e.VBR == q.vbr_mtrh || e.VBR == q.vbr_mt || (e.free_format = !1), e.VBR == q.vbr_off && 0 == e.brate && $.EQ(e.compression_ratio, 0) && (e.compression_ratio = 11.025), e.VBR == q.vbr_off && 0 < e.compression_ratio && (0 == e.out_samplerate && (e.out_samplerate = map2MP3Frequency(int(.97 * e.in_samplerate))), e.brate = 0 | 16 * e.out_samplerate * r.channels_out / (1e3 * e.compression_ratio), r.samplerate_index = I(e.out_samplerate, e), e.free_format || (e.brate = V(e.brate, e.version, e.out_samplerate))), 0 != e.out_samplerate && (e.out_samplerate < 16e3 ? (e.VBR_mean_bitrate_kbps = Math.max(e.VBR_mean_bitrate_kbps, 8), e.VBR_mean_bitrate_kbps = Math.min(e.VBR_mean_bitrate_kbps, 64)) : e.out_samplerate < 32e3 ? (e.VBR_mean_bitrate_kbps = Math.max(e.VBR_mean_bitrate_kbps, 8), e.VBR_mean_bitrate_kbps = Math.min(e.VBR_mean_bitrate_kbps, 160)) : (e.VBR_mean_bitrate_kbps = Math.max(e.VBR_mean_bitrate_kbps, 32), e.VBR_mean_bitrate_kbps = Math.min(e.VBR_mean_bitrate_kbps, 320))), 0 == e.lowpassfreq) {\n          var s = 16e3;\n          switch (e.VBR) {\n            case q.vbr_off:\n              O(i = new B(), e.brate), s = i.lowerlimit;\n              break;\n            case q.vbr_abr:\n              var i;\n              O(i = new B(), e.VBR_mean_bitrate_kbps), s = i.lowerlimit;\n              break;\n            case q.vbr_rh:\n              var o = [19500, 19e3, 18600, 18e3, 17500, 16e3, 15600, 14900, 12500, 1e4, 3950];\n              if (0 <= e.VBR_q && e.VBR_q <= 9) {\n                var _ = o[e.VBR_q],\n                  l = o[e.VBR_q + 1],\n                  f = e.VBR_q_frac;\n                s = linear_int(_, l, f);\n              } else s = 19500;\n              break;\n            default:\n              o = [19500, 19e3, 18500, 18e3, 17500, 16500, 15500, 14500, 12500, 9500, 3950], s = 0 <= e.VBR_q && e.VBR_q <= 9 ? (_ = o[e.VBR_q], l = o[e.VBR_q + 1], f = e.VBR_q_frac, linear_int(_, l, f)) : 19500;\n          }\n          e.mode != MPEGMode.MONO || e.VBR != q.vbr_off && e.VBR != q.vbr_abr || (s *= 1.5), e.lowpassfreq = 0 | s;\n        }\n        if (0 == e.out_samplerate && (2 * e.lowpassfreq > e.in_samplerate && (e.lowpassfreq = e.in_samplerate / 2), e.out_samplerate = (t = 0 | e.lowpassfreq, n = e.in_samplerate, a = 44100, 48e3 <= n ? a = 48e3 : 44100 <= n ? a = 44100 : 32e3 <= n ? a = 32e3 : 24e3 <= n ? a = 24e3 : 22050 <= n ? a = 22050 : 16e3 <= n ? a = 16e3 : 12e3 <= n ? a = 12e3 : 11025 <= n ? a = 11025 : 8e3 <= n && (a = 8e3), -1 == t ? a : (t <= 15960 && (a = 44100), t <= 15250 && (a = 32e3), t <= 11220 && (a = 24e3), t <= 9970 && (a = 22050), t <= 7230 && (a = 16e3), t <= 5420 && (a = 12e3), t <= 4510 && (a = 11025), t <= 3970 && (a = 8e3), n < a ? 44100 < n ? 48e3 : 32e3 < n ? 44100 : 24e3 < n ? 32e3 : 22050 < n ? 24e3 : 16e3 < n ? 22050 : 12e3 < n ? 16e3 : 11025 < n ? 12e3 : 8e3 < n ? 11025 : 8e3 : a))), e.lowpassfreq = Math.min(20500, e.lowpassfreq), e.lowpassfreq = Math.min(e.out_samplerate / 2, e.lowpassfreq), e.VBR == q.vbr_off && (e.compression_ratio = 16 * e.out_samplerate * r.channels_out / (1e3 * e.brate)), e.VBR == q.vbr_abr && (e.compression_ratio = 16 * e.out_samplerate * r.channels_out / (1e3 * e.VBR_mean_bitrate_kbps)), e.bWriteVbrTag || (e.findReplayGain = !1, e.decode_on_the_fly = !1, r.findPeakSample = !1), r.findReplayGain = e.findReplayGain, r.decode_on_the_fly = e.decode_on_the_fly, r.decode_on_the_fly && (r.findPeakSample = !0), r.findReplayGain && k.InitGainAnalysis(r.rgdata, e.out_samplerate) == GainAnalysis.INIT_GAIN_ANALYSIS_ERROR) return e.internal_flags = null, -6;\n        switch (r.decode_on_the_fly && !e.decode_only && (null != r.hip && x.hip_decode_exit(r.hip), r.hip = x.hip_decode_init()), r.mode_gr = e.out_samplerate <= 24e3 ? 1 : 2, e.framesize = 576 * r.mode_gr, e.encoder_delay = ee.ENCDELAY, r.resample_ratio = e.in_samplerate / e.out_samplerate, e.VBR) {\n          case q.vbr_mt:\n          case q.vbr_rh:\n          case q.vbr_mtrh:\n            e.compression_ratio = [5.7, 6.5, 7.3, 8.2, 10, 11.9, 13, 14, 15, 16.5][e.VBR_q];\n            break;\n          case q.vbr_abr:\n            e.compression_ratio = 16 * e.out_samplerate * r.channels_out / (1e3 * e.VBR_mean_bitrate_kbps);\n            break;\n          default:\n            e.compression_ratio = 16 * e.out_samplerate * r.channels_out / (1e3 * e.brate);\n        }\n        if (e.mode == MPEGMode.NOT_SET && (e.mode = MPEGMode.JOINT_STEREO), 0 < e.highpassfreq ? (r.highpass1 = 2 * e.highpassfreq, 0 <= e.highpasswidth ? r.highpass2 = 2 * (e.highpassfreq + e.highpasswidth) : r.highpass2 = 2 * e.highpassfreq, r.highpass1 /= e.out_samplerate, r.highpass2 /= e.out_samplerate) : (r.highpass1 = 0, r.highpass2 = 0), 0 < e.lowpassfreq ? (r.lowpass2 = 2 * e.lowpassfreq, 0 <= e.lowpasswidth ? (r.lowpass1 = 2 * (e.lowpassfreq - e.lowpasswidth), r.lowpass1 < 0 && (r.lowpass1 = 0)) : r.lowpass1 = 2 * e.lowpassfreq, r.lowpass1 /= e.out_samplerate, r.lowpass2 /= e.out_samplerate) : (r.lowpass1 = 0, r.lowpass2 = 0), function (e) {\n          var t = e.internal_flags,\n            n = 32,\n            a = -1;\n          if (0 < t.lowpass1) {\n            for (var r = 999, s = 0; s <= 31; s++) (l = s / 31) >= t.lowpass2 && (n = Math.min(n, s)), t.lowpass1 < l && l < t.lowpass2 && (r = Math.min(r, s));\n            t.lowpass1 = 999 == r ? (n - .75) / 31 : (r - .75) / 31, t.lowpass2 = n / 31;\n          }\n          if (0 < t.highpass2 && t.highpass2 < .75 / 31 * .9 && (t.highpass1 = 0, t.highpass2 = 0, X.err.println(\"Warning: highpass filter disabled.  highpass frequency too small\\n\")), 0 < t.highpass2) {\n            var i = -1;\n            for (s = 0; s <= 31; s++) (l = s / 31) <= t.highpass1 && (a = Math.max(a, s)), t.highpass1 < l && l < t.highpass2 && (i = Math.max(i, s));\n            t.highpass1 = a / 31, t.highpass2 = -1 == i ? (a + .75) / 31 : (i + .75) / 31;\n          }\n          for (s = 0; s < 32; s++) {\n            var o,\n              _,\n              l = s / 31;\n            o = t.highpass2 > t.highpass1 ? E((t.highpass2 - l) / (t.highpass2 - t.highpass1 + 1e-20)) : 1, _ = t.lowpass2 > t.lowpass1 ? E((l - t.lowpass1) / (t.lowpass2 - t.lowpass1 + 1e-20)) : 1, t.amp_filter[s] = o * _;\n          }\n        }(e), r.samplerate_index = I(e.out_samplerate, e), r.samplerate_index < 0) return e.internal_flags = null, -1;\n        if (e.VBR == q.vbr_off) {\n          if (e.free_format) r.bitrate_index = 0;else if (e.brate = V(e.brate, e.version, e.out_samplerate), r.bitrate_index = H(e.brate, e.version, e.out_samplerate), r.bitrate_index <= 0) return e.internal_flags = null, -1;\n        } else r.bitrate_index = 1;\n        e.analysis && (e.bWriteVbrTag = !1), null != r.pinfo && (e.bWriteVbrTag = !1), P.init_bit_stream_w(r);\n        for (var c, u, h, p = r.samplerate_index + 3 * e.version + 6 * (e.out_samplerate < 16e3 ? 1 : 0), d = 0; d < ee.SBMAX_l + 1; d++) r.scalefac_band.l[d] = w.sfBandIndex[p].l[d];\n        for (d = 0; d < ee.PSFB21 + 1; d++) {\n          var b = (r.scalefac_band.l[22] - r.scalefac_band.l[21]) / ee.PSFB21,\n            m = r.scalefac_band.l[21] + d * b;\n          r.scalefac_band.psfb21[d] = m;\n        }\n        for (r.scalefac_band.psfb21[ee.PSFB21] = 576, d = 0; d < ee.SBMAX_s + 1; d++) r.scalefac_band.s[d] = w.sfBandIndex[p].s[d];\n        for (d = 0; d < ee.PSFB12 + 1; d++) b = (r.scalefac_band.s[13] - r.scalefac_band.s[12]) / ee.PSFB12, m = r.scalefac_band.s[12] + d * b, r.scalefac_band.psfb12[d] = m;\n        for (r.scalefac_band.psfb12[ee.PSFB12] = 192, 1 == e.version ? r.sideinfo_len = 1 == r.channels_out ? 21 : 36 : r.sideinfo_len = 1 == r.channels_out ? 13 : 21, e.error_protection && (r.sideinfo_len += 2), u = (c = e).internal_flags, c.frameNum = 0, c.write_id3tag_automatic && M.id3tag_write_v2(c), u.bitrate_stereoMode_Hist = U([16, 5]), u.bitrate_blockType_Hist = U([16, 6]), u.PeakSample = 0, c.bWriteVbrTag && y.InitVbrTag(c), r.Class_ID = L, h = 0; h < 19; h++) r.nsPsy.pefirbuf[h] = 700 * r.mode_gr * r.channels_out;\n        switch (-1 == e.ATHtype && (e.ATHtype = 4), z(e.VBR_q <= 9), z(0 <= e.VBR_q), e.VBR) {\n          case q.vbr_mt:\n            e.VBR = q.vbr_mtrh;\n          case q.vbr_mtrh:\n            null == e.useTemporal && (e.useTemporal = !1), g.apply_preset(e, 500 - 10 * e.VBR_q, 0), e.quality < 0 && (e.quality = LAME_DEFAULT_QUALITY), e.quality < 5 && (e.quality = 0), 5 < e.quality && (e.quality = 5), r.PSY.mask_adjust = e.maskingadjust, r.PSY.mask_adjust_short = e.maskingadjust_short, e.experimentalY ? r.sfb21_extra = !1 : r.sfb21_extra = 44e3 < e.out_samplerate, r.iteration_loop = new VBRNewIterationLoop(S);\n            break;\n          case q.vbr_rh:\n            g.apply_preset(e, 500 - 10 * e.VBR_q, 0), r.PSY.mask_adjust = e.maskingadjust, r.PSY.mask_adjust_short = e.maskingadjust_short, e.experimentalY ? r.sfb21_extra = !1 : r.sfb21_extra = 44e3 < e.out_samplerate, 6 < e.quality && (e.quality = 6), e.quality < 0 && (e.quality = LAME_DEFAULT_QUALITY), r.iteration_loop = new VBROldIterationLoop(S);\n            break;\n          default:\n            var v;\n            r.sfb21_extra = !1, e.quality < 0 && (e.quality = LAME_DEFAULT_QUALITY), (v = e.VBR) == q.vbr_off && (e.VBR_mean_bitrate_kbps = e.brate), g.apply_preset(e, e.VBR_mean_bitrate_kbps, 0), e.VBR = v, r.PSY.mask_adjust = e.maskingadjust, r.PSY.mask_adjust_short = e.maskingadjust_short, v == q.vbr_off ? r.iteration_loop = new W(S) : r.iteration_loop = new ABRIterationLoop(S);\n        }\n        if (z(0 <= e.scale), e.VBR != q.vbr_off) {\n          if (r.VBR_min_bitrate = 1, r.VBR_max_bitrate = 14, e.out_samplerate < 16e3 && (r.VBR_max_bitrate = 8), 0 != e.VBR_min_bitrate_kbps && (e.VBR_min_bitrate_kbps = V(e.VBR_min_bitrate_kbps, e.version, e.out_samplerate), r.VBR_min_bitrate = H(e.VBR_min_bitrate_kbps, e.version, e.out_samplerate), r.VBR_min_bitrate < 0)) return -1;\n          if (0 != e.VBR_max_bitrate_kbps && (e.VBR_max_bitrate_kbps = V(e.VBR_max_bitrate_kbps, e.version, e.out_samplerate), r.VBR_max_bitrate = H(e.VBR_max_bitrate_kbps, e.version, e.out_samplerate), r.VBR_max_bitrate < 0)) return -1;\n          e.VBR_min_bitrate_kbps = J.bitrate_table[e.version][r.VBR_min_bitrate], e.VBR_max_bitrate_kbps = J.bitrate_table[e.version][r.VBR_max_bitrate], e.VBR_mean_bitrate_kbps = Math.min(J.bitrate_table[e.version][r.VBR_max_bitrate], e.VBR_mean_bitrate_kbps), e.VBR_mean_bitrate_kbps = Math.max(J.bitrate_table[e.version][r.VBR_min_bitrate], e.VBR_mean_bitrate_kbps);\n        }\n        return e.tune && (r.PSY.mask_adjust += e.tune_value_a, r.PSY.mask_adjust_short += e.tune_value_a), function (e) {\n          var t = e.internal_flags;\n          switch (e.quality) {\n            default:\n            case 9:\n              t.psymodel = 0, t.noise_shaping = 0, t.noise_shaping_amp = 0, t.noise_shaping_stop = 0, t.use_best_huffman = 0, t.full_outer_loop = 0;\n              break;\n            case 8:\n              e.quality = 7;\n            case 7:\n              t.psymodel = 1, t.noise_shaping = 0, t.noise_shaping_amp = 0, t.noise_shaping_stop = 0, t.use_best_huffman = 0, t.full_outer_loop = 0;\n              break;\n            case 6:\n            case 5:\n              t.psymodel = 1, 0 == t.noise_shaping && (t.noise_shaping = 1), t.noise_shaping_amp = 0, t.noise_shaping_stop = 0, -1 == t.subblock_gain && (t.subblock_gain = 1), t.use_best_huffman = 0, t.full_outer_loop = 0;\n              break;\n            case 4:\n              t.psymodel = 1, 0 == t.noise_shaping && (t.noise_shaping = 1), t.noise_shaping_amp = 0, t.noise_shaping_stop = 0, -1 == t.subblock_gain && (t.subblock_gain = 1), t.use_best_huffman = 1, t.full_outer_loop = 0;\n              break;\n            case 3:\n              t.psymodel = 1, 0 == t.noise_shaping && (t.noise_shaping = 1), t.noise_shaping_amp = 1, -(t.noise_shaping_stop = 1) == t.subblock_gain && (t.subblock_gain = 1), t.use_best_huffman = 1, t.full_outer_loop = 0;\n              break;\n            case 2:\n              t.psymodel = 1, 0 == t.noise_shaping && (t.noise_shaping = 1), 0 == t.substep_shaping && (t.substep_shaping = 2), t.noise_shaping_amp = 1, -(t.noise_shaping_stop = 1) == t.subblock_gain && (t.subblock_gain = 1), t.use_best_huffman = 1, t.full_outer_loop = 0;\n              break;\n            case 1:\n            case 0:\n              t.psymodel = 1, 0 == t.noise_shaping && (t.noise_shaping = 1), 0 == t.substep_shaping && (t.substep_shaping = 2), t.noise_shaping_amp = 2, -(t.noise_shaping_stop = 1) == t.subblock_gain && (t.subblock_gain = 1), t.use_best_huffman = 1, t.full_outer_loop = 0;\n          }\n        }(e), z(0 <= e.scale), e.athaa_type < 0 ? r.ATH.useAdjust = 3 : r.ATH.useAdjust = e.athaa_type, r.ATH.aaSensitivityP = Math.pow(10, e.athaa_sensitivity / -10), null == e.short_blocks && (e.short_blocks = Y.short_block_allowed), e.short_blocks != Y.short_block_allowed || e.mode != MPEGMode.JOINT_STEREO && e.mode != MPEGMode.STEREO || (e.short_blocks = Y.short_block_coupled), e.quant_comp < 0 && (e.quant_comp = 1), e.quant_comp_short < 0 && (e.quant_comp_short = 0), e.msfix < 0 && (e.msfix = 0), e.exp_nspsytune = 1 | e.exp_nspsytune, e.internal_flags.nsPsy.attackthre < 0 && (e.internal_flags.nsPsy.attackthre = G.NSATTACKTHRE), e.internal_flags.nsPsy.attackthre_s < 0 && (e.internal_flags.nsPsy.attackthre_s = G.NSATTACKTHRE_S), z(0 <= e.scale), e.scale < 0 && (e.scale = 1), e.ATHtype < 0 && (e.ATHtype = 4), e.ATHcurve < 0 && (e.ATHcurve = 4), e.athaa_loudapprox < 0 && (e.athaa_loudapprox = 2), e.interChRatio < 0 && (e.interChRatio = 0), null == e.useTemporal && (e.useTemporal = !0), r.slot_lag = r.frac_SpF = 0, e.VBR == q.vbr_off && (r.slot_lag = r.frac_SpF = 72e3 * (e.version + 1) * e.brate % e.out_samplerate | 0), w.iteration_init(e), R.psymodel_init(e), z(0 <= e.scale), 0;\n      }, this.lame_encode_flush = function (e, t, n, a) {\n        var r,\n          s,\n          i,\n          o,\n          _ = e.internal_flags,\n          l = d([2, 1152]),\n          f = 0,\n          c = _.mf_samples_to_encode - ee.POSTDELAY,\n          u = N(e);\n        if (_.mf_samples_to_encode < 1) return 0;\n        for (r = 0, e.in_samplerate != e.out_samplerate && (c += 16 * e.out_samplerate / e.in_samplerate), (i = e.framesize - c % e.framesize) < 576 && (i += e.framesize), o = (c + (e.encoder_padding = i)) / e.framesize; 0 < o && 0 <= f;) {\n          var h = u - _.mf_size,\n            p = e.frameNum;\n          h *= e.in_samplerate, 1152 < (h /= e.out_samplerate) && (h = 1152), h < 1 && (h = 1), s = a - r, 0 == a && (s = 0), n += f = this.lame_encode_buffer(e, l[0], l[1], h, t, n, s), r += f, o -= p != e.frameNum ? 1 : 0;\n        }\n        if (f < (_.mf_samples_to_encode = 0)) return f;\n        if (s = a - r, 0 == a && (s = 0), P.flush_bitstream(e), (f = P.copy_buffer(_, t, n, s, 1)) < 0) return f;\n        if (n += f, s = a - (r += f), 0 == a && (s = 0), e.write_id3tag_automatic) {\n          if (M.id3tag_write_v1(e), (f = P.copy_buffer(_, t, n, s, 0)) < 0) return f;\n          r += f;\n        }\n        return r;\n      }, this.lame_encode_buffer = function (e, t, n, a, r, s, i) {\n        var o,\n          _,\n          l = e.internal_flags,\n          f = [null, null];\n        if (l.Class_ID != L) return -3;\n        if (0 == a) return 0;\n        _ = a, (null == (o = l).in_buffer_0 || o.in_buffer_nsamples < _) && (o.in_buffer_0 = j(_), o.in_buffer_1 = j(_), o.in_buffer_nsamples = _), f[0] = l.in_buffer_0, f[1] = l.in_buffer_1;\n        for (var c = 0; c < a; c++) f[0][c] = t[c], 1 < l.channels_in && (f[1][c] = n[c]);\n        return function (e, t, n, a, r, s, i) {\n          var o,\n            _,\n            l,\n            f,\n            c,\n            u = e.internal_flags,\n            h = 0,\n            p = [null, null],\n            d = [null, null];\n          if (u.Class_ID != L) return -3;\n          if (0 == a) return 0;\n          if ((c = P.copy_buffer(u, r, s, i, 0)) < 0) return c;\n          if (s += c, h += c, d[0] = t, d[1] = n, $.NEQ(e.scale, 0) && $.NEQ(e.scale, 1)) for (_ = 0; _ < a; ++_) d[0][_] *= e.scale, 2 == u.channels_out && (d[1][_] *= e.scale);\n          if ($.NEQ(e.scale_left, 0) && $.NEQ(e.scale_left, 1)) for (_ = 0; _ < a; ++_) d[0][_] *= e.scale_left;\n          if ($.NEQ(e.scale_right, 0) && $.NEQ(e.scale_right, 1)) for (_ = 0; _ < a; ++_) d[1][_] *= e.scale_right;\n          if (2 == e.num_channels && 1 == u.channels_out) for (_ = 0; _ < a; ++_) d[0][_] = .5 * (d[0][_] + d[1][_]), d[1][_] = 0;\n          f = N(e), p[0] = u.mfbuf[0], p[1] = u.mfbuf[1];\n          for (var b, m, v, g, w, S, y, M = 0; 0 < a;) {\n            var x = [null, null],\n              R = 0,\n              A = 0;\n            x[0] = d[0], x[1] = d[1];\n            var B = new F();\n            if (D(e, p, x, M, a, B), R = B.n_in, A = B.n_out, u.findReplayGain && !u.decode_on_the_fly && k.AnalyzeSamples(u.rgdata, p[0], u.mf_size, p[1], u.mf_size, A, u.channels_out) == GainAnalysis.GAIN_ANALYSIS_ERROR) return -6;\n            if (a -= R, M += R, u.channels_out, u.mf_size += A, z(u.mf_size <= K.MFSIZE), u.mf_samples_to_encode < 1 && (u.mf_samples_to_encode = ee.ENCDELAY + ee.POSTDELAY), u.mf_samples_to_encode += A, u.mf_size >= f) {\n              var E = i - h;\n              if (0 == i && (E = 0), b = e, m = p[0], v = p[1], g = r, w = s, S = E, void 0, y = T.enc.lame_encode_mp3_frame(b, m, v, g, w, S), b.frameNum++, (o = y) < 0) return o;\n              for (s += o, h += o, u.mf_size -= e.framesize, u.mf_samples_to_encode -= e.framesize, l = 0; l < u.channels_out; l++) for (_ = 0; _ < u.mf_size; _++) p[l][_] = p[l][_ + e.framesize];\n            }\n          }\n          return z(0 == a), h;\n        }(e, f[0], f[1], a, r, s, i);\n      };\n    };\n  }, function (e, t, n) {\n    var a = n(0),\n      xe = (a.System, a.VbrMode),\n      G = a.Float,\n      Re = a.ShortBlock,\n      K = a.Util,\n      Ae = a.Arrays,\n      Be = (a.new_array_n, a.new_byte, a.new_double, a.new_float),\n      Ee = a.new_float_n,\n      Te = a.new_int,\n      ke = (a.new_int_n, a.assert),\n      i = n(29),\n      Pe = n(1);\n    e.exports = function () {\n      var R = new i(),\n        A = 2.302585092994046,\n        _e = 2,\n        le = 16,\n        v = 2,\n        g = 16,\n        k = .34,\n        r = 1 / 217621504 / (Pe.BLKSIZE / 2),\n        fe = .3,\n        ce = 21,\n        w = .2302585093;\n      function S(e) {\n        return e;\n      }\n      function F(e, t) {\n        for (var n = 0, a = 0; a < Pe.BLKSIZE / 2; ++a) n += e[a] * t.ATH.eql_w[a];\n        return n *= r;\n      }\n      function ue(e, t, n, a, r, s, i, o, _, l, f) {\n        var c = e.internal_flags;\n        if (_ < 2) R.fft_long(c, a[r], _, l, f), R.fft_short(c, s[i], _, l, f);else if (2 == _) {\n          for (var u = Pe.BLKSIZE - 1; 0 <= u; --u) {\n            var h = a[r + 0][u],\n              p = a[r + 1][u];\n            a[r + 0][u] = (h + p) * K.SQRT2 * .5, a[r + 1][u] = (h - p) * K.SQRT2 * .5;\n          }\n          for (var d = 2; 0 <= d; --d) for (u = Pe.BLKSIZE_s - 1; 0 <= u; --u) h = s[i + 0][d][u], p = s[i + 1][d][u], s[i + 0][d][u] = (h + p) * K.SQRT2 * .5, s[i + 1][d][u] = (h - p) * K.SQRT2 * .5;\n        }\n        for (t[0] = S(a[r + 0][0]), t[0] *= t[0], u = Pe.BLKSIZE / 2 - 1; 0 <= u; --u) {\n          var b = a[r + 0][Pe.BLKSIZE / 2 - u],\n            m = a[r + 0][Pe.BLKSIZE / 2 + u];\n          t[Pe.BLKSIZE / 2 - u] = S(.5 * (b * b + m * m));\n        }\n        for (d = 2; 0 <= d; --d) for (n[d][0] = s[i + 0][d][0], n[d][0] *= n[d][0], u = Pe.BLKSIZE_s / 2 - 1; 0 <= u; --u) b = s[i + 0][d][Pe.BLKSIZE_s / 2 - u], m = s[i + 0][d][Pe.BLKSIZE_s / 2 + u], n[d][Pe.BLKSIZE_s / 2 - u] = S(.5 * (b * b + m * m));\n        var v = 0;\n        for (u = 11; u < Pe.HBLKSIZE; u++) v += t[u];\n        if (c.tot_ener[_] = v, e.analysis) {\n          for (u = 0; u < Pe.HBLKSIZE; u++) c.pinfo.energy[o][_][u] = c.pinfo.energy_save[_][u], c.pinfo.energy_save[_][u] = t[u];\n          c.pinfo.pe[o][_] = c.pe[_];\n        }\n        2 == e.athaa_loudapprox && _ < 2 && (c.loudness_sq[o][_] = c.loudness_sq_save[_], c.loudness_sq_save[_] = F(t, c));\n      }\n      var B,\n        E,\n        T,\n        P = 8,\n        L = 23,\n        I = 15,\n        he = [1, .79433, .63096, .63096, .63096, .63096, .63096, .25119, .11749],\n        f = [3.3246 * 3.3246, 3.23837 * 3.23837, 9.9500500969, 9.0247369744, 8.1854926609, 7.0440875649, 2.46209 * 2.46209, 2.284 * 2.284, 4.4892710641, 1.96552 * 1.96552, 1.82335 * 1.82335, 1.69146 * 1.69146, 2.4621061921, 2.1508568964, 1.37074 * 1.37074, 1.31036 * 1.31036, 1.5691069696, 1.4555939904, 1.16203 * 1.16203, 1.2715945225, 1.09428 * 1.09428, 1.0659 * 1.0659, 1.0779838276, 1.0382591025, 1],\n        c = [1.7782755904, 1.35879 * 1.35879, 1.38454 * 1.38454, 1.39497 * 1.39497, 1.40548 * 1.40548, 1.3537 * 1.3537, 1.6999465924, 1.22321 * 1.22321, 1.3169398564, 1],\n        u = [5.5396212496, 2.29259 * 2.29259, 4.9868695969, 2.12675 * 2.12675, 2.02545 * 2.02545, 1.87894 * 1.87894, 1.74303 * 1.74303, 1.61695 * 1.61695, 2.2499700001, 1.39148 * 1.39148, 1.29083 * 1.29083, 1.19746 * 1.19746, 1.2339655056, 1.0779838276];\n      function pe(e, t, n, a, r, s) {\n        var i, o, _;\n        if (e < t) {\n          if (!(t < e * E)) return e + t;\n          i = t / e;\n        } else {\n          if (t * E <= e) return e + t;\n          i = e / t;\n        }\n        if (ke(0 <= e), ke(0 <= t), e += t, a + 3 <= 6) {\n          if (B <= i) return e;\n          var l = 0 | K.FAST_LOG10_X(i, 16);\n          return e * c[l];\n        }\n        return l = 0 | K.FAST_LOG10_X(i, 16), t = 0 != s ? r.ATH.cb_s[n] * r.ATH.adjust : r.ATH.cb_l[n] * r.ATH.adjust, ke(0 <= t), e < T * t ? t < e ? (o = 1, l <= 13 && (o = u[l]), _ = K.FAST_LOG10_X(e / t, 10 / 15), e * ((f[l] - o) * _ + o)) : 13 < l ? e : e * u[l] : e * f[l];\n      }\n      var s = [1.7782755904, 1.35879 * 1.35879, 1.38454 * 1.38454, 1.39497 * 1.39497, 1.40548 * 1.40548, 1.3537 * 1.3537, 1.6999465924, 1.22321 * 1.22321, 1.3169398564, 1];\n      function x(e, t, n) {\n        var a;\n        if (e < 0 && (e = 0), t < 0 && (t = 0), e <= 0) return t;\n        if (t <= 0) return e;\n        if (a = e < t ? t / e : e / t, -2 <= n && n <= 2) {\n          if (B <= a) return e + t;\n          var r = 0 | K.FAST_LOG10_X(a, 16);\n          return (e + t) * s[r];\n        }\n        return a < E ? e + t : (e < t && (e = t), e);\n      }\n      function de(e, t, n, a, r) {\n        var s,\n          i,\n          o = 0,\n          _ = 0;\n        for (s = i = 0; s < Pe.SBMAX_s; ++i, ++s) {\n          for (var l = e.bo_s[s], f = e.npart_s, c = l < f ? l : f; i < c;) ke(0 <= t[i]), ke(0 <= n[i]), o += t[i], _ += n[i], i++;\n          if (e.en[a].s[s][r] = o, e.thm[a].s[s][r] = _, f <= i) {\n            ++s;\n            break;\n          }\n          ke(0 <= t[i]), ke(0 <= n[i]);\n          var u = e.PSY.bo_s_weight[s],\n            h = 1 - u;\n          o = u * t[i], _ = u * n[i], e.en[a].s[s][r] += o, e.thm[a].s[s][r] += _, o = h * t[i], _ = h * n[i];\n        }\n        for (; s < Pe.SBMAX_s; ++s) e.en[a].s[s][r] = 0, e.thm[a].s[s][r] = 0;\n      }\n      function be(e, t, n, a) {\n        var r,\n          s,\n          i = 0,\n          o = 0;\n        for (r = s = 0; r < Pe.SBMAX_l; ++s, ++r) {\n          for (var _ = e.bo_l[r], l = e.npart_l, f = _ < l ? _ : l; s < f;) ke(0 <= t[s]), ke(0 <= n[s]), i += t[s], o += n[s], s++;\n          if (e.en[a].l[r] = i, e.thm[a].l[r] = o, l <= s) {\n            ++r;\n            break;\n          }\n          ke(0 <= t[s]), ke(0 <= n[s]);\n          var c = e.PSY.bo_l_weight[r],\n            u = 1 - c;\n          i = c * t[s], o = c * n[s], e.en[a].l[r] += i, e.thm[a].l[r] += o, i = u * t[s], o = u * n[s];\n        }\n        for (; r < Pe.SBMAX_l; ++r) e.en[a].l[r] = 0, e.thm[a].l[r] = 0;\n      }\n      function me(e, t, n, a, r, s) {\n        var i,\n          o,\n          _ = e.internal_flags;\n        for (o = i = 0; o < _.npart_s; ++o) {\n          for (var l = 0, f = 0, c = _.numlines_s[o], u = 0; u < c; ++u, ++i) {\n            var h = t[s][i];\n            l += h, f < h && (f = h);\n          }\n          n[o] = l;\n        }\n        for (ke(o == _.npart_s), ke(129 == i), i = o = 0; o < _.npart_s; o++) {\n          var p = _.s3ind_s[o][0],\n            d = _.s3_ss[i++] * n[p];\n          for (++p; p <= _.s3ind_s[o][1];) d += _.s3_ss[i] * n[p], ++i, ++p;\n          var b = v * _.nb_s1[r][o];\n          if (a[o] = Math.min(d, b), _.blocktype_old[1 & r] == Pe.SHORT_TYPE) {\n            b = g * _.nb_s2[r][o];\n            var m = a[o];\n            a[o] = Math.min(b, m);\n          }\n          _.nb_s2[r][o] = _.nb_s1[r][o], _.nb_s1[r][o] = d, ke(0 <= a[o]);\n        }\n        for (; o <= Pe.CBANDS; ++o) n[o] = 0, a[o] = 0;\n      }\n      function ve(e, t, n) {\n        return 1 <= n ? e : n <= 0 ? t : 0 < t ? Math.pow(e / t, n) * t : 0;\n      }\n      var _ = [11.8, 13.6, 17.2, 32, 46.5, 51.3, 57.5, 67.1, 71.5, 84.6, 97.6, 130];\n      function ge(e, t) {\n        for (var n = 309.07, a = 0; a < Pe.SBMAX_s - 1; a++) for (var r = 0; r < 3; r++) {\n          var s = e.thm.s[a][r];\n          if (ke(a < _.length), 0 < s) {\n            var i = s * t,\n              o = e.en.s[a][r];\n            i < o && (1e10 * i < o ? n += _[a] * (10 * A) : (ke(0 < i), n += _[a] * K.FAST_LOG10(o / i)));\n          }\n        }\n        return n;\n      }\n      var o = [6.8, 5.8, 5.8, 6.4, 6.5, 9.9, 12.1, 14.4, 15, 18.9, 21.6, 26.9, 34.2, 40.2, 46.8, 56.5, 60.7, 73.9, 85.7, 93.4, 126.1];\n      function we(e, t) {\n        for (var n = 281.0575, a = 0; a < Pe.SBMAX_l - 1; a++) {\n          var r = e.thm.l[a];\n          if (ke(a < o.length), 0 < r) {\n            var s = r * t,\n              i = e.en.l[a];\n            s < i && (1e10 * s < i ? n += o[a] * (10 * A) : (ke(0 < s), n += o[a] * K.FAST_LOG10(i / s)));\n          }\n        }\n        return n;\n      }\n      function Se(e, t, n, a, r) {\n        var s, i;\n        for (s = i = 0; s < e.npart_l; ++s) {\n          var o,\n            _ = 0,\n            l = 0;\n          for (o = 0; o < e.numlines_l[s]; ++o, ++i) {\n            var f = t[i];\n            ke(0 <= f), _ += f, l < f && (l = f);\n          }\n          n[s] = _, a[s] = l, r[s] = _ * e.rnumlines_l[s], ke(0 <= e.rnumlines_l[s]), ke(0 <= _), ke(0 <= n[s]), ke(0 <= a[s]), ke(0 <= r[s]);\n        }\n      }\n      function ye(e, t, n, a) {\n        var r = he.length - 1,\n          s = 0,\n          i = n[s] + n[s + 1];\n        for (ke(0 <= i), a[s] = 0 < i ? ((o = t[s]) < t[s + 1] && (o = t[s + 1]), ke(0 < e.numlines_l[s] + e.numlines_l[s + 1] - 1), r < (_ = 0 | (i = 20 * (2 * o - i) / (i * (e.numlines_l[s] + e.numlines_l[s + 1] - 1)))) && (_ = r), _) : 0, s = 1; s < e.npart_l - 1; s++) {\n          var o, _;\n          i = n[s - 1] + n[s] + n[s + 1], ke(0 <= i), a[s] = 0 < i ? ((o = t[s - 1]) < t[s] && (o = t[s]), o < t[s + 1] && (o = t[s + 1]), ke(0 < e.numlines_l[s - 1] + e.numlines_l[s] + e.numlines_l[s + 1] - 1), r < (_ = 0 | (i = 20 * (3 * o - i) / (i * (e.numlines_l[s - 1] + e.numlines_l[s] + e.numlines_l[s + 1] - 1)))) && (_ = r), _) : 0;\n        }\n        ke(0 < s), ke(s == e.npart_l - 1), i = n[s - 1] + n[s], ke(0 <= i), a[s] = 0 < i ? ((o = t[s - 1]) < t[s] && (o = t[s]), ke(0 < e.numlines_l[s - 1] + e.numlines_l[s] - 1), r < (_ = 0 | (i = 20 * (2 * o - i) / (i * (e.numlines_l[s - 1] + e.numlines_l[s] - 1)))) && (_ = r), _) : 0, ke(s == e.npart_l - 1);\n      }\n      var Me = [-1730326e-23, -.01703172, -1349528e-23, .0418072, -673278e-22, -.0876324, -30835e-21, .1863476, -1104424e-22, -.627638];\n      function C(e, t, n, a, r, s, i, o) {\n        var _ = e.internal_flags;\n        if (a < 2) R.fft_long(_, i[o], a, t, n);else if (2 == a) for (var l = Pe.BLKSIZE - 1; 0 <= l; --l) {\n          var f = i[o + 0][l],\n            c = i[o + 1][l];\n          i[o + 0][l] = (f + c) * K.SQRT2 * .5, i[o + 1][l] = (f - c) * K.SQRT2 * .5;\n        }\n        for (s[0] = S(i[o + 0][0]), s[0] *= s[0], l = Pe.BLKSIZE / 2 - 1; 0 <= l; --l) {\n          var u = i[o + 0][Pe.BLKSIZE / 2 - l],\n            h = i[o + 0][Pe.BLKSIZE / 2 + l];\n          s[Pe.BLKSIZE / 2 - l] = S(.5 * (u * u + h * h));\n        }\n        var p = 0;\n        for (l = 11; l < Pe.HBLKSIZE; l++) p += s[l];\n        if (_.tot_ener[a] = p, e.analysis) {\n          for (l = 0; l < Pe.HBLKSIZE; l++) _.pinfo.energy[r][a][l] = _.pinfo.energy_save[a][l], _.pinfo.energy_save[a][l] = s[l];\n          _.pinfo.pe[r][a] = _.pe[a];\n        }\n      }\n      function D(e, t, n, a, r, s, i, o) {\n        var _ = e.internal_flags;\n        if (0 == r && a < 2 && R.fft_short(_, i[o], a, t, n), 2 == a) for (var l = Pe.BLKSIZE_s - 1; 0 <= l; --l) {\n          var f = i[o + 0][r][l],\n            c = i[o + 1][r][l];\n          i[o + 0][r][l] = (f + c) * K.SQRT2 * .5, i[o + 1][r][l] = (f - c) * K.SQRT2 * .5;\n        }\n        for (s[r][0] = i[o + 0][r][0], s[r][0] *= s[r][0], l = Pe.BLKSIZE_s / 2 - 1; 0 <= l; --l) {\n          var u = i[o + 0][r][Pe.BLKSIZE_s / 2 - l],\n            h = i[o + 0][r][Pe.BLKSIZE_s / 2 + l];\n          s[r][Pe.BLKSIZE_s / 2 - l] = S(.5 * (u * u + h * h));\n        }\n      }\n      this.L3psycho_anal_ns = function (e, t, n, a, r, s, i, o, _, l) {\n        var f,\n          c,\n          u,\n          h,\n          p,\n          d,\n          b,\n          m,\n          v,\n          g,\n          w = e.internal_flags,\n          S = Ee([2, Pe.BLKSIZE]),\n          y = Ee([2, 3, Pe.BLKSIZE_s]),\n          M = Be(Pe.CBANDS + 1),\n          x = Be(Pe.CBANDS + 1),\n          R = Be(Pe.CBANDS + 2),\n          A = Te(2),\n          B = Te(2),\n          E = Ee([2, 576]),\n          T = Te(Pe.CBANDS + 2),\n          k = Te(Pe.CBANDS + 2);\n        for (Ae.fill(k, 0), f = w.channels_out, e.mode == MPEGMode.JOINT_STEREO && (f = 4), v = e.VBR == xe.vbr_off ? 0 == w.ResvMax ? 0 : w.ResvSize / w.ResvMax * .5 : e.VBR == xe.vbr_rh || e.VBR == xe.vbr_mtrh || e.VBR == xe.vbr_mt ? .6 : 1, c = 0; c < w.channels_out; c++) {\n          var P = t[c],\n            L = n + 576 - 350 - ce + 192;\n          for (ke(Me.length == (ce - 1) / 2), h = 0; h < 576; h++) {\n            var I, V;\n            for (I = P[L + h + 10], p = V = 0; p < (ce - 1) / 2 - 1; p += 2) I += Me[p] * (P[L + h + p] + P[L + h + ce - p]), V += Me[p + 1] * (P[L + h + p + 1] + P[L + h + ce - p - 1]);\n            E[c][h] = I + V;\n          }\n          r[a][c].en.assign(w.en[c]), r[a][c].thm.assign(w.thm[c]), 2 < f && (s[a][c].en.assign(w.en[c + 2]), s[a][c].thm.assign(w.thm[c + 2]));\n        }\n        for (c = 0; c < f; c++) {\n          var H,\n            O = Be(12),\n            N = [0, 0, 0, 0],\n            F = Be(12),\n            C = 1,\n            D = Be(Pe.CBANDS),\n            X = Be(Pe.CBANDS),\n            q = [0, 0, 0, 0],\n            Y = Be(Pe.HBLKSIZE),\n            j = Ee([3, Pe.HBLKSIZE_s]);\n          for (ke(w.npart_s <= Pe.CBANDS), ke(w.npart_l <= Pe.CBANDS), h = 0; h < 3; h++) O[h] = w.nsPsy.last_en_subshort[c][h + 6], ke(0 < w.nsPsy.last_en_subshort[c][h + 4]), F[h] = O[h] / w.nsPsy.last_en_subshort[c][h + 4], N[0] += O[h];\n          if (2 == c) for (h = 0; h < 576; h++) {\n            var U, z;\n            U = E[0][h], z = E[1][h], E[0][h] = U + z, E[1][h] = U - z;\n          }\n          var G = E[1 & c],\n            K = 0;\n          for (h = 0; h < 9; h++) {\n            for (var Z = K + 64, Q = 1; K < Z; K++) Q < Math.abs(G[K]) && (Q = Math.abs(G[K]));\n            w.nsPsy.last_en_subshort[c][h] = O[h + 3] = Q, N[1 + h / 3] += Q, Q > O[h + 3 - 2] ? (ke(0 < O[h + 3 - 2]), Q /= O[h + 3 - 2]) : Q = O[h + 3 - 2] > 10 * Q ? (ke(0 < Q), O[h + 3 - 2] / (10 * Q)) : 0, F[h + 3] = Q;\n          }\n          if (e.analysis) {\n            var W = F[0];\n            for (h = 1; h < 12; h++) W < F[h] && (W = F[h]);\n            w.pinfo.ers[a][c] = w.pinfo.ers_save[c], w.pinfo.ers_save[c] = W;\n          }\n          for (H = 3 == c ? w.nsPsy.attackthre_s : w.nsPsy.attackthre, h = 0; h < 12; h++) 0 == q[h / 3] && F[h] > H && (q[h / 3] = h % 3 + 1);\n          for (h = 1; h < 4; h++) (N[h - 1] > N[h] ? (ke(0 < N[h]), N[h - 1] / N[h]) : (ke(0 < N[h - 1]), N[h] / N[h - 1])) < 1.7 && (q[h] = 0, 1 == h && (q[0] = 0));\n          for (0 != q[0] && 0 != w.nsPsy.lastAttacks[c] && (q[0] = 0), 3 != w.nsPsy.lastAttacks[c] && q[0] + q[1] + q[2] + q[3] == 0 || ((C = 0) != q[1] && 0 != q[0] && (q[1] = 0), 0 != q[2] && 0 != q[1] && (q[2] = 0), 0 != q[3] && 0 != q[2] && (q[3] = 0)), c < 2 ? B[c] = C : 0 == C && (B[0] = B[1] = 0), _[c] = w.tot_ener[c], ue(e, Y, j, S, 1 & c, y, 1 & c, a, c, t, n), Se(w, Y, M, D, X), ye(w, D, X, T), m = 0; m < 3; m++) {\n            var $, J;\n            for (me(e, j, x, R, c, m), de(w, x, R, c, m), b = 0; b < Pe.SBMAX_s; b++) {\n              if (J = w.thm[c].s[b][m], J *= .8, 2 <= q[m] || 1 == q[m + 1]) {\n                var ee = 0 != m ? m - 1 : 2;\n                Q = ve(w.thm[c].s[b][ee], J, .6 * v), J = Math.min(J, Q);\n              }\n              1 == q[m] ? (ee = 0 != m ? m - 1 : 2, Q = ve(w.thm[c].s[b][ee], J, fe * v), J = Math.min(J, Q)) : (0 != m && 3 == q[m - 1] || 0 == m && 3 == w.nsPsy.lastAttacks[c]) && (ee = 2 != m ? m + 1 : 0, Q = ve(w.thm[c].s[b][ee], J, fe * v), J = Math.min(J, Q)), $ = O[3 * m + 3] + O[3 * m + 4] + O[3 * m + 5], 6 * O[3 * m + 5] < $ && (J *= .5, 6 * O[3 * m + 4] < $ && (J *= .5)), w.thm[c].s[b][m] = J;\n            }\n          }\n          for (w.nsPsy.lastAttacks[c] = q[2], u = d = 0; u < w.npart_l; u++) {\n            for (var te = w.s3ind[u][0], ne = M[te] * he[T[te]], ae = w.s3_ll[d++] * ne; ++te <= w.s3ind[u][1];) ne = M[te] * he[T[te]], ae = pe(ae, w.s3_ll[d++] * ne, te, te - u, w, 0);\n            ae *= .158489319246111, w.blocktype_old[1 & c] == Pe.SHORT_TYPE ? R[u] = ae : R[u] = ve(Math.min(ae, Math.min(_e * w.nb_1[c][u], le * w.nb_2[c][u])), ae, v), w.nb_2[c][u] = w.nb_1[c][u], w.nb_1[c][u] = ae;\n          }\n          for (; u <= Pe.CBANDS; ++u) M[u] = 0, R[u] = 0;\n          be(w, M, R, c);\n        }\n        for (e.mode != MPEGMode.STEREO && e.mode != MPEGMode.JOINT_STEREO || 0 < e.interChRatio && function (e, t) {\n          var n = e.internal_flags;\n          if (1 < n.channels_out) {\n            for (var a = 0; a < Pe.SBMAX_l; a++) {\n              var r = n.thm[0].l[a],\n                s = n.thm[1].l[a];\n              n.thm[0].l[a] += s * t, n.thm[1].l[a] += r * t;\n            }\n            for (a = 0; a < Pe.SBMAX_s; a++) for (var i = 0; i < 3; i++) r = n.thm[0].s[a][i], s = n.thm[1].s[a][i], n.thm[0].s[a][i] += s * t, n.thm[1].s[a][i] += r * t;\n          }\n        }(e, e.interChRatio), e.mode == MPEGMode.JOINT_STEREO && (function (e) {\n          for (var t = 0; t < Pe.SBMAX_l; t++) if (!(e.thm[0].l[t] > 1.58 * e.thm[1].l[t] || e.thm[1].l[t] > 1.58 * e.thm[0].l[t])) {\n            var n = e.mld_l[t] * e.en[3].l[t],\n              a = Math.max(e.thm[2].l[t], Math.min(e.thm[3].l[t], n));\n            n = e.mld_l[t] * e.en[2].l[t];\n            var r = Math.max(e.thm[3].l[t], Math.min(e.thm[2].l[t], n));\n            e.thm[2].l[t] = a, e.thm[3].l[t] = r;\n          }\n          for (t = 0; t < Pe.SBMAX_s; t++) for (var s = 0; s < 3; s++) e.thm[0].s[t][s] > 1.58 * e.thm[1].s[t][s] || e.thm[1].s[t][s] > 1.58 * e.thm[0].s[t][s] || (n = e.mld_s[t] * e.en[3].s[t][s], a = Math.max(e.thm[2].s[t][s], Math.min(e.thm[3].s[t][s], n)), n = e.mld_s[t] * e.en[2].s[t][s], r = Math.max(e.thm[3].s[t][s], Math.min(e.thm[2].s[t][s], n)), e.thm[2].s[t][s] = a, e.thm[3].s[t][s] = r);\n        }(w), g = e.msfix, 0 < Math.abs(g) && function (e, t, n) {\n          var a = t,\n            r = Math.pow(10, n);\n          t *= 2, a *= 2;\n          for (var s = 0; s < Pe.SBMAX_l; s++) f = e.ATH.cb_l[e.bm_l[s]] * r, (o = Math.min(Math.max(e.thm[0].l[s], f), Math.max(e.thm[1].l[s], f))) * t < (_ = Math.max(e.thm[2].l[s], f)) + (l = Math.max(e.thm[3].l[s], f)) && ke(0 < (_ *= c = o * a / (_ + l)) + (l *= c)), e.thm[2].l[s] = Math.min(_, e.thm[2].l[s]), e.thm[3].l[s] = Math.min(l, e.thm[3].l[s]);\n          for (r *= Pe.BLKSIZE_s / Pe.BLKSIZE, s = 0; s < Pe.SBMAX_s; s++) for (var i = 0; i < 3; i++) {\n            var o, _, l, f, c;\n            f = e.ATH.cb_s[e.bm_s[s]] * r, (o = Math.min(Math.max(e.thm[0].s[s][i], f), Math.max(e.thm[1].s[s][i], f))) * t < (_ = Math.max(e.thm[2].s[s][i], f)) + (l = Math.max(e.thm[3].s[s][i], f)) && ke(0 < (_ *= c = o * t / (_ + l)) + (l *= c)), e.thm[2].s[s][i] = Math.min(e.thm[2].s[s][i], _), e.thm[3].s[s][i] = Math.min(e.thm[3].s[s][i], l);\n          }\n        }(w, g, e.ATHlower * w.ATH.adjust)), function (e, t, n, a) {\n          var r = e.internal_flags;\n          e.short_blocks != Re.short_block_coupled || 0 != t[0] && 0 != t[1] || (t[0] = t[1] = 0);\n          for (var s = 0; s < r.channels_out; s++) a[s] = Pe.NORM_TYPE, e.short_blocks == Re.short_block_dispensed && (t[s] = 1), e.short_blocks == Re.short_block_forced && (t[s] = 0), 0 != t[s] ? (ke(r.blocktype_old[s] != Pe.START_TYPE), r.blocktype_old[s] == Pe.SHORT_TYPE && (a[s] = Pe.STOP_TYPE)) : (a[s] = Pe.SHORT_TYPE, r.blocktype_old[s] == Pe.NORM_TYPE && (r.blocktype_old[s] = Pe.START_TYPE), r.blocktype_old[s] == Pe.STOP_TYPE && (r.blocktype_old[s] = Pe.SHORT_TYPE)), n[s] = r.blocktype_old[s], r.blocktype_old[s] = a[s];\n        }(e, B, l, A), c = 0; c < f; c++) {\n          var re,\n            se,\n            ie,\n            oe = 0;\n          ie = 1 < c ? (re = o, oe = -2, se = Pe.NORM_TYPE, l[0] != Pe.SHORT_TYPE && l[1] != Pe.SHORT_TYPE || (se = Pe.SHORT_TYPE), s[a][c - 2]) : (re = i, oe = 0, se = l[c], r[a][c]), se == Pe.SHORT_TYPE ? re[oe + c] = ge(ie, w.masking_lower) : re[oe + c] = we(ie, w.masking_lower), e.analysis && (w.pinfo.pe[a][c] = re[oe + c]);\n        }\n        return 0;\n      };\n      var X = [-1730326e-23, -.01703172, -1349528e-23, .0418072, -673278e-22, -.0876324, -30835e-21, .1863476, -1104424e-22, -.627638];\n      function q(e, t, n) {\n        if (0 == n) for (var a = 0; a < e.npart_s; a++) e.nb_s2[t][a] = e.nb_s1[t][a], e.nb_s1[t][a] = 0;\n      }\n      function Y(e, t) {\n        for (var n = 0; n < e.npart_l; n++) e.nb_2[t][n] = e.nb_1[t][n], e.nb_1[t][n] = 0;\n      }\n      function j(e, t, n, a, r, s) {\n        var i,\n          o,\n          _,\n          l = e.internal_flags,\n          f = new float[Pe.CBANDS](),\n          c = Be(Pe.CBANDS),\n          u = new int[Pe.CBANDS]();\n        for (_ = o = 0; _ < l.npart_s; ++_) {\n          var h = 0,\n            p = 0,\n            d = l.numlines_s[_];\n          for (i = 0; i < d; ++i, ++o) {\n            var b = t[s][o];\n            h += b, p < b && (p = b);\n          }\n          n[_] = h, ke(0 <= h), f[_] = p, ke(0 < d), c[_] = h / d, ke(0 <= c[_]);\n        }\n        for (ke(_ == l.npart_s), ke(129 == o); _ < Pe.CBANDS; ++_) f[_] = 0, c[_] = 0;\n        for (function (e, t, n, a) {\n          var r = he.length - 1,\n            s = 0,\n            i = n[s] + n[s + 1];\n          for (ke(0 <= i), a[s] = 0 < i ? ((o = t[s]) < t[s + 1] && (o = t[s + 1]), ke(0 < e.numlines_s[s] + e.numlines_s[s + 1] - 1), r < (_ = 0 | (i = 20 * (2 * o - i) / (i * (e.numlines_s[s] + e.numlines_s[s + 1] - 1)))) && (_ = r), _) : 0, s = 1; s < e.npart_s - 1; s++) {\n            var o, _;\n            i = n[s - 1] + n[s] + n[s + 1], ke(s + 1 < e.npart_s), ke(0 <= i), a[s] = 0 < i ? ((o = t[s - 1]) < t[s] && (o = t[s]), o < t[s + 1] && (o = t[s + 1]), ke(0 < e.numlines_s[s - 1] + e.numlines_s[s] + e.numlines_s[s + 1] - 1), r < (_ = 0 | (i = 20 * (3 * o - i) / (i * (e.numlines_s[s - 1] + e.numlines_s[s] + e.numlines_s[s + 1] - 1)))) && (_ = r), _) : 0;\n          }\n          ke(0 < s), ke(s == e.npart_s - 1), i = n[s - 1] + n[s], ke(0 <= i), a[s] = 0 < i ? ((o = t[s - 1]) < t[s] && (o = t[s]), ke(0 < e.numlines_s[s - 1] + e.numlines_s[s] - 1), r < (_ = 0 | (i = 20 * (2 * o - i) / (i * (e.numlines_s[s - 1] + e.numlines_s[s] - 1)))) && (_ = r), _) : 0, ke(s == e.npart_s - 1);\n        }(l, f, c, u), o = _ = 0; _ < l.npart_s; _++) {\n          var m,\n            v,\n            g,\n            w,\n            S,\n            y = l.s3ind_s[_][0],\n            M = l.s3ind_s[_][1];\n          for (m = u[y], v = 1, w = l.s3_ss[o] * n[y] * he[u[y]], ++o, ++y; y <= M;) m += u[y], v += 1, w = x(w, g = l.s3_ss[o] * n[y] * he[u[y]], y - _), ++o, ++y;\n          w *= S = .5 * he[m = (1 + 2 * m) / (2 * v)], a[_] = w, l.nb_s2[r][_] = l.nb_s1[r][_], l.nb_s1[r][_] = w, g = f[_], g *= l.minval_s[_], g *= S, a[_] > g && (a[_] = g), 1 < l.masking_lower && (a[_] *= l.masking_lower), a[_] > n[_] && (a[_] = n[_]), l.masking_lower < 1 && (a[_] *= l.masking_lower), ke(0 <= a[_]);\n        }\n        for (; _ < Pe.CBANDS; ++_) n[_] = 0, a[_] = 0;\n      }\n      function U(e, t, n, a, r) {\n        var s,\n          i = Be(Pe.CBANDS),\n          o = Be(Pe.CBANDS),\n          _ = Te(Pe.CBANDS + 2);\n        Se(e, t, n, i, o), ye(e, i, o, _);\n        var l = 0;\n        for (s = 0; s < e.npart_l; s++) {\n          var f,\n            c,\n            u,\n            h = e.s3ind[s][0],\n            p = e.s3ind[s][1],\n            d = 0,\n            b = 0;\n          for (d = _[h], b += 1, c = e.s3_ll[l] * n[h] * he[_[h]], ++l, ++h; h <= p;) d += _[h], b += 1, c = x(c, f = e.s3_ll[l] * n[h] * he[_[h]], h - s), ++l, ++h;\n          if (c *= u = .5 * he[d = (1 + 2 * d) / (2 * b)], e.blocktype_old[1 & r] == Pe.SHORT_TYPE) {\n            var m = _e * e.nb_1[r][s];\n            a[s] = 0 < m ? Math.min(c, m) : Math.min(c, n[s] * fe);\n          } else {\n            var v = le * e.nb_2[r][s],\n              g = _e * e.nb_1[r][s];\n            v <= 0 && (v = c), g <= 0 && (g = c), m = e.blocktype_old[1 & r] == Pe.NORM_TYPE ? Math.min(g, v) : g, a[s] = Math.min(c, m);\n          }\n          e.nb_2[r][s] = e.nb_1[r][s], e.nb_1[r][s] = c, f = i[s], f *= e.minval_l[s], f *= u, a[s] > f && (a[s] = f), 1 < e.masking_lower && (a[s] *= e.masking_lower), a[s] > n[s] && (a[s] = n[s]), e.masking_lower < 1 && (a[s] *= e.masking_lower), ke(0 <= a[s]);\n        }\n        for (; s < Pe.CBANDS; ++s) n[s] = 0, a[s] = 0;\n      }\n      function z(e, t, n, a, r, s, i) {\n        for (var o, _, l = 2 * s, f = 0 < s ? Math.pow(10, r) : 1, c = 0; c < i; ++c) {\n          var u = e[2][c],\n            h = e[3][c],\n            p = t[0][c],\n            d = t[1][c],\n            b = t[2][c],\n            m = t[3][c];\n          if (p <= 1.58 * d && d <= 1.58 * p) {\n            var v = n[c] * h,\n              g = n[c] * u;\n            _ = Math.max(b, Math.min(m, v)), o = Math.max(m, Math.min(b, g));\n          } else _ = b, o = m;\n          if (0 < s) {\n            var w,\n              S,\n              y = a[c] * f;\n            if (w = Math.min(Math.max(p, y), Math.max(d, y)), 0 < (S = (b = Math.max(_, y)) + (m = Math.max(o, y))) && w * l < S) {\n              var M = w * l / S;\n              b *= M, m *= M, ke(0 < S);\n            }\n            _ = Math.min(b, _), o = Math.min(m, o);\n          }\n          u < _ && (_ = u), h < o && (o = h), t[2][c] = _, t[3][c] = o;\n        }\n      }\n      function y(e, t) {\n        var n;\n        return (n = 0 <= e ? 27 * -e : e * t) <= -72 ? 0 : Math.exp(n * w);\n      }\n      function M(e) {\n        var t,\n          n,\n          a,\n          r,\n          s = 0;\n        for (s = 0; 1e-20 < y(s, e); s -= 1);\n        for (a = s, r = 0; 1e-12 < Math.abs(r - a);) 0 < y(s = (r + a) / 2, e) ? r = s : a = s;\n        for (t = a, s = s = 0; 1e-20 < y(s, e); s += 1);\n        for (a = 0, r = s; 1e-12 < Math.abs(r - a);) 0 < y(s = (r + a) / 2, e) ? a = s : r = s;\n        n = r;\n        var i,\n          o = 0;\n        for (i = 0; i <= 1e3; ++i) o += y(s = t + i * (n - t) / 1e3, e);\n        return 1001 / (o * (n - t));\n      }\n      function V(e) {\n        return e < 0 && (e = 0), e *= .001, 13 * Math.atan(.76 * e) + 3.5 * Math.atan(e * e / 56.25);\n      }\n      function H(e, t, n, a, r, s, i, o, _, l, f, c) {\n        var u,\n          h = Be(Pe.CBANDS + 1),\n          p = o / (15 < c ? 1152 : 384),\n          d = Te(Pe.HBLKSIZE);\n        o /= _;\n        var b = 0,\n          m = 0;\n        for (u = 0; u < Pe.CBANDS; u++) {\n          var v;\n          for (B = V(o * b), h[u] = o * b, v = b; V(o * v) - B < k && v <= _ / 2; v++);\n          for (e[u] = v - b, m = u + 1; b < v;) ke(b < Pe.HBLKSIZE), d[b++] = u;\n          if (_ / 2 < b) {\n            b = _ / 2, ++u;\n            break;\n          }\n        }\n        ke(u < Pe.CBANDS), h[u] = o * b;\n        for (var g = 0; g < c; g++) {\n          var w, S, y, M, x;\n          y = l[g], M = l[g + 1], (w = 0 | Math.floor(.5 + f * (y - .5))) < 0 && (w = 0), _ / 2 < (S = 0 | Math.floor(.5 + f * (M - .5))) && (S = _ / 2), n[g] = (d[w] + d[S]) / 2, t[g] = d[S];\n          var R = p * M;\n          i[g] = (R - h[t[g]]) / (h[t[g] + 1] - h[t[g]]), i[g] < 0 ? i[g] = 0 : 1 < i[g] && (i[g] = 1), x = V(o * l[g] * f), x = Math.min(x, 15.5) / 15.5, s[g] = Math.pow(10, 1.25 * (1 - Math.cos(Math.PI * x)) - 2.5);\n        }\n        for (var A = b = 0; A < m; A++) {\n          var B,\n            E,\n            T = e[A];\n          B = V(o * b), E = V(o * (b + T - 1)), a[A] = .5 * (B + E), B = V(o * (b - .5)), E = V(o * (b + T - .5)), r[A] = E - B, b += T;\n        }\n        return m;\n      }\n      function O(e, t, n, a, r, s) {\n        var i,\n          o,\n          _,\n          l,\n          f,\n          c,\n          u = Ee([Pe.CBANDS, Pe.CBANDS]),\n          h = 0;\n        if (s) for (var p = 0; p < t; p++) for (i = 0; i < t; i++) {\n          var d = (o = n[p] - n[i], c = f = l = _ = void 0, _ = o, l = .5 <= (_ *= 0 <= _ ? 3 : 1.5) && _ <= 2.5 ? 8 * ((c = _ - .5) * c - 2 * c) : 0, ((f = 15.811389 + 7.5 * (_ += .474) - 17.5 * Math.sqrt(1 + _ * _)) <= -60 ? 0 : (_ = Math.exp((l + f) * w), _ /= .6609193)) * a[i]);\n          u[p][i] = d * r[p];\n        } else for (i = 0; i < t; i++) {\n          var b = 15 + Math.min(21 / n[i], 12),\n            m = M(b);\n          for (p = 0; p < t; p++) d = m * y(n[p] - n[i], b) * a[i], u[p][i] = d * r[p];\n        }\n        for (p = 0; p < t; p++) {\n          for (i = 0; i < t && !(0 < u[p][i]); i++);\n          for (e[p][0] = i, i = t - 1; 0 < i && !(0 < u[p][i]); i--);\n          e[p][1] = i, h += e[p][1] - e[p][0] + 1;\n        }\n        var v = Be(h),\n          g = 0;\n        for (p = 0; p < t; p++) for (i = e[p][0]; i <= e[p][1]; i++) v[g++] = u[p][i];\n        return v;\n      }\n      function N(e) {\n        var t = V(e);\n        return t = Math.min(t, 15.5) / 15.5, Math.pow(10, 1.25 * (1 - Math.cos(Math.PI * t)) - 2.5);\n      }\n      function a(e, t) {\n        return e < -.3 && (e = 3410), e /= 1e3, e = Math.max(.1, e), 3.64 * Math.pow(e, -.8) - 6.8 * Math.exp(-.6 * Math.pow(e - 3.4, 2)) + 6 * Math.exp(-.15 * Math.pow(e - 8.7, 2)) + .001 * (.6 + .04 * t) * Math.pow(e, 4);\n      }\n      this.L3psycho_anal_vbr = function (e, t, n, a, r, s, i, o, _, l) {\n        var f,\n          c,\n          u,\n          h,\n          p,\n          d = e.internal_flags,\n          b = Be(Pe.HBLKSIZE),\n          m = Ee([3, Pe.HBLKSIZE_s]),\n          v = Ee([2, Pe.BLKSIZE]),\n          g = Ee([2, 3, Pe.BLKSIZE_s]),\n          w = Ee([4, Pe.CBANDS]),\n          S = Ee([4, Pe.CBANDS]),\n          y = Ee([4, 3]),\n          M = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],\n          x = Te(2),\n          R = e.mode == MPEGMode.JOINT_STEREO ? 4 : d.channels_out;\n        !function (e, t, n, a, r, s, i, o, _, l) {\n          for (var f = Ee([2, 576]), c = e.internal_flags, u = c.channels_out, h = e.mode == MPEGMode.JOINT_STEREO ? 4 : u, p = 0; p < u; p++) {\n            firbuf = t[p];\n            var d = n + 576 - 350 - ce + 192;\n            ke(X.length == (ce - 1) / 2);\n            for (var b = 0; b < 576; b++) {\n              var m, v;\n              m = firbuf[d + b + 10];\n              for (var g = v = 0; g < (ce - 1) / 2 - 1; g += 2) m += X[g] * (firbuf[d + b + g] + firbuf[d + b + ce - g]), v += X[g + 1] * (firbuf[d + b + g + 1] + firbuf[d + b + ce - g - 1]);\n              f[p][b] = m + v;\n            }\n            r[a][p].en.assign(c.en[p]), r[a][p].thm.assign(c.thm[p]), 2 < h && (s[a][p].en.assign(c.en[p + 2]), s[a][p].thm.assign(c.thm[p + 2]));\n          }\n          for (p = 0; p < h; p++) {\n            var w = Be(12),\n              S = Be(12),\n              y = [0, 0, 0, 0],\n              M = f[1 & p],\n              x = 0,\n              R = 3 == p ? c.nsPsy.attackthre_s : c.nsPsy.attackthre,\n              A = 1;\n            if (2 == p) for (b = 0, g = 576; 0 < g; ++b, --g) {\n              var B = f[0][b],\n                E = f[1][b];\n              f[0][b] = B + E, f[1][b] = B - E;\n            }\n            for (b = 0; b < 3; b++) S[b] = c.nsPsy.last_en_subshort[p][b + 6], ke(0 < c.nsPsy.last_en_subshort[p][b + 4]), w[b] = S[b] / c.nsPsy.last_en_subshort[p][b + 4], y[0] += S[b];\n            for (b = 0; b < 9; b++) {\n              for (var T = x + 64, k = 1; x < T; x++) k < Math.abs(M[x]) && (k = Math.abs(M[x]));\n              c.nsPsy.last_en_subshort[p][b] = S[b + 3] = k, y[1 + b / 3] += k, k > S[b + 3 - 2] ? (ke(0 < S[b + 3 - 2]), k /= S[b + 3 - 2]) : k = S[b + 3 - 2] > 10 * k ? (ke(0 < k), S[b + 3 - 2] / (10 * k)) : 0, w[b + 3] = k;\n            }\n            for (b = 0; b < 3; ++b) {\n              var P = S[3 * b + 3] + S[3 * b + 4] + S[3 * b + 5],\n                L = 1;\n              6 * S[3 * b + 5] < P && (L *= .5, 6 * S[3 * b + 4] < P && (L *= .5)), o[p][b] = L;\n            }\n            if (e.analysis) {\n              var I = w[0];\n              for (b = 1; b < 12; b++) I < w[b] && (I = w[b]);\n              c.pinfo.ers[a][p] = c.pinfo.ers_save[p], c.pinfo.ers_save[p] = I;\n            }\n            for (b = 0; b < 12; b++) 0 == _[p][b / 3] && w[b] > R && (_[p][b / 3] = b % 3 + 1);\n            for (b = 1; b < 4; b++) {\n              var V = y[b - 1],\n                H = y[b];\n              Math.max(V, H) < 4e4 && V < 1.7 * H && H < 1.7 * V && (1 == b && _[p][0] <= _[p][b] && (_[p][0] = 0), _[p][b] = 0);\n            }\n            _[p][0] <= c.nsPsy.lastAttacks[p] && (_[p][0] = 0), 3 != c.nsPsy.lastAttacks[p] && _[p][0] + _[p][1] + _[p][2] + _[p][3] == 0 || ((A = 0) != _[p][1] && 0 != _[p][0] && (_[p][1] = 0), 0 != _[p][2] && 0 != _[p][1] && (_[p][2] = 0), 0 != _[p][3] && 0 != _[p][2] && (_[p][3] = 0)), p < 2 ? l[p] = A : 0 == A && (l[0] = l[1] = 0), i[p] = c.tot_ener[p];\n          }\n        }(e, t, n, a, r, s, _, y, M, x), function (e, t) {\n          var n = e.internal_flags;\n          e.short_blocks != Re.short_block_coupled || 0 != t[0] && 0 != t[1] || (t[0] = t[1] = 0);\n          for (var a = 0; a < n.channels_out; a++) e.short_blocks == Re.short_block_dispensed && (t[a] = 1), e.short_blocks == Re.short_block_forced && (t[a] = 0);\n        }(e, x);\n        for (var A = 0; A < R; A++) C(e, t, n, A, a, b, v, E = 1 & A), c = a, u = A, h = b, p = void 0, p = (f = e).internal_flags, 2 == f.athaa_loudapprox && u < 2 && (p.loudness_sq[c][u] = p.loudness_sq_save[u], p.loudness_sq_save[u] = F(h, p)), 0 != x[E] ? U(d, b, w[A], S[A], A) : Y(d, A);\n        for (x[0] + x[1] == 2 && e.mode == MPEGMode.JOINT_STEREO && z(w, S, d.mld_cb_l, d.ATH.cb_l, e.ATHlower * d.ATH.adjust, e.msfix, d.npart_l), A = 0; A < R; A++) 0 != x[E = 1 & A] && be(d, w[A], S[A], A);\n        for (var B = 0; B < 3; B++) {\n          for (A = 0; A < R; ++A) 0 != x[E = 1 & A] ? q(d, A, B) : (D(e, t, n, A, B, m, g, E), j(e, m, w[A], S[A], A, B));\n          for (x[0] + x[1] == 0 && e.mode == MPEGMode.JOINT_STEREO && z(w, S, d.mld_cb_s, d.ATH.cb_s, e.ATHlower * d.ATH.adjust, e.msfix, d.npart_s), A = 0; A < R; ++A) 0 == x[E = 1 & A] && de(d, w[A], S[A], A, B);\n        }\n        for (A = 0; A < R; A++) {\n          var E;\n          if (0 == x[E = 1 & A]) for (var T = 0; T < Pe.SBMAX_s; T++) {\n            var k = Be(3);\n            for (B = 0; B < 3; B++) {\n              var P = d.thm[A].s[T][B];\n              if (P *= .8, 2 <= M[A][B] || 1 == M[A][B + 1]) {\n                var L = 0 != B ? B - 1 : 2,\n                  I = ve(d.thm[A].s[T][L], P, .36);\n                P = Math.min(P, I);\n              } else 1 == M[A][B] ? (L = 0 != B ? B - 1 : 2, I = ve(d.thm[A].s[T][L], P, .6 * fe), P = Math.min(P, I)) : (0 != B && 3 == M[A][B - 1] || 0 == B && 3 == d.nsPsy.lastAttacks[A]) && (L = 2 != B ? B + 1 : 0, I = ve(d.thm[A].s[T][L], P, .6 * fe), P = Math.min(P, I));\n              P *= y[A][B], k[B] = P;\n            }\n            for (B = 0; B < 3; B++) d.thm[A].s[T][B] = k[B];\n          }\n        }\n        for (A = 0; A < R; A++) d.nsPsy.lastAttacks[A] = M[A][2];\n        for (function (e, t, n) {\n          for (var a = e.internal_flags, r = 0; r < a.channels_out; r++) {\n            var s = Pe.NORM_TYPE;\n            0 != t[r] ? (ke(a.blocktype_old[r] != Pe.START_TYPE), a.blocktype_old[r] == Pe.SHORT_TYPE && (s = Pe.STOP_TYPE)) : (s = Pe.SHORT_TYPE, a.blocktype_old[r] == Pe.NORM_TYPE && (a.blocktype_old[r] = Pe.START_TYPE), a.blocktype_old[r] == Pe.STOP_TYPE && (a.blocktype_old[r] = Pe.SHORT_TYPE)), n[r] = a.blocktype_old[r], a.blocktype_old[r] = s;\n          }\n        }(e, x, l), A = 0; A < R; A++) {\n          var V, H, O, N;\n          N = 1 < A ? (V = o, H = -2, O = Pe.NORM_TYPE, l[0] != Pe.SHORT_TYPE && l[1] != Pe.SHORT_TYPE || (O = Pe.SHORT_TYPE), s[a][A - 2]) : (V = i, H = 0, O = l[A], r[a][A]), O == Pe.SHORT_TYPE ? V[H + A] = ge(N, d.masking_lower) : V[H + A] = we(N, d.masking_lower), e.analysis && (d.pinfo.pe[a][A] = V[H + A]);\n        }\n        return 0;\n      }, this.psymodel_init = function (e) {\n        var t,\n          n,\n          a = e.internal_flags,\n          r = !0,\n          s = 13,\n          i = 0,\n          o = 0,\n          _ = -8.25,\n          l = -4.5,\n          f = Be(Pe.CBANDS),\n          c = Be(Pe.CBANDS),\n          u = Be(Pe.CBANDS),\n          h = e.out_samplerate;\n        switch (e.experimentalZ) {\n          default:\n          case 0:\n            r = !0;\n            break;\n          case 1:\n            r = e.VBR != xe.vbr_mtrh && e.VBR != xe.vbr_mt;\n            break;\n          case 2:\n            r = !1;\n            break;\n          case 3:\n            s = 8, i = -1.75, o = -.0125, _ = -8.25, l = -2.25;\n        }\n        for (a.ms_ener_ratio_old = .25, a.blocktype_old[0] = a.blocktype_old[1] = Pe.NORM_TYPE, t = 0; t < 4; ++t) {\n          for (var p = 0; p < Pe.CBANDS; ++p) a.nb_1[t][p] = 1e20, a.nb_2[t][p] = 1e20, a.nb_s1[t][p] = a.nb_s2[t][p] = 1;\n          for (var d = 0; d < Pe.SBMAX_l; d++) a.en[t].l[d] = 1e20, a.thm[t].l[d] = 1e20;\n          for (p = 0; p < 3; ++p) {\n            for (d = 0; d < Pe.SBMAX_s; d++) a.en[t].s[d][p] = 1e20, a.thm[t].s[d][p] = 1e20;\n            a.nsPsy.lastAttacks[t] = 0;\n          }\n          for (p = 0; p < 9; p++) a.nsPsy.last_en_subshort[t][p] = 10;\n        }\n        for (a.loudness_sq_save[0] = a.loudness_sq_save[1] = 0, a.npart_l = H(a.numlines_l, a.bo_l, a.bm_l, f, c, a.mld_l, a.PSY.bo_l_weight, h, Pe.BLKSIZE, a.scalefac_band.l, Pe.BLKSIZE / 1152, Pe.SBMAX_l), ke(a.npart_l < Pe.CBANDS), t = 0; t < a.npart_l; t++) {\n          var b = i;\n          f[t] >= s && (b = o * (f[t] - s) / (24 - s) + i * (24 - f[t]) / (24 - s)), u[t] = Math.pow(10, b / 10), 0 < a.numlines_l[t] ? a.rnumlines_l[t] = 1 / a.numlines_l[t] : a.rnumlines_l[t] = 0;\n        }\n        for (a.s3_ll = O(a.s3ind, a.npart_l, f, c, u, r), t = p = 0; t < a.npart_l; t++) {\n          g = G.MAX_VALUE;\n          for (var m = 0; m < a.numlines_l[t]; m++, p++) {\n            var v = h * p / (1e3 * Pe.BLKSIZE);\n            w = this.ATHformula(1e3 * v, e) - 20, w = Math.pow(10, .1 * w), (w *= a.numlines_l[t]) < g && (g = w);\n          }\n          a.ATH.cb_l[t] = g, 6 < (g = 20 * f[t] / 10 - 20) && (g = 100), g < -15 && (g = -15), g -= 8, a.minval_l[t] = Math.pow(10, g / 10) * a.numlines_l[t];\n        }\n        for (a.npart_s = H(a.numlines_s, a.bo_s, a.bm_s, f, c, a.mld_s, a.PSY.bo_s_weight, h, Pe.BLKSIZE_s, a.scalefac_band.s, Pe.BLKSIZE_s / 384, Pe.SBMAX_s), ke(a.npart_s < Pe.CBANDS), t = p = 0; t < a.npart_s; t++) {\n          var g;\n          for (b = _, f[t] >= s && (b = l * (f[t] - s) / (24 - s) + _ * (24 - f[t]) / (24 - s)), u[t] = Math.pow(10, b / 10), g = G.MAX_VALUE, m = 0; m < a.numlines_s[t]; m++, p++) {\n            var w;\n            v = h * p / (1e3 * Pe.BLKSIZE_s), w = this.ATHformula(1e3 * v, e) - 20, w = Math.pow(10, .1 * w), (w *= a.numlines_s[t]) < g && (g = w);\n          }\n          a.ATH.cb_s[t] = g, g = 7 * f[t] / 12 - 7, 12 < f[t] && (g *= 1 + 3.1 * Math.log(1 + g)), f[t] < 12 && (g *= 1 + 2.3 * Math.log(1 - g)), g < -15 && (g = -15), g -= 8, a.minval_s[t] = Math.pow(10, g / 10) * a.numlines_s[t];\n        }\n        a.s3_ss = O(a.s3ind_s, a.npart_s, f, c, u, r), B = Math.pow(10, (P + 1) / 16), E = Math.pow(10, (L + 1) / 16), T = Math.pow(10, I / 10), R.init_fft(a), a.decay = Math.exp(-1 * A / (.01 * h / 192)), n = 3.5, 0 != (2 & e.exp_nspsytune) && (n = 1), 0 < Math.abs(e.msfix) && (n = e.msfix), e.msfix = n;\n        for (var S = 0; S < a.npart_l; S++) a.s3ind[S][1] > a.npart_l - 1 && (a.s3ind[S][1] = a.npart_l - 1);\n        var y = 576 * a.mode_gr / h;\n        if (a.ATH.decay = Math.pow(10, -1.2 * y), a.ATH.adjust = .01, a.ATH.adjustLimit = 1, ke(a.bo_l[Pe.SBMAX_l - 1] <= a.npart_l), ke(a.bo_s[Pe.SBMAX_s - 1] <= a.npart_s), -1 != e.ATHtype) {\n          var M = e.out_samplerate / Pe.BLKSIZE,\n            x = 0;\n          for (t = v = 0; t < Pe.BLKSIZE / 2; ++t) v += M, a.ATH.eql_w[t] = 1 / Math.pow(10, this.ATHformula(v, e) / 10), x += a.ATH.eql_w[t];\n          for (x = 1 / x, t = Pe.BLKSIZE / 2; 0 <= --t;) a.ATH.eql_w[t] *= x;\n        }\n        for (S = p = 0; S < a.npart_s; ++S) for (t = 0; t < a.numlines_s[S]; ++t) ++p;\n        for (ke(129 == p), S = p = 0; S < a.npart_l; ++S) for (t = 0; t < a.numlines_l[S]; ++t) ++p;\n        for (ke(513 == p), t = p = 0; t < a.npart_l; t++) v = h * (p + a.numlines_l[t] / 2) / (1 * Pe.BLKSIZE), a.mld_cb_l[t] = N(v), p += a.numlines_l[t];\n        for (; t < Pe.CBANDS; ++t) a.mld_cb_l[t] = 1;\n        for (t = p = 0; t < a.npart_s; t++) v = h * (p + a.numlines_s[t] / 2) / (1 * Pe.BLKSIZE_s), a.mld_cb_s[t] = N(v), p += a.numlines_s[t];\n        for (; t < Pe.CBANDS; ++t) a.mld_cb_s[t] = 1;\n        return 0;\n      }, this.ATHformula = function (e, t) {\n        var n;\n        switch (t.ATHtype) {\n          case 0:\n            n = a(e, 9);\n            break;\n          case 1:\n            n = a(e, -1);\n            break;\n          case 2:\n            n = a(e, 0);\n            break;\n          case 3:\n            n = a(e, 1) + 6;\n            break;\n          case 4:\n            n = a(e, t.ATHcurve);\n            break;\n          default:\n            n = a(e, 0);\n        }\n        return n;\n      };\n    };\n  }, function (e, t, n) {\n    var a = n(0),\n      E = (a.System, a.VbrMode, a.Float, a.ShortBlock, a.Util),\n      r = (a.Arrays, a.new_array_n, a.new_byte, a.new_double, a.new_float),\n      v = (a.new_float_n, a.new_int, a.new_int_n, a.assert, n(1));\n    e.exports = function () {\n      var h = r(v.BLKSIZE),\n        d = r(v.BLKSIZE_s / 2),\n        B = [.9238795325112867, .3826834323650898, .9951847266721969, .0980171403295606, .9996988186962042, .02454122852291229, .9999811752826011, .006135884649154475];\n      function b(e, t, n) {\n        var a,\n          r,\n          s,\n          i = 0,\n          o = t + (n <<= 1);\n        a = 4;\n        do {\n          var _, l, f, c, u, h, p;\n          for (p = a >> 1, h = (u = (c = a) << 1) + c, a = u << 1, s = (r = t) + p; S = e[r + 0] - e[r + c], w = e[r + 0] + e[r + c], R = e[r + u] - e[r + h], M = e[r + u] + e[r + h], e[r + u] = w - M, e[r + 0] = w + M, e[r + h] = S - R, e[r + c] = S + R, S = e[s + 0] - e[s + c], w = e[s + 0] + e[s + c], R = E.SQRT2 * e[s + h], M = E.SQRT2 * e[s + u], e[s + u] = w - M, e[s + 0] = w + M, e[s + h] = S - R, e[s + c] = S + R, s += a, (r += a) < o;);\n          for (l = B[i + 0], _ = B[i + 1], f = 1; f < p; f++) {\n            var d, b;\n            d = 1 - 2 * _ * _, b = 2 * _ * l, r = t + f, s = t + c - f;\n            do {\n              var m, v, g, w, S, y, M, x, R, A;\n              v = b * e[r + c] - d * e[s + c], m = d * e[r + c] + b * e[s + c], S = e[r + 0] - m, w = e[r + 0] + m, y = e[s + 0] - v, g = e[s + 0] + v, v = b * e[r + h] - d * e[s + h], m = d * e[r + h] + b * e[s + h], R = e[r + u] - m, M = e[r + u] + m, A = e[s + u] - v, x = e[s + u] + v, v = _ * M - l * A, m = l * M + _ * A, e[r + u] = w - m, e[r + 0] = w + m, e[s + h] = y - v, e[s + c] = y + v, v = l * x - _ * R, m = _ * x + l * R, e[s + u] = g - m, e[s + 0] = g + m, e[r + h] = S - v, e[r + c] = S + v, s += a, r += a;\n            } while (r < o);\n            l = (d = l) * B[i + 0] - _ * B[i + 1], _ = d * B[i + 1] + _ * B[i + 0];\n          }\n          i += 2;\n        } while (a < n);\n      }\n      var m = [0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240, 8, 136, 72, 200, 40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248, 4, 132, 68, 196, 36, 164, 100, 228, 20, 148, 84, 212, 52, 180, 116, 244, 12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250, 6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254];\n      this.fft_short = function (e, t, n, a, r) {\n        for (var s = 0; s < 3; s++) {\n          var i = v.BLKSIZE_s / 2,\n            o = 65535 & 192 * (s + 1),\n            _ = v.BLKSIZE_s / 8 - 1;\n          do {\n            var l,\n              f,\n              c,\n              u,\n              h,\n              p = 255 & m[_ << 2];\n            f = (l = d[p] * a[n][r + p + o]) - (h = d[127 - p] * a[n][r + p + o + 128]), l += h, u = (c = d[p + 64] * a[n][r + p + o + 64]) - (h = d[63 - p] * a[n][r + p + o + 192]), c += h, i -= 4, t[s][i + 0] = l + c, t[s][i + 2] = l - c, t[s][i + 1] = f + u, t[s][i + 3] = f - u, f = (l = d[p + 1] * a[n][r + p + o + 1]) - (h = d[126 - p] * a[n][r + p + o + 129]), l += h, u = (c = d[p + 65] * a[n][r + p + o + 65]) - (h = d[62 - p] * a[n][r + p + o + 193]), c += h, t[s][i + v.BLKSIZE_s / 2 + 0] = l + c, t[s][i + v.BLKSIZE_s / 2 + 2] = l - c, t[s][i + v.BLKSIZE_s / 2 + 1] = f + u, t[s][i + v.BLKSIZE_s / 2 + 3] = f - u;\n          } while (0 <= --_);\n          b(t[s], i, v.BLKSIZE_s / 2);\n        }\n      }, this.fft_long = function (e, t, n, a, r) {\n        var s = v.BLKSIZE / 8 - 1,\n          i = v.BLKSIZE / 2;\n        do {\n          var o,\n            _,\n            l,\n            f,\n            c,\n            u = 255 & m[s];\n          _ = (o = h[u] * a[n][r + u]) - (c = h[u + 512] * a[n][r + u + 512]), o += c, f = (l = h[u + 256] * a[n][r + u + 256]) - (c = h[u + 768] * a[n][r + u + 768]), l += c, t[0 + (i -= 4)] = o + l, t[i + 2] = o - l, t[i + 1] = _ + f, t[i + 3] = _ - f, _ = (o = h[u + 1] * a[n][r + u + 1]) - (c = h[u + 513] * a[n][r + u + 513]), o += c, f = (l = h[u + 257] * a[n][r + u + 257]) - (c = h[u + 769] * a[n][r + u + 769]), l += c, t[i + v.BLKSIZE / 2 + 0] = o + l, t[i + v.BLKSIZE / 2 + 2] = o - l, t[i + v.BLKSIZE / 2 + 1] = _ + f, t[i + v.BLKSIZE / 2 + 3] = _ - f;\n        } while (0 <= --s);\n        b(t, i, v.BLKSIZE / 2);\n      }, this.init_fft = function (e) {\n        for (var t = 0; t < v.BLKSIZE; t++) h[t] = .42 - .5 * Math.cos(2 * Math.PI * (t + .5) / v.BLKSIZE) + .08 * Math.cos(4 * Math.PI * (t + .5) / v.BLKSIZE);\n        for (t = 0; t < v.BLKSIZE_s / 2; t++) d[t] = .5 * (1 - Math.cos(2 * Math.PI * (t + .5) / v.BLKSIZE_s));\n      };\n    };\n  }, function (e, t, n) {\n    var a = n(0),\n      J = a.System,\n      h = (a.VbrMode, a.Float, a.ShortBlock, a.Util),\n      ee = a.Arrays,\n      te = (a.new_array_n, a.new_byte, a.new_double, a.new_float),\n      ne = (a.new_float_n, a.new_int, a.new_int_n, a.assert, n(1));\n    e.exports = function () {\n      var u = [-.1482523854003001, 32.308141959636465, 296.40344946382766, 883.1344870032432, 11113.947376231741, 1057.2713659324597, 305.7402417275812, 30.825928907280012, 3.8533188138216365, 59.42900443849514, 709.5899960123345, 5281.91112291017, -5829.66483675846, -817.6293103748613, -76.91656988279972, -4.594269939176596, .9063471690191471, .1960342806591213, -.15466694054279598, 34.324387823855965, 301.8067566458425, 817.599602898885, 11573.795901679885, 1181.2520595540152, 321.59731579894424, 31.232021761053772, 3.7107095756221318, 53.650946155329365, 684.167428119626, 5224.56624370173, -6366.391851890084, -908.9766368219582, -89.83068876699639, -5.411397422890401, .8206787908286602, .3901806440322567, -.16070888947830023, 36.147034243915876, 304.11815768187864, 732.7429163887613, 11989.60988270091, 1300.012278487897, 335.28490093152146, 31.48816102859945, 3.373875931311736, 47.232241542899175, 652.7371796173471, 5132.414255594984, -6909.087078780055, -1001.9990371107289, -103.62185754286375, -6.104916304710272, .7416505462720353, .5805693545089249, -.16636367662261495, 37.751650073343995, 303.01103387567713, 627.9747488785183, 12358.763425278165, 1412.2779918482834, 346.7496836825721, 31.598286663170416, 3.1598635433980946, 40.57878626349686, 616.1671130880391, 5007.833007176154, -7454.040671756168, -1095.7960341867115, -118.24411666465777, -6.818469345853504, .6681786379192989, .7653668647301797, -.1716176790982088, 39.11551877123304, 298.3413246578966, 503.5259106886539, 12679.589408408976, 1516.5821921214542, 355.9850766329023, 31.395241710249053, 2.9164211881972335, 33.79716964664243, 574.8943997801362, 4853.234992253242, -7997.57021486075, -1189.7624067269965, -133.6444792601766, -7.7202770609839915, .5993769336819237, .9427934736519954, -.17645823955292173, 40.21879108166477, 289.9982036694474, 359.3226160751053, 12950.259102786438, 1612.1013903507662, 362.85067106591504, 31.045922092242872, 2.822222032597987, 26.988862316190684, 529.8996541764288, 4671.371946949588, -8535.899136645805, -1282.5898586244496, -149.58553632943463, -8.643494270763135, .5345111359507916, 1.111140466039205, -.36174739330527045, 41.04429910497807, 277.5463268268618, 195.6386023135583, 13169.43812144731, 1697.6433561479398, 367.40983966190305, 30.557037410382826, 2.531473372857427, 20.070154905927314, 481.50208566532336, 4464.970341588308, -9065.36882077239, -1373.62841526722, -166.1660487028118, -9.58289321133207, .4729647758913199, 1.268786568327291, -.36970682634889585, 41.393213350082036, 261.2935935556502, 12.935476055240873, 13336.131683328815, 1772.508612059496, 369.76534388639965, 29.751323653701338, 2.4023193045459172, 13.304795348228817, 430.5615775526625, 4237.0568611071185, -9581.931701634761, -1461.6913552409758, -183.12733958476446, -10.718010163869403, .41421356237309503, 1.414213562373095, -.37677560326535325, 41.619486213528496, 241.05423794991074, -187.94665032361226, 13450.063605744153, 1836.153896465782, 369.4908799925761, 29.001847876923147, 2.0714759319987186, 6.779591200894186, 377.7767837205709, 3990.386575512536, -10081.709459700915, -1545.947424837898, -200.3762958015653, -11.864482073055006, .3578057213145241, 1.546020906725474, -.3829366947518991, 41.1516456456653, 216.47684307105183, -406.1569483347166, 13511.136535077321, 1887.8076599260432, 367.3025214564151, 28.136213436723654, 1.913880671464418, .3829366947518991, 323.85365704338597, 3728.1472257487526, -10561.233882199509, -1625.2025997821418, -217.62525175416, -13.015432208941645, .3033466836073424, 1.66293922460509, -.5822628872992417, 40.35639251440489, 188.20071124269245, -640.2706748618148, 13519.21490106562, 1927.6022433578062, 362.8197642637487, 26.968821921868447, 1.7463817695935329, -5.62650678237171, 269.3016715297017, 3453.386536448852, -11016.145278780888, -1698.6569643425091, -234.7658734267683, -14.16351421663124, .2504869601913055, 1.76384252869671, -.5887180101749253, 39.23429103868072, 155.76096234403798, -889.2492977967378, 13475.470561874661, 1955.0535223723712, 356.4450994756727, 25.894952980042156, 1.5695032905781554, -11.181939564328772, 214.80884394039484, 3169.1640829158237, -11443.321309975563, -1765.1588461316153, -251.68908574481912, -15.49755935939164, .198912367379658, 1.847759065022573, -.7912582233652842, 37.39369355329111, 119.699486012458, -1151.0956593239027, 13380.446257078214, 1970.3952110853447, 348.01959814116185, 24.731487364283044, 1.3850130831637748, -16.421408865300393, 161.05030052864092, 2878.3322807850063, -11838.991423510031, -1823.985884688674, -268.2854986386903, -16.81724543849939, .1483359875383474, 1.913880671464418, -.7960642926861912, 35.2322109610459, 80.01928065061526, -1424.0212633405113, 13235.794061869668, 1973.804052543835, 337.9908651258184, 23.289159354463873, 1.3934255946442087, -21.099669467133474, 108.48348407242611, 2583.700758091299, -12199.726194855148, -1874.2780658979746, -284.2467154529415, -18.11369784385905, .09849140335716425, 1.961570560806461, -.998795456205172, 32.56307803611191, 36.958364584370486, -1706.075448829146, 13043.287458812016, 1965.3831106103316, 326.43182772364605, 22.175018750622293, 1.198638339011324, -25.371248002043963, 57.53505923036915, 2288.41886619975, -12522.674544337233, -1914.8400385312243, -299.26241273417224, -19.37805630698734, .04912684976946725, 1.990369453344394, .035780907 * h.SQRT2 * .5 / 2384e-9, .017876148 * h.SQRT2 * .5 / 2384e-9, .003134727 * h.SQRT2 * .5 / 2384e-9, .002457142 * h.SQRT2 * .5 / 2384e-9, 971317e-9 * h.SQRT2 * .5 / 2384e-9, 218868e-9 * h.SQRT2 * .5 / 2384e-9, 101566e-9 * h.SQRT2 * .5 / 2384e-9, 13828e-9 * h.SQRT2 * .5 / 2384e-9, 12804.797818791945, 1945.5515939597317, 313.4244966442953, 49591e-9 / 2384e-9, 1995.1556208053692, 21458e-9 / 2384e-9, -69618e-9 / 2384e-9],\n        U = [[2382191739347913e-28, 6423305872147834e-28, 9400849094049688e-28, 1122435026096556e-27, 1183840321267481e-27, 1122435026096556e-27, 940084909404969e-27, 6423305872147839e-28, 2382191739347918e-28, 5456116108943412e-27, 4878985199565852e-27, 4240448995017367e-27, 3559909094758252e-27, 2858043359288075e-27, 2156177623817898e-27, 1475637723558783e-27, 8371015190102974e-28, 2599706096327376e-28, -5456116108943412e-27, -4878985199565852e-27, -4240448995017367e-27, -3559909094758252e-27, -2858043359288076e-27, -2156177623817898e-27, -1475637723558783e-27, -8371015190102975e-28, -2599706096327376e-28, -2382191739347923e-28, -6423305872147843e-28, -9400849094049696e-28, -1122435026096556e-27, -1183840321267481e-27, -1122435026096556e-27, -9400849094049694e-28, -642330587214784e-27, -2382191739347918e-28], [2382191739347913e-28, 6423305872147834e-28, 9400849094049688e-28, 1122435026096556e-27, 1183840321267481e-27, 1122435026096556e-27, 9400849094049688e-28, 6423305872147841e-28, 2382191739347918e-28, 5456116108943413e-27, 4878985199565852e-27, 4240448995017367e-27, 3559909094758253e-27, 2858043359288075e-27, 2156177623817898e-27, 1475637723558782e-27, 8371015190102975e-28, 2599706096327376e-28, -5461314069809755e-27, -4921085770524055e-27, -4343405037091838e-27, -3732668368707687e-27, -3093523840190885e-27, -2430835727329465e-27, -1734679010007751e-27, -974825365660928e-27, -2797435120168326e-28, 0, 0, 0, 0, 0, 0, -2283748241799531e-28, -4037858874020686e-28, -2146547464825323e-28], [.1316524975873958, .414213562373095, .7673269879789602, 1.091308501069271, 1.303225372841206, 1.56968557711749, 1.920982126971166, 2.414213562373094, 3.171594802363212, 4.510708503662055, 7.595754112725146, 22.90376554843115, .984807753012208, .6427876096865394, .3420201433256688, .9396926207859084, -.1736481776669303, -.7660444431189779, .8660254037844387, .5, -.5144957554275265, -.4717319685649723, -.3133774542039019, -.1819131996109812, -.09457419252642064, -.04096558288530405, -.01419856857247115, -.003699974673760037, .8574929257125442, .8817419973177052, .9496286491027329, .9833145924917901, .9955178160675857, .9991605581781475, .999899195244447, .9999931550702802], [0, 0, 0, 0, 0, 0, 2283748241799531e-28, 4037858874020686e-28, 2146547464825323e-28, 5461314069809755e-27, 4921085770524055e-27, 4343405037091838e-27, 3732668368707687e-27, 3093523840190885e-27, 2430835727329466e-27, 1734679010007751e-27, 974825365660928e-27, 2797435120168326e-28, -5456116108943413e-27, -4878985199565852e-27, -4240448995017367e-27, -3559909094758253e-27, -2858043359288075e-27, -2156177623817898e-27, -1475637723558782e-27, -8371015190102975e-28, -2599706096327376e-28, -2382191739347913e-28, -6423305872147834e-28, -9400849094049688e-28, -1122435026096556e-27, -1183840321267481e-27, -1122435026096556e-27, -9400849094049688e-28, -6423305872147841e-28, -2382191739347918e-28]],\n        z = U[ne.SHORT_TYPE],\n        G = U[ne.SHORT_TYPE],\n        K = U[ne.SHORT_TYPE],\n        Z = U[ne.SHORT_TYPE],\n        Q = [0, 1, 16, 17, 8, 9, 24, 25, 4, 5, 20, 21, 12, 13, 28, 29, 2, 3, 18, 19, 10, 11, 26, 27, 6, 7, 22, 23, 14, 15, 30, 31];\n      function W(e, t, n) {\n        for (var a, r, s, i = 10, o = t + 238 - 14 - 286, _ = -15; _ < 0; _++) {\n          var l, f, c;\n          l = u[i + -10], f = e[o + -224] * l, c = e[t + 224] * l, l = u[i + -9], f += e[o + -160] * l, c += e[t + 160] * l, l = u[i + -8], f += e[o + -96] * l, c += e[t + 96] * l, l = u[i + -7], f += e[o + -32] * l, c += e[t + 32] * l, l = u[i + -6], f += e[o + 32] * l, c += e[t + -32] * l, l = u[i + -5], f += e[o + 96] * l, c += e[t + -96] * l, l = u[i + -4], f += e[o + 160] * l, c += e[t + -160] * l, l = u[i + -3], f += e[o + 224] * l, c += e[t + -224] * l, l = u[i + -2], f += e[t + -256] * l, c -= e[o + 256] * l, l = u[i + -1], f += e[t + -192] * l, c -= e[o + 192] * l, l = u[i + 0], f += e[t + -128] * l, c -= e[o + 128] * l, l = u[i + 1], f += e[t + -64] * l, c -= e[o + 64] * l, l = u[i + 2], f += e[t + 0] * l, c -= e[o + 0] * l, l = u[i + 3], f += e[t + 64] * l, c -= e[o + -64] * l, l = u[i + 4], f += e[t + 128] * l, c -= e[o + -128] * l, l = u[i + 5], f += e[t + 192] * l, l = (c -= e[o + -192] * l) - (f *= u[i + 6]), n[30 + 2 * _] = c + f, n[31 + 2 * _] = u[i + 7] * l, i += 18, t--, o++;\n        }\n        c = e[t + -16] * u[i + -10], f = e[t + -32] * u[i + -2], c += (e[t + -48] - e[t + 16]) * u[i + -9], f += e[t + -96] * u[i + -1], c += (e[t + -80] + e[t + 48]) * u[i + -8], f += e[t + -160] * u[i + 0], c += (e[t + -112] - e[t + 80]) * u[i + -7], f += e[t + -224] * u[i + 1], c += (e[t + -144] + e[t + 112]) * u[i + -6], f -= e[t + 32] * u[i + 2], c += (e[t + -176] - e[t + 144]) * u[i + -5], f -= e[t + 96] * u[i + 3], c += (e[t + -208] + e[t + 176]) * u[i + -4], f -= e[t + 160] * u[i + 4], c += (e[t + -240] - e[t + 208]) * u[i + -3], a = (f -= e[t + 224]) - c, r = f + c, c = n[14], f = n[15] - c, n[31] = r + c, n[30] = a + f, n[15] = a - f, n[14] = r - c, s = n[28] - n[0], n[0] += n[28], n[28] = s * u[i + -36 + 7], s = n[29] - n[1], n[1] += n[29], n[29] = s * u[i + -36 + 7], s = n[26] - n[2], n[2] += n[26], n[26] = s * u[i + -72 + 7], s = n[27] - n[3], n[3] += n[27], n[27] = s * u[i + -72 + 7], s = n[24] - n[4], n[4] += n[24], n[24] = s * u[i + -108 + 7], s = n[25] - n[5], n[5] += n[25], n[25] = s * u[i + -108 + 7], s = n[22] - n[6], n[6] += n[22], n[22] = s * h.SQRT2, s = n[23] - n[7], n[7] += n[23], n[23] = s * h.SQRT2 - n[7], n[7] -= n[6], n[22] -= n[7], n[23] -= n[22], s = n[6], n[6] = n[31] - s, n[31] = n[31] + s, s = n[7], n[7] = n[30] - s, n[30] = n[30] + s, s = n[22], n[22] = n[15] - s, n[15] = n[15] + s, s = n[23], n[23] = n[14] - s, n[14] = n[14] + s, s = n[20] - n[8], n[8] += n[20], n[20] = s * u[i + -180 + 7], s = n[21] - n[9], n[9] += n[21], n[21] = s * u[i + -180 + 7], s = n[18] - n[10], n[10] += n[18], n[18] = s * u[i + -216 + 7], s = n[19] - n[11], n[11] += n[19], n[19] = s * u[i + -216 + 7], s = n[16] - n[12], n[12] += n[16], n[16] = s * u[i + -252 + 7], s = n[17] - n[13], n[13] += n[17], n[17] = s * u[i + -252 + 7], s = -n[20] + n[24], n[20] += n[24], n[24] = s * u[i + -216 + 7], s = -n[21] + n[25], n[21] += n[25], n[25] = s * u[i + -216 + 7], s = n[4] - n[8], n[4] += n[8], n[8] = s * u[i + -216 + 7], s = n[5] - n[9], n[5] += n[9], n[9] = s * u[i + -216 + 7], s = n[0] - n[12], n[0] += n[12], n[12] = s * u[i + -72 + 7], s = n[1] - n[13], n[1] += n[13], n[13] = s * u[i + -72 + 7], s = n[16] - n[28], n[16] += n[28], n[28] = s * u[i + -72 + 7], s = -n[17] + n[29], n[17] += n[29], n[29] = s * u[i + -72 + 7], s = h.SQRT2 * (n[2] - n[10]), n[2] += n[10], n[10] = s, s = h.SQRT2 * (n[3] - n[11]), n[3] += n[11], n[11] = s, s = h.SQRT2 * (-n[18] + n[26]), n[18] += n[26], n[26] = s - n[18], s = h.SQRT2 * (-n[19] + n[27]), n[19] += n[27], n[27] = s - n[19], s = n[2], n[19] -= n[3], n[3] -= s, n[2] = n[31] - s, n[31] += s, s = n[3], n[11] -= n[19], n[18] -= s, n[3] = n[30] - s, n[30] += s, s = n[18], n[27] -= n[11], n[19] -= s, n[18] = n[15] - s, n[15] += s, s = n[19], n[10] -= s, n[19] = n[14] - s, n[14] += s, s = n[10], n[11] -= s, n[10] = n[23] - s, n[23] += s, s = n[11], n[26] -= s, n[11] = n[22] - s, n[22] += s, s = n[26], n[27] -= s, n[26] = n[7] - s, n[7] += s, s = n[27], n[27] = n[6] - s, n[6] += s, s = h.SQRT2 * (n[0] - n[4]), n[0] += n[4], n[4] = s, s = h.SQRT2 * (n[1] - n[5]), n[1] += n[5], n[5] = s, s = h.SQRT2 * (n[16] - n[20]), n[16] += n[20], n[20] = s, s = h.SQRT2 * (n[17] - n[21]), n[17] += n[21], n[21] = s, s = -h.SQRT2 * (n[8] - n[12]), n[8] += n[12], n[12] = s - n[8], s = -h.SQRT2 * (n[9] - n[13]), n[9] += n[13], n[13] = s - n[9], s = -h.SQRT2 * (n[25] - n[29]), n[25] += n[29], n[29] = s - n[25], s = -h.SQRT2 * (n[24] + n[28]), n[24] -= n[28], n[28] = s - n[24], s = n[24] - n[16], n[24] = s, s = n[20] - s, n[20] = s, s = n[28] - s, n[28] = s, s = n[25] - n[17], n[25] = s, s = n[21] - s, n[21] = s, s = n[29] - s, n[29] = s, s = n[17] - n[1], n[17] = s, s = n[9] - s, n[9] = s, s = n[25] - s, n[25] = s, s = n[5] - s, n[5] = s, s = n[21] - s, n[21] = s, s = n[13] - s, n[13] = s, s = n[29] - s, n[29] = s, s = n[1] - n[0], n[1] = s, s = n[16] - s, n[16] = s, s = n[17] - s, n[17] = s, s = n[8] - s, n[8] = s, s = n[9] - s, n[9] = s, s = n[24] - s, n[24] = s, s = n[25] - s, n[25] = s, s = n[4] - s, n[4] = s, s = n[5] - s, n[5] = s, s = n[20] - s, n[20] = s, s = n[21] - s, n[21] = s, s = n[12] - s, n[12] = s, s = n[13] - s, n[13] = s, s = n[28] - s, n[28] = s, s = n[29] - s, n[29] = s, s = n[0], n[0] += n[31], n[31] -= s, s = n[1], n[1] += n[30], n[30] -= s, s = n[16], n[16] += n[15], n[15] -= s, s = n[17], n[17] += n[14], n[14] -= s, s = n[8], n[8] += n[23], n[23] -= s, s = n[9], n[9] += n[22], n[22] -= s, s = n[24], n[24] += n[7], n[7] -= s, s = n[25], n[25] += n[6], n[6] -= s, s = n[4], n[4] += n[27], n[27] -= s, s = n[5], n[5] += n[26], n[26] -= s, s = n[20], n[20] += n[11], n[11] -= s, s = n[21], n[21] += n[10], n[10] -= s, s = n[12], n[12] += n[19], n[19] -= s, s = n[13], n[13] += n[18], n[18] -= s, s = n[28], n[28] += n[3], n[3] -= s, s = n[29], n[29] += n[2], n[2] -= s;\n      }\n      function $(e, t) {\n        for (var n = 0; n < 3; n++) {\n          var a, r, s, i, o, _;\n          r = (i = e[t + 6] * U[ne.SHORT_TYPE][0] - e[t + 15]) + (a = e[t + 0] * U[ne.SHORT_TYPE][2] - e[t + 9]), s = i - a, o = (i = e[t + 15] * U[ne.SHORT_TYPE][0] + e[t + 6]) + (a = e[t + 9] * U[ne.SHORT_TYPE][2] + e[t + 0]), _ = -i + a, a = 2069978111953089e-26 * (e[t + 3] * U[ne.SHORT_TYPE][1] - e[t + 12]), i = 2069978111953089e-26 * (e[t + 12] * U[ne.SHORT_TYPE][1] + e[t + 3]), e[t + 0] = 190752519173728e-25 * r + a, e[t + 15] = 190752519173728e-25 * -o + i, s = .8660254037844387 * s * 1907525191737281e-26, o = .5 * o * 1907525191737281e-26 + i, e[t + 3] = s - o, e[t + 6] = s + o, r = .5 * r * 1907525191737281e-26 - a, _ = .8660254037844387 * _ * 1907525191737281e-26, e[t + 9] = r + _, e[t + 12] = r - _, t++;\n        }\n      }\n      this.mdct_sub48 = function (e, t, n) {\n        for (var a, r, s, i, o, _, l, f, c, u, h, p, d, b, m, v, g, w, S, y, M, x = t, R = 286, A = 0; A < e.channels_out; A++) {\n          for (var B = 0; B < e.mode_gr; B++) {\n            for (var E, T = e.l3_side.tt[B][A], k = T.xr, P = 0, L = e.sb_sample[A][1 - B], I = 0, V = 0; V < 9; V++) for (W(x, R, L[I]), W(x, R + 32, L[I + 1]), I += 2, R += 64, E = 1; E < 32; E += 2) L[I - 1][E] *= -1;\n            for (E = 0; E < 32; E++, P += 18) {\n              var H = T.block_type,\n                O = e.sb_sample[A][B],\n                N = e.sb_sample[A][1 - B];\n              if (0 != T.mixed_block_flag && E < 2 && (H = 0), e.amp_filter[E] < 1e-12) ee.fill(k, P + 0, P + 18, 0);else {\n                if (e.amp_filter[E] < 1) for (V = 0; V < 18; V++) N[V][Q[E]] *= e.amp_filter[E];\n                if (H == ne.SHORT_TYPE) {\n                  for (V = -3; V < 0; V++) {\n                    var F = U[ne.SHORT_TYPE][V + 3];\n                    k[P + 3 * V + 9] = O[9 + V][Q[E]] * F - O[8 - V][Q[E]], k[P + 3 * V + 18] = O[14 - V][Q[E]] * F + O[15 + V][Q[E]], k[P + 3 * V + 10] = O[15 + V][Q[E]] * F - O[14 - V][Q[E]], k[P + 3 * V + 19] = N[2 - V][Q[E]] * F + N[3 + V][Q[E]], k[P + 3 * V + 11] = N[3 + V][Q[E]] * F - N[2 - V][Q[E]], k[P + 3 * V + 20] = N[8 - V][Q[E]] * F + N[9 + V][Q[E]];\n                  }\n                  $(k, P);\n                } else {\n                  var C = te(18);\n                  for (V = -9; V < 0; V++) {\n                    var D, X;\n                    D = U[H][V + 27] * N[V + 9][Q[E]] + U[H][V + 36] * N[8 - V][Q[E]], X = U[H][V + 9] * O[V + 9][Q[E]] - U[H][V + 18] * O[8 - V][Q[E]], C[V + 9] = D - X * z[3 + V + 9], C[V + 18] = D * z[3 + V + 9] + X;\n                  }\n                  a = k, r = P, M = y = S = w = g = v = m = b = d = p = h = u = c = f = l = _ = o = i = void 0, _ = (s = C)[17] - s[9], f = s[15] - s[11], c = s[14] - s[12], u = s[0] + s[8], h = s[1] + s[7], p = s[2] + s[6], d = s[3] + s[5], a[r + 17] = u + p - d - (h - s[4]), o = (u + p - d) * G[19] + (h - s[4]), i = (_ - f - c) * G[18], a[r + 5] = i + o, a[r + 6] = i - o, l = (s[16] - s[10]) * G[18], h = h * G[19] + s[4], i = _ * G[12] + l + f * G[13] + c * G[14], o = -u * G[16] + h - p * G[17] + d * G[15], a[r + 1] = i + o, a[r + 2] = i - o, i = _ * G[13] - l - f * G[14] + c * G[12], o = -u * G[17] + h - p * G[15] + d * G[16], a[r + 9] = i + o, a[r + 10] = i - o, i = _ * G[14] - l + f * G[12] - c * G[13], o = u * G[15] - h + p * G[16] - d * G[17], a[r + 13] = i + o, a[r + 14] = i - o, b = s[8] - s[0], v = s[6] - s[2], g = s[5] - s[3], w = s[17] + s[9], S = s[16] + s[10], y = s[15] + s[11], M = s[14] + s[12], a[r + 0] = w + y + M + (S + s[13]), i = (w + y + M) * G[19] - (S + s[13]), o = (b - v + g) * G[18], a[r + 11] = i + o, a[r + 12] = i - o, m = (s[7] - s[1]) * G[18], S = s[13] - S * G[19], i = w * G[15] - S + y * G[16] + M * G[17], o = b * G[14] + m + v * G[12] + g * G[13], a[r + 3] = i + o, a[r + 4] = i - o, i = -w * G[17] + S - y * G[15] - M * G[16], o = b * G[13] + m - v * G[14] - g * G[12], a[r + 7] = i + o, a[r + 8] = i - o, i = -w * G[16] + S - y * G[17] - M * G[15], o = b * G[12] - m + v * G[13] - g * G[14], a[r + 15] = i + o, a[r + 16] = i - o;\n                }\n              }\n              if (H != ne.SHORT_TYPE && 0 != E) for (V = 7; 0 <= V; --V) {\n                var q, Y;\n                q = k[P + V] * K[20 + V] + k[P + -1 - V] * Z[28 + V], Y = k[P + V] * Z[28 + V] - k[P + -1 - V] * K[20 + V], k[P + -1 - V] = q, k[P + V] = Y;\n              }\n            }\n          }\n          if (x = n, R = 286, 1 == e.mode_gr) for (var j = 0; j < 18; j++) J.arraycopy(e.sb_sample[A][1][j], 0, e.sb_sample[A][0][j], 0, 32);\n        }\n      };\n    };\n  }, function (e, t, n) {\n    var a = n(8);\n    e.exports = function () {\n      this.thm = new a(), this.en = new a();\n    };\n  }, function (e, t, n) {\n    var a = n(9);\n    e.exports = function () {\n      this.class_id = 0, this.num_samples = 0, this.num_channels = 0, this.in_samplerate = 0, this.out_samplerate = 0, this.scale = 0, this.scale_left = 0, this.scale_right = 0, this.analysis = !1, this.bWriteVbrTag = !1, this.decode_only = !1, this.quality = 0, this.mode = a.STEREO, this.force_ms = !1, this.free_format = !1, this.findReplayGain = !1, this.decode_on_the_fly = !1, this.write_id3tag_automatic = !1, this.brate = 0, this.compression_ratio = 0, this.copyright = 0, this.original = 0, this.extension = 0, this.emphasis = 0, this.error_protection = 0, this.strict_ISO = !1, this.disable_reservoir = !1, this.quant_comp = 0, this.quant_comp_short = 0, this.experimentalY = !1, this.experimentalZ = 0, this.exp_nspsytune = 0, this.preset = 0, this.VBR = null, this.VBR_q_frac = 0, this.VBR_q = 0, this.VBR_mean_bitrate_kbps = 0, this.VBR_min_bitrate_kbps = 0, this.VBR_max_bitrate_kbps = 0, this.VBR_hard_min = 0, this.lowpassfreq = 0, this.highpassfreq = 0, this.lowpasswidth = 0, this.highpasswidth = 0, this.maskingadjust = 0, this.maskingadjust_short = 0, this.ATHonly = !1, this.ATHshort = !1, this.noATH = !1, this.ATHtype = 0, this.ATHcurve = 0, this.ATHlower = 0, this.athaa_type = 0, this.athaa_loudapprox = 0, this.athaa_sensitivity = 0, this.short_blocks = null, this.useTemporal = !1, this.interChRatio = 0, this.msfix = 0, this.tune = !1, this.tune_value_a = 0, this.version = 0, this.encoder_delay = 0, this.encoder_padding = 0, this.framesize = 0, this.frameNum = 0, this.lame_allocated_gfp = 0, this.internal_flags = null;\n    };\n  }, function (e, t, n) {\n    var a = n(0),\n      r = (a.System, a.VbrMode, a.Float, a.ShortBlock, a.Util, a.Arrays, a.new_array_n, a.new_byte, a.new_double, a.new_float, a.new_float_n, a.new_int),\n      s = (a.new_int_n, a.assert, n(6));\n    e.exports = function () {\n      this.tt = [[null, null], [null, null]], this.main_data_begin = 0, this.private_bits = 0, this.resvDrain_pre = 0, this.resvDrain_post = 0, this.scfsi = [r(4), r(4)];\n      for (var e = 0; e < 2; e++) for (var t = 0; t < 2; t++) this.tt[e][t] = new s();\n    };\n  }, function (e, t, n) {\n    var a = n(0),\n      r = (a.System, a.VbrMode, a.Float, a.ShortBlock, a.Util, a.Arrays, a.new_array_n, a.new_byte, a.new_double, a.new_float),\n      s = a.new_float_n,\n      i = a.new_int,\n      o = (a.new_int_n, a.assert, n(1));\n    e.exports = function () {\n      this.last_en_subshort = s([4, 9]), this.lastAttacks = i(4), this.pefirbuf = r(19), this.longfact = r(o.SBMAX_l), this.shortfact = r(o.SBMAX_s), this.attackthre = 0, this.attackthre_s = 0;\n    };\n  }, function (e, t) {\n    e.exports = function () {\n      this.sum = 0, this.seen = 0, this.want = 0, this.pos = 0, this.size = 0, this.bag = null, this.nVbrNumFrames = 0, this.nBytesWritten = 0, this.TotalFrameSize = 0;\n    };\n  }, function (e, t, n) {\n    var a = n(0),\n      r = (a.System, a.VbrMode, a.Float, a.ShortBlock, a.Util, a.Arrays, a.new_array_n, a.new_byte, a.new_double, a.new_float),\n      s = (a.new_float_n, a.new_int, a.new_int_n, a.assert, n(1));\n    e.exports = function () {\n      this.useAdjust = 0, this.aaSensitivityP = 0, this.adjust = 0, this.adjustLimit = 0, this.decay = 0, this.floor = 0, this.l = r(s.SBMAX_l), this.s = r(s.SBMAX_s), this.psfb21 = r(s.PSFB21), this.psfb12 = r(s.PSFB12), this.cb_l = r(s.CBANDS), this.cb_s = r(s.CBANDS), this.eql_w = r(s.BLKSIZE / 2);\n    };\n  }, function (e, t, n) {\n    var a = n(0),\n      r = (a.System, a.VbrMode, a.Float, a.ShortBlock, a.Util, a.Arrays, a.new_array_n, a.new_byte, a.new_double, a.new_float),\n      s = (a.new_float_n, a.new_int),\n      i = (a.new_int_n, a.assert, n(11));\n    e.exports = function () {\n      this.linprebuf = r(2 * i.MAX_ORDER), this.linpre = 0, this.lstepbuf = r(i.MAX_SAMPLES_PER_WINDOW + i.MAX_ORDER), this.lstep = 0, this.loutbuf = r(i.MAX_SAMPLES_PER_WINDOW + i.MAX_ORDER), this.lout = 0, this.rinprebuf = r(2 * i.MAX_ORDER), this.rinpre = 0, this.rstepbuf = r(i.MAX_SAMPLES_PER_WINDOW + i.MAX_ORDER), this.rstep = 0, this.routbuf = r(i.MAX_SAMPLES_PER_WINDOW + i.MAX_ORDER), this.rout = 0, this.sampleWindow = 0, this.totsamp = 0, this.lsum = 0, this.rsum = 0, this.freqindex = 0, this.first = 0, this.A = s(0 | i.STEPS_per_dB * i.MAX_dB), this.B = s(0 | i.STEPS_per_dB * i.MAX_dB);\n    };\n  }, function (e, t, n) {\n    var a = n(0),\n      m = (a.System, a.VbrMode, a.Float, a.ShortBlock, a.Util, a.Arrays, a.new_array_n, a.new_byte, a.new_double, a.new_float),\n      v = (a.new_float_n, a.new_int),\n      g = (a.new_int_n, a.assert),\n      w = n(12),\n      S = n(1),\n      y = n(5),\n      M = n(4);\n    e.exports = function (e) {\n      var t = e;\n      this.quantize = t, this.iteration_loop = function (e, t, n, a) {\n        var r,\n          s = e.internal_flags,\n          i = m(y.SFBMAX),\n          o = m(576),\n          _ = v(2),\n          l = 0,\n          f = s.l3_side,\n          c = new w(l);\n        this.quantize.rv.ResvFrameBegin(e, c), l = c.bits;\n        for (var u = 0; u < s.mode_gr; u++) {\n          r = this.quantize.qupvt.on_pe(e, t, _, l, u, u), s.mode_ext == S.MPG_MD_MS_LR && (this.quantize.ms_convert(s.l3_side, u), this.quantize.qupvt.reduce_side(_, n[u], l, r));\n          for (var h = 0; h < s.channels_out; h++) {\n            var p,\n              d,\n              b = f.tt[u][h];\n            d = b.block_type != S.SHORT_TYPE ? (p = 0, s.PSY.mask_adjust - p) : (p = 0, s.PSY.mask_adjust_short - p), s.masking_lower = Math.pow(10, .1 * d), this.quantize.init_outer_loop(s, b), this.quantize.init_xrpow(s, b, o) && (this.quantize.qupvt.calc_xmin(e, a[u][h], b, i), this.quantize.outer_loop(e, b, i, o, h, _[h])), this.quantize.iteration_finish_one(s, u, h), g(b.part2_3_length <= M.MAX_BITS_PER_CHANNEL), g(b.part2_3_length <= _[h]);\n          }\n        }\n        this.quantize.rv.ResvFrameEnd(s, l);\n      };\n    };\n  }, function (e, t, n) {\n    var a = n(0),\n      u = (a.System, a.VbrMode);\n    a.Float, a.ShortBlock, a.Util, a.Arrays, a.new_array_n, a.new_byte, a.new_double, a.new_float, a.new_float_n, a.new_int, a.new_int_n, a.assert;\n    e.exports = function () {\n      function e(e, t, n, a, r, s, i, o, _, l, f, c, u, h, p) {\n        this.vbr_q = e, this.quant_comp = t, this.quant_comp_s = n, this.expY = a, this.st_lrm = r, this.st_s = s, this.masking_adj = i, this.masking_adj_short = o, this.ath_lower = _, this.ath_curve = l, this.ath_sensitivity = f, this.interch = c, this.safejoint = u, this.sfb21mod = h, this.msfix = p;\n      }\n      function t(e, t, n, a, r, s, i, o, _, l, f, c, u, h) {\n        this.quant_comp = t, this.quant_comp_s = n, this.safejoint = a, this.nsmsfix = r, this.st_lrm = s, this.st_s = i, this.nsbass = o, this.scale = _, this.masking_adj = l, this.ath_lower = f, this.ath_curve = c, this.interch = u, this.sfscale = h;\n      }\n      var i;\n      this.setModules = function (e) {\n        i = e;\n      };\n      var f = [new e(0, 9, 9, 0, 5.2, 125, -4.2, -6.3, 4.8, 1, 0, 0, 2, 21, .97), new e(1, 9, 9, 0, 5.3, 125, -3.6, -5.6, 4.5, 1.5, 0, 0, 2, 21, 1.35), new e(2, 9, 9, 0, 5.6, 125, -2.2, -3.5, 2.8, 2, 0, 0, 2, 21, 1.49), new e(3, 9, 9, 1, 5.8, 130, -1.8, -2.8, 2.6, 3, -4, 0, 2, 20, 1.64), new e(4, 9, 9, 1, 6, 135, -.7, -1.1, 1.1, 3.5, -8, 0, 2, 0, 1.79), new e(5, 9, 9, 1, 6.4, 140, .5, .4, -7.5, 4, -12, 2e-4, 0, 0, 1.95), new e(6, 9, 9, 1, 6.6, 145, .67, .65, -14.7, 6.5, -19, 4e-4, 0, 0, 2.3), new e(7, 9, 9, 1, 6.6, 145, .8, .75, -19.7, 8, -22, 6e-4, 0, 0, 2.7), new e(8, 9, 9, 1, 6.6, 145, 1.2, 1.15, -27.5, 10, -23, 7e-4, 0, 0, 0), new e(9, 9, 9, 1, 6.6, 145, 1.6, 1.6, -36, 11, -25, 8e-4, 0, 0, 0), new e(10, 9, 9, 1, 6.6, 145, 2, 2, -36, 12, -25, 8e-4, 0, 0, 0)],\n        c = [new e(0, 9, 9, 0, 4.2, 25, -7, -4, 7.5, 1, 0, 0, 2, 26, .97), new e(1, 9, 9, 0, 4.2, 25, -5.6, -3.6, 4.5, 1.5, 0, 0, 2, 21, 1.35), new e(2, 9, 9, 0, 4.2, 25, -4.4, -1.8, 2, 2, 0, 0, 2, 18, 1.49), new e(3, 9, 9, 1, 4.2, 25, -3.4, -1.25, 1.1, 3, -4, 0, 2, 15, 1.64), new e(4, 9, 9, 1, 4.2, 25, -2.2, .1, 0, 3.5, -8, 0, 2, 0, 1.79), new e(5, 9, 9, 1, 4.2, 25, -1, 1.65, -7.7, 4, -12, 2e-4, 0, 0, 1.95), new e(6, 9, 9, 1, 4.2, 25, -0, 2.47, -7.7, 6.5, -19, 4e-4, 0, 0, 2), new e(7, 9, 9, 1, 4.2, 25, .5, 2, -14.5, 8, -22, 6e-4, 0, 0, 2), new e(8, 9, 9, 1, 4.2, 25, 1, 2.4, -22, 10, -23, 7e-4, 0, 0, 2), new e(9, 9, 9, 1, 4.2, 25, 1.5, 2.95, -30, 11, -25, 8e-4, 0, 0, 2), new e(10, 9, 9, 1, 4.2, 25, 2, 2.95, -36, 12, -30, 8e-4, 0, 0, 2)];\n      function a(e, t, n) {\n        var a,\n          r,\n          s = e.VBR == u.vbr_rh ? f : c,\n          i = e.VBR_q_frac,\n          o = s[t],\n          _ = s[t + 1],\n          l = o;\n        o.st_lrm = o.st_lrm + i * (_.st_lrm - o.st_lrm), o.st_s = o.st_s + i * (_.st_s - o.st_s), o.masking_adj = o.masking_adj + i * (_.masking_adj - o.masking_adj), o.masking_adj_short = o.masking_adj_short + i * (_.masking_adj_short - o.masking_adj_short), o.ath_lower = o.ath_lower + i * (_.ath_lower - o.ath_lower), o.ath_curve = o.ath_curve + i * (_.ath_curve - o.ath_curve), o.ath_sensitivity = o.ath_sensitivity + i * (_.ath_sensitivity - o.ath_sensitivity), o.interch = o.interch + i * (_.interch - o.interch), o.msfix = o.msfix + i * (_.msfix - o.msfix), a = e, (r = l.vbr_q) < 0 && (r = 0), 9 < r && (r = 9), a.VBR_q = r, (a.VBR_q_frac = 0) != n ? e.quant_comp = l.quant_comp : 0 < Math.abs(e.quant_comp - -1) || (e.quant_comp = l.quant_comp), 0 != n ? e.quant_comp_short = l.quant_comp_s : 0 < Math.abs(e.quant_comp_short - -1) || (e.quant_comp_short = l.quant_comp_s), 0 != l.expY && (e.experimentalY = 0 != l.expY), 0 != n ? e.internal_flags.nsPsy.attackthre = l.st_lrm : 0 < Math.abs(e.internal_flags.nsPsy.attackthre - -1) || (e.internal_flags.nsPsy.attackthre = l.st_lrm), 0 != n ? e.internal_flags.nsPsy.attackthre_s = l.st_s : 0 < Math.abs(e.internal_flags.nsPsy.attackthre_s - -1) || (e.internal_flags.nsPsy.attackthre_s = l.st_s), 0 != n ? e.maskingadjust = l.masking_adj : 0 < Math.abs(e.maskingadjust - 0) || (e.maskingadjust = l.masking_adj), 0 != n ? e.maskingadjust_short = l.masking_adj_short : 0 < Math.abs(e.maskingadjust_short - 0) || (e.maskingadjust_short = l.masking_adj_short), 0 != n ? e.ATHlower = -l.ath_lower / 10 : 0 < Math.abs(10 * -e.ATHlower - 0) || (e.ATHlower = -l.ath_lower / 10), 0 != n ? e.ATHcurve = l.ath_curve : 0 < Math.abs(e.ATHcurve - -1) || (e.ATHcurve = l.ath_curve), 0 != n ? e.athaa_sensitivity = l.ath_sensitivity : 0 < Math.abs(e.athaa_sensitivity - -1) || (e.athaa_sensitivity = l.ath_sensitivity), 0 < l.interch && (0 != n ? e.interChRatio = l.interch : 0 < Math.abs(e.interChRatio - -1) || (e.interChRatio = l.interch)), 0 < l.safejoint && (e.exp_nspsytune = e.exp_nspsytune | l.safejoint), 0 < l.sfb21mod && (e.exp_nspsytune = e.exp_nspsytune | l.sfb21mod << 20), 0 != n ? e.msfix = l.msfix : 0 < Math.abs(e.msfix - -1) || (e.msfix = l.msfix), 0 == n && (e.VBR_q = t, e.VBR_q_frac = i);\n      }\n      var o = [new t(8, 9, 9, 0, 0, 6.6, 145, 0, .95, 0, -30, 11, .0012, 1), new t(16, 9, 9, 0, 0, 6.6, 145, 0, .95, 0, -25, 11, .001, 1), new t(24, 9, 9, 0, 0, 6.6, 145, 0, .95, 0, -20, 11, .001, 1), new t(32, 9, 9, 0, 0, 6.6, 145, 0, .95, 0, -15, 11, .001, 1), new t(40, 9, 9, 0, 0, 6.6, 145, 0, .95, 0, -10, 11, 9e-4, 1), new t(48, 9, 9, 0, 0, 6.6, 145, 0, .95, 0, -10, 11, 9e-4, 1), new t(56, 9, 9, 0, 0, 6.6, 145, 0, .95, 0, -6, 11, 8e-4, 1), new t(64, 9, 9, 0, 0, 6.6, 145, 0, .95, 0, -2, 11, 8e-4, 1), new t(80, 9, 9, 0, 0, 6.6, 145, 0, .95, 0, 0, 8, 7e-4, 1), new t(96, 9, 9, 0, 2.5, 6.6, 145, 0, .95, 0, 1, 5.5, 6e-4, 1), new t(112, 9, 9, 0, 2.25, 6.6, 145, 0, .95, 0, 2, 4.5, 5e-4, 1), new t(128, 9, 9, 0, 1.95, 6.4, 140, 0, .95, 0, 3, 4, 2e-4, 1), new t(160, 9, 9, 1, 1.79, 6, 135, 0, .95, -2, 5, 3.5, 0, 1), new t(192, 9, 9, 1, 1.49, 5.6, 125, 0, .97, -4, 7, 3, 0, 0), new t(224, 9, 9, 1, 1.25, 5.2, 125, 0, .98, -6, 9, 2, 0, 0), new t(256, 9, 9, 1, .97, 5.2, 125, 0, 1, -8, 10, 1, 0, 0), new t(320, 9, 9, 1, .9, 5.2, 125, 0, 1, -10, 12, 0, 0, 0)];\n      function r(e, t, n) {\n        var a = t,\n          r = i.nearestBitrateFullIndex(t);\n        if (e.VBR = u.vbr_abr, e.VBR_mean_bitrate_kbps = a, e.VBR_mean_bitrate_kbps = Math.min(e.VBR_mean_bitrate_kbps, 320), e.VBR_mean_bitrate_kbps = Math.max(e.VBR_mean_bitrate_kbps, 8), e.brate = e.VBR_mean_bitrate_kbps, 320 < e.VBR_mean_bitrate_kbps && (e.disable_reservoir = !0), 0 < o[r].safejoint && (e.exp_nspsytune = 2 | e.exp_nspsytune), 0 < o[r].sfscale && (e.internal_flags.noise_shaping = 2), 0 < Math.abs(o[r].nsbass)) {\n          var s = int(4 * o[r].nsbass);\n          s < 0 && (s += 64), e.exp_nspsytune = e.exp_nspsytune | s << 2;\n        }\n        return 0 != n ? e.quant_comp = o[r].quant_comp : 0 < Math.abs(e.quant_comp - -1) || (e.quant_comp = o[r].quant_comp), 0 != n ? e.quant_comp_short = o[r].quant_comp_s : 0 < Math.abs(e.quant_comp_short - -1) || (e.quant_comp_short = o[r].quant_comp_s), 0 != n ? e.msfix = o[r].nsmsfix : 0 < Math.abs(e.msfix - -1) || (e.msfix = o[r].nsmsfix), 0 != n ? e.internal_flags.nsPsy.attackthre = o[r].st_lrm : 0 < Math.abs(e.internal_flags.nsPsy.attackthre - -1) || (e.internal_flags.nsPsy.attackthre = o[r].st_lrm), 0 != n ? e.internal_flags.nsPsy.attackthre_s = o[r].st_s : 0 < Math.abs(e.internal_flags.nsPsy.attackthre_s - -1) || (e.internal_flags.nsPsy.attackthre_s = o[r].st_s), 0 != n ? e.scale = o[r].scale : 0 < Math.abs(e.scale - -1) || (e.scale = o[r].scale), 0 != n ? e.maskingadjust = o[r].masking_adj : 0 < Math.abs(e.maskingadjust - 0) || (e.maskingadjust = o[r].masking_adj), 0 < o[r].masking_adj ? 0 != n ? e.maskingadjust_short = .9 * o[r].masking_adj : 0 < Math.abs(e.maskingadjust_short - 0) || (e.maskingadjust_short = .9 * o[r].masking_adj) : 0 != n ? e.maskingadjust_short = 1.1 * o[r].masking_adj : 0 < Math.abs(e.maskingadjust_short - 0) || (e.maskingadjust_short = 1.1 * o[r].masking_adj), 0 != n ? e.ATHlower = -o[r].ath_lower / 10 : 0 < Math.abs(10 * -e.ATHlower - 0) || (e.ATHlower = -o[r].ath_lower / 10), 0 != n ? e.ATHcurve = o[r].ath_curve : 0 < Math.abs(e.ATHcurve - -1) || (e.ATHcurve = o[r].ath_curve), 0 != n ? e.interChRatio = o[r].interch : 0 < Math.abs(e.interChRatio - -1) || (e.interChRatio = o[r].interch), t;\n      }\n      this.apply_preset = function (e, t, n) {\n        switch (t) {\n          case Lame.R3MIX:\n            t = Lame.V3, e.VBR = u.vbr_mtrh;\n            break;\n          case Lame.MEDIUM:\n            t = Lame.V4, e.VBR = u.vbr_rh;\n            break;\n          case Lame.MEDIUM_FAST:\n            t = Lame.V4, e.VBR = u.vbr_mtrh;\n            break;\n          case Lame.STANDARD:\n            t = Lame.V2, e.VBR = u.vbr_rh;\n            break;\n          case Lame.STANDARD_FAST:\n            t = Lame.V2, e.VBR = u.vbr_mtrh;\n            break;\n          case Lame.EXTREME:\n            t = Lame.V0, e.VBR = u.vbr_rh;\n            break;\n          case Lame.EXTREME_FAST:\n            t = Lame.V0, e.VBR = u.vbr_mtrh;\n            break;\n          case Lame.INSANE:\n            return t = 320, e.preset = t, r(e, t, n), e.VBR = u.vbr_off, t;\n        }\n        switch (e.preset = t) {\n          case Lame.V9:\n            return a(e, 9, n), t;\n          case Lame.V8:\n            return a(e, 8, n), t;\n          case Lame.V7:\n            return a(e, 7, n), t;\n          case Lame.V6:\n            return a(e, 6, n), t;\n          case Lame.V5:\n            return a(e, 5, n), t;\n          case Lame.V4:\n            return a(e, 4, n), t;\n          case Lame.V3:\n            return a(e, 3, n), t;\n          case Lame.V2:\n            return a(e, 2, n), t;\n          case Lame.V1:\n            return a(e, 1, n), t;\n          case Lame.V0:\n            return a(e, 0, n), t;\n        }\n        return 8 <= t && t <= 320 ? r(e, t, n) : (e.preset = 0, t);\n      };\n    };\n  }, function (e, t, n) {\n    var a = n(0),\n      A = a.System,\n      B = a.VbrMode,\n      i = (a.Float, a.ShortBlock, a.Util),\n      b = a.Arrays,\n      E = (a.new_array_n, a.new_byte, a.new_double, a.new_float),\n      T = (a.new_float_n, a.new_int, a.new_int_n, a.assert),\n      s = n(41),\n      k = n(42),\n      P = n(43),\n      L = n(1),\n      I = n(6),\n      V = n(5);\n    e.exports = function () {\n      var m, g, S;\n      this.rv = null, this.qupvt = null;\n      var y,\n        r = new s();\n      function M(e) {\n        this.ordinal = e;\n      }\n      function o(e) {\n        for (var t = 0; t < e.sfbmax; t++) if (e.scalefac[t] + e.subblock_gain[e.window[t]] == 0) return !1;\n        return !0;\n      }\n      function x(e, t, n, a, r) {\n        var s;\n        switch (e) {\n          default:\n          case 9:\n            0 < t.over_count ? (s = n.over_SSD <= t.over_SSD, n.over_SSD == t.over_SSD && (s = n.bits < t.bits)) : s = n.max_noise < 0 && 10 * n.max_noise + n.bits <= 10 * t.max_noise + t.bits;\n            break;\n          case 0:\n            s = n.over_count < t.over_count || n.over_count == t.over_count && n.over_noise < t.over_noise || n.over_count == t.over_count && BitStream.EQ(n.over_noise, t.over_noise) && n.tot_noise < t.tot_noise;\n            break;\n          case 8:\n            n.max_noise = function (e, t) {\n              for (var n, a = 1e-37, r = 0; r < t.psymax; r++) a += (n = e[r], i.FAST_LOG10(.368 + .632 * n * n * n));\n              return Math.max(1e-20, a);\n            }(r, a);\n          case 1:\n            s = n.max_noise < t.max_noise;\n            break;\n          case 2:\n            s = n.tot_noise < t.tot_noise;\n            break;\n          case 3:\n            s = n.tot_noise < t.tot_noise && n.max_noise < t.max_noise;\n            break;\n          case 4:\n            s = n.max_noise <= 0 && .2 < t.max_noise || n.max_noise <= 0 && t.max_noise < 0 && t.max_noise > n.max_noise - .2 && n.tot_noise < t.tot_noise || n.max_noise <= 0 && 0 < t.max_noise && t.max_noise > n.max_noise - .2 && n.tot_noise < t.tot_noise + t.over_noise || 0 < n.max_noise && -.05 < t.max_noise && t.max_noise > n.max_noise - .1 && n.tot_noise + n.over_noise < t.tot_noise + t.over_noise || 0 < n.max_noise && -.1 < t.max_noise && t.max_noise > n.max_noise - .15 && n.tot_noise + n.over_noise + n.over_noise < t.tot_noise + t.over_noise + t.over_noise;\n            break;\n          case 5:\n            s = n.over_noise < t.over_noise || BitStream.EQ(n.over_noise, t.over_noise) && n.tot_noise < t.tot_noise;\n            break;\n          case 6:\n            s = n.over_noise < t.over_noise || BitStream.EQ(n.over_noise, t.over_noise) && (n.max_noise < t.max_noise || BitStream.EQ(n.max_noise, t.max_noise) && n.tot_noise <= t.tot_noise);\n            break;\n          case 7:\n            s = n.over_count < t.over_count || n.over_noise < t.over_noise;\n        }\n        return 0 == t.over_count && (s = s && n.bits < t.bits), s;\n      }\n      function R(e, t, n, a, r) {\n        var s = e.internal_flags;\n        !function (e, t, n, a, r) {\n          var s,\n            i = e.internal_flags;\n          s = 0 == t.scalefac_scale ? 1.2968395546510096 : 1.6817928305074292;\n          for (var o = 0, _ = 0; _ < t.sfbmax; _++) o < n[_] && (o = n[_]);\n          var l = i.noise_shaping_amp;\n          switch (3 == l && (l = r ? 2 : 1), l) {\n            case 2:\n              break;\n            case 1:\n              1 < o ? o = Math.pow(o, .5) : o *= .95;\n              break;\n            case 0:\n            default:\n              1 < o ? o = 1 : o *= .95;\n          }\n          var f = 0;\n          for (_ = 0; _ < t.sfbmax; _++) {\n            var c,\n              u = t.width[_];\n            if (f += u, !(n[_] < o)) {\n              if (0 != (2 & i.substep_shaping) && (i.pseudohalf[_] = 0 == i.pseudohalf[_] ? 1 : 0, 0 == i.pseudohalf[_] && 2 == i.noise_shaping_amp)) return;\n              for (t.scalefac[_]++, c = -u; c < 0; c++) a[f + c] *= s, a[f + c] > t.xrpow_max && (t.xrpow_max = a[f + c]);\n              if (2 == i.noise_shaping_amp) return;\n            }\n          }\n        }(e, t, n, a, r);\n        var i = o(t);\n        return !(i || (i = 2 == s.mode_gr ? y.scale_bitcount(t) : y.scale_bitcount_lsf(s, t)) && (1 < s.noise_shaping && (b.fill(s.pseudohalf, 0), 0 == t.scalefac_scale ? (function (e, t) {\n          for (var n = 0, a = 0; a < e.sfbmax; a++) {\n            var r = e.width[a],\n              s = e.scalefac[a];\n            if (0 != e.preflag && (s += S.pretab[a]), n += r, 0 != (1 & s)) {\n              s++;\n              for (var i = -r; i < 0; i++) t[n + i] *= 1.2968395546510096, t[n + i] > e.xrpow_max && (e.xrpow_max = t[n + i]);\n            }\n            e.scalefac[a] = s >> 1;\n          }\n          e.preflag = 0, e.scalefac_scale = 1;\n        }(t, a), i = !1) : t.block_type == L.SHORT_TYPE && 0 < s.subblock_gain && (i = function (e, t, n) {\n          var a,\n            r = t.scalefac;\n          for (a = 0; a < t.sfb_lmax; a++) if (16 <= r[a]) return !0;\n          for (var s = 0; s < 3; s++) {\n            var i = 0,\n              o = 0;\n            for (a = t.sfb_lmax + s; a < t.sfbdivide; a += 3) i < r[a] && (i = r[a]);\n            for (; a < t.sfbmax; a += 3) o < r[a] && (o = r[a]);\n            if (!(i < 16 && o < 8)) {\n              if (7 <= t.subblock_gain[s]) return !0;\n              t.subblock_gain[s]++;\n              var _ = e.scalefac_band.l[t.sfb_lmax];\n              for (a = t.sfb_lmax + s; a < t.sfbmax; a += 3) {\n                var l = t.width[a],\n                  f = r[a];\n                if (T(0 <= f), 0 <= (f -= 4 >> t.scalefac_scale)) r[a] = f, _ += 3 * l;else {\n                  r[a] = 0;\n                  var c = 210 + (f << t.scalefac_scale + 1);\n                  h = S.IPOW20(c), _ += l * (s + 1);\n                  for (var u = -l; u < 0; u++) n[_ + u] *= h, n[_ + u] > t.xrpow_max && (t.xrpow_max = n[_ + u]);\n                  _ += l * (3 - s - 1);\n                }\n              }\n              var h = S.IPOW20(202);\n              for (_ += t.width[a] * (s + 1), u = -t.width[a]; u < 0; u++) n[_ + u] *= h, n[_ + u] > t.xrpow_max && (t.xrpow_max = n[_ + u]);\n            }\n          }\n          return !1;\n        }(s, t, a) || o(t))), i || (i = 2 == s.mode_gr ? y.scale_bitcount(t) : y.scale_bitcount_lsf(s, t)), i));\n      }\n      this.setModules = function (e, t, n, a) {\n        m = e, g = t, this.rv = t, S = n, this.qupvt = n, y = a, r.setModules(S, y);\n      }, this.ms_convert = function (e, t) {\n        for (var n = 0; n < 576; ++n) {\n          var a = e.tt[t][0].xr[n],\n            r = e.tt[t][1].xr[n];\n          e.tt[t][0].xr[n] = (a + r) * (.5 * i.SQRT2), e.tt[t][1].xr[n] = (a - r) * (.5 * i.SQRT2);\n        }\n      }, this.init_xrpow = function (e, t, n) {\n        var a = 0,\n          r = 0 | t.max_nonzero_coeff;\n        if (T(null != n), t.xrpow_max = 0, T(0 <= r && r <= 575), b.fill(n, r, 576, 0), 1e-20 < (a = function (e, t, n, a) {\n          for (var r = a = 0; r <= n; ++r) {\n            var s = Math.abs(e.xr[r]);\n            a += s, t[r] = Math.sqrt(s * Math.sqrt(s)), t[r] > e.xrpow_max && (e.xrpow_max = t[r]);\n          }\n          return a;\n        }(t, n, r, a))) {\n          var s = 0;\n          0 != (2 & e.substep_shaping) && (s = 1);\n          for (var i = 0; i < t.psymax; i++) e.pseudohalf[i] = s;\n          return !0;\n        }\n        return b.fill(t.l3_enc, 0, 576, 0), !1;\n      }, this.init_outer_loop = function (e, t) {\n        t.part2_3_length = 0, t.big_values = 0, t.count1 = 0, t.global_gain = 210, t.scalefac_compress = 0, t.table_select[0] = 0, t.table_select[1] = 0, t.table_select[2] = 0, t.subblock_gain[0] = 0, t.subblock_gain[1] = 0, t.subblock_gain[2] = 0, t.subblock_gain[3] = 0, t.region0_count = 0, t.region1_count = 0, t.preflag = 0, t.scalefac_scale = 0, t.count1table_select = 0, t.part2_length = 0, t.sfb_lmax = L.SBPSY_l, t.sfb_smin = L.SBPSY_s, t.psy_lmax = e.sfb21_extra ? L.SBMAX_l : L.SBPSY_l, t.psymax = t.psy_lmax, t.sfbmax = t.sfb_lmax, t.sfbdivide = 11;\n        for (var n = 0; n < L.SBMAX_l; n++) t.width[n] = e.scalefac_band.l[n + 1] - e.scalefac_band.l[n], t.window[n] = 3;\n        if (t.block_type == L.SHORT_TYPE) {\n          var a = E(576);\n          t.sfb_smin = 0, (t.sfb_lmax = 0) != t.mixed_block_flag && (t.sfb_smin = 3, t.sfb_lmax = 2 * e.mode_gr + 4), t.psymax = t.sfb_lmax + 3 * ((e.sfb21_extra ? L.SBMAX_s : L.SBPSY_s) - t.sfb_smin), t.sfbmax = t.sfb_lmax + 3 * (L.SBPSY_s - t.sfb_smin), t.sfbdivide = t.sfbmax - 18, t.psy_lmax = t.sfb_lmax;\n          var r = e.scalefac_band.l[t.sfb_lmax];\n          for (A.arraycopy(t.xr, 0, a, 0, 576), n = t.sfb_smin; n < L.SBMAX_s; n++) for (var s = e.scalefac_band.s[n], i = e.scalefac_band.s[n + 1], o = 0; o < 3; o++) for (var _ = s; _ < i; _++) t.xr[r++] = a[3 * _ + o];\n          var l = t.sfb_lmax;\n          for (n = t.sfb_smin; n < L.SBMAX_s; n++) t.width[l] = t.width[l + 1] = t.width[l + 2] = e.scalefac_band.s[n + 1] - e.scalefac_band.s[n], t.window[l] = 0, t.window[l + 1] = 1, t.window[l + 2] = 2, l += 3;\n        }\n        t.count1bits = 0, t.sfb_partition_table = S.nr_of_sfb_block[0][0], t.slen[0] = 0, t.slen[1] = 0, t.slen[2] = 0, t.slen[3] = 0, t.max_nonzero_coeff = 575, b.fill(t.scalefac, 0), function (e, t) {\n          var n = e.ATH,\n            a = t.xr;\n          if (t.block_type != L.SHORT_TYPE) for (var r = !1, s = L.PSFB21 - 1; 0 <= s && !r; s--) {\n            var i = e.scalefac_band.psfb21[s],\n              o = e.scalefac_band.psfb21[s + 1],\n              _ = S.athAdjust(n.adjust, n.psfb21[s], n.floor);\n            1e-12 < e.nsPsy.longfact[21] && (_ *= e.nsPsy.longfact[21]);\n            for (var l = o - 1; i <= l; l--) {\n              if (!(Math.abs(a[l]) < _)) {\n                r = !0;\n                break;\n              }\n              a[l] = 0;\n            }\n          } else for (var f = 0; f < 3; f++) for (r = !1, s = L.PSFB12 - 1; 0 <= s && !r; s--) {\n            o = (i = 3 * e.scalefac_band.s[12] + (e.scalefac_band.s[13] - e.scalefac_band.s[12]) * f + (e.scalefac_band.psfb12[s] - e.scalefac_band.psfb12[0])) + (e.scalefac_band.psfb12[s + 1] - e.scalefac_band.psfb12[s]);\n            var c = S.athAdjust(n.adjust, n.psfb12[s], n.floor);\n            for (1e-12 < e.nsPsy.shortfact[12] && (c *= e.nsPsy.shortfact[12]), l = o - 1; i <= l; l--) {\n              if (!(Math.abs(a[l]) < c)) {\n                r = !0;\n                break;\n              }\n              a[l] = 0;\n            }\n          }\n        }(e, t);\n      }, M.BINSEARCH_NONE = new M(0), M.BINSEARCH_UP = new M(1), M.BINSEARCH_DOWN = new M(2), this.trancate_smallspectrums = function (e, t, n, a) {\n        var r = E(V.SFBMAX);\n        if ((0 != (4 & e.substep_shaping) || t.block_type != L.SHORT_TYPE) && 0 == (128 & e.substep_shaping)) {\n          S.calc_noise(t, n, r, new k(), null);\n          for (var s = 0; s < 576; s++) {\n            var i = 0;\n            0 != t.l3_enc[s] && (i = Math.abs(t.xr[s])), a[s] = i;\n          }\n          s = 0;\n          var o = 8;\n          t.block_type == L.SHORT_TYPE && (o = 6);\n          do {\n            var _,\n              l,\n              f,\n              c,\n              u = t.width[o];\n            if (s += u, !(1 <= r[o] || (b.sort(a, s - u, u), BitStream.EQ(a[s - 1], 0)))) {\n              _ = (1 - r[o]) * n[o], c = l = 0;\n              do {\n                var h;\n                for (f = 1; c + f < u && !BitStream.NEQ(a[c + s - u], a[c + s + f - u]); f++);\n                if (_ < (h = a[c + s - u] * a[c + s - u] * f)) {\n                  0 != c && (l = a[c + s - u - 1]);\n                  break;\n                }\n                _ -= h, c += f;\n              } while (c < u);\n              if (!BitStream.EQ(l, 0)) for (; Math.abs(t.xr[s - u]) <= l && (t.l3_enc[s - u] = 0), 0 < --u;);\n            }\n          } while (++o < t.psymax);\n          t.part2_3_length = y.noquant_count_bits(e, t, null);\n        }\n      }, this.outer_loop = function (e, t, n, a, r, s) {\n        var i = e.internal_flags,\n          o = new I(),\n          _ = E(576),\n          l = E(V.SFBMAX),\n          f = new k(),\n          c = new P(),\n          u = 9999999,\n          h = !1,\n          p = !1,\n          d = 0;\n        if (function (e, t, n, a, r) {\n          var s,\n            i = e.CurrentStep[a],\n            o = !1,\n            _ = e.OldValue[a],\n            l = M.BINSEARCH_NONE;\n          for (t.global_gain = _, n -= t.part2_length, T(0 != i);;) {\n            var f;\n            if (s = y.count_bits(e, r, t, null), 1 == i || s == n) break;\n            f = n < s ? (l == M.BINSEARCH_DOWN && (o = !0), o && (i /= 2), l = M.BINSEARCH_UP, i) : (l == M.BINSEARCH_UP && (o = !0), o && (i /= 2), l = M.BINSEARCH_DOWN, -i), t.global_gain += f, t.global_gain < 0 && (o = !(t.global_gain = 0)), 255 < t.global_gain && (t.global_gain = 255, o = !0);\n          }\n          for (T(0 <= t.global_gain), T(t.global_gain < 256); n < s && t.global_gain < 255;) t.global_gain++, s = y.count_bits(e, r, t, null);\n          e.CurrentStep[a] = 4 <= _ - t.global_gain ? 4 : 2, e.OldValue[a] = t.global_gain, t.part2_3_length = s;\n        }(i, t, s, r, a), 0 == i.noise_shaping) return 100;\n        S.calc_noise(t, n, l, f, c), f.bits = t.part2_3_length, o.assign(t);\n        var b = 0;\n        for (A.arraycopy(a, 0, _, 0, 576); !h;) {\n          do {\n            var m,\n              v = new k(),\n              g = 255;\n            if (m = 0 != (2 & i.substep_shaping) ? 20 : 3, i.sfb21_extra) {\n              if (1 < l[o.sfbmax]) break;\n              if (o.block_type == L.SHORT_TYPE && (1 < l[o.sfbmax + 1] || 1 < l[o.sfbmax + 2])) break;\n            }\n            if (!R(e, o, l, a, p)) break;\n            0 != o.scalefac_scale && (g = 254);\n            var w = s - o.part2_length;\n            if (w <= 0) break;\n            for (; (o.part2_3_length = y.count_bits(i, a, o, c)) > w && o.global_gain <= g;) o.global_gain++;\n            if (o.global_gain > g) break;\n            if (0 == f.over_count) {\n              for (; (o.part2_3_length = y.count_bits(i, a, o, c)) > u && o.global_gain <= g;) o.global_gain++;\n              if (o.global_gain > g) break;\n            }\n            if (S.calc_noise(o, n, l, v, c), v.bits = o.part2_3_length, 0 != (x(t.block_type != L.SHORT_TYPE ? e.quant_comp : e.quant_comp_short, f, v, o, l) ? 1 : 0)) u = t.part2_3_length, f = v, t.assign(o), b = 0, A.arraycopy(a, 0, _, 0, 576);else if (0 == i.full_outer_loop) {\n              if (++b > m && 0 == f.over_count) break;\n              if (3 == i.noise_shaping_amp && p && 30 < b) break;\n              if (3 == i.noise_shaping_amp && p && 15 < o.global_gain - d) break;\n            }\n          } while (o.global_gain + o.scalefac_scale < 255);\n          3 == i.noise_shaping_amp ? p ? h = !0 : (o.assign(t), A.arraycopy(_, 0, a, 0, 576), b = 0, d = o.global_gain, p = !0) : h = !0;\n        }\n        return T(t.global_gain + t.scalefac_scale <= 255), e.VBR == B.vbr_rh || e.VBR == B.vbr_mtrh ? A.arraycopy(_, 0, a, 0, 576) : 0 != (1 & i.substep_shaping) && trancate_smallspectrums(i, t, n, a), f.over_count;\n      }, this.iteration_finish_one = function (e, t, n) {\n        var a = e.l3_side,\n          r = a.tt[t][n];\n        y.best_scalefac_store(e, t, n, a), 1 == e.use_best_huffman && y.best_huffman_divide(e, r), g.ResvAdjust(e, r);\n      }, this.VBR_encode_granule = function (e, t, n, a, r, s, i) {\n        var o,\n          _ = e.internal_flags,\n          l = new I(),\n          f = E(576),\n          c = i,\n          u = i + 1,\n          h = (i + s) / 2,\n          p = 0,\n          d = _.sfb21_extra;\n        for (T(c <= LameInternalFlags.MAX_BITS_PER_CHANNEL), b.fill(l.l3_enc, 0); T(s <= h), T(h <= i), T(s <= i), _.sfb21_extra = !(c - 42 < h) && d, outer_loop(e, t, n, a, r, h) <= 0 ? (p = 1, u = t.part2_3_length, l.assign(t), A.arraycopy(a, 0, f, 0, 576), o = (i = u - 32) - s, h = (i + s) / 2) : (o = i - (s = h + 32), h = (i + s) / 2, 0 != p && (p = 2, t.assign(l), A.arraycopy(f, 0, a, 0, 576))), 12 < o;);\n        _.sfb21_extra = d, 2 == p && A.arraycopy(l.l3_enc, 0, t.l3_enc, 0, 576), T(t.part2_3_length <= c);\n      }, this.get_framebits = function (e, t) {\n        var n = e.internal_flags;\n        n.bitrate_index = n.VBR_min_bitrate;\n        var a = m.getframebits(e);\n        n.bitrate_index = 1, a = m.getframebits(e);\n        for (var r = 1; r <= n.VBR_max_bitrate; r++) {\n          n.bitrate_index = r;\n          var s = new MeanBits(a);\n          t[r] = g.ResvFrameBegin(e, s), a = s.bits;\n        }\n      }, this.VBR_old_prepare = function (e, t, n, a, r, s, i, o, _) {\n        var l,\n          f = e.internal_flags,\n          c = 0,\n          u = 1,\n          h = 0;\n        f.bitrate_index = f.VBR_max_bitrate;\n        var p = g.ResvFrameBegin(e, new MeanBits(0)) / f.mode_gr;\n        get_framebits(e, s);\n        for (var d = 0; d < f.mode_gr; d++) {\n          var b = S.on_pe(e, t, o[d], p, d, 0);\n          f.mode_ext == L.MPG_MD_MS_LR && (ms_convert(f.l3_side, d), S.reduce_side(o[d], n[d], p, b));\n          for (var m = 0; m < f.channels_out; ++m) {\n            var v = f.l3_side.tt[d][m];\n            l = v.block_type != L.SHORT_TYPE ? (c = 1.28 / (1 + Math.exp(3.5 - t[d][m] / 300)) - .05, f.PSY.mask_adjust - c) : (c = 2.56 / (1 + Math.exp(3.5 - t[d][m] / 300)) - .14, f.PSY.mask_adjust_short - c), f.masking_lower = Math.pow(10, .1 * l), init_outer_loop(f, v), _[d][m] = S.calc_xmin(e, a[d][m], v, r[d][m]), 0 != _[d][m] && (u = 0), i[d][m] = 126, h += o[d][m];\n          }\n        }\n        for (d = 0; d < f.mode_gr; d++) for (m = 0; m < f.channels_out; m++) h > s[f.VBR_max_bitrate] && (o[d][m] *= s[f.VBR_max_bitrate], o[d][m] /= h), i[d][m] > o[d][m] && (i[d][m] = o[d][m]);\n        return u;\n      }, this.bitpressure_strategy = function (e, t, n, a) {\n        for (var r = 0; r < e.mode_gr; r++) for (var s = 0; s < e.channels_out; s++) {\n          for (var i = e.l3_side.tt[r][s], o = t[r][s], _ = 0, l = 0; l < i.psy_lmax; l++) o[_++] *= 1 + .029 * l * l / L.SBMAX_l / L.SBMAX_l;\n          if (i.block_type == L.SHORT_TYPE) for (l = i.sfb_smin; l < L.SBMAX_s; l++) o[_++] *= 1 + .029 * l * l / L.SBMAX_s / L.SBMAX_s, o[_++] *= 1 + .029 * l * l / L.SBMAX_s / L.SBMAX_s, o[_++] *= 1 + .029 * l * l / L.SBMAX_s / L.SBMAX_s;\n          a[r][s] = 0 | Math.max(n[r][s], .9 * a[r][s]);\n        }\n      }, this.VBR_new_prepare = function (e, t, n, a, r, s) {\n        var i,\n          o = e.internal_flags,\n          _ = 1,\n          l = 0,\n          f = 0;\n        if (e.free_format) o.bitrate_index = 0, c = new MeanBits(l), i = g.ResvFrameBegin(e, c), l = c.bits, r[0] = i;else {\n          o.bitrate_index = o.VBR_max_bitrate;\n          var c = new MeanBits(l);\n          g.ResvFrameBegin(e, c), l = c.bits, get_framebits(e, r), i = r[o.VBR_max_bitrate];\n        }\n        for (var u = 0; u < o.mode_gr; u++) {\n          S.on_pe(e, t, s[u], l, u, 0), o.mode_ext == L.MPG_MD_MS_LR && ms_convert(o.l3_side, u);\n          for (var h = 0; h < o.channels_out; ++h) {\n            var p = o.l3_side.tt[u][h];\n            o.masking_lower = Math.pow(10, .1 * o.PSY.mask_adjust), init_outer_loop(o, p), 0 != S.calc_xmin(e, n[u][h], p, a[u][h]) && (_ = 0), f += s[u][h];\n          }\n        }\n        for (u = 0; u < o.mode_gr; u++) for (h = 0; h < o.channels_out; h++) i < f && (s[u][h] *= i, s[u][h] /= f);\n        return _;\n      }, this.calc_target_bits = function (e, t, n, a, r, s) {\n        var i,\n          o,\n          _,\n          l,\n          f = e.internal_flags,\n          c = f.l3_side,\n          u = 0;\n        f.bitrate_index = f.VBR_max_bitrate;\n        var h = new MeanBits(u);\n        for (s[0] = g.ResvFrameBegin(e, h), u = h.bits, f.bitrate_index = 1, u = m.getframebits(e) - 8 * f.sideinfo_len, r[0] = u / (f.mode_gr * f.channels_out), u = e.VBR_mean_bitrate_kbps * e.framesize * 1e3, 0 != (1 & f.substep_shaping) && (u *= 1.09), u /= e.out_samplerate, u -= 8 * f.sideinfo_len, u /= f.mode_gr * f.channels_out, (i = .93 + .07 * (11 - e.compression_ratio) / 5.5) < .9 && (i = .9), 1 < i && (i = 1), o = 0; o < f.mode_gr; o++) {\n          var p = 0;\n          for (_ = 0; _ < f.channels_out; _++) {\n            if (a[o][_] = int(i * u), 700 < t[o][_]) {\n              var d = int((t[o][_] - 700) / 1.4),\n                b = c.tt[o][_];\n              a[o][_] = int(i * u), b.block_type == L.SHORT_TYPE && d < u / 2 && (d = u / 2), 3 * u / 2 < d ? d = 3 * u / 2 : d < 0 && (d = 0), a[o][_] += d;\n            }\n            a[o][_] > LameInternalFlags.MAX_BITS_PER_CHANNEL && (a[o][_] = LameInternalFlags.MAX_BITS_PER_CHANNEL), p += a[o][_];\n          }\n          if (p > LameInternalFlags.MAX_BITS_PER_GRANULE) for (_ = 0; _ < f.channels_out; ++_) a[o][_] *= LameInternalFlags.MAX_BITS_PER_GRANULE, a[o][_] /= p;\n        }\n        if (f.mode_ext == L.MPG_MD_MS_LR) for (o = 0; o < f.mode_gr; o++) S.reduce_side(a[o], n[o], u * f.channels_out, LameInternalFlags.MAX_BITS_PER_GRANULE);\n        for (o = l = 0; o < f.mode_gr; o++) for (_ = 0; _ < f.channels_out; _++) a[o][_] > LameInternalFlags.MAX_BITS_PER_CHANNEL && (a[o][_] = LameInternalFlags.MAX_BITS_PER_CHANNEL), l += a[o][_];\n        if (l > s[0]) for (o = 0; o < f.mode_gr; o++) for (_ = 0; _ < f.channels_out; _++) a[o][_] *= s[0], a[o][_] /= l;\n      };\n    };\n  }, function (e, t) {\n    e.exports = function () {\n      this.setModules = function (e, t) {};\n    };\n  }, function (e, t) {\n    e.exports = function () {\n      this.over_noise = 0, this.tot_noise = 0, this.max_noise = 0, this.over_count = 0, this.over_SSD = 0, this.bits = 0;\n    };\n  }, function (e, t, n) {\n    var a = n(0),\n      r = a.new_float,\n      s = a.new_int;\n    a.assert;\n    e.exports = function () {\n      this.global_gain = 0, this.sfb_count1 = 0, this.step = s(39), this.noise = r(39), this.noise_log = r(39);\n    };\n  }, function (e, t, n) {\n    var l = n(0).assert;\n    e.exports = function () {\n      var _;\n      this.setModules = function (e) {\n        _ = e;\n      }, this.ResvFrameBegin = function (e, t) {\n        var n,\n          a = e.internal_flags,\n          r = a.l3_side,\n          s = _.getframebits(e);\n        t.bits = (s - 8 * a.sideinfo_len) / a.mode_gr;\n        var i = 2048 * a.mode_gr - 8;\n        320 < e.brate ? n = 8 * int(1e3 * e.brate / (e.out_samplerate / 1152) / 8 + .5) : (n = 11520, e.strict_ISO && (n = 8 * int(32e4 / (e.out_samplerate / 1152) / 8 + .5))), a.ResvMax = n - s, a.ResvMax > i && (a.ResvMax = i), (a.ResvMax < 0 || e.disable_reservoir) && (a.ResvMax = 0);\n        var o = t.bits * a.mode_gr + Math.min(a.ResvSize, a.ResvMax);\n        return n < o && (o = n), l(0 == a.ResvMax % 8), l(0 <= a.ResvMax), r.resvDrain_pre = 0, null != a.pinfo && (a.pinfo.mean_bits = t.bits / 2, a.pinfo.resvsize = a.ResvSize), o;\n      }, this.ResvMaxBits = function (e, t, n, a) {\n        var r,\n          s = e.internal_flags,\n          i = s.ResvSize,\n          o = s.ResvMax;\n        0 != a && (i += t), 0 != (1 & s.substep_shaping) && (o *= .9), n.bits = t, 9 * o < 10 * i ? (r = i - 9 * o / 10, n.bits += r, s.substep_shaping |= 128) : (r = 0, s.substep_shaping &= 127, e.disable_reservoir || 0 != (1 & s.substep_shaping) || (n.bits -= .1 * t));\n        var _ = i < 6 * s.ResvMax / 10 ? i : 6 * s.ResvMax / 10;\n        return (_ -= r) < 0 && (_ = 0), _;\n      }, this.ResvAdjust = function (e, t) {\n        e.ResvSize -= t.part2_3_length + t.part2_length;\n      }, this.ResvFrameEnd = function (e, t) {\n        var n,\n          a = e.l3_side;\n        e.ResvSize += t * e.mode_gr;\n        var r = 0;\n        a.resvDrain_post = 0, (a.resvDrain_pre = 0) != (n = e.ResvSize % 8) && (r += n), 0 < (n = e.ResvSize - r - e.ResvMax) && (l(0 == n % 8), l(0 <= n), r += n);\n        var s = Math.min(8 * a.main_data_begin, r) / 8;\n        a.resvDrain_pre += 8 * s, r -= 8 * s, e.ResvSize -= 8 * s, a.main_data_begin -= s, a.resvDrain_post += r, e.ResvSize -= r;\n      };\n    };\n  }, function (e, t) {\n    e.exports = function () {\n      this.getLameVersion = function () {\n        return \"3.98.4\";\n      }, this.getLameShortVersion = function () {\n        return \"3.98.4\";\n      }, this.getLameVeryShortVersion = function () {\n        return \"LAME3.98r\";\n      }, this.getPsyVersion = function () {\n        return \"0.93\";\n      }, this.getLameUrl = function () {\n        return \"http://www.mp3dev.org/\";\n      }, this.getLameOsBitness = function () {\n        return \"32bits\";\n      };\n    };\n  }, function (e, t, n) {\n    var a = n(0),\n      u = a.System,\n      m = a.VbrMode,\n      N = (a.Float, a.ShortBlock),\n      v = (a.Util, a.Arrays),\n      g = (a.new_array_n, a.new_byte),\n      r = (a.new_double, a.new_float, a.new_float_n, a.new_int, a.new_int_n, a.assert);\n    function s() {\n      var i, _, I;\n      this.setModules = function (e, t, n) {\n        i = e, _ = t, I = n;\n      };\n      var h = s.NUMTOCENTRIES,\n        l = s.MAXFRAMESIZE,\n        f = h + 4 + 4 + 4 + 4 + 4 + 9 + 1 + 1 + 8 + 1 + 1 + 3 + 1 + 1 + 2 + 4 + 2 + 2,\n        p = \"Xing\",\n        d = \"Info\",\n        n = [0, 49345, 49537, 320, 49921, 960, 640, 49729, 50689, 1728, 1920, 51009, 1280, 50625, 50305, 1088, 52225, 3264, 3456, 52545, 3840, 53185, 52865, 3648, 2560, 51905, 52097, 2880, 51457, 2496, 2176, 51265, 55297, 6336, 6528, 55617, 6912, 56257, 55937, 6720, 7680, 57025, 57217, 8e3, 56577, 7616, 7296, 56385, 5120, 54465, 54657, 5440, 55041, 6080, 5760, 54849, 53761, 4800, 4992, 54081, 4352, 53697, 53377, 4160, 61441, 12480, 12672, 61761, 13056, 62401, 62081, 12864, 13824, 63169, 63361, 14144, 62721, 13760, 13440, 62529, 15360, 64705, 64897, 15680, 65281, 16320, 16e3, 65089, 64001, 15040, 15232, 64321, 14592, 63937, 63617, 14400, 10240, 59585, 59777, 10560, 60161, 11200, 10880, 59969, 60929, 11968, 12160, 61249, 11520, 60865, 60545, 11328, 58369, 9408, 9600, 58689, 9984, 59329, 59009, 9792, 8704, 58049, 58241, 9024, 57601, 8640, 8320, 57409, 40961, 24768, 24960, 41281, 25344, 41921, 41601, 25152, 26112, 42689, 42881, 26432, 42241, 26048, 25728, 42049, 27648, 44225, 44417, 27968, 44801, 28608, 28288, 44609, 43521, 27328, 27520, 43841, 26880, 43457, 43137, 26688, 30720, 47297, 47489, 31040, 47873, 31680, 31360, 47681, 48641, 32448, 32640, 48961, 32e3, 48577, 48257, 31808, 46081, 29888, 30080, 46401, 30464, 47041, 46721, 30272, 29184, 45761, 45953, 29504, 45313, 29120, 28800, 45121, 20480, 37057, 37249, 20800, 37633, 21440, 21120, 37441, 38401, 22208, 22400, 38721, 21760, 38337, 38017, 21568, 39937, 23744, 23936, 40257, 24320, 40897, 40577, 24128, 23040, 39617, 39809, 23360, 39169, 22976, 22656, 38977, 34817, 18624, 18816, 35137, 19200, 35777, 35457, 19008, 19968, 36545, 36737, 20288, 36097, 19904, 19584, 35905, 17408, 33985, 34177, 17728, 34561, 18368, 18048, 34369, 33281, 17088, 17280, 33601, 16640, 33217, 32897, 16448];\n      function b(e, t) {\n        var n = 255 & e[t + 0];\n        return n <<= 8, n |= 255 & e[t + 1], n <<= 8, n |= 255 & e[t + 2], n <<= 8, n |= 255 & e[t + 3];\n      }\n      function V(e, t, n) {\n        e[t + 0] = 255 & n >> 24, e[t + 1] = 255 & n >> 16, e[t + 2] = 255 & n >> 8, e[t + 3] = 255 & n;\n      }\n      function H(e, t, n) {\n        e[t + 0] = 255 & n >> 8, e[t + 1] = 255 & n;\n      }\n      function o(e, t, n) {\n        return 255 & (e << t | n & ~(-1 << t));\n      }\n      function c(e, t) {\n        var n = e.internal_flags;\n        t[0] = o(t[0], 8, 255), t[1] = o(t[1], 3, 7), t[1] = o(t[1], 1, e.out_samplerate < 16e3 ? 0 : 1), t[1] = o(t[1], 1, e.version), t[1] = o(t[1], 2, 1), t[1] = o(t[1], 1, e.error_protection ? 0 : 1), t[2] = o(t[2], 4, n.bitrate_index), t[2] = o(t[2], 2, n.samplerate_index), t[2] = o(t[2], 1, 0), t[2] = o(t[2], 1, e.extension), t[3] = o(t[3], 2, e.mode.ordinal()), t[3] = o(t[3], 2, n.mode_ext), t[3] = o(t[3], 1, e.copyright), t[3] = o(t[3], 1, e.original), t[3] = o(t[3], 2, e.emphasis), t[0] = 255;\n        var a,\n          r,\n          s = 241 & t[1];\n        a = 1 == e.version ? 128 : e.out_samplerate < 16e3 ? 32 : 64, e.VBR == m.vbr_off && (a = e.brate), r = e.free_format ? 0 : 255 & 16 * i.BitrateIndex(a, e.version, e.out_samplerate), s = (1 == e.version ? t[1] = 255 & (10 | s) : t[1] = 255 & (2 | s), 13 & t[2]), t[2] = 255 & (r | s);\n      }\n      function O(e, t) {\n        return t = t >> 8 ^ n[255 & (t ^ e)];\n      }\n      this.addVbrFrame = function (e) {\n        var t = e.internal_flags,\n          n = Tables.bitrate_table[e.version][t.bitrate_index];\n        r(null != t.VBR_seek_table.bag), function (e, t) {\n          if (e.nVbrNumFrames++, e.sum += t, e.seen++, !(e.seen < e.want) && (e.pos < e.size && (e.bag[e.pos] = e.sum, e.pos++, e.seen = 0), e.pos == e.size)) {\n            for (var n = 1; n < e.size; n += 2) e.bag[n / 2] = e.bag[n];\n            e.want *= 2, e.pos /= 2;\n          }\n        }(t.VBR_seek_table, n);\n      }, this.getVbrTag = function (e) {\n        var t = new VBRTagData(),\n          n = 0;\n        t.flags = 0;\n        var a,\n          r,\n          s = e[n + 1] >> 3 & 1,\n          i = e[n + 2] >> 2 & 3,\n          o = e[n + 3] >> 6 & 3,\n          _ = e[n + 2] >> 4 & 15;\n        if (_ = Tables.bitrate_table[s][_], e[n + 1] >> 4 == 14 ? t.samprate = Tables.samplerate_table[2][i] : t.samprate = Tables.samplerate_table[s][i], a = e, r = n += 0 != s ? 3 != o ? 36 : 21 : 3 != o ? 21 : 13, !new String(a, r, p.length(), null).equals(p) && !new String(a, r, d.length(), null).equals(d)) return null;\n        n += 4, t.hId = s;\n        var l = t.flags = b(e, n);\n        if (n += 4, 0 != (1 & l) && (t.frames = b(e, n), n += 4), 0 != (2 & l) && (t.bytes = b(e, n), n += 4), 0 != (4 & l)) {\n          if (null != t.toc) for (var f = 0; f < h; f++) t.toc[f] = e[n + f];\n          n += h;\n        }\n        t.vbrScale = -1, 0 != (8 & l) && (t.vbrScale = b(e, n), n += 4), t.headersize = 72e3 * (s + 1) * _ / t.samprate;\n        var c = e[(n += 21) + 0] << 4;\n        c += e[n + 1] >> 4;\n        var u = (15 & e[n + 1]) << 8;\n        return (c < 0 || 3e3 < c) && (c = -1), ((u += 255 & e[n + 2]) < 0 || 3e3 < u) && (u = -1), t.encDelay = c, t.encPadding = u, t;\n      }, this.InitVbrTag = function (e) {\n        var t,\n          n = e.internal_flags;\n        t = 1 == e.version ? 128 : e.out_samplerate < 16e3 ? 32 : 64, e.VBR == m.vbr_off && (t = e.brate);\n        var a = 72e3 * (e.version + 1) * t / e.out_samplerate,\n          r = n.sideinfo_len + f;\n        if ((n.VBR_seek_table.TotalFrameSize = a) < r || l < a) e.bWriteVbrTag = !1;else {\n          n.VBR_seek_table.nVbrNumFrames = 0, n.VBR_seek_table.nBytesWritten = 0, n.VBR_seek_table.sum = 0, n.VBR_seek_table.seen = 0, n.VBR_seek_table.want = 1, n.VBR_seek_table.pos = 0, null == n.VBR_seek_table.bag && (n.VBR_seek_table.bag = new int[400](), n.VBR_seek_table.size = 400);\n          var s = g(l);\n          c(e, s);\n          for (var i = n.VBR_seek_table.TotalFrameSize, o = 0; o < i; ++o) _.add_dummy_byte(e, 255 & s[o], 1);\n        }\n      }, this.updateMusicCRC = function (e, t, n, a) {\n        for (var r = 0; r < a; ++r) e[0] = O(t[n + r], e[0]);\n      }, this.getLameTagFrame = function (e, t) {\n        var n = e.internal_flags;\n        if (!e.bWriteVbrTag) return 0;\n        if (n.Class_ID != Lame.LAME_ID) return 0;\n        if (n.VBR_seek_table.pos <= 0) return 0;\n        if (t.length < n.VBR_seek_table.TotalFrameSize) return n.VBR_seek_table.TotalFrameSize;\n        v.fill(t, 0, n.VBR_seek_table.TotalFrameSize, 0), c(e, t);\n        var a = g(h);\n        if (e.free_format) for (var r = 1; r < h; ++r) a[r] = 255 & 255 * r / 100;else !function (e, t) {\n          if (!(e.pos <= 0)) for (var n = 1; n < h; ++n) {\n            var a = n / h,\n              r = 0 | Math.floor(a * e.pos);\n            r > e.pos - 1 && (r = e.pos - 1);\n            var s = 0 | 256 * e.bag[r] / e.sum;\n            255 < s && (s = 255), t[n] = 255 & s;\n          }\n        }(n.VBR_seek_table, a);\n        var s = n.sideinfo_len;\n        e.error_protection && (s -= 2), e.VBR == m.vbr_off ? (t[s++] = 255 & d.charAt(0), t[s++] = 255 & d.charAt(1), t[s++] = 255 & d.charAt(2), t[s++] = 255 & d.charAt(3)) : (t[s++] = 255 & p.charAt(0), t[s++] = 255 & p.charAt(1), t[s++] = 255 & p.charAt(2), t[s++] = 255 & p.charAt(3)), V(t, s, 15), V(t, s += 4, n.VBR_seek_table.nVbrNumFrames), s += 4;\n        var i = n.VBR_seek_table.nBytesWritten + n.VBR_seek_table.TotalFrameSize;\n        V(t, s, 0 | i), s += 4, u.arraycopy(a, 0, t, s, a.length), s += a.length, e.error_protection && _.CRC_writeheader(n, t);\n        var o = 0;\n        for (r = 0; r < s; r++) o = O(t[r], o);\n        return s += function (e, t, n, a, r) {\n          var s,\n            i,\n            o,\n            _,\n            l,\n            f = e.internal_flags,\n            c = 0,\n            u = e.encoder_delay,\n            h = e.encoder_padding,\n            p = 100 - 10 * e.VBR_q - e.quality,\n            d = I.getLameVeryShortVersion(),\n            b = [1, 5, 3, 2, 4, 0, 3],\n            m = 0 | (255 < e.lowpassfreq / 100 + .5 ? 255 : e.lowpassfreq / 100 + .5),\n            v = 0,\n            g = 0,\n            w = e.internal_flags.noise_shaping,\n            S = 0,\n            y = 0,\n            M = 0,\n            x = 0 != (1 & e.exp_nspsytune),\n            R = 0 != (2 & e.exp_nspsytune),\n            A = !1,\n            B = !1,\n            E = e.internal_flags.nogap_total,\n            T = e.internal_flags.nogap_current,\n            k = e.ATHtype;\n          switch (e.VBR) {\n            case vbr_abr:\n              l = e.VBR_mean_bitrate_kbps;\n              break;\n            case vbr_off:\n              l = e.brate;\n              break;\n            default:\n              l = e.VBR_min_bitrate_kbps;\n          }\n          switch (s = 0 + (e.VBR.ordinal() < b.length ? b[e.VBR.ordinal()] : 0), f.findReplayGain && (510 < f.RadioGain && (f.RadioGain = 510), f.RadioGain < -510 && (f.RadioGain = -510), g = 8192, g |= 3072, 0 <= f.RadioGain ? g |= f.RadioGain : (g |= 512, g |= -f.RadioGain)), f.findPeakSample && (v = Math.abs(0 | f.PeakSample / 32767 * Math.pow(2, 23) + .5)), -1 != E && (0 < T && (B = !0), T < E - 1 && (A = !0)), _ = k + ((x ? 1 : 0) << 4) + ((R ? 1 : 0) << 5) + ((A ? 1 : 0) << 6) + ((B ? 1 : 0) << 7), p < 0 && (p = 0), e.mode) {\n            case MONO:\n              S = 0;\n              break;\n            case STEREO:\n              S = 1;\n              break;\n            case DUAL_CHANNEL:\n              S = 2;\n              break;\n            case JOINT_STEREO:\n              S = e.force_ms ? 4 : 3;\n              break;\n            case NOT_SET:\n            default:\n              S = 7;\n          }\n          M = e.in_samplerate <= 32e3 ? 0 : 48e3 == e.in_samplerate ? 2 : 48e3 < e.in_samplerate ? 3 : 1, (e.short_blocks == N.short_block_forced || e.short_blocks == N.short_block_dispensed || -1 == e.lowpassfreq && -1 == e.highpassfreq || e.scale_left < e.scale_right || e.scale_left > e.scale_right || e.disable_reservoir && e.brate < 320 || e.noATH || e.ATHonly || 0 == k || e.in_samplerate <= 32e3) && (y = 1), i = w + (S << 2) + (y << 5) + (M << 6), o = f.nMusicCRC, V(n, a + c, p), c += 4;\n          for (var P = 0; P < 9; P++) n[a + c + P] = 255 & d.charAt(P);\n          n[a + (c += 9)] = 255 & s, n[a + ++c] = 255 & m, V(n, a + ++c, v), H(n, a + (c += 4), g), H(n, a + (c += 2), 0), n[a + (c += 2)] = 255 & _, n[a + ++c] = 255 <= l ? 255 : 255 & l, n[a + ++c] = 255 & u >> 4, n[a + c + 1] = 255 & (u << 4) + (h >> 8), n[a + c + 2] = 255 & h, n[a + (c += 3)] = 255 & i, c++, n[a + c++] = 0, H(n, a + c, e.preset), V(n, a + (c += 2), t), H(n, a + (c += 4), o), c += 2;\n          for (var L = 0; L < c; L++) r = O(n[a + L], r);\n          return H(n, a + c, r), c += 2;\n        }(e, i, t, s, o), n.VBR_seek_table.TotalFrameSize;\n      }, this.putVbrTag = function (e, t) {\n        if (e.internal_flags.VBR_seek_table.pos <= 0) return -1;\n        if (t.seek(t.length()), 0 == t.length()) return -1;\n        var n = function (e) {\n          e.seek(0);\n          var t = g(10);\n          return e.readFully(t), new String(t, \"ISO-8859-1\").startsWith(\"ID3\") ? 0 : ((127 & t[6]) << 21 | (127 & t[7]) << 14 | (127 & t[8]) << 7 | 127 & t[9]) + t.length;\n        }(t);\n        t.seek(n);\n        var a = g(l),\n          r = getLameTagFrame(e, a);\n        return r > a.length ? -1 : (r < 1 || t.write(a, 0, r), 0);\n      };\n    }\n    s.NUMTOCENTRIES = 100, s.MAXFRAMESIZE = 2880, e.exports = s;\n  }, function (e, t, n) {\n    var a = n(48);\n    \"string\" == typeof a && (a = [[e.i, a, \"\"]]), a.locals && (e.exports = a.locals);\n    (0, n(3).default)(\"5b0bec03\", a, !1, {});\n  }, function (e, t, n) {\n    (e.exports = n(2)(!1)).push([e.i, \"\\n.ar-icon {\\n  fill: #747474;\\n  border-radius: 50%;\\n  border: 1px solid #05CBCD;\\n  background-color: #FFFFFF;\\n  padding: 5px;\\n  cursor: pointer;\\n  transition: .2s;\\n}\\n.ar-icon--no-border {\\n    border: 0;\\n    border-radius: 0;\\n    padding: 0;\\n}\\n.ar-icon--rec {\\n    fill: white;\\n    background-color: #FF6B64;\\n    border-color: transparent;\\n}\\n.ar-icon--pulse {\\n    animation: ripple .5s linear infinite;\\n}\\n@keyframes ripple {\\n0% {\\n    box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.1), 0 0 0 1px rgba(255, 0, 0, 0.1), 0 0 0 5px rgba(255, 0, 0, 0.1);\\n}\\n100% {\\n    box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.1), 0 0 0 10px rgba(255, 0, 0, 0.1), 0 0 0 20px rgba(255, 0, 0, 0);\\n}\\n}\\n.ar-icon__xs {\\n    width: 18px;\\n    height: 18px;\\n    line-height: 18px;\\n}\\n.ar-icon__sm {\\n    width: 30px;\\n    height: 30px;\\n    line-height: 30px;\\n}\\n.ar-icon__lg {\\n    width: 45px;\\n    height: 45px;\\n    line-height: 45px;\\n    box-shadow: 0 2px 5px 1px rgba(158, 158, 158, 0.5);\\n}\\n\", \"\"]);\n  }, function (e, t, n) {\n    \"use strict\";\n\n    n.r(t);\n    var a = {\n        props: {\n          name: {\n            type: String\n          }\n        },\n        data: function () {\n          return {\n            icons: {\n              download: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2z\"/><path fill=\"none\" d=\"M0 0h24v24H0z\"/></svg>',\n              mic: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M12 14c1.66 0 2.99-1.34 2.99-3L15 5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3zm5.3-3c0 3-2.54 5.1-5.3 5.1S6.7 14 6.7 11H5c0 3.41 2.72 6.23 6 6.72V21h2v-3.28c3.28-.48 6-3.3 6-6.72h-1.7z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>',\n              pause: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>',\n              play: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M8 5v14l11-7z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>',\n              save: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"/></svg>',\n              stop: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M6 6h12v12H6z\"/></svg>',\n              volume: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\n            }\n          };\n        }\n      },\n      r = function () {\n        var e = this,\n          t = e.$createElement;\n        return (e._self._c || t)(\"div\", {\n          domProps: {\n            innerHTML: e._s(e.icons[e.name])\n          }\n        });\n      };\n    function s(e, t, n, a, r, s, i, o) {\n      var _ = typeof (e = e || {}).default;\n      \"object\" !== _ && \"function\" !== _ || (e = e.default);\n      var l,\n        f = \"function\" == typeof e ? e.options : e;\n      if (t && (f.render = t, f.staticRenderFns = n, f._compiled = !0), a && (f.functional = !0), s && (f._scopeId = s), i ? (l = function (e) {\n        (e = e || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) || \"undefined\" == typeof __VUE_SSR_CONTEXT__ || (e = __VUE_SSR_CONTEXT__), r && r.call(this, e), e && e._registeredComponents && e._registeredComponents.add(i);\n      }, f._ssrRegister = l) : r && (l = o ? function () {\n        r.call(this, this.$root.$options.shadowRoot);\n      } : r), l) if (f.functional) {\n        f._injectStyles = l;\n        var c = f.render;\n        f.render = function (e, t) {\n          return l.call(t), c(e, t);\n        };\n      } else {\n        var u = f.beforeCreate;\n        f.beforeCreate = u ? [].concat(u, l) : [l];\n      }\n      return {\n        exports: e,\n        options: f\n      };\n    }\n    r._withStripped = !0;\n    var i = s(a, r, [], !1, null, null, null);\n    i.options.__file = \"src/components/icon-button.vue\";\n    var o = i.exports;\n    function _(e, t) {\n      var n = t.getBoundingClientRect().width,\n        a = e.target.getBoundingClientRect().left,\n        r = (e.clientX - a) / n;\n      try {\n        if (!e.target.className.match(/^ar\\-line\\-control/)) return;\n      } catch (e) {\n        return;\n      }\n      return r = 1 < (r = r < 0 ? 0 : r) ? 1 : r;\n    }\n    function l(e) {\n      return new Date(1e3 * e).toISOString().substr(14, 5);\n    }\n    var f = {\n        props: {\n          refId: {\n            type: String\n          },\n          eventName: {\n            type: String\n          },\n          percentage: {\n            type: Number,\n            default: 0\n          },\n          rowDirection: {\n            type: Boolean,\n            default: !0\n          }\n        },\n        methods: {\n          onMouseDown: function (e) {\n            var t = _(e, this.$refs[this.refId]);\n            this.$emit(\"change-linehead\", t), document.addEventListener(\"mousemove\", this.onMouseMove), document.addEventListener(\"mouseup\", this.onMouseUp);\n          },\n          onMouseUp: function (e) {\n            document.removeEventListener(\"mouseup\", this.onMouseUp), document.removeEventListener(\"mousemove\", this.onMouseMove);\n            var t = _(e, this.$refs[this.refId]);\n            this.$emit(\"change-linehead\", t);\n          },\n          onMouseMove: function (e) {\n            var t = _(e, this.$refs[this.refId]);\n            this.$emit(\"change-linehead\", t);\n          }\n        },\n        computed: {\n          calculateSize: function () {\n            var e = this.percentage < 1 ? 100 * this.percentage : this.percentage;\n            return (this.rowDirection ? \"width\" : \"height\") + \": \" + e + \"%\";\n          }\n        }\n      },\n      c = function () {\n        var e = this,\n          t = e.$createElement,\n          n = e._self._c || t;\n        return n(\"div\", {\n          ref: e.refId,\n          staticClass: \"ar-line-control\",\n          on: {\n            mousedown: e.onMouseDown\n          }\n        }, [n(\"div\", {\n          staticClass: \"ar-line-control__head\",\n          style: e.calculateSize\n        })]);\n      };\n    c._withStripped = !0;\n    var u = s(f, c, [], !1, function (e) {\n      n(19);\n    }, null, null);\n    u.options.__file = \"src/components/line-control.vue\";\n    var h = u.exports,\n      p = {\n        data: function () {\n          return {\n            volume: .8\n          };\n        },\n        components: {\n          IconButton: o,\n          LineControl: h\n        },\n        methods: {\n          onChangeLinehead: function (e) {\n            this.$emit(\"change-volume\", e), this.volume = e;\n          }\n        }\n      },\n      d = function () {\n        var e = this,\n          t = e.$createElement,\n          n = e._self._c || t;\n        return n(\"div\", {\n          staticClass: \"ar-volume\"\n        }, [n(\"icon-button\", {\n          staticClass: \"ar-volume__icon\",\n          attrs: {\n            name: \"volume\"\n          }\n        }), e._v(\" \"), n(\"line-control\", {\n          staticClass: \"ar-volume-bar\",\n          attrs: {\n            \"ref-id\": \"volume\",\n            percentage: e.volume\n          },\n          on: {\n            \"change-linehead\": e.onChangeLinehead\n          }\n        })], 1);\n      };\n    d._withStripped = !0;\n    var b = s(p, d, [], !1, function (e) {\n      n(21);\n    }, null, null);\n    b.options.__file = \"src/components/volume-control.vue\";\n    var m = b.exports,\n      v = {\n        props: {\n          src: {\n            type: String\n          },\n          record: {\n            type: Object\n          },\n          filename: {\n            type: String\n          }\n        },\n        data: function () {\n          return {\n            isPlaying: !1,\n            duration: l(0),\n            playedTime: l(0),\n            progress: 0\n          };\n        },\n        components: {\n          IconButton: o,\n          LineControl: h,\n          VolumeControl: m\n        },\n        mounted: function () {\n          var t = this;\n          this.player = document.getElementById(this.playerUniqId), this.player.addEventListener(\"ended\", function () {\n            t.isPlaying = !1;\n          }), this.player.addEventListener(\"loadeddata\", function (e) {\n            t._resetProgress(), t.duration = l(t.player.duration);\n          }), this.player.addEventListener(\"timeupdate\", this._onTimeUpdate), this.$eventBus.$on(\"remove-record\", function () {\n            t._resetProgress();\n          });\n        },\n        computed: {\n          audioSource: function () {\n            var e = this.src || this.record.url;\n            if (e) return e;\n            this._resetProgress();\n          },\n          playBtnIcon: function () {\n            return this.isPlaying ? \"pause\" : \"play\";\n          },\n          playerUniqId: function () {\n            return \"audio-player\" + this._uid;\n          }\n        },\n        methods: {\n          playback: function () {\n            var e = this;\n            this.audioSource && (this.isPlaying ? this.player.pause() : setTimeout(function () {\n              e.player.play();\n            }, 0), this.isPlaying = !this.isPlaying);\n          },\n          _resetProgress: function () {\n            this.isPlaying && this.player.pause(), this.duration = l(0), this.playedTime = l(0), this.progress = 0, this.isPlaying = !1;\n          },\n          _onTimeUpdate: function () {\n            this.playedTime = l(this.player.currentTime), this.progress = this.player.currentTime / this.player.duration * 100;\n          },\n          _onUpdateProgress: function (e) {\n            e && (this.player.currentTime = e * this.player.duration);\n          },\n          _onChangeVolume: function (e) {\n            e && (this.player.volume = e);\n          }\n        }\n      },\n      g = function () {\n        var t = this,\n          e = t.$createElement,\n          n = t._self._c || e;\n        return n(\"div\", {\n          staticClass: \"ar-player\"\n        }, [n(\"div\", {\n          staticClass: \"ar-player-actions\"\n        }, [n(\"icon-button\", {\n          staticClass: \"ar-icon ar-icon__lg ar-player__play\",\n          class: {\n            \"ar-player__play--active\": t.isPlaying\n          },\n          attrs: {\n            id: \"play\",\n            name: t.playBtnIcon\n          },\n          nativeOn: {\n            click: function (e) {\n              return t.playback(e);\n            }\n          }\n        })], 1), t._v(\" \"), n(\"div\", {\n          staticClass: \"ar-player-bar\"\n        }, [n(\"div\", {\n          staticClass: \"ar-player__time\"\n        }, [t._v(t._s(t.playedTime))]), t._v(\" \"), n(\"line-control\", {\n          staticClass: \"ar-player__progress\",\n          attrs: {\n            \"ref-id\": \"progress\",\n            percentage: t.progress\n          },\n          on: {\n            \"change-linehead\": t._onUpdateProgress\n          }\n        }), t._v(\" \"), n(\"div\", {\n          staticClass: \"ar-player__time\"\n        }, [t._v(t._s(t.duration))]), t._v(\" \"), n(\"volume-control\", {\n          on: {\n            \"change-volume\": t._onChangeVolume\n          }\n        })], 1), t._v(\" \"), n(\"audio\", {\n          attrs: {\n            id: t.playerUniqId,\n            src: t.audioSource\n          }\n        })]);\n      };\n    g._withStripped = !0;\n    var w = s(v, g, [], !1, function (e) {\n      n(17);\n    }, null, null);\n    w.options.__file = \"src/components/player.vue\";\n    var S = w.exports,\n      y = {\n        props: {\n          record: {\n            type: Object\n          },\n          filename: {\n            type: String\n          }\n        },\n        components: {\n          IconButton: o\n        },\n        methods: {\n          download: function () {\n            if (this.record.url) {\n              var e = document.createElement(\"a\");\n              e.href = this.record.url, e.download = this.filename + \".mp3\", e.click();\n            }\n          }\n        }\n      },\n      M = function () {\n        var t = this,\n          e = t.$createElement;\n        return (t._self._c || e)(\"icon-button\", {\n          staticClass: \"ar-icon ar-icon__xs ar-icon--no-border\",\n          attrs: {\n            id: \"download\",\n            name: \"download\"\n          },\n          nativeOn: {\n            click: function (e) {\n              return t.download(e);\n            }\n          }\n        });\n      };\n    M._withStripped = !0;\n    var x = s(y, M, [], !1, function (e) {\n      n(25);\n    }, null, null);\n    x.options.__file = \"src/components/downloader.vue\";\n    var R = x.exports,\n      A = n(16),\n      B = function () {\n        function a(e, t) {\n          for (var n = 0; n < t.length; n++) {\n            var a = t[n];\n            a.enumerable = a.enumerable || !1, a.configurable = !0, \"value\" in a && (a.writable = !0), Object.defineProperty(e, a.key, a);\n          }\n        }\n        return function (e, t, n) {\n          return t && a(e.prototype, t), n && a(e, n), e;\n        };\n      }();\n    var E = function () {\n        function t(e) {\n          !function (e, t) {\n            if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n          }(this, t), this.bitRate = e.bitRate || 128, this.sampleRate = e.sampleRate || 44100, this.dataBuffer = [], this.encoder = new A.Mp3Encoder(1, this.sampleRate, this.bitRate);\n        }\n        return B(t, [{\n          key: \"encode\",\n          value: function (e) {\n            for (var t = this._convertBuffer(e), n = t.length, a = 0; 0 <= n; a += 1152) {\n              var r = t.subarray(a, a + 1152),\n                s = this.encoder.encodeBuffer(r);\n              this.dataBuffer.push(new Int8Array(s)), n -= 1152;\n            }\n          }\n        }, {\n          key: \"finish\",\n          value: function () {\n            this.dataBuffer.push(this.encoder.flush());\n            var e = new Blob(this.dataBuffer, {\n              type: \"audio/mp3\"\n            });\n            return this.dataBuffer = [], {\n              id: Date.now(),\n              blob: e,\n              url: URL.createObjectURL(e)\n            };\n          }\n        }, {\n          key: \"_floatTo16BitPCM\",\n          value: function (e, t) {\n            for (var n = 0; n < e.length; n++) {\n              var a = Math.max(-1, Math.min(1, e[n]));\n              t[n] = a < 0 ? 32768 * a : 32767 * a;\n            }\n          }\n        }, {\n          key: \"_convertBuffer\",\n          value: function (e) {\n            var t = new Float32Array(e),\n              n = new Int16Array(e.length);\n            return this._floatTo16BitPCM(t, n), n;\n          }\n        }]), t;\n      }(),\n      T = function () {\n        function a(e, t) {\n          for (var n = 0; n < t.length; n++) {\n            var a = t[n];\n            a.enumerable = a.enumerable || !1, a.configurable = !0, \"value\" in a && (a.writable = !0), Object.defineProperty(e, a.key, a);\n          }\n        }\n        return function (e, t, n) {\n          return t && a(e.prototype, t), n && a(e, n), e;\n        };\n      }();\n    var k = function () {\n        function t() {\n          var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};\n          !function (e, t) {\n            if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n          }(this, t), this.beforeRecording = e.beforeRecording, this.pauseRecording = e.pauseRecording, this.afterRecording = e.afterRecording, this.micFailed = e.micFailed, this.bufferSize = 4096, this.records = [], this.isPause = !1, this.isRecording = !1, this.duration = 0, this.volume = 0, this._duration = 0;\n        }\n        return T(t, [{\n          key: \"start\",\n          value: function () {\n            this.beforeRecording && this.beforeRecording(\"start recording\"), navigator.mediaDevices.getUserMedia({\n              video: !1,\n              audio: {\n                channelCount: 1,\n                echoCancellation: !1\n              }\n            }).then(this._micCaptured.bind(this)).catch(this._micError.bind(this)), this.isPause = !1, this.isRecording = !0, this.lameEncoder = new E({});\n          }\n        }, {\n          key: \"stop\",\n          value: function () {\n            this.stream.getTracks().forEach(function (e) {\n              return e.stop();\n            }), this.input.disconnect(), this.processor.disconnect(), this.context.close();\n            var e = this.lameEncoder.finish();\n            e.duration = l(this.duration), this.records.push(e), this._duration = 0, this.duration = 0, this.isPause = !1, this.isRecording = !1, this.afterRecording && this.afterRecording(e);\n          }\n        }, {\n          key: \"pause\",\n          value: function () {\n            this.stream.getTracks().forEach(function (e) {\n              return e.stop();\n            }), this.input.disconnect(), this.processor.disconnect(), this.context.close(), this._duration = this.duration, this.isPause = !0, this.pauseRecording && this.pauseRecording(\"pause recording\");\n          }\n        }, {\n          key: \"recordList\",\n          value: function () {\n            return this.records;\n          }\n        }, {\n          key: \"lastRecord\",\n          value: function () {\n            return this.records.slice(-1);\n          }\n        }, {\n          key: \"_micCaptured\",\n          value: function (e) {\n            var r = this;\n            this.context = new (window.AudioContext || window.webkitAudioContext)(), this.duration = this._duration, this.input = this.context.createMediaStreamSource(e), this.processor = this.context.createScriptProcessor(this.bufferSize, 1, 1), this.stream = e, this.processor.onaudioprocess = function (e) {\n              var t = e.inputBuffer.getChannelData(0),\n                n = 0;\n              r.lameEncoder.encode(t);\n              for (var a = 0; a < t.length; ++a) n += t[a] * t[a];\n              r.duration = parseFloat(r._duration) + parseFloat(r.context.currentTime.toFixed(2)), r.volume = Math.sqrt(n / t.length).toFixed(2);\n            }, this.input.connect(this.processor), this.processor.connect(this.context.destination);\n          }\n        }, {\n          key: \"_micError\",\n          value: function (e) {\n            this.micFailed && this.micFailed(e);\n          }\n        }]), t;\n      }(),\n      P = {\n        props: {\n          filename: {\n            type: String,\n            default: \"record\"\n          },\n          headers: {\n            type: Object,\n            default: function () {\n              return {};\n            }\n          },\n          uploadUrl: {\n            type: String\n          }\n        }\n      },\n      L = {\n        mixins: [P],\n        props: {\n          record: {\n            type: Object\n          }\n        },\n        components: {\n          IconButton: o\n        },\n        methods: {\n          upload: function () {\n            var t = this;\n            if (this.record.url) {\n              this.$eventBus.$emit(\"start-upload\");\n              var e = new FormData();\n              e.append(\"audio\", this.record.blob, this.filename + \".mp3\");\n              var n = Object.assign(this.headers, {});\n              n[\"Content-Type\"] = \"multipart/form-data; boundary=\" + e._boundary, this.$http.post(this.uploadUrl, e, {\n                headers: n\n              }).then(function (e) {\n                t.$eventBus.$emit(\"end-upload\", {\n                  status: \"success\",\n                  response: e\n                });\n              }).catch(function (e) {\n                t.$eventBus.$emit(\"end-upload\", {\n                  status: \"fail\",\n                  response: e\n                });\n              });\n            }\n          }\n        }\n      },\n      I = function () {\n        var t = this,\n          e = t.$createElement;\n        return (t._self._c || e)(\"icon-button\", {\n          staticClass: \"ar-icon ar-icon__xs ar-icon--no-border\",\n          attrs: {\n            name: \"save\"\n          },\n          nativeOn: {\n            click: function (e) {\n              return t.upload(e);\n            }\n          }\n        });\n      };\n    I._withStripped = !0;\n    var V = s(L, I, [], !1, function (e) {\n      n(47);\n    }, null, null);\n    V.options.__file = \"src/components/uploader.vue\";\n    var H = V.exports,\n      O = {\n        mixins: [P],\n        props: {\n          attempts: {\n            type: Number\n          },\n          time: {\n            type: Number\n          },\n          showDownloadButton: {\n            type: Boolean,\n            default: !0\n          },\n          showUploadButton: {\n            type: Boolean,\n            default: !0\n          },\n          micFailed: {\n            type: Function\n          },\n          beforeRecording: {\n            type: Function\n          },\n          pauseRecording: {\n            type: Function\n          },\n          afterRecording: {\n            type: Function\n          },\n          failedUpload: {\n            type: Function\n          },\n          beforeUpload: {\n            type: Function\n          },\n          successfulUpload: {\n            type: Function\n          },\n          selectRecord: {\n            type: Function\n          }\n        },\n        data: function () {\n          return {\n            isUploading: !1,\n            recorder: this._initRecorder(),\n            recordList: [],\n            selected: {},\n            uploadStatus: null\n          };\n        },\n        components: {\n          AudioPlayer: S,\n          Downloader: R,\n          IconButton: o,\n          Uploader: H\n        },\n        mounted: function () {\n          var t = this;\n          this.$eventBus.$on(\"start-upload\", function () {\n            t.isUploading = !0, t.beforeUpload && t.beforeUpload(\"before upload\");\n          }), this.$eventBus.$on(\"end-upload\", function (e) {\n            t.isUploading = !1, \"success\" === e.status ? t.successfulUpload && t.successfulUpload(e.response) : t.failedUpload && t.failedUpload(e.response);\n          });\n        },\n        beforeDestroy: function () {\n          this.stopRecorder();\n        },\n        methods: {\n          toggleRecorder: function () {\n            this.attempts && this.recorder.records.length >= this.attempts || (!this.isRecording || this.isRecording && this.isPause ? this.recorder.start() : this.recorder.pause());\n          },\n          stopRecorder: function () {\n            this.isRecording && (this.recorder.stop(), this.recordList = this.recorder.recordList());\n          },\n          removeRecord: function (e) {\n            this.recordList.splice(e, 1), this.$set(this.selected, \"url\", null), this.$eventBus.$emit(\"remove-record\");\n          },\n          choiceRecord: function (e) {\n            this.selected !== e && (this.selected = e, this.selectRecord && this.selectRecord(e));\n          },\n          _initRecorder: function () {\n            return new k({\n              beforeRecording: this.beforeRecording,\n              afterRecording: this.afterRecording,\n              pauseRecording: this.pauseRecording,\n              micFailed: this.micFailed\n            });\n          }\n        },\n        computed: {\n          attemptsLeft: function () {\n            return this.attempts - this.recordList.length;\n          },\n          iconButtonType: function () {\n            return this.isRecording && this.isPause ? \"mic\" : this.isRecording ? \"pause\" : \"mic\";\n          },\n          isPause: function () {\n            return this.recorder.isPause;\n          },\n          isRecording: function () {\n            return this.recorder.isRecording;\n          },\n          recordedTime: function () {\n            return this.time && this.recorder.duration >= 60 * this.time && this.stopRecorder(), l(this.recorder.duration);\n          },\n          volume: function () {\n            return parseFloat(this.recorder.volume);\n          }\n        }\n      },\n      N = function () {\n        var a = this,\n          e = a.$createElement,\n          r = a._self._c || e;\n        return r(\"div\", {\n          staticClass: \"ar\"\n        }, [a.isUploading ? r(\"div\", {\n          staticClass: \"ar__overlay\"\n        }) : a._e(), a._v(\" \"), a.isUploading ? r(\"div\", {\n          staticClass: \"ar-spinner\"\n        }, [r(\"div\", {\n          staticClass: \"ar-spinner__dot\"\n        }), a._v(\" \"), r(\"div\", {\n          staticClass: \"ar-spinner__dot\"\n        }), a._v(\" \"), r(\"div\", {\n          staticClass: \"ar-spinner__dot\"\n        })]) : a._e(), a._v(\" \"), r(\"div\", {\n          staticClass: \"ar-content\",\n          class: {\n            ar__blur: a.isUploading\n          }\n        }, [r(\"div\", {\n          staticClass: \"ar-recorder\"\n        }, [r(\"icon-button\", {\n          staticClass: \"ar-icon ar-icon__lg\",\n          class: {\n            \"ar-icon--rec\": a.isRecording,\n            \"ar-icon--pulse\": a.isRecording && .02 < a.volume\n          },\n          attrs: {\n            name: a.iconButtonType\n          },\n          nativeOn: {\n            click: function (e) {\n              return a.toggleRecorder(e);\n            }\n          }\n        }), a._v(\" \"), r(\"icon-button\", {\n          staticClass: \"ar-icon ar-icon__sm ar-recorder__stop\",\n          attrs: {\n            name: \"stop\"\n          },\n          nativeOn: {\n            click: function (e) {\n              return a.stopRecorder(e);\n            }\n          }\n        })], 1), a._v(\" \"), a.attempts ? r(\"div\", {\n          staticClass: \"ar-recorder__records-limit\"\n        }, [a._v(\"Attempts: \" + a._s(a.attemptsLeft) + \"/\" + a._s(a.attempts))]) : a._e(), a._v(\" \"), r(\"div\", {\n          staticClass: \"ar-recorder__duration\"\n        }, [a._v(a._s(a.recordedTime))]), a._v(\" \"), a.time ? r(\"div\", {\n          staticClass: \"ar-recorder__time-limit\"\n        }, [a._v(\"Record duration is limited: \" + a._s(a.time) + \"m\")]) : a._e(), a._v(\" \"), r(\"div\", {\n          staticClass: \"ar-records\"\n        }, a._l(a.recordList, function (t, n) {\n          return r(\"div\", {\n            key: t.id,\n            staticClass: \"ar-records__record\",\n            class: {\n              \"ar-records__record--selected\": t.id === a.selected.id\n            },\n            on: {\n              click: function (e) {\n                a.choiceRecord(t);\n              }\n            }\n          }, [t.id === a.selected.id ? r(\"div\", {\n            staticClass: \"ar__rm\",\n            on: {\n              click: function (e) {\n                a.removeRecord(n);\n              }\n            }\n          }, [a._v(\"×\")]) : a._e(), a._v(\" \"), r(\"div\", {\n            staticClass: \"ar__text\"\n          }, [a._v(\"Record \" + a._s(n + 1))]), a._v(\" \"), r(\"div\", {\n            staticClass: \"ar__text\"\n          }, [a._v(a._s(t.duration))]), a._v(\" \"), t.id === a.selected.id && a.showDownloadButton ? r(\"downloader\", {\n            staticClass: \"ar__downloader\",\n            attrs: {\n              record: t,\n              filename: a.filename\n            }\n          }) : a._e(), a._v(\" \"), t.id === a.selected.id && a.showUploadButton ? r(\"uploader\", {\n            staticClass: \"ar__uploader\",\n            attrs: {\n              record: t,\n              filename: a.filename,\n              headers: a.headers,\n              \"upload-url\": a.uploadUrl\n            }\n          }) : a._e()], 1);\n        })), a._v(\" \"), r(\"audio-player\", {\n          attrs: {\n            record: a.selected\n          }\n        })], 1)]);\n      };\n    N._withStripped = !0;\n    var F = s(O, N, [], !1, function (e) {\n      n(23);\n    }, null, null);\n    F.options.__file = \"src/components/recorder.vue\";\n    var C = F.exports;\n    n.d(t, \"AudioPlayer\", function () {\n      return S;\n    }), n.d(t, \"AudioRecorder\", function () {\n      return C;\n    });\n    var D = {\n      AudioPlayer: S,\n      AudioRecorder: C,\n      install: function (e) {\n        this.installed || (this.installed = !0, e.prototype.$eventBus = e.prototype.$eventBus || new e(), e.component(\"audio-player\", S), e.component(\"audio-recorder\", C));\n      }\n    };\n    t.default = D;\n  }]).default;\n});","map":{"version":3,"names":["e","t","exports","module","define","amd","VueAudioRecorder","window","n","a","r","i","l","call","m","c","d","o","Object","defineProperty","enumerable","get","Symbol","toStringTag","value","__esModule","create","bind","default","prototype","hasOwnProperty","p","s","Int16Array","Int32Array","Float32Array","fill","arguments","length","arraycopy","_","ordinal","SQRT2","FAST_LOG10","Math","log10","FAST_LOG10_X","short_block_allowed","short_block_coupled","short_block_dispensed","short_block_forced","f","MAX_VALUE","vbr_off","vbr_mt","vbr_rh","vbr_abr","vbr_mtrh","vbr_default","System","VbrMode","Float","ShortBlock","Util","Arrays","new_array_n","Array","slice","push","new_byte","Int8Array","new_double","Float64Array","new_float","new_float_n","new_int","new_int_n","new_short","new_short_n","assert","F","C","D","X","q","Y","j","U","k","P","FFTOFFSET","L","MPG_MD_MS_LR","I","V","psy","H","O","setModules","N","lame_encode_mp3_frame","u","h","internal_flags","b","v","lame_encode_frame_init","mode_gr","channels_out","l3_side","tt","block_type","SHORT_TYPE","mdct_sub48","mf_size","BLKSIZE","framesize","padding","slot_lag","frac_SpF","out_samplerate","psymodel","g","w","S","VBR","L3psycho_anal_vbr","L3psycho_anal_ns","mode","MPEGMode","JOINT_STEREO","y","mixed_block_flag","NORM_TYPE","ATH","useAdjust","loudness_sq","max","aaSensitivityP","adjust","adjustLimit","mode_ext","MPG_MD_LR_LR","force_ms","M","x","R","A","analysis","pinfo","ms_ratio","ms_ener_ratio","blocktype","pe","xr","ers","energy","B","E","nsPsy","pefirbuf","fircoef","iteration_loop","format_bitstream","copy_buffer","bWriteVbrTag","addVbrFrame","T","pcmdata","set_frame_pinfo","bitrate_index","bitrate_stereoMode_Hist","bitrate_blockType_Hist","ENCDELAY","POSTDELAY","MDCTDELAY","DECDELAY","SBLIMIT","CBANDS","SBPSY_l","SBPSY_s","SBMAX_l","SBMAX_s","PSFB21","PSFB12","HBLKSIZE","HBLKSIZE_s","BLKSIZE_s","START_TYPE","STOP_TYPE","MPG_MD_LR_I","MPG_MD_MS_I","toString","map","btoa","unescape","encodeURIComponent","JSON","stringify","sources","sourceRoot","concat","join","id","css","media","sourceMap","parts","document","DEBUG","Error","head","getElementsByTagName","noop","navigator","test","userAgent","toLowerCase","refs","createElement","type","appendChild","querySelector","parentNode","removeChild","setAttribute","ssrId","styleSheet","cssText","firstChild","createTextNode","remove","filter","Boolean","childNodes","insertBefore","write_timing","ptr","buf","Class_ID","iteration_init_init","fill_buffer_resample_init","mfbuf","MFSIZE","channels_in","resample_ratio","mf_samples_to_encode","VBR_min_bitrate","VBR_max_bitrate","samplerate_index","lowpass1","lowpass2","highpass1","highpass2","noise_shaping","noise_shaping_amp","substep_shaping","noise_shaping_stop","subblock_gain","use_best_huffman","full_outer_loop","tag_spec","nMusicCRC","OldValue","CurrentStep","masking_lower","bv_scf","pseudohalf","SFBMAX","sfb21_extra","inbuf_old","blackfilt","BPC","itime","sideinfo_len","sb_sample","amp_filter","header","MAX_HEADER_BUF","h_ptr","w_ptr","ancillary_flag","ResvSize","ResvMax","scalefac_band","minval_l","minval_s","nb_1","nb_2","nb_s1","nb_s2","s3_ss","s3_ll","decay","thm","en","tot_ener","loudness_sq_save","mld_l","mld_s","bm_l","bo_l","bm_s","bo_s","npart_l","npart_s","s3ind","s3ind_s","numlines_s","numlines_l","rnumlines_l","mld_cb_l","mld_cb_s","numlines_s_num1","numlines_l_num1","ms_ratio_s_old","ms_ratio_l_old","ms_ener_ratio_old","blocktype_old","VBR_seek_table","PSY","nogap_total","nogap_current","decode_on_the_fly","findReplayGain","findPeakSample","PeakSample","RadioGain","AudiophileGain","rgdata","noclipGainChange","noclipScale","hip","in_buffer_nsamples","in_buffer_0","in_buffer_1","MAX_BITS_PER_CHANNEL","MAX_BITS_PER_GRANULE","l3_enc","scalefac","xrpow_max","part2_3_length","big_values","count1","global_gain","scalefac_compress","table_select","region0_count","region1_count","preflag","scalefac_scale","count1table_select","part2_length","sfb_lmax","sfb_smin","psy_lmax","sfbmax","psymax","sfbdivide","width","count1bits","sfb_partition_table","slen","max_nonzero_coeff","assign","xlen","linmax","table","hlen","t1HB","t2HB","t3HB","t5HB","t6HB","t7HB","t8HB","t9HB","t10HB","t11HB","t12HB","t13HB","t15HB","t16HB","t24HB","t32HB","t33HB","t1l","t2l","t3l","t5l","t6l","t7l","t8l","t9l","t10l","t11l","t12l","t13l","t15l","t16_5l","t16l","t24l","t32l","t33l","ht","largetbl","table23","table56","bitrate_table","samplerate_table","scfsi_band","STEREO","DUAL_CHANNEL","MONO","NOT_SET","psfb21","psfb12","arrL","arrS","arr21","arr12","min","RMS_WINDOW_TIME_NUMERATOR","RMS_WINDOW_TIME_DENOMINATOR","InitGainAnalysis","MAX_ORDER","linprebuf","lstepbuf","loutbuf","rinprebuf","rstepbuf","routbuf","reqindex","INIT_GAIN_ANALYSIS_ERROR","sampleWindow","lsum","rsum","totsamp","ill","INIT_GAIN_ANALYSIS_OK","linpre","rinpre","lstep","rstep","lout","rout","AnalyzeSamples","GAIN_ANALYSIS_OK","GAIN_ANALYSIS_ERROR","STEPS_per_dB","GetTitleGain","GAIN_NOT_ENOUGH_SAMPLES","ceil","MAX_dB","YULE_ORDER","MAX_SAMPLES_PER_WINDOW","MAX_SAMP_FREQ","bits","Lame","LAME_MAXMP3BUFFER","getLameShortVersion","charAt","disable_reservoir","total","getframebits","err","println","version","brate","CRC_writeheader","byte","flush_bitstream","main_data_begin","NEQ","GainAnalysis","floor","EQ","scale","add_dummy_byte","resvDrain_pre","error_protection","extension","copyright","original","emphasis","private_bits","scfsi","slen1_tab","slen2_tab","resvDrain_post","printf","updateMusicCRC","nBytesWritten","hip_decode1_unclipped","init_bit_stream_w","abs","qupvt","adj43","IXMAX_VAL","LARGE_BITS","noquant_count_bits","sfb_count1","best_huffman_divide","count_bits","IPOW20","pretab","step","best_scalefac_store","scale_bitcount","scale_bitcount_lsf","nr_of_sfb_block","huffman_init","Q_MAX","Q_MAX2","sfBandIndex","ATHformula","pow","ATHlower","iteration_init","noATH","exp_nspsytune","longfact","shortfact","on_pe","ResvMaxBits","reduce_side","athAdjust","calc_xmin","ATHonly","BitStream","ATHshort","useTemporal","calc_noise_core","calc_noise","over_SSD","noise","noise_log","over_count","tot_noise","over_noise","max_noise","set_pinfo","L3Side","CalcNoiseResult","xfsf","thr","LAMEsfb","en_s","xfsf_s","thr_s","LAMEsfb_s","LAMEqss","LAMEmainbits","LAMEsfbits","over","Presets","QuantizePVT","Quantize","Takehiro","Reservoir","dataOffset","dataLen","channels","sampleRate","charCodeAt","RIFF","WAVE","fmt_","data","readHeader","getUint32","getUint16","Mp3Encoder","console","error","enc","lame_init","num_channels","in_samplerate","quality","write_id3tag_automatic","lame_init_params","encodeBuffer","lame_encode_buffer","subarray","flush","lame_encode_flush","WavHeader","locals","z","G","K","Z","Q","W","$","J","ee","V9","V8","V7","V6","V5","V4","V3","V2","V1","V0","R3MIX","STANDARD","EXTREME","INSANE","STANDARD_FAST","EXTREME_FAST","MEDIUM","MEDIUM_FAST","mask_adjust","mask_adjust_short","bo_l_weight","bo_s_weight","lowerlimit","lowpass","cos","PI","nearestBitrateFullIndex","n_in","n_out","num_used","sin","class_id","num_samples","short_blocks","lowpassfreq","highpassfreq","lowpasswidth","highpasswidth","VBR_q","ATHcurve","VBR_mean_bitrate_kbps","VBR_min_bitrate_kbps","VBR_max_bitrate_kbps","VBR_hard_min","quant_comp","quant_comp_short","msfix","attackthre","attackthre_s","athaa_type","ATHtype","athaa_loudapprox","athaa_sensitivity","interChRatio","encoder_padding","preset","lame_allocated_gfp","free_format","compression_ratio","map2MP3Frequency","int","VBR_q_frac","linear_int","decode_only","hip_decode_exit","hip_decode_init","encoder_delay","frameNum","id3tag_write_v2","InitVbrTag","apply_preset","LAME_DEFAULT_QUALITY","maskingadjust","maskingadjust_short","experimentalY","VBRNewIterationLoop","VBROldIterationLoop","ABRIterationLoop","tune","tune_value_a","NSATTACKTHRE","NSATTACKTHRE_S","psymodel_init","id3tag_write_v1","scale_left","scale_right","xe","Re","Ae","Be","Ee","Te","ke","Pe","_e","le","fe","ce","eql_w","ue","fft_long","fft_short","energy_save","he","cb_s","cb_l","de","be","me","ve","ge","we","Se","ye","Me","last_en_subshort","ers_save","lastAttacks","te","ne","ae","re","se","ie","oe","float","exp","atan","sqrt","firbuf","experimentalZ","log","init_fft","strict_ISO","sum","seen","want","pos","size","bag","nVbrNumFrames","TotalFrameSize","freqindex","first","quantize","rv","ResvFrameBegin","ms_convert","init_outer_loop","init_xrpow","outer_loop","iteration_finish_one","ResvFrameEnd","vbr_q","quant_comp_s","expY","st_lrm","st_s","masking_adj","masking_adj_short","ath_lower","ath_curve","ath_sensitivity","interch","safejoint","sfb21mod","nsmsfix","nsbass","sfscale","BINSEARCH_NONE","BINSEARCH_UP","BINSEARCH_DOWN","trancate_smallspectrums","sort","ResvAdjust","VBR_encode_granule","LameInternalFlags","get_framebits","MeanBits","VBR_old_prepare","bitpressure_strategy","VBR_new_prepare","calc_target_bits","mean_bits","resvsize","getLameVersion","getLameVeryShortVersion","getPsyVersion","getLameUrl","getLameOsBitness","NUMTOCENTRIES","MAXFRAMESIZE","BitrateIndex","Tables","getVbrTag","VBRTagData","flags","samprate","String","equals","hId","frames","bytes","toc","vbrScale","headersize","encDelay","encPadding","getLameTagFrame","LAME_ID","putVbrTag","seek","readFully","startsWith","write","props","name","icons","download","mic","pause","play","save","stop","volume","render","$createElement","_self","_c","domProps","innerHTML","_s","options","staticRenderFns","_compiled","functional","_scopeId","hook","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","_registeredComponents","add","_ssrRegister","$root","$options","shadowRoot","_injectStyles","beforeCreate","_withStripped","__file","getBoundingClientRect","target","left","clientX","className","match","Date","toISOString","substr","refId","eventName","percentage","Number","rowDirection","methods","onMouseDown","$refs","$emit","addEventListener","onMouseMove","onMouseUp","removeEventListener","computed","calculateSize","line_control_render","ref","staticClass","on","mousedown","style","components","IconButton","LineControl","onChangeLinehead","volume_control_render","attrs","_v","src","record","filename","isPlaying","duration","playedTime","progress","VolumeControl","mounted","player","getElementById","playerUniqId","_resetProgress","_onTimeUpdate","$eventBus","$on","audioSource","url","playBtnIcon","_uid","playback","setTimeout","currentTime","_onUpdateProgress","_onChangeVolume","player_render","class","nativeOn","click","href","downloader_render","configurable","writable","key","TypeError","bitRate","dataBuffer","encoder","_convertBuffer","Blob","now","blob","URL","createObjectURL","_floatTo16BitPCM","beforeRecording","pauseRecording","afterRecording","micFailed","bufferSize","records","isPause","isRecording","_duration","mediaDevices","getUserMedia","video","audio","channelCount","echoCancellation","then","_micCaptured","catch","_micError","lameEncoder","stream","getTracks","forEach","input","disconnect","processor","context","close","finish","AudioContext","webkitAudioContext","createMediaStreamSource","createScriptProcessor","onaudioprocess","inputBuffer","getChannelData","encode","parseFloat","toFixed","connect","destination","headers","uploadUrl","mixins","upload","FormData","append","_boundary","$http","post","status","response","uploader_render","attempts","time","showDownloadButton","showUploadButton","Function","failedUpload","beforeUpload","successfulUpload","selectRecord","isUploading","recorder","_initRecorder","recordList","selected","uploadStatus","AudioPlayer","Downloader","Uploader","beforeDestroy","stopRecorder","toggleRecorder","start","removeRecord","splice","$set","choiceRecord","attemptsLeft","iconButtonType","recordedTime","recorder_render","ar__blur","_l","AudioRecorder","install","installed","component"],"sources":["webpack://VueAudioRecorder/webpack/universalModuleDefinition","webpack://VueAudioRecorder/webpack/bootstrap","webpack://VueAudioRecorder/node_modules/lamejs/src/js/common.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/Encoder.js","webpack://VueAudioRecorder/node_modules/css-loader/lib/css-base.js","webpack://VueAudioRecorder/node_modules/vue-style-loader/lib/listToStyles.js","webpack://VueAudioRecorder/node_modules/vue-style-loader/lib/addStylesClient.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/LameInternalFlags.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/L3Side.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/GrInfo.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/Tables.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/III_psy_xmin.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/MPEGMode.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/ScaleFac.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/GainAnalysis.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/MeanBits.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/BitStream.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/Takehiro.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/QuantizePVT.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/index.js","webpack://VueAudioRecorder/src/components/player.vue?e17b","webpack://VueAudioRecorder/src/components/player.vue?6152","webpack://VueAudioRecorder/src/components/line-control.vue?0c7f","webpack://VueAudioRecorder/src/components/line-control.vue?bded","webpack://VueAudioRecorder/src/components/volume-control.vue?a8e8","webpack://VueAudioRecorder/src/components/volume-control.vue?dd52","webpack://VueAudioRecorder/src/components/recorder.vue?3849","webpack://VueAudioRecorder/src/components/recorder.vue?1864","webpack://VueAudioRecorder/src/components/downloader.vue?7136","webpack://VueAudioRecorder/src/components/downloader.vue?a86c","webpack://VueAudioRecorder/node_modules/lamejs/src/js/Lame.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/PsyModel.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/FFT.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/NewMDCT.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/III_psy_ratio.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/LameGlobalFlags.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/IIISideInfo.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/NsPsy.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/VBRSeekInfo.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/ATH.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/ReplayGain.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/CBRNewIterationLoop.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/Presets.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/Quantize.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/VBRQuantize.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/CalcNoiseResult.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/CalcNoiseData.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/Reservoir.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/Version.js","webpack://VueAudioRecorder/node_modules/lamejs/src/js/VBRTag.js","webpack://VueAudioRecorder/src/components/uploader.vue?9ee4","webpack://VueAudioRecorder/src/components/uploader.vue?fbe4","webpack://VueAudioRecorder/src/components/icon-button.vue","webpack://VueAudioRecorder/src/components/icon-button.vue?4ae5","webpack://VueAudioRecorder/node_modules/vue-loader/lib/runtime/component-normalizer.js","webpack://VueAudioRecorder/src/lib/utils.js","webpack://VueAudioRecorder/src/components/line-control.vue","webpack://VueAudioRecorder/src/components/line-control.vue?701b","webpack://VueAudioRecorder/src/components/volume-control.vue","webpack://VueAudioRecorder/src/components/volume-control.vue?cf86","webpack://VueAudioRecorder/src/components/player.vue","webpack://VueAudioRecorder/src/components/player.vue?a8a2","webpack://VueAudioRecorder/src/components/downloader.vue","webpack://VueAudioRecorder/src/components/downloader.vue?d603","webpack://VueAudioRecorder/src/lib/encoder.js","webpack://VueAudioRecorder/src/lib/recorder.js","webpack://VueAudioRecorder/src/mixins/uploader-props.js","webpack://VueAudioRecorder/src/components/uploader.vue","webpack://VueAudioRecorder/src/components/uploader.vue?76dc","webpack://VueAudioRecorder/src/components/recorder.vue","webpack://VueAudioRecorder/src/components/recorder.vue?1c2b","webpack://VueAudioRecorder/src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"VueAudioRecorder\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VueAudioRecorder\"] = factory();\n\telse\n\t\troot[\"VueAudioRecorder\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 49);\n","function new_byte(count) {\n    return new Int8Array(count);\n}\n\nfunction new_short(count) {\n    return new Int16Array(count);\n}\n\nfunction new_int(count) {\n    return new Int32Array(count);\n}\n\nfunction new_float(count) {\n    return new Float32Array(count);\n}\n\nfunction new_double(count) {\n    return new Float64Array(count);\n}\n\nfunction new_float_n(args) {\n    if (args.length == 1) {\n        return new_float(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_float_n(args));\n    }\n    return A;\n}\nfunction new_int_n(args) {\n    if (args.length == 1) {\n        return new_int(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_int_n(args));\n    }\n    return A;\n}\n\nfunction new_short_n(args) {\n    if (args.length == 1) {\n        return new_short(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_short_n(args));\n    }\n    return A;\n}\n\nfunction new_array_n(args) {\n    if (args.length == 1) {\n        return new Array(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_array_n(args));\n    }\n    return A;\n}\n\n\nvar Arrays = {};\n\nArrays.fill = function (a, fromIndex, toIndex, val) {\n    if (arguments.length == 2) {\n        for (var i = 0; i < a.length; i++) {\n            a[i] = arguments[1];\n        }\n    } else {\n        for (var i = fromIndex; i < toIndex; i++) {\n            a[i] = val;\n        }\n    }\n};\n\nvar System = {};\n\nSystem.arraycopy = function (src, srcPos, dest, destPos, length) {\n    var srcEnd = srcPos + length;\n    while (srcPos < srcEnd)\n        dest[destPos++] = src[srcPos++];\n};\n\n\nvar Util = {};\nUtil.SQRT2 = 1.41421356237309504880;\nUtil.FAST_LOG10 = function (x) {\n    return Math.log10(x);\n};\n\nUtil.FAST_LOG10_X = function (x, y) {\n    return Math.log10(x) * y;\n};\n\nfunction ShortBlock(ordinal) {\n    this.ordinal = ordinal;\n}\n/**\n * LAME may use them, even different block types for L/R.\n */\nShortBlock.short_block_allowed = new ShortBlock(0);\n/**\n * LAME may use them, but always same block types in L/R.\n */\nShortBlock.short_block_coupled = new ShortBlock(1);\n/**\n * LAME will not use short blocks, long blocks only.\n */\nShortBlock.short_block_dispensed = new ShortBlock(2);\n/**\n * LAME will not use long blocks, short blocks only.\n */\nShortBlock.short_block_forced = new ShortBlock(3);\n\nvar Float = {};\nFloat.MAX_VALUE = 3.4028235e+38;\n\nfunction VbrMode(ordinal) {\n    this.ordinal = ordinal;\n}\nVbrMode.vbr_off = new VbrMode(0);\nVbrMode.vbr_mt = new VbrMode(1);\nVbrMode.vbr_rh = new VbrMode(2);\nVbrMode.vbr_abr = new VbrMode(3);\nVbrMode.vbr_mtrh = new VbrMode(4);\nVbrMode.vbr_default = VbrMode.vbr_mtrh;\n\nvar assert = function (x) {\n    //console.assert(x);\n};\n\nmodule.exports = {\n    \"System\": System,\n    \"VbrMode\": VbrMode,\n    \"Float\": Float,\n    \"ShortBlock\": ShortBlock,\n    \"Util\": Util,\n    \"Arrays\": Arrays,\n    \"new_array_n\": new_array_n,\n    \"new_byte\": new_byte,\n    \"new_double\": new_double,\n    \"new_float\": new_float,\n    \"new_float_n\": new_float_n,\n    \"new_int\": new_int,\n    \"new_int_n\": new_int_n,\n    \"new_short\": new_short,\n    \"new_short_n\": new_short_n,\n    \"assert\": assert\n};\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\n/**\n * ENCDELAY The encoder delay.\n *\n * Minimum allowed is MDCTDELAY (see below)\n *\n * The first 96 samples will be attenuated, so using a value less than 96\n * will result in corrupt data for the first 96-ENCDELAY samples.\n *\n * suggested: 576 set to 1160 to sync with FhG.\n */\nEncoder.ENCDELAY = 576;\n/**\n * make sure there is at least one complete frame after the last frame\n * containing real data\n *\n * Using a value of 288 would be sufficient for a a very sophisticated\n * decoder that can decode granule-by-granule instead of frame by frame. But\n * lets not assume this, and assume the decoder will not decode frame N\n * unless it also has data for frame N+1\n */\nEncoder.POSTDELAY = 1152;\n\n/**\n * delay of the MDCT used in mdct.c original ISO routines had a delay of\n * 528! Takehiro's routines:\n */\nEncoder.MDCTDELAY = 48;\nEncoder.FFTOFFSET = (224 + Encoder.MDCTDELAY);\n\n/**\n * Most decoders, including the one we use, have a delay of 528 samples.\n */\nEncoder.DECDELAY = 528;\n\n/**\n * number of subbands\n */\nEncoder.SBLIMIT = 32;\n\n/**\n * parition bands bands\n */\nEncoder.CBANDS = 64;\n\n/**\n * number of critical bands/scale factor bands where masking is computed\n */\nEncoder.SBPSY_l = 21;\nEncoder.SBPSY_s = 12;\n\n/**\n * total number of scalefactor bands encoded\n */\nEncoder.SBMAX_l = 22;\nEncoder.SBMAX_s = 13;\nEncoder.PSFB21 = 6;\nEncoder.PSFB12 = 6;\n\n/**\n * FFT sizes\n */\nEncoder.BLKSIZE = 1024;\nEncoder.HBLKSIZE = (Encoder.BLKSIZE / 2 + 1);\nEncoder.BLKSIZE_s = 256;\nEncoder.HBLKSIZE_s = (Encoder.BLKSIZE_s / 2 + 1);\n\nEncoder.NORM_TYPE = 0;\nEncoder.START_TYPE = 1;\nEncoder.SHORT_TYPE = 2;\nEncoder.STOP_TYPE = 3;\n\n/**\n * <PRE>\n * Mode Extention:\n * When we are in stereo mode, there are 4 possible methods to store these\n * two channels. The stereo modes -m? are using a subset of them.\n *\n *  -ms: MPG_MD_LR_LR\n *  -mj: MPG_MD_LR_LR and MPG_MD_MS_LR\n *  -mf: MPG_MD_MS_LR\n *  -mi: all\n * </PRE>\n */\nEncoder.MPG_MD_LR_LR = 0;\nEncoder.MPG_MD_LR_I = 1;\nEncoder.MPG_MD_MS_LR = 2;\nEncoder.MPG_MD_MS_I = 3;\n\nEncoder.fircoef = [-0.0207887 * 5, -0.0378413 * 5,\n    -0.0432472 * 5, -0.031183 * 5, 7.79609e-18 * 5, 0.0467745 * 5,\n    0.10091 * 5, 0.151365 * 5, 0.187098 * 5];\n\nfunction Encoder() {\n    var NewMDCT = require('./NewMDCT.js');\n    var III_psy_ratio = require('./III_psy_ratio.js');\n\n    var FFTOFFSET = Encoder.FFTOFFSET;\n    var MPG_MD_MS_LR = Encoder.MPG_MD_MS_LR;\n    //BitStream bs;\n    //PsyModel psy;\n    //VBRTag vbr;\n    //QuantizePVT qupvt;\n    var bs = null;\n    this.psy = null;\n    var psy = null;\n    var vbr = null;\n    var qupvt = null;\n\n    //public final void setModules(BitStream bs, PsyModel psy, QuantizePVT qupvt,\n    //    VBRTag vbr) {\n    this.setModules = function (_bs, _psy, _qupvt, _vbr) {\n        bs = _bs;\n        this.psy = _psy;\n        psy = _psy;\n        vbr = _vbr;\n        qupvt = _qupvt;\n    };\n\n    var newMDCT = new NewMDCT();\n\n    /***********************************************************************\n     *\n     * encoder and decoder delays\n     *\n     ***********************************************************************/\n\n    /**\n     * <PRE>\n     * layer III enc->dec delay:  1056 (1057?)   (observed)\n     * layer  II enc->dec delay:   480  (481?)   (observed)\n     *\n     * polyphase 256-16             (dec or enc)        = 240\n     * mdct      256+32  (9*32)     (dec or enc)        = 288\n     * total:    512+16\n     *\n     * My guess is that delay of polyphase filterbank is actualy 240.5\n     * (there are technical reasons for this, see postings in mp3encoder).\n     * So total Encode+Decode delay = ENCDELAY + 528 + 1\n     * </PRE>\n     */\n\n\n    /**\n     * auto-adjust of ATH, useful for low volume Gabriel Bouvigne 3 feb 2001\n     *\n     * modifies some values in gfp.internal_flags.ATH (gfc.ATH)\n     */\n//private void adjust_ATH(final LameInternalFlags gfc) {\n    function adjust_ATH(gfc) {\n        var gr2_max, max_pow;\n\n        if (gfc.ATH.useAdjust == 0) {\n            gfc.ATH.adjust = 1.0;\n            /* no adjustment */\n            return;\n        }\n\n        /* jd - 2001 mar 12, 27, jun 30 */\n        /* loudness based on equal loudness curve; */\n        /* use granule with maximum combined loudness */\n        max_pow = gfc.loudness_sq[0][0];\n        gr2_max = gfc.loudness_sq[1][0];\n        if (gfc.channels_out == 2) {\n            max_pow += gfc.loudness_sq[0][1];\n            gr2_max += gfc.loudness_sq[1][1];\n        } else {\n            max_pow += max_pow;\n            gr2_max += gr2_max;\n        }\n        if (gfc.mode_gr == 2) {\n            max_pow = Math.max(max_pow, gr2_max);\n        }\n        max_pow *= 0.5;\n        /* max_pow approaches 1.0 for full band noise */\n\n        /* jd - 2001 mar 31, jun 30 */\n        /* user tuning of ATH adjustment region */\n        max_pow *= gfc.ATH.aaSensitivityP;\n\n        /*\n         * adjust ATH depending on range of maximum value\n         */\n\n        /* jd - 2001 feb27, mar12,20, jun30, jul22 */\n        /* continuous curves based on approximation */\n        /* to GB's original values. */\n        /* For an increase in approximate loudness, */\n        /* set ATH adjust to adjust_limit immediately */\n        /* after a delay of one frame. */\n        /* For a loudness decrease, reduce ATH adjust */\n        /* towards adjust_limit gradually. */\n        /* max_pow is a loudness squared or a power. */\n        if (max_pow > 0.03125) { /* ((1 - 0.000625)/ 31.98) from curve below */\n            if (gfc.ATH.adjust >= 1.0) {\n                gfc.ATH.adjust = 1.0;\n            } else {\n                /* preceding frame has lower ATH adjust; */\n                /* ascend only to the preceding adjust_limit */\n                /* in case there is leading low volume */\n                if (gfc.ATH.adjust < gfc.ATH.adjustLimit) {\n                    gfc.ATH.adjust = gfc.ATH.adjustLimit;\n                }\n            }\n            gfc.ATH.adjustLimit = 1.0;\n        } else { /* adjustment curve */\n            /* about 32 dB maximum adjust (0.000625) */\n            var adj_lim_new = 31.98 * max_pow + 0.000625;\n            if (gfc.ATH.adjust >= adj_lim_new) { /* descend gradually */\n                gfc.ATH.adjust *= adj_lim_new * 0.075 + 0.925;\n                if (gfc.ATH.adjust < adj_lim_new) { /* stop descent */\n                    gfc.ATH.adjust = adj_lim_new;\n                }\n            } else { /* ascend */\n                if (gfc.ATH.adjustLimit >= adj_lim_new) {\n                    gfc.ATH.adjust = adj_lim_new;\n                } else {\n                    /* preceding frame has lower ATH adjust; */\n                    /* ascend only to the preceding adjust_limit */\n                    if (gfc.ATH.adjust < gfc.ATH.adjustLimit) {\n                        gfc.ATH.adjust = gfc.ATH.adjustLimit;\n                    }\n                }\n            }\n            gfc.ATH.adjustLimit = adj_lim_new;\n        }\n    }\n\n    /**\n     * <PRE>\n     *  some simple statistics\n     *\n     *  bitrate index 0: free bitrate . not allowed in VBR mode\n     *  : bitrates, kbps depending on MPEG version\n     *  bitrate index 15: forbidden\n     *\n     *  mode_ext:\n     *  0:  LR\n     *  1:  LR-i\n     *  2:  MS\n     *  3:  MS-i\n     * </PRE>\n     */\n    function updateStats(gfc) {\n        var gr, ch;\n        assert(0 <= gfc.bitrate_index && gfc.bitrate_index < 16);\n        assert(0 <= gfc.mode_ext && gfc.mode_ext < 4);\n\n        /* count bitrate indices */\n        gfc.bitrate_stereoMode_Hist[gfc.bitrate_index][4]++;\n        gfc.bitrate_stereoMode_Hist[15][4]++;\n\n        /* count 'em for every mode extension in case of 2 channel encoding */\n        if (gfc.channels_out == 2) {\n            gfc.bitrate_stereoMode_Hist[gfc.bitrate_index][gfc.mode_ext]++;\n            gfc.bitrate_stereoMode_Hist[15][gfc.mode_ext]++;\n        }\n        for (gr = 0; gr < gfc.mode_gr; ++gr) {\n            for (ch = 0; ch < gfc.channels_out; ++ch) {\n                var bt = gfc.l3_side.tt[gr][ch].block_type | 0;\n                if (gfc.l3_side.tt[gr][ch].mixed_block_flag != 0)\n                    bt = 4;\n                gfc.bitrate_blockType_Hist[gfc.bitrate_index][bt]++;\n                gfc.bitrate_blockType_Hist[gfc.bitrate_index][5]++;\n                gfc.bitrate_blockType_Hist[15][bt]++;\n                gfc.bitrate_blockType_Hist[15][5]++;\n            }\n        }\n    }\n\n    function lame_encode_frame_init(gfp, inbuf) {\n        var gfc = gfp.internal_flags;\n\n        var ch, gr;\n\n        if (gfc.lame_encode_frame_init == 0) {\n            /* prime the MDCT/polyphase filterbank with a short block */\n            var i, j;\n            var primebuff0 = new_float(286 + 1152 + 576);\n            var primebuff1 = new_float(286 + 1152 + 576);\n            gfc.lame_encode_frame_init = 1;\n            for (i = 0, j = 0; i < 286 + 576 * (1 + gfc.mode_gr); ++i) {\n                if (i < 576 * gfc.mode_gr) {\n                    primebuff0[i] = 0;\n                    if (gfc.channels_out == 2)\n                        primebuff1[i] = 0;\n                } else {\n                    primebuff0[i] = inbuf[0][j];\n                    if (gfc.channels_out == 2)\n                        primebuff1[i] = inbuf[1][j];\n                    ++j;\n                }\n            }\n            /* polyphase filtering / mdct */\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    gfc.l3_side.tt[gr][ch].block_type = Encoder.SHORT_TYPE;\n                }\n            }\n            newMDCT.mdct_sub48(gfc, primebuff0, primebuff1);\n\n            /* check FFT will not use a negative starting offset */\n            assert(576 >= Encoder.FFTOFFSET);\n            /* check if we have enough data for FFT */\n            assert(gfc.mf_size >= (Encoder.BLKSIZE + gfp.framesize - Encoder.FFTOFFSET));\n            /* check if we have enough data for polyphase filterbank */\n            assert(gfc.mf_size >= (512 + gfp.framesize - 32));\n        }\n\n    }\n\n    /**\n     * <PRE>\n     * encodeframe()           Layer 3\n     *\n     * encode a single frame\n     *\n     *\n     *    lame_encode_frame()\n     *\n     *\n     *                           gr 0            gr 1\n     *    inbuf:           |--------------|--------------|--------------|\n     *\n     *\n     *    Polyphase (18 windows, each shifted 32)\n     *    gr 0:\n     *    window1          <----512---.\n     *    window18                 <----512---.\n     *\n     *    gr 1:\n     *    window1                         <----512---.\n     *    window18                                <----512---.\n     *\n     *\n     *\n     *    MDCT output:  |--------------|--------------|--------------|\n     *\n     *    FFT's                    <---------1024---------.\n     *                                             <---------1024-------.\n     *\n     *\n     *\n     *        inbuf = buffer of PCM data size=MP3 framesize\n     *        encoder acts on inbuf[ch][0], but output is delayed by MDCTDELAY\n     *        so the MDCT coefficints are from inbuf[ch][-MDCTDELAY]\n     *\n     *        psy-model FFT has a 1 granule delay, so we feed it data for the\n     *        next granule.\n     *        FFT is centered over granule:  224+576+224\n     *        So FFT starts at:   576-224-MDCTDELAY\n     *\n     *        MPEG2:  FFT ends at:  BLKSIZE+576-224-MDCTDELAY      (1328)\n     *        MPEG1:  FFT ends at:  BLKSIZE+2*576-224-MDCTDELAY    (1904)\n     *\n     *        MPEG2:  polyphase first window:  [0..511]\n     *                          18th window:   [544..1055]          (1056)\n     *        MPEG1:            36th window:   [1120..1631]         (1632)\n     *                data needed:  512+framesize-32\n     *\n     *        A close look newmdct.c shows that the polyphase filterbank\n     *        only uses data from [0..510] for each window.  Perhaps because the window\n     *        used by the filterbank is zero for the last point, so Takehiro's\n     *        code doesn't bother to compute with it.\n     *\n     *        FFT starts at 576-224-MDCTDELAY (304)  = 576-FFTOFFSET\n     *\n     * </PRE>\n     */\n\n\n    this.lame_encode_mp3_frame = function (gfp, inbuf_l, inbuf_r, mp3buf, mp3bufPos, mp3buf_size) {\n        var mp3count;\n        var masking_LR = new_array_n([2, 2]);\n        /*\n         * LR masking &\n         * energy\n         */\n        masking_LR[0][0] = new III_psy_ratio();\n        masking_LR[0][1] = new III_psy_ratio();\n        masking_LR[1][0] = new III_psy_ratio();\n        masking_LR[1][1] = new III_psy_ratio();\n        var masking_MS = new_array_n([2, 2]);\n        /* MS masking & energy */\n        masking_MS[0][0] = new III_psy_ratio();\n        masking_MS[0][1] = new III_psy_ratio();\n        masking_MS[1][0] = new III_psy_ratio();\n        masking_MS[1][1] = new III_psy_ratio();\n        //III_psy_ratio masking[][];\n        var masking;\n        /* pointer to selected maskings */\n        var inbuf = [null, null];\n        var gfc = gfp.internal_flags;\n\n        var tot_ener = new_float_n([2, 4]);\n        var ms_ener_ratio = [.5, .5];\n        var pe = [[0., 0.], [0., 0.]];\n        var pe_MS = [[0., 0.], [0., 0.]];\n\n//float[][] pe_use;\n        var pe_use;\n\n        var ch, gr;\n\n        inbuf[0] = inbuf_l;\n        inbuf[1] = inbuf_r;\n\n        if (gfc.lame_encode_frame_init == 0) {\n            /* first run? */\n            lame_encode_frame_init(gfp, inbuf);\n\n        }\n\n        /********************** padding *****************************/\n        /**\n         * <PRE>\n         * padding method as described in\n         * \"MPEG-Layer3 / Bitstream Syntax and Decoding\"\n         * by Martin Sieler, Ralph Sperschneider\n         *\n         * note: there is no padding for the very first frame\n         *\n         * Robert Hegemann 2000-06-22\n         * </PRE>\n         */\n        gfc.padding = 0;\n        if ((gfc.slot_lag -= gfc.frac_SpF) < 0) {\n            gfc.slot_lag += gfp.out_samplerate;\n            gfc.padding = 1;\n        }\n\n        /****************************************\n         * Stage 1: psychoacoustic model *\n         ****************************************/\n\n        if (gfc.psymodel != 0) {\n            /*\n             * psychoacoustic model psy model has a 1 granule (576) delay that\n             * we must compensate for (mt 6/99).\n             */\n            var ret;\n            var bufp = [null, null];\n            /* address of beginning of left & right granule */\n            var bufpPos = 0;\n            /* address of beginning of left & right granule */\n            var blocktype = new_int(2);\n\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    bufp[ch] = inbuf[ch];\n                    bufpPos = 576 + gr * 576 - Encoder.FFTOFFSET;\n                }\n                if (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) {\n                    ret = psy.L3psycho_anal_vbr(gfp, bufp, bufpPos, gr,\n                        masking_LR, masking_MS, pe[gr], pe_MS[gr],\n                        tot_ener[gr], blocktype);\n                } else {\n                    ret = psy.L3psycho_anal_ns(gfp, bufp, bufpPos, gr,\n                        masking_LR, masking_MS, pe[gr], pe_MS[gr],\n                        tot_ener[gr], blocktype);\n                }\n                if (ret != 0)\n                    return -4;\n\n                if (gfp.mode == MPEGMode.JOINT_STEREO) {\n                    ms_ener_ratio[gr] = tot_ener[gr][2] + tot_ener[gr][3];\n                    if (ms_ener_ratio[gr] > 0)\n                        ms_ener_ratio[gr] = tot_ener[gr][3] / ms_ener_ratio[gr];\n                }\n\n                /* block type flags */\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    var cod_info = gfc.l3_side.tt[gr][ch];\n                    cod_info.block_type = blocktype[ch];\n                    cod_info.mixed_block_flag = 0;\n                }\n            }\n        } else {\n            /* no psy model */\n            for (gr = 0; gr < gfc.mode_gr; gr++)\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    gfc.l3_side.tt[gr][ch].block_type = Encoder.NORM_TYPE;\n                    gfc.l3_side.tt[gr][ch].mixed_block_flag = 0;\n                    pe_MS[gr][ch] = pe[gr][ch] = 700;\n                }\n        }\n\n        /* auto-adjust of ATH, useful for low volume */\n        adjust_ATH(gfc);\n\n        /****************************************\n         * Stage 2: MDCT *\n         ****************************************/\n\n        /* polyphase filtering / mdct */\n        newMDCT.mdct_sub48(gfc, inbuf[0], inbuf[1]);\n\n        /****************************************\n         * Stage 3: MS/LR decision *\n         ****************************************/\n\n        /* Here will be selected MS or LR coding of the 2 stereo channels */\n        gfc.mode_ext = Encoder.MPG_MD_LR_LR;\n\n        if (gfp.force_ms) {\n            gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n        } else if (gfp.mode == MPEGMode.JOINT_STEREO) {\n            /*\n             * ms_ratio = is scaled, for historical reasons, to look like a\n             * ratio of side_channel / total. 0 = signal is 100% mono .5 = L & R\n             * uncorrelated\n             */\n\n            /**\n             * <PRE>\n             * [0] and [1] are the results for the two granules in MPEG-1,\n             * in MPEG-2 it's only a faked averaging of the same value\n             * _prev is the value of the last granule of the previous frame\n             * _next is the value of the first granule of the next frame\n             * </PRE>\n             */\n\n            var sum_pe_MS = 0.;\n            var sum_pe_LR = 0.;\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    sum_pe_MS += pe_MS[gr][ch];\n                    sum_pe_LR += pe[gr][ch];\n                }\n            }\n\n            /* based on PE: M/S coding would not use much more bits than L/R */\n            if (sum_pe_MS <= 1.00 * sum_pe_LR) {\n\n                var gi0 = gfc.l3_side.tt[0];\n                var gi1 = gfc.l3_side.tt[gfc.mode_gr - 1];\n\n                if (gi0[0].block_type == gi0[1].block_type\n                    && gi1[0].block_type == gi1[1].block_type) {\n\n                    gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n                }\n            }\n        }\n\n        /* bit and noise allocation */\n        if (gfc.mode_ext == MPG_MD_MS_LR) {\n            masking = masking_MS;\n            /* use MS masking */\n            pe_use = pe_MS;\n        } else {\n            masking = masking_LR;\n            /* use LR masking */\n            pe_use = pe;\n        }\n\n        /* copy data for MP3 frame analyzer */\n        if (gfp.analysis && gfc.pinfo != null) {\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    gfc.pinfo.ms_ratio[gr] = gfc.ms_ratio[gr];\n                    gfc.pinfo.ms_ener_ratio[gr] = ms_ener_ratio[gr];\n                    gfc.pinfo.blocktype[gr][ch] = gfc.l3_side.tt[gr][ch].block_type;\n                    gfc.pinfo.pe[gr][ch] = pe_use[gr][ch];\n                    System.arraycopy(gfc.l3_side.tt[gr][ch].xr, 0,\n                        gfc.pinfo.xr[gr][ch], 0, 576);\n                    /*\n                     * in psymodel, LR and MS data was stored in pinfo. switch\n                     * to MS data:\n                     */\n                    if (gfc.mode_ext == MPG_MD_MS_LR) {\n                        gfc.pinfo.ers[gr][ch] = gfc.pinfo.ers[gr][ch + 2];\n                        System.arraycopy(gfc.pinfo.energy[gr][ch + 2], 0,\n                            gfc.pinfo.energy[gr][ch], 0,\n                            gfc.pinfo.energy[gr][ch].length);\n                    }\n                }\n            }\n        }\n\n        /****************************************\n         * Stage 4: quantization loop *\n         ****************************************/\n\n        if (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_abr) {\n\n            var i;\n            var f;\n\n            for (i = 0; i < 18; i++)\n                gfc.nsPsy.pefirbuf[i] = gfc.nsPsy.pefirbuf[i + 1];\n\n            f = 0.0;\n            for (gr = 0; gr < gfc.mode_gr; gr++)\n                for (ch = 0; ch < gfc.channels_out; ch++)\n                    f += pe_use[gr][ch];\n            gfc.nsPsy.pefirbuf[18] = f;\n\n            f = gfc.nsPsy.pefirbuf[9];\n            for (i = 0; i < 9; i++)\n                f += (gfc.nsPsy.pefirbuf[i] + gfc.nsPsy.pefirbuf[18 - i])\n                    * Encoder.fircoef[i];\n\n            f = (670 * 5 * gfc.mode_gr * gfc.channels_out) / f;\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    pe_use[gr][ch] *= f;\n                }\n            }\n        }\n        gfc.iteration_loop.iteration_loop(gfp, pe_use, ms_ener_ratio, masking);\n\n        /****************************************\n         * Stage 5: bitstream formatting *\n         ****************************************/\n\n        /* write the frame to the bitstream */\n        bs.format_bitstream(gfp);\n\n        /* copy mp3 bit buffer into array */\n        mp3count = bs.copy_buffer(gfc, mp3buf, mp3bufPos, mp3buf_size, 1);\n\n        if (gfp.bWriteVbrTag)\n            vbr.addVbrFrame(gfp);\n\n        if (gfp.analysis && gfc.pinfo != null) {\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var j;\n                for (j = 0; j < FFTOFFSET; j++)\n                    gfc.pinfo.pcmdata[ch][j] = gfc.pinfo.pcmdata[ch][j\n                    + gfp.framesize];\n                for (j = FFTOFFSET; j < 1600; j++) {\n                    gfc.pinfo.pcmdata[ch][j] = inbuf[ch][j - FFTOFFSET];\n                }\n            }\n            qupvt.set_frame_pinfo(gfp, masking);\n        }\n\n        updateStats(gfc);\n\n        return mp3count;\n    }\n}\n\n\nmodule.exports = Encoder;\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n","/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nexport default function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n","/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nimport listToStyles from './listToStyles'\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nexport default function addStylesClient (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar IIISideInfo = require('./IIISideInfo.js');\nvar ScaleFac = require('./ScaleFac.js');\nvar NsPsy = require('./NsPsy.js');\nvar VBRSeekInfo = require('./VBRSeekInfo.js');\nvar III_psy_xmin = require('./III_psy_xmin.js');\nvar Encoder = require('./Encoder.js');\nvar L3Side = require('./L3Side.js');\n\n\nLameInternalFlags.MFSIZE = (3 * 1152 + Encoder.ENCDELAY - Encoder.MDCTDELAY);\nLameInternalFlags.MAX_HEADER_BUF = 256;\nLameInternalFlags.MAX_BITS_PER_CHANNEL = 4095;\nLameInternalFlags.MAX_BITS_PER_GRANULE = 7680;\nLameInternalFlags.BPC = 320;\n\nfunction LameInternalFlags() {\n    var MAX_HEADER_LEN = 40;\n\n\n    /********************************************************************\n     * internal variables NOT set by calling program, and should not be *\n     * modified by the calling program *\n     ********************************************************************/\n\n    /**\n     * Some remarks to the Class_ID field: The Class ID is an Identifier for a\n     * pointer to this struct. It is very unlikely that a pointer to\n     * lame_global_flags has the same 32 bits in it's structure (large and other\n     * special properties, for instance prime).\n     *\n     * To test that the structure is right and initialized, use: if ( gfc .\n     * Class_ID == LAME_ID ) ... Other remark: If you set a flag to 0 for uninit\n     * data and 1 for init data, the right test should be \"if (flag == 1)\" and\n     * NOT \"if (flag)\". Unintended modification of this element will be\n     * otherwise misinterpreted as an init.\n     */\n    this.Class_ID = 0;\n\n    this.lame_encode_frame_init = 0;\n    this.iteration_init_init = 0;\n    this.fill_buffer_resample_init = 0;\n\n    //public float mfbuf[][] = new float[2][MFSIZE];\n    this.mfbuf = new_float_n([2, LameInternalFlags.MFSIZE]);\n\n    /**\n     * granules per frame\n     */\n    this.mode_gr = 0;\n    /**\n     * number of channels in the input data stream (PCM or decoded PCM)\n     */\n    this.channels_in = 0;\n    /**\n     * number of channels in the output data stream (not used for decoding)\n     */\n    this.channels_out = 0;\n    /**\n     * input_samp_rate/output_samp_rate\n     */\n        //public double resample_ratio;\n    this.resample_ratio = 0.;\n\n    this.mf_samples_to_encode = 0;\n    this.mf_size = 0;\n    /**\n     * min bitrate index\n     */\n    this.VBR_min_bitrate = 0;\n    /**\n     * max bitrate index\n     */\n    this.VBR_max_bitrate = 0;\n    this.bitrate_index = 0;\n    this.samplerate_index = 0;\n    this.mode_ext = 0;\n\n    /* lowpass and highpass filter control */\n    /**\n     * normalized frequency bounds of passband\n     */\n    this.lowpass1 = 0.;\n    this.lowpass2 = 0.;\n    /**\n     * normalized frequency bounds of passband\n     */\n    this.highpass1 = 0.;\n    this.highpass2 = 0.;\n\n    /**\n     * 0 = none 1 = ISO AAC model 2 = allow scalefac_select=1\n     */\n    this.noise_shaping = 0;\n\n    /**\n     * 0 = ISO model: amplify all distorted bands<BR>\n     * 1 = amplify within 50% of max (on db scale)<BR>\n     * 2 = amplify only most distorted band<BR>\n     * 3 = method 1 and refine with method 2<BR>\n     */\n    this.noise_shaping_amp = 0;\n    /**\n     * 0 = no substep<BR>\n     * 1 = use substep shaping at last step(VBR only)<BR>\n     * (not implemented yet)<BR>\n     * 2 = use substep inside loop<BR>\n     * 3 = use substep inside loop and last step<BR>\n     */\n    this.substep_shaping = 0;\n\n    /**\n     * 1 = gpsycho. 0 = none\n     */\n    this.psymodel = 0;\n    /**\n     * 0 = stop at over=0, all scalefacs amplified or<BR>\n     * a scalefac has reached max value<BR>\n     * 1 = stop when all scalefacs amplified or a scalefac has reached max value<BR>\n     * 2 = stop when all scalefacs amplified\n     */\n    this.noise_shaping_stop = 0;\n\n    /**\n     * 0 = no, 1 = yes\n     */\n    this.subblock_gain = 0;\n    /**\n     * 0 = no. 1=outside loop 2=inside loop(slow)\n     */\n    this.use_best_huffman = 0;\n\n    /**\n     * 0 = stop early after 0 distortion found. 1 = full search\n     */\n    this.full_outer_loop = 0;\n\n    //public IIISideInfo l3_side = new IIISideInfo();\n    this.l3_side = new IIISideInfo();\n    this.ms_ratio = new_float(2);\n\n    /* used for padding */\n    /**\n     * padding for the current frame?\n     */\n    this.padding = 0;\n    this.frac_SpF = 0;\n    this.slot_lag = 0;\n\n    /**\n     * optional ID3 tags\n     */\n        //public ID3TagSpec tag_spec;\n    this.tag_spec = null;\n    this.nMusicCRC = 0;\n\n    /* variables used by Quantize */\n    //public int OldValue[] = new int[2];\n    this.OldValue = new_int(2);\n    //public int CurrentStep[] = new int[2];\n    this.CurrentStep = new_int(2);\n\n    this.masking_lower = 0.;\n    //public int bv_scf[] = new int[576];\n    this.bv_scf = new_int(576);\n    //public int pseudohalf[] = new int[L3Side.SFBMAX];\n    this.pseudohalf = new_int(L3Side.SFBMAX);\n\n    /**\n     * will be set in lame_init_params\n     */\n    this.sfb21_extra = false;\n\n    /* BPC = maximum number of filter convolution windows to precompute */\n    //public float[][] inbuf_old = new float[2][];\n    this.inbuf_old = new Array(2);\n    //public float[][] blackfilt = new float[2 * BPC + 1][];\n    this.blackfilt = new Array(2 * LameInternalFlags.BPC + 1);\n    //public double itime[] = new double[2];\n    this.itime = new_double(2);\n    this.sideinfo_len = 0;\n\n    /* variables for newmdct.c */\n    //public float sb_sample[][][][] = new float[2][2][18][Encoder.SBLIMIT];\n    this.sb_sample = new_float_n([2, 2, 18, Encoder.SBLIMIT]);\n    this.amp_filter = new_float(32);\n\n    /* variables for BitStream */\n\n    /**\n     * <PRE>\n     * mpeg1: buffer=511 bytes  smallest frame: 96-38(sideinfo)=58\n     * max number of frames in reservoir:  8\n     * mpeg2: buffer=255 bytes.  smallest frame: 24-23bytes=1\n     * with VBR, if you are encoding all silence, it is possible to\n     * have 8kbs/24khz frames with 1byte of data each, which means we need\n     * to buffer up to 255 headers!\n     * </PRE>\n     */\n    /**\n     * also, max_header_buf has to be a power of two\n     */\n    /**\n     * max size of header is 38\n     */\n\n    function Header() {\n        this.write_timing = 0;\n        this.ptr = 0;\n        //public byte buf[] = new byte[MAX_HEADER_LEN];\n        this.buf = new_byte(MAX_HEADER_LEN);\n    }\n\n    this.header = new Array(LameInternalFlags.MAX_HEADER_BUF);\n\n    this.h_ptr = 0;\n    this.w_ptr = 0;\n    this.ancillary_flag = 0;\n\n    /* variables for Reservoir */\n    /**\n     * in bits\n     */\n    this.ResvSize = 0;\n    /**\n     * in bits\n     */\n    this.ResvMax = 0;\n\n    //public ScaleFac scalefac_band = new ScaleFac();\n    this.scalefac_band = new ScaleFac();\n\n    /* daa from PsyModel */\n    /* The static variables \"r\", \"phi_sav\", \"new\", \"old\" and \"oldest\" have */\n    /* to be remembered for the unpredictability measure. For \"r\" and */\n    /* \"phi_sav\", the first index from the left is the channel select and */\n    /* the second index is the \"age\" of the data. */\n    this.minval_l = new_float(Encoder.CBANDS);\n    this.minval_s = new_float(Encoder.CBANDS);\n    this.nb_1 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_2 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_s1 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_s2 = new_float_n([4, Encoder.CBANDS]);\n    this.s3_ss = null;\n    this.s3_ll = null;\n    this.decay = 0.;\n\n    //public III_psy_xmin[] thm = new III_psy_xmin[4];\n    //public III_psy_xmin[] en = new III_psy_xmin[4];\n    this.thm = new Array(4);\n    this.en = new Array(4);\n\n    /**\n     * fft and energy calculation\n     */\n    this.tot_ener = new_float(4);\n\n    /* loudness calculation (for adaptive threshold of hearing) */\n    /**\n     * loudness^2 approx. per granule and channel\n     */\n    this.loudness_sq = new_float_n([2, 2]);\n    /**\n     * account for granule delay of L3psycho_anal\n     */\n    this.loudness_sq_save = new_float(2);\n\n    /**\n     * Scale Factor Bands\n     */\n    this.mld_l = new_float(Encoder.SBMAX_l);\n    this.mld_s = new_float(Encoder.SBMAX_s);\n    this.bm_l = new_int(Encoder.SBMAX_l);\n    this.bo_l = new_int(Encoder.SBMAX_l);\n    this.bm_s = new_int(Encoder.SBMAX_s);\n    this.bo_s = new_int(Encoder.SBMAX_s);\n    this.npart_l = 0;\n    this.npart_s = 0;\n\n    this.s3ind = new_int_n([Encoder.CBANDS, 2]);\n    this.s3ind_s = new_int_n([Encoder.CBANDS, 2]);\n\n    this.numlines_s = new_int(Encoder.CBANDS);\n    this.numlines_l = new_int(Encoder.CBANDS);\n    this.rnumlines_l = new_float(Encoder.CBANDS);\n    this.mld_cb_l = new_float(Encoder.CBANDS);\n    this.mld_cb_s = new_float(Encoder.CBANDS);\n    this.numlines_s_num1 = 0;\n    this.numlines_l_num1 = 0;\n\n    /* ratios */\n    this.pe = new_float(4);\n    this.ms_ratio_s_old = 0.;\n    this.ms_ratio_l_old = 0.;\n    this.ms_ener_ratio_old = 0.;\n\n    /**\n     * block type\n     */\n    this.blocktype_old = new_int(2);\n\n    /**\n     * variables used for --nspsytune\n     */\n    this.nsPsy = new NsPsy();\n\n    /**\n     * used for Xing VBR header\n     */\n    this.VBR_seek_table = new VBRSeekInfo();\n\n    /**\n     * all ATH related stuff\n     */\n        //public ATH ATH;\n    this.ATH = null;\n\n    this.PSY = null;\n\n    this.nogap_total = 0;\n    this.nogap_current = 0;\n\n    /* ReplayGain */\n    this.decode_on_the_fly = true;\n    this.findReplayGain = true;\n    this.findPeakSample = true;\n    this.PeakSample = 0.;\n    this.RadioGain = 0;\n    this.AudiophileGain = 0;\n    //public ReplayGain rgdata;\n    this.rgdata = null;\n\n    /**\n     * gain change required for preventing clipping\n     */\n    this.noclipGainChange = 0;\n    /**\n     * user-specified scale factor required for preventing clipping\n     */\n    this.noclipScale = 0.;\n\n    /* simple statistics */\n    this.bitrate_stereoMode_Hist = new_int_n([16, 4 + 1]);\n    /**\n     * norm/start/short/stop/mixed(short)/sum\n     */\n    this.bitrate_blockType_Hist = new_int_n([16, 4 + 1 + 1]);\n\n    //public PlottingData pinfo;\n    //public MPGLib.mpstr_tag hip;\n    this.pinfo = null;\n    this.hip = null;\n\n    this.in_buffer_nsamples = 0;\n    //public float[] in_buffer_0;\n    //public float[] in_buffer_1;\n    this.in_buffer_0 = null;\n    this.in_buffer_1 = null;\n\n    //public IIterationLoop iteration_loop;\n    this.iteration_loop = null;\n\n    for (var i = 0; i < this.en.length; i++) {\n        this.en[i] = new III_psy_xmin();\n    }\n    for (var i = 0; i < this.thm.length; i++) {\n        this.thm[i] = new III_psy_xmin();\n    }\n    for (var i = 0; i < this.header.length; i++) {\n        this.header[i] = new Header();\n    }\n\n}\n\nmodule.exports = LameInternalFlags;\n","var Encoder = require('./Encoder.js');\n\nvar L3Side = {};\n\n\n\t/**\n\t * max scalefactor band, max(SBMAX_l, SBMAX_s*3, (SBMAX_s-3)*3+8)\n\t */\nL3Side.SFBMAX = (Encoder.SBMAX_s * 3);\n\nmodule.exports = L3Side;\n","//package mp3;\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar L3Side = require('./L3Side.js');\n\nfunction GrInfo() {\n    //float xr[] = new float[576];\n    this.xr = new_float(576);\n    //int l3_enc[] = new int[576];\n    this.l3_enc = new_int(576);\n    //int scalefac[] = new int[L3Side.SFBMAX];\n    this.scalefac = new_int(L3Side.SFBMAX);\n    this.xrpow_max = 0.;\n\n    this.part2_3_length = 0;\n    this.big_values = 0;\n    this.count1 = 0;\n    this.global_gain = 0;\n    this.scalefac_compress = 0;\n    this.block_type = 0;\n    this.mixed_block_flag = 0;\n    this.table_select = new_int(3);\n    this.subblock_gain = new_int(3 + 1);\n    this.region0_count = 0;\n    this.region1_count = 0;\n    this.preflag = 0;\n    this.scalefac_scale = 0;\n    this.count1table_select = 0;\n\n    this.part2_length = 0;\n    this.sfb_lmax = 0;\n    this.sfb_smin = 0;\n    this.psy_lmax = 0;\n    this.sfbmax = 0;\n    this.psymax = 0;\n    this.sfbdivide = 0;\n    this.width = new_int(L3Side.SFBMAX);\n    this.window = new_int(L3Side.SFBMAX);\n    this.count1bits = 0;\n    /**\n     * added for LSF\n     */\n    this.sfb_partition_table = null;\n    this.slen = new_int(4);\n\n    this.max_nonzero_coeff = 0;\n\n    var self = this;\n    function clone_int(array) {\n        return new Int32Array(array);\n    }\n    function clone_float(array) {\n        return new Float32Array(array);\n    }\n    this.assign = function (other) {\n        self.xr = clone_float(other.xr); //.slice(0); //clone();\n        self.l3_enc = clone_int(other.l3_enc); //.slice(0); //clone();\n        self.scalefac = clone_int(other.scalefac);//.slice(0); //clone();\n        self.xrpow_max = other.xrpow_max;\n\n        self.part2_3_length = other.part2_3_length;\n        self.big_values = other.big_values;\n        self.count1 = other.count1;\n        self.global_gain = other.global_gain;\n        self.scalefac_compress = other.scalefac_compress;\n        self.block_type = other.block_type;\n        self.mixed_block_flag = other.mixed_block_flag;\n        self.table_select = clone_int(other.table_select);//.slice(0); //clone();\n        self.subblock_gain = clone_int(other.subblock_gain); //.slice(0); //.clone();\n        self.region0_count = other.region0_count;\n        self.region1_count = other.region1_count;\n        self.preflag = other.preflag;\n        self.scalefac_scale = other.scalefac_scale;\n        self.count1table_select = other.count1table_select;\n\n        self.part2_length = other.part2_length;\n        self.sfb_lmax = other.sfb_lmax;\n        self.sfb_smin = other.sfb_smin;\n        self.psy_lmax = other.psy_lmax;\n        self.sfbmax = other.sfbmax;\n        self.psymax = other.psymax;\n        self.sfbdivide = other.sfbdivide;\n        self.width = clone_int(other.width); //.slice(0); //.clone();\n        self.window = clone_int(other.window); //.slice(0); //.clone();\n        self.count1bits = other.count1bits;\n\n        self.sfb_partition_table = other.sfb_partition_table.slice(0); //.clone();\n        self.slen = clone_int(other.slen); //.slice(0); //.clone();\n        self.max_nonzero_coeff = other.max_nonzero_coeff;\n    }\n}\n\nmodule.exports = GrInfo;\n","function HuffCodeTab(len, max, tab, hl) {\n    this.xlen = len;\n    this.linmax = max;\n    this.table = tab;\n    this.hlen = hl;\n}\n\nvar Tables = {};\n\n\nTables.t1HB = [\n    1, 1,\n    1, 0\n];\n\nTables.t2HB = [\n    1, 2, 1,\n    3, 1, 1,\n    3, 2, 0\n];\n\nTables.t3HB = [\n    3, 2, 1,\n    1, 1, 1,\n    3, 2, 0\n];\n\nTables.t5HB = [\n    1, 2, 6, 5,\n    3, 1, 4, 4,\n    7, 5, 7, 1,\n    6, 1, 1, 0\n];\n\nTables.t6HB = [\n    7, 3, 5, 1,\n    6, 2, 3, 2,\n    5, 4, 4, 1,\n    3, 3, 2, 0\n];\n\nTables.t7HB = [\n    1, 2, 10, 19, 16, 10,\n    3, 3, 7, 10, 5, 3,\n    11, 4, 13, 17, 8, 4,\n    12, 11, 18, 15, 11, 2,\n    7, 6, 9, 14, 3, 1,\n    6, 4, 5, 3, 2, 0\n];\n\nTables.t8HB = [\n    3, 4, 6, 18, 12, 5,\n    5, 1, 2, 16, 9, 3,\n    7, 3, 5, 14, 7, 3,\n    19, 17, 15, 13, 10, 4,\n    13, 5, 8, 11, 5, 1,\n    12, 4, 4, 1, 1, 0\n];\n\nTables.t9HB = [\n    7, 5, 9, 14, 15, 7,\n    6, 4, 5, 5, 6, 7,\n    7, 6, 8, 8, 8, 5,\n    15, 6, 9, 10, 5, 1,\n    11, 7, 9, 6, 4, 1,\n    14, 4, 6, 2, 6, 0\n];\n\nTables.t10HB = [\n    1, 2, 10, 23, 35, 30, 12, 17,\n    3, 3, 8, 12, 18, 21, 12, 7,\n    11, 9, 15, 21, 32, 40, 19, 6,\n    14, 13, 22, 34, 46, 23, 18, 7,\n    20, 19, 33, 47, 27, 22, 9, 3,\n    31, 22, 41, 26, 21, 20, 5, 3,\n    14, 13, 10, 11, 16, 6, 5, 1,\n    9, 8, 7, 8, 4, 4, 2, 0\n];\n\nTables.t11HB = [\n    3, 4, 10, 24, 34, 33, 21, 15,\n    5, 3, 4, 10, 32, 17, 11, 10,\n    11, 7, 13, 18, 30, 31, 20, 5,\n    25, 11, 19, 59, 27, 18, 12, 5,\n    35, 33, 31, 58, 30, 16, 7, 5,\n    28, 26, 32, 19, 17, 15, 8, 14,\n    14, 12, 9, 13, 14, 9, 4, 1,\n    11, 4, 6, 6, 6, 3, 2, 0\n];\n\nTables.t12HB = [\n    9, 6, 16, 33, 41, 39, 38, 26,\n    7, 5, 6, 9, 23, 16, 26, 11,\n    17, 7, 11, 14, 21, 30, 10, 7,\n    17, 10, 15, 12, 18, 28, 14, 5,\n    32, 13, 22, 19, 18, 16, 9, 5,\n    40, 17, 31, 29, 17, 13, 4, 2,\n    27, 12, 11, 15, 10, 7, 4, 1,\n    27, 12, 8, 12, 6, 3, 1, 0\n];\n\nTables.t13HB = [\n    1, 5, 14, 21, 34, 51, 46, 71, 42, 52, 68, 52, 67, 44, 43, 19,\n    3, 4, 12, 19, 31, 26, 44, 33, 31, 24, 32, 24, 31, 35, 22, 14,\n    15, 13, 23, 36, 59, 49, 77, 65, 29, 40, 30, 40, 27, 33, 42, 16,\n    22, 20, 37, 61, 56, 79, 73, 64, 43, 76, 56, 37, 26, 31, 25, 14,\n    35, 16, 60, 57, 97, 75, 114, 91, 54, 73, 55, 41, 48, 53, 23, 24,\n    58, 27, 50, 96, 76, 70, 93, 84, 77, 58, 79, 29, 74, 49, 41, 17,\n    47, 45, 78, 74, 115, 94, 90, 79, 69, 83, 71, 50, 59, 38, 36, 15,\n    72, 34, 56, 95, 92, 85, 91, 90, 86, 73, 77, 65, 51, 44, 43, 42,\n    43, 20, 30, 44, 55, 78, 72, 87, 78, 61, 46, 54, 37, 30, 20, 16,\n    53, 25, 41, 37, 44, 59, 54, 81, 66, 76, 57, 54, 37, 18, 39, 11,\n    35, 33, 31, 57, 42, 82, 72, 80, 47, 58, 55, 21, 22, 26, 38, 22,\n    53, 25, 23, 38, 70, 60, 51, 36, 55, 26, 34, 23, 27, 14, 9, 7,\n    34, 32, 28, 39, 49, 75, 30, 52, 48, 40, 52, 28, 18, 17, 9, 5,\n    45, 21, 34, 64, 56, 50, 49, 45, 31, 19, 12, 15, 10, 7, 6, 3,\n    48, 23, 20, 39, 36, 35, 53, 21, 16, 23, 13, 10, 6, 1, 4, 2,\n    16, 15, 17, 27, 25, 20, 29, 11, 17, 12, 16, 8, 1, 1, 0, 1\n];\n\nTables.t15HB = [\n    7, 12, 18, 53, 47, 76, 124, 108, 89, 123, 108, 119, 107, 81, 122, 63,\n    13, 5, 16, 27, 46, 36, 61, 51, 42, 70, 52, 83, 65, 41, 59, 36,\n    19, 17, 15, 24, 41, 34, 59, 48, 40, 64, 50, 78, 62, 80, 56, 33,\n    29, 28, 25, 43, 39, 63, 55, 93, 76, 59, 93, 72, 54, 75, 50, 29,\n    52, 22, 42, 40, 67, 57, 95, 79, 72, 57, 89, 69, 49, 66, 46, 27,\n    77, 37, 35, 66, 58, 52, 91, 74, 62, 48, 79, 63, 90, 62, 40, 38,\n    125, 32, 60, 56, 50, 92, 78, 65, 55, 87, 71, 51, 73, 51, 70, 30,\n    109, 53, 49, 94, 88, 75, 66, 122, 91, 73, 56, 42, 64, 44, 21, 25,\n    90, 43, 41, 77, 73, 63, 56, 92, 77, 66, 47, 67, 48, 53, 36, 20,\n    71, 34, 67, 60, 58, 49, 88, 76, 67, 106, 71, 54, 38, 39, 23, 15,\n    109, 53, 51, 47, 90, 82, 58, 57, 48, 72, 57, 41, 23, 27, 62, 9,\n    86, 42, 40, 37, 70, 64, 52, 43, 70, 55, 42, 25, 29, 18, 11, 11,\n    118, 68, 30, 55, 50, 46, 74, 65, 49, 39, 24, 16, 22, 13, 14, 7,\n    91, 44, 39, 38, 34, 63, 52, 45, 31, 52, 28, 19, 14, 8, 9, 3,\n    123, 60, 58, 53, 47, 43, 32, 22, 37, 24, 17, 12, 15, 10, 2, 1,\n    71, 37, 34, 30, 28, 20, 17, 26, 21, 16, 10, 6, 8, 6, 2, 0\n];\n\nTables.t16HB = [\n    1, 5, 14, 44, 74, 63, 110, 93, 172, 149, 138, 242, 225, 195, 376, 17,\n    3, 4, 12, 20, 35, 62, 53, 47, 83, 75, 68, 119, 201, 107, 207, 9,\n    15, 13, 23, 38, 67, 58, 103, 90, 161, 72, 127, 117, 110, 209, 206, 16,\n    45, 21, 39, 69, 64, 114, 99, 87, 158, 140, 252, 212, 199, 387, 365, 26,\n    75, 36, 68, 65, 115, 101, 179, 164, 155, 264, 246, 226, 395, 382, 362, 9,\n    66, 30, 59, 56, 102, 185, 173, 265, 142, 253, 232, 400, 388, 378, 445, 16,\n    111, 54, 52, 100, 184, 178, 160, 133, 257, 244, 228, 217, 385, 366, 715, 10,\n    98, 48, 91, 88, 165, 157, 148, 261, 248, 407, 397, 372, 380, 889, 884, 8,\n    85, 84, 81, 159, 156, 143, 260, 249, 427, 401, 392, 383, 727, 713, 708, 7,\n    154, 76, 73, 141, 131, 256, 245, 426, 406, 394, 384, 735, 359, 710, 352, 11,\n    139, 129, 67, 125, 247, 233, 229, 219, 393, 743, 737, 720, 885, 882, 439, 4,\n    243, 120, 118, 115, 227, 223, 396, 746, 742, 736, 721, 712, 706, 223, 436, 6,\n    202, 224, 222, 218, 216, 389, 386, 381, 364, 888, 443, 707, 440, 437, 1728, 4,\n    747, 211, 210, 208, 370, 379, 734, 723, 714, 1735, 883, 877, 876, 3459, 865, 2,\n    377, 369, 102, 187, 726, 722, 358, 711, 709, 866, 1734, 871, 3458, 870, 434, 0,\n    12, 10, 7, 11, 10, 17, 11, 9, 13, 12, 10, 7, 5, 3, 1, 3\n];\n\nTables.t24HB = [\n    15, 13, 46, 80, 146, 262, 248, 434, 426, 669, 653, 649, 621, 517, 1032, 88,\n    14, 12, 21, 38, 71, 130, 122, 216, 209, 198, 327, 345, 319, 297, 279, 42,\n    47, 22, 41, 74, 68, 128, 120, 221, 207, 194, 182, 340, 315, 295, 541, 18,\n    81, 39, 75, 70, 134, 125, 116, 220, 204, 190, 178, 325, 311, 293, 271, 16,\n    147, 72, 69, 135, 127, 118, 112, 210, 200, 188, 352, 323, 306, 285, 540, 14,\n    263, 66, 129, 126, 119, 114, 214, 202, 192, 180, 341, 317, 301, 281, 262, 12,\n    249, 123, 121, 117, 113, 215, 206, 195, 185, 347, 330, 308, 291, 272, 520, 10,\n    435, 115, 111, 109, 211, 203, 196, 187, 353, 332, 313, 298, 283, 531, 381, 17,\n    427, 212, 208, 205, 201, 193, 186, 177, 169, 320, 303, 286, 268, 514, 377, 16,\n    335, 199, 197, 191, 189, 181, 174, 333, 321, 305, 289, 275, 521, 379, 371, 11,\n    668, 184, 183, 179, 175, 344, 331, 314, 304, 290, 277, 530, 383, 373, 366, 10,\n    652, 346, 171, 168, 164, 318, 309, 299, 287, 276, 263, 513, 375, 368, 362, 6,\n    648, 322, 316, 312, 307, 302, 292, 284, 269, 261, 512, 376, 370, 364, 359, 4,\n    620, 300, 296, 294, 288, 282, 273, 266, 515, 380, 374, 369, 365, 361, 357, 2,\n    1033, 280, 278, 274, 267, 264, 259, 382, 378, 372, 367, 363, 360, 358, 356, 0,\n    43, 20, 19, 17, 15, 13, 11, 9, 7, 6, 4, 7, 5, 3, 1, 3\n];\n\nTables.t32HB = [\n    1 << 0, 5 << 1, 4 << 1, 5 << 2, 6 << 1, 5 << 2, 4 << 2, 4 << 3,\n    7 << 1, 3 << 2, 6 << 2, 0 << 3, 7 << 2, 2 << 3, 3 << 3, 1 << 4\n];\n\nTables.t33HB = [\n    15 << 0, 14 << 1, 13 << 1, 12 << 2, 11 << 1, 10 << 2, 9 << 2, 8 << 3,\n    7 << 1, 6 << 2, 5 << 2, 4 << 3, 3 << 2, 2 << 3, 1 << 3, 0 << 4\n];\n\nTables.t1l = [\n    1, 4,\n    3, 5\n];\n\nTables.t2l = [\n    1, 4, 7,\n    4, 5, 7,\n    6, 7, 8\n];\n\nTables.t3l = [\n    2, 3, 7,\n    4, 4, 7,\n    6, 7, 8\n];\n\nTables.t5l = [\n    1, 4, 7, 8,\n    4, 5, 8, 9,\n    7, 8, 9, 10,\n    8, 8, 9, 10\n];\n\nTables.t6l = [\n    3, 4, 6, 8,\n    4, 4, 6, 7,\n    5, 6, 7, 8,\n    7, 7, 8, 9\n];\n\nTables.t7l = [\n    1, 4, 7, 9, 9, 10,\n    4, 6, 8, 9, 9, 10,\n    7, 7, 9, 10, 10, 11,\n    8, 9, 10, 11, 11, 11,\n    8, 9, 10, 11, 11, 12,\n    9, 10, 11, 12, 12, 12\n];\n\nTables.t8l = [\n    2, 4, 7, 9, 9, 10,\n    4, 4, 6, 10, 10, 10,\n    7, 6, 8, 10, 10, 11,\n    9, 10, 10, 11, 11, 12,\n    9, 9, 10, 11, 12, 12,\n    10, 10, 11, 11, 13, 13\n];\n\nTables.t9l = [\n    3, 4, 6, 7, 9, 10,\n    4, 5, 6, 7, 8, 10,\n    5, 6, 7, 8, 9, 10,\n    7, 7, 8, 9, 9, 10,\n    8, 8, 9, 9, 10, 11,\n    9, 9, 10, 10, 11, 11\n];\n\nTables.t10l = [\n    1, 4, 7, 9, 10, 10, 10, 11,\n    4, 6, 8, 9, 10, 11, 10, 10,\n    7, 8, 9, 10, 11, 12, 11, 11,\n    8, 9, 10, 11, 12, 12, 11, 12,\n    9, 10, 11, 12, 12, 12, 12, 12,\n    10, 11, 12, 12, 13, 13, 12, 13,\n    9, 10, 11, 12, 12, 12, 13, 13,\n    10, 10, 11, 12, 12, 13, 13, 13\n];\n\nTables.t11l = [\n    2, 4, 6, 8, 9, 10, 9, 10,\n    4, 5, 6, 8, 10, 10, 9, 10,\n    6, 7, 8, 9, 10, 11, 10, 10,\n    8, 8, 9, 11, 10, 12, 10, 11,\n    9, 10, 10, 11, 11, 12, 11, 12,\n    9, 10, 11, 12, 12, 13, 12, 13,\n    9, 9, 9, 10, 11, 12, 12, 12,\n    9, 9, 10, 11, 12, 12, 12, 12\n];\n\nTables.t12l = [\n    4, 4, 6, 8, 9, 10, 10, 10,\n    4, 5, 6, 7, 9, 9, 10, 10,\n    6, 6, 7, 8, 9, 10, 9, 10,\n    7, 7, 8, 8, 9, 10, 10, 10,\n    8, 8, 9, 9, 10, 10, 10, 11,\n    9, 9, 10, 10, 10, 11, 10, 11,\n    9, 9, 9, 10, 10, 11, 11, 12,\n    10, 10, 10, 11, 11, 11, 11, 12\n];\n\nTables.t13l = [\n    1, 5, 7, 8, 9, 10, 10, 11, 10, 11, 12, 12, 13, 13, 14, 14,\n    4, 6, 8, 9, 10, 10, 11, 11, 11, 11, 12, 12, 13, 14, 14, 14,\n    7, 8, 9, 10, 11, 11, 12, 12, 11, 12, 12, 13, 13, 14, 15, 15,\n    8, 9, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 15, 15,\n    9, 9, 11, 11, 12, 12, 13, 13, 12, 13, 13, 14, 14, 15, 15, 16,\n    10, 10, 11, 12, 12, 12, 13, 13, 13, 13, 14, 13, 15, 15, 16, 16,\n    10, 11, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 16, 16,\n    11, 11, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 16, 18, 18,\n    10, 10, 11, 12, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 17, 17,\n    11, 11, 12, 12, 13, 13, 13, 15, 14, 15, 15, 16, 16, 16, 18, 17,\n    11, 12, 12, 13, 13, 14, 14, 15, 14, 15, 16, 15, 16, 17, 18, 19,\n    12, 12, 12, 13, 14, 14, 14, 14, 15, 15, 15, 16, 17, 17, 17, 18,\n    12, 13, 13, 14, 14, 15, 14, 15, 16, 16, 17, 17, 17, 18, 18, 18,\n    13, 13, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 17, 18, 18,\n    14, 14, 14, 15, 15, 15, 17, 16, 16, 19, 17, 17, 17, 19, 18, 18,\n    13, 14, 15, 16, 16, 16, 17, 16, 17, 17, 18, 18, 21, 20, 21, 18\n];\n\nTables.t15l = [\n    3, 5, 6, 8, 8, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 14,\n    5, 5, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13,\n    6, 7, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 13, 13,\n    7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13,\n    8, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13,\n    9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 13, 13, 13, 14,\n    10, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 14, 14,\n    10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 14,\n    10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 14, 14, 14,\n    10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14,\n    11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 15, 14,\n    11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15,\n    12, 12, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 15, 15,\n    12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15,\n    13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 14, 15,\n    13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15\n];\n\nTables.t16_5l = [\n    1, 5, 7, 9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 11,\n    4, 6, 8, 9, 10, 11, 11, 11, 12, 12, 12, 13, 14, 13, 14, 11,\n    7, 8, 9, 10, 11, 11, 12, 12, 13, 12, 13, 13, 13, 14, 14, 12,\n    9, 9, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 13,\n    10, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 12,\n    10, 10, 11, 11, 12, 13, 13, 14, 13, 14, 14, 15, 15, 15, 16, 13,\n    11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 13,\n    11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 17, 17, 13,\n    11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 13,\n    12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 15, 16, 15, 14,\n    12, 13, 12, 13, 14, 14, 14, 14, 15, 16, 16, 16, 17, 17, 16, 13,\n    13, 13, 13, 13, 14, 14, 15, 16, 16, 16, 16, 16, 16, 15, 16, 14,\n    13, 14, 14, 14, 14, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 14,\n    15, 14, 14, 14, 15, 15, 16, 16, 16, 18, 17, 17, 17, 19, 17, 14,\n    14, 15, 13, 14, 16, 16, 15, 16, 16, 17, 18, 17, 19, 17, 16, 14,\n    11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 12\n];\n\nTables.t16l = [\n    1, 5, 7, 9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 10,\n    4, 6, 8, 9, 10, 11, 11, 11, 12, 12, 12, 13, 14, 13, 14, 10,\n    7, 8, 9, 10, 11, 11, 12, 12, 13, 12, 13, 13, 13, 14, 14, 11,\n    9, 9, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 12,\n    10, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 11,\n    10, 10, 11, 11, 12, 13, 13, 14, 13, 14, 14, 15, 15, 15, 16, 12,\n    11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 12,\n    11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 17, 17, 12,\n    11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 12,\n    12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 15, 16, 15, 13,\n    12, 13, 12, 13, 14, 14, 14, 14, 15, 16, 16, 16, 17, 17, 16, 12,\n    13, 13, 13, 13, 14, 14, 15, 16, 16, 16, 16, 16, 16, 15, 16, 13,\n    13, 14, 14, 14, 14, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 13,\n    15, 14, 14, 14, 15, 15, 16, 16, 16, 18, 17, 17, 17, 19, 17, 13,\n    14, 15, 13, 14, 16, 16, 15, 16, 16, 17, 18, 17, 19, 17, 16, 13,\n    10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 10\n];\n\nTables.t24l = [\n    4, 5, 7, 8, 9, 10, 10, 11, 11, 12, 12, 12, 12, 12, 13, 10,\n    5, 6, 7, 8, 9, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 10,\n    7, 7, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 9,\n    8, 8, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 9,\n    9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 13, 9,\n    10, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 9,\n    10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 9,\n    11, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 10,\n    11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 10,\n    11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 10,\n    12, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 10,\n    12, 12, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 10,\n    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 10,\n    12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 10,\n    13, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 10,\n    9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 6\n];\n\nTables.t32l = [\n    1 + 0, 4 + 1, 4 + 1, 5 + 2, 4 + 1, 6 + 2, 5 + 2, 6 + 3,\n    4 + 1, 5 + 2, 5 + 2, 6 + 3, 5 + 2, 6 + 3, 6 + 3, 6 + 4\n];\n\nTables.t33l = [\n    4 + 0, 4 + 1, 4 + 1, 4 + 2, 4 + 1, 4 + 2, 4 + 2, 4 + 3,\n    4 + 1, 4 + 2, 4 + 2, 4 + 3, 4 + 2, 4 + 3, 4 + 3, 4 + 4\n];\n\nTables.ht = [\n    /* xlen, linmax, table, hlen */\n    new HuffCodeTab(0, 0, null, null),\n    new HuffCodeTab(2, 0, Tables.t1HB, Tables.t1l),\n    new HuffCodeTab(3, 0, Tables.t2HB, Tables.t2l),\n    new HuffCodeTab(3, 0, Tables.t3HB, Tables.t3l),\n    new HuffCodeTab(0, 0, null, null), /* Apparently not used */\n    new HuffCodeTab(4, 0, Tables.t5HB, Tables.t5l),\n    new HuffCodeTab(4, 0, Tables.t6HB, Tables.t6l),\n    new HuffCodeTab(6, 0, Tables.t7HB, Tables.t7l),\n    new HuffCodeTab(6, 0, Tables.t8HB, Tables.t8l),\n    new HuffCodeTab(6, 0, Tables.t9HB, Tables.t9l),\n    new HuffCodeTab(8, 0, Tables.t10HB, Tables.t10l),\n    new HuffCodeTab(8, 0, Tables.t11HB, Tables.t11l),\n    new HuffCodeTab(8, 0, Tables.t12HB, Tables.t12l),\n    new HuffCodeTab(16, 0, Tables.t13HB, Tables.t13l),\n    new HuffCodeTab(0, 0, null, Tables.t16_5l), /* Apparently not used */\n    new HuffCodeTab(16, 0, Tables.t15HB, Tables.t15l),\n\n    new HuffCodeTab(1, 1, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(2, 3, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(3, 7, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(4, 15, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(6, 63, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(8, 255, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(10, 1023, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(13, 8191, Tables.t16HB, Tables.t16l),\n\n    new HuffCodeTab(4, 15, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(5, 31, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(6, 63, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(7, 127, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(8, 255, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(9, 511, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(11, 2047, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(13, 8191, Tables.t24HB, Tables.t24l),\n\n    new HuffCodeTab(0, 0, Tables.t32HB, Tables.t32l),\n    new HuffCodeTab(0, 0, Tables.t33HB, Tables.t33l),\n];\n\n/**\n * <CODE>\n *  for (i = 0; i < 16*16; i++) [\n *      largetbl[i] = ((ht[16].hlen[i]) << 16) + ht[24].hlen[i];\n *  ]\n * </CODE>\n *\n */\nTables.largetbl = [\n    0x010004, 0x050005, 0x070007, 0x090008, 0x0a0009, 0x0a000a, 0x0b000a, 0x0b000b,\n    0x0c000b, 0x0c000c, 0x0c000c, 0x0d000c, 0x0d000c, 0x0d000c, 0x0e000d, 0x0a000a,\n    0x040005, 0x060006, 0x080007, 0x090008, 0x0a0009, 0x0b000a, 0x0b000a, 0x0b000b,\n    0x0c000b, 0x0c000b, 0x0c000c, 0x0d000c, 0x0e000c, 0x0d000c, 0x0e000c, 0x0a000a,\n    0x070007, 0x080007, 0x090008, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000b,\n    0x0d000b, 0x0c000b, 0x0d000b, 0x0d000c, 0x0d000c, 0x0e000c, 0x0e000d, 0x0b0009,\n    0x090008, 0x090008, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000a, 0x0c000b,\n    0x0d000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0c0009,\n    0x0a0009, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000a, 0x0d000a, 0x0d000b,\n    0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000d, 0x0b0009,\n    0x0a000a, 0x0a0009, 0x0b000a, 0x0b000a, 0x0c000a, 0x0d000a, 0x0d000b, 0x0e000b,\n    0x0d000b, 0x0e000b, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x0c0009,\n    0x0b000a, 0x0b000a, 0x0b000a, 0x0c000a, 0x0d000a, 0x0d000b, 0x0d000b, 0x0d000b,\n    0x0e000b, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x10000d, 0x0c0009,\n    0x0b000b, 0x0b000a, 0x0c000a, 0x0c000a, 0x0d000b, 0x0d000b, 0x0d000b, 0x0e000b,\n    0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x11000d, 0x11000d, 0x0c000a,\n    0x0b000b, 0x0c000b, 0x0c000b, 0x0d000b, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000b,\n    0x0f000b, 0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x10000d, 0x10000d, 0x0c000a,\n    0x0c000b, 0x0c000b, 0x0c000b, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000b, 0x0f000c,\n    0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x0f000d, 0x10000d, 0x0f000d, 0x0d000a,\n    0x0c000c, 0x0d000b, 0x0c000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0e000c,\n    0x0f000c, 0x10000c, 0x10000c, 0x10000d, 0x11000d, 0x11000d, 0x10000d, 0x0c000a,\n    0x0d000c, 0x0d000c, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0f000c, 0x10000c,\n    0x10000c, 0x10000c, 0x10000c, 0x10000d, 0x10000d, 0x0f000d, 0x10000d, 0x0d000a,\n    0x0d000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c,\n    0x0f000c, 0x11000c, 0x10000d, 0x10000d, 0x10000d, 0x10000d, 0x12000d, 0x0d000a,\n    0x0f000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x10000c, 0x10000c,\n    0x10000d, 0x12000d, 0x11000d, 0x11000d, 0x11000d, 0x13000d, 0x11000d, 0x0d000a,\n    0x0e000d, 0x0f000c, 0x0d000c, 0x0e000c, 0x10000c, 0x10000c, 0x0f000c, 0x10000d,\n    0x10000d, 0x11000d, 0x12000d, 0x11000d, 0x13000d, 0x11000d, 0x10000d, 0x0d000a,\n    0x0a0009, 0x0a0009, 0x0a0009, 0x0b0009, 0x0b0009, 0x0c0009, 0x0c0009, 0x0c0009,\n    0x0d0009, 0x0d0009, 0x0d0009, 0x0d000a, 0x0d000a, 0x0d000a, 0x0d000a, 0x0a0006\n];\n/**\n * <CODE>\n *  for (i = 0; i < 3*3; i++) [\n *      table23[i] = ((ht[2].hlen[i]) << 16) + ht[3].hlen[i];\n *  ]\n * </CODE>\n *\n */\nTables.table23 = [\n    0x010002, 0x040003, 0x070007,\n    0x040004, 0x050004, 0x070007,\n    0x060006, 0x070007, 0x080008\n];\n\n/**\n * <CODE>\n *  for (i = 0; i < 4*4; i++) [\n *       table56[i] = ((ht[5].hlen[i]) << 16) + ht[6].hlen[i];\n *   ]\n * </CODE>\n *\n */\nTables.table56 = [\n    0x010003, 0x040004, 0x070006, 0x080008, 0x040004, 0x050004, 0x080006, 0x090007,\n    0x070005, 0x080006, 0x090007, 0x0a0008, 0x080007, 0x080007, 0x090008, 0x0a0009\n];\n\nTables.bitrate_table = [\n    [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, -1], /* MPEG 2 */\n    [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1], /* MPEG 1 */\n    [0, 8, 16, 24, 32, 40, 48, 56, 64, -1, -1, -1, -1, -1, -1, -1], /* MPEG 2.5 */\n];\n\n/**\n * MPEG 2, MPEG 1, MPEG 2.5.\n */\nTables.samplerate_table = [\n    [22050, 24000, 16000, -1],\n    [44100, 48000, 32000, -1],\n    [11025, 12000, 8000, -1],\n];\n\n/**\n * This is the scfsi_band table from 2.4.2.7 of the IS.\n */\nTables.scfsi_band = [0, 6, 11, 16, 21];\n\nmodule.exports = Tables;\n","var Encoder = require('./Encoder.js');\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nfunction III_psy_xmin() {\n    this.l = new_float(Encoder.SBMAX_l);\n    this.s = new_float_n([Encoder.SBMAX_s, 3]);\n\n    var self = this;\n    this.assign = function (iii_psy_xmin) {\n        System.arraycopy(iii_psy_xmin.l, 0, self.l, 0, Encoder.SBMAX_l);\n        for (var i = 0; i < Encoder.SBMAX_s; i++) {\n            for (var j = 0; j < 3; j++) {\n                self.s[i][j] = iii_psy_xmin.s[i][j];\n            }\n        }\n    }\n}\n\nmodule.exports = III_psy_xmin;\n","//package mp3;\n\n/* MPEG modes */\nfunction MPEGMode(ordinal) {\n    var _ordinal = ordinal;\n    this.ordinal = function () {\n        return _ordinal;\n    }\n}\n\nMPEGMode.STEREO = new MPEGMode(0);\nMPEGMode.JOINT_STEREO = new MPEGMode(1);\nMPEGMode.DUAL_CHANNEL = new MPEGMode(2);\nMPEGMode.MONO = new MPEGMode(3);\nMPEGMode.NOT_SET = new MPEGMode(4);\n\nmodule.exports = MPEGMode;\n","//package mp3;\n\n/**\n * Layer III side information.\n *\n * @author Ken\n *\n */\n\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\n\nfunction ScaleFac(arrL, arrS, arr21, arr12) {\n\n    this.l = new_int(1 + Encoder.SBMAX_l);\n    this.s = new_int(1 + Encoder.SBMAX_s);\n    this.psfb21 = new_int(1 + Encoder.PSFB21);\n    this.psfb12 = new_int(1 + Encoder.PSFB12);\n    var l = this.l;\n    var s = this.s;\n\n    if (arguments.length == 4) {\n        //public ScaleFac(final int[] arrL, final int[] arrS, final int[] arr21,\n        //    final int[] arr12) {\n        this.arrL = arguments[0];\n        this.arrS = arguments[1];\n        this.arr21 = arguments[2];\n        this.arr12 = arguments[3];\n\n        System.arraycopy(this.arrL, 0, l, 0, Math.min(this.arrL.length, this.l.length));\n        System.arraycopy(this.arrS, 0, s, 0, Math.min(this.arrS.length, this.s.length));\n        System.arraycopy(this.arr21, 0, this.psfb21, 0, Math.min(this.arr21.length, this.psfb21.length));\n        System.arraycopy(this.arr12, 0, this.psfb12, 0, Math.min(this.arr12.length, this.psfb12.length));\n    }\n}\n\nmodule.exports = ScaleFac;\n","/*\n *  ReplayGainAnalysis - analyzes input samples and give the recommended dB change\n *  Copyright (C) 2001 David Robinson and Glen Sawyer\n *  Improvements and optimizations added by Frank Klemm, and by Marcel Muller \n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n *\n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, write to the Free Software\n *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n *  concept and filter values by David Robinson (David@Robinson.org)\n *    -- blame him if you think the idea is flawed\n *  original coding by Glen Sawyer (mp3gain@hotmail.com)\n *    -- blame him if you think this runs too slowly, or the coding is otherwise flawed\n *\n *  lots of code improvements by Frank Klemm ( http://www.uni-jena.de/~pfk/mpp/ )\n *    -- credit him for all the _good_ programming ;)\n *\n *\n *  For an explanation of the concepts and the basic algorithms involved, go to:\n *    http://www.replaygain.org/\n */\n\n/*\n *  Here's the deal. Call\n *\n *    InitGainAnalysis ( long samplefreq );\n *\n *  to initialize everything. Call\n *\n *    AnalyzeSamples ( var Float_t*  left_samples,\n *                     var Float_t*  right_samples,\n *                     size_t          num_samples,\n *                     int             num_channels );\n *\n *  as many times as you want, with as many or as few samples as you want.\n *  If mono, pass the sample buffer in through left_samples, leave\n *  right_samples NULL, and make sure num_channels = 1.\n *\n *    GetTitleGain()\n *\n *  will return the recommended dB level change for all samples analyzed\n *  SINCE THE LAST TIME you called GetTitleGain() OR InitGainAnalysis().\n *\n *    GetAlbumGain()\n *\n *  will return the recommended dB level change for all samples analyzed\n *  since InitGainAnalysis() was called and finalized with GetTitleGain().\n *\n *  Pseudo-code to process an album:\n *\n *    Float_t       l_samples [4096];\n *    Float_t       r_samples [4096];\n *    size_t        num_samples;\n *    unsigned int  num_songs;\n *    unsigned int  i;\n *\n *    InitGainAnalysis ( 44100 );\n *    for ( i = 1; i <= num_songs; i++ ) {\n *        while ( ( num_samples = getSongSamples ( song[i], left_samples, right_samples ) ) > 0 )\n *            AnalyzeSamples ( left_samples, right_samples, num_samples, 2 );\n *        fprintf (\"Recommended dB change for song %2d: %+6.2 dB\\n\", i, GetTitleGain() );\n *    }\n *    fprintf (\"Recommended dB change for whole album: %+6.2 dB\\n\", GetAlbumGain() );\n */\n\n/*\n *  So here's the main source of potential code confusion:\n *\n *  The filters applied to the incoming samples are IIR filters,\n *  meaning they rely on up to <filter order> number of previous samples\n *  AND up to <filter order> number of previous filtered samples.\n *\n *  I set up the AnalyzeSamples routine to minimize memory usage and interface\n *  complexity. The speed isn't compromised too much (I don't think), but the\n *  internal complexity is higher than it should be for such a relatively\n *  simple routine.\n *\n *  Optimization/clarity suggestions are welcome.\n */\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\n/**\n * Table entries per dB\n */\nGainAnalysis.STEPS_per_dB = 100.;\n/**\n * Table entries for 0...MAX_dB (normal max. values are 70...80 dB)\n */\nGainAnalysis.MAX_dB = 120.;\nGainAnalysis.GAIN_NOT_ENOUGH_SAMPLES = -24601;\nGainAnalysis.GAIN_ANALYSIS_ERROR = 0;\nGainAnalysis.GAIN_ANALYSIS_OK = 1;\nGainAnalysis.INIT_GAIN_ANALYSIS_ERROR = 0;\nGainAnalysis.INIT_GAIN_ANALYSIS_OK = 1;\n\nGainAnalysis.YULE_ORDER = 10;\nGainAnalysis.MAX_ORDER = GainAnalysis.YULE_ORDER;\n\nGainAnalysis.MAX_SAMP_FREQ = 48000;\nGainAnalysis.RMS_WINDOW_TIME_NUMERATOR = 1;\nGainAnalysis.RMS_WINDOW_TIME_DENOMINATOR = 20;\nGainAnalysis.MAX_SAMPLES_PER_WINDOW = ((GainAnalysis.MAX_SAMP_FREQ * GainAnalysis.RMS_WINDOW_TIME_NUMERATOR) / GainAnalysis.RMS_WINDOW_TIME_DENOMINATOR + 1);\n\nfunction GainAnalysis() {\n    /**\n     * calibration value for 89dB\n     */\n    var PINK_REF = 64.82;\n\n    var YULE_ORDER = GainAnalysis.YULE_ORDER;\n    /**\n     * percentile which is louder than the proposed level\n     */\n    var RMS_PERCENTILE = 0.95;\n    /**\n     * maximum allowed sample frequency [Hz]\n     */\n    var MAX_SAMP_FREQ = GainAnalysis.MAX_SAMP_FREQ;\n    var RMS_WINDOW_TIME_NUMERATOR = GainAnalysis.RMS_WINDOW_TIME_NUMERATOR;\n    /**\n     * numerator / denominator = time slice size [s]\n     */\n    var RMS_WINDOW_TIME_DENOMINATOR = GainAnalysis.RMS_WINDOW_TIME_DENOMINATOR;\n    /**\n     * max. Samples per Time slice\n     */\n    var MAX_SAMPLES_PER_WINDOW = GainAnalysis.MAX_SAMPLES_PER_WINDOW;\n\n\n    var ABYule = [\n        [0.03857599435200, -3.84664617118067, -0.02160367184185,\n            7.81501653005538, -0.00123395316851, -11.34170355132042,\n            -0.00009291677959, 13.05504219327545, -0.01655260341619,\n            -12.28759895145294, 0.02161526843274, 9.48293806319790,\n            -0.02074045215285, -5.87257861775999, 0.00594298065125,\n            2.75465861874613, 0.00306428023191, -0.86984376593551,\n            0.00012025322027, 0.13919314567432, 0.00288463683916],\n        [0.05418656406430, -3.47845948550071, -0.02911007808948,\n            6.36317777566148, -0.00848709379851, -8.54751527471874,\n            -0.00851165645469, 9.47693607801280, -0.00834990904936,\n            -8.81498681370155, 0.02245293253339, 6.85401540936998,\n            -0.02596338512915, -4.39470996079559, 0.01624864962975,\n            2.19611684890774, -0.00240879051584, -0.75104302451432,\n            0.00674613682247, 0.13149317958808, -0.00187763777362],\n        [0.15457299681924, -2.37898834973084, -0.09331049056315,\n            2.84868151156327, -0.06247880153653, -2.64577170229825,\n            0.02163541888798, 2.23697657451713, -0.05588393329856,\n            -1.67148153367602, 0.04781476674921, 1.00595954808547,\n            0.00222312597743, -0.45953458054983, 0.03174092540049,\n            0.16378164858596, -0.01390589421898, -0.05032077717131,\n            0.00651420667831, 0.02347897407020, -0.00881362733839],\n        [0.30296907319327, -1.61273165137247, -0.22613988682123,\n            1.07977492259970, -0.08587323730772, -0.25656257754070,\n            0.03282930172664, -0.16276719120440, -0.00915702933434,\n            -0.22638893773906, -0.02364141202522, 0.39120800788284,\n            -0.00584456039913, -0.22138138954925, 0.06276101321749,\n            0.04500235387352, -0.00000828086748, 0.02005851806501,\n            0.00205861885564, 0.00302439095741, -0.02950134983287],\n        [0.33642304856132, -1.49858979367799, -0.25572241425570,\n            0.87350271418188, -0.11828570177555, 0.12205022308084,\n            0.11921148675203, -0.80774944671438, -0.07834489609479,\n            0.47854794562326, -0.00469977914380, -0.12453458140019,\n            -0.00589500224440, -0.04067510197014, 0.05724228140351,\n            0.08333755284107, 0.00832043980773, -0.04237348025746,\n            -0.01635381384540, 0.02977207319925, -0.01760176568150],\n        [0.44915256608450, -0.62820619233671, -0.14351757464547,\n            0.29661783706366, -0.22784394429749, -0.37256372942400,\n            -0.01419140100551, 0.00213767857124, 0.04078262797139,\n            -0.42029820170918, -0.12398163381748, 0.22199650564824,\n            0.04097565135648, 0.00613424350682, 0.10478503600251,\n            0.06747620744683, -0.01863887810927, 0.05784820375801,\n            -0.03193428438915, 0.03222754072173, 0.00541907748707],\n        [0.56619470757641, -1.04800335126349, -0.75464456939302,\n            0.29156311971249, 0.16242137742230, -0.26806001042947,\n            0.16744243493672, 0.00819999645858, -0.18901604199609,\n            0.45054734505008, 0.30931782841830, -0.33032403314006,\n            -0.27562961986224, 0.06739368333110, 0.00647310677246,\n            -0.04784254229033, 0.08647503780351, 0.01639907836189,\n            -0.03788984554840, 0.01807364323573, -0.00588215443421],\n        [0.58100494960553, -0.51035327095184, -0.53174909058578,\n            -0.31863563325245, -0.14289799034253, -0.20256413484477,\n            0.17520704835522, 0.14728154134330, 0.02377945217615,\n            0.38952639978999, 0.15558449135573, -0.23313271880868,\n            -0.25344790059353, -0.05246019024463, 0.01628462406333,\n            -0.02505961724053, 0.06920467763959, 0.02442357316099,\n            -0.03721611395801, 0.01818801111503, -0.00749618797172],\n        [0.53648789255105, -0.25049871956020, -0.42163034350696,\n            -0.43193942311114, -0.00275953611929, -0.03424681017675,\n            0.04267842219415, -0.04678328784242, -0.10214864179676,\n            0.26408300200955, 0.14590772289388, 0.15113130533216,\n            -0.02459864859345, -0.17556493366449, -0.11202315195388,\n            -0.18823009262115, -0.04060034127000, 0.05477720428674,\n            0.04788665548180, 0.04704409688120, -0.02217936801134]];\n\n    var ABButter = [\n        [0.98621192462708, -1.97223372919527, -1.97242384925416,\n            0.97261396931306, 0.98621192462708],\n        [0.98500175787242, -1.96977855582618, -1.97000351574484,\n            0.97022847566350, 0.98500175787242],\n        [0.97938932735214, -1.95835380975398, -1.95877865470428,\n            0.95920349965459, 0.97938932735214],\n        [0.97531843204928, -1.95002759149878, -1.95063686409857,\n            0.95124613669835, 0.97531843204928],\n        [0.97316523498161, -1.94561023566527, -1.94633046996323,\n            0.94705070426118, 0.97316523498161],\n        [0.96454515552826, -1.92783286977036, -1.92909031105652,\n            0.93034775234268, 0.96454515552826],\n        [0.96009142950541, -1.91858953033784, -1.92018285901082,\n            0.92177618768381, 0.96009142950541],\n        [0.95856916599601, -1.91542108074780, -1.91713833199203,\n            0.91885558323625, 0.95856916599601],\n        [0.94597685600279, -1.88903307939452, -1.89195371200558,\n            0.89487434461664, 0.94597685600279]];\n\n\n    /**\n     * When calling this procedure, make sure that ip[-order] and op[-order]\n     * point to real data\n     */\n    //private void filterYule(final float[] input, int inputPos, float[] output,\n    //int outputPos, int nSamples, final float[] kernel) {\n    function filterYule(input, inputPos, output, outputPos, nSamples, kernel) {\n\n        while ((nSamples--) != 0) {\n            /* 1e-10 is a hack to avoid slowdown because of denormals */\n            output[outputPos] = 1e-10 + input[inputPos + 0] * kernel[0]\n                - output[outputPos - 1] * kernel[1] + input[inputPos - 1]\n                * kernel[2] - output[outputPos - 2] * kernel[3]\n                + input[inputPos - 2] * kernel[4] - output[outputPos - 3]\n                * kernel[5] + input[inputPos - 3] * kernel[6]\n                - output[outputPos - 4] * kernel[7] + input[inputPos - 4]\n                * kernel[8] - output[outputPos - 5] * kernel[9]\n                + input[inputPos - 5] * kernel[10] - output[outputPos - 6]\n                * kernel[11] + input[inputPos - 6] * kernel[12]\n                - output[outputPos - 7] * kernel[13] + input[inputPos - 7]\n                * kernel[14] - output[outputPos - 8] * kernel[15]\n                + input[inputPos - 8] * kernel[16] - output[outputPos - 9]\n                * kernel[17] + input[inputPos - 9] * kernel[18]\n                - output[outputPos - 10] * kernel[19]\n                + input[inputPos - 10] * kernel[20];\n            ++outputPos;\n            ++inputPos;\n        }\n    }\n\n//private void filterButter(final float[] input, int inputPos,\n//    float[] output, int outputPos, int nSamples, final float[] kernel) {\n    function filterButter(input, inputPos, output, outputPos, nSamples, kernel) {\n\n        while ((nSamples--) != 0) {\n            output[outputPos] = input[inputPos + 0] * kernel[0]\n                - output[outputPos - 1] * kernel[1] + input[inputPos - 1]\n                * kernel[2] - output[outputPos - 2] * kernel[3]\n                + input[inputPos - 2] * kernel[4];\n            ++outputPos;\n            ++inputPos;\n        }\n    }\n\n    /**\n     * @return INIT_GAIN_ANALYSIS_OK if successful, INIT_GAIN_ANALYSIS_ERROR if\n     *         not\n     */\n    function ResetSampleFrequency(rgData, samplefreq) {\n        /* zero out initial values */\n        for (var i = 0; i < MAX_ORDER; i++)\n            rgData.linprebuf[i] = rgData.lstepbuf[i] = rgData.loutbuf[i] = rgData.rinprebuf[i] = rgData.rstepbuf[i] = rgData.routbuf[i] = 0.;\n\n        switch (0 | (samplefreq)) {\n            case 48000:\n                rgData.reqindex = 0;\n                break;\n            case 44100:\n                rgData.reqindex = 1;\n                break;\n            case 32000:\n                rgData.reqindex = 2;\n                break;\n            case 24000:\n                rgData.reqindex = 3;\n                break;\n            case 22050:\n                rgData.reqindex = 4;\n                break;\n            case 16000:\n                rgData.reqindex = 5;\n                break;\n            case 12000:\n                rgData.reqindex = 6;\n                break;\n            case 11025:\n                rgData.reqindex = 7;\n                break;\n            case 8000:\n                rgData.reqindex = 8;\n                break;\n            default:\n                return INIT_GAIN_ANALYSIS_ERROR;\n        }\n\n        rgData.sampleWindow = 0 | ((samplefreq * RMS_WINDOW_TIME_NUMERATOR\n            + RMS_WINDOW_TIME_DENOMINATOR - 1) / RMS_WINDOW_TIME_DENOMINATOR);\n\n        rgData.lsum = 0.;\n        rgData.rsum = 0.;\n        rgData.totsamp = 0;\n\n        Arrays.ill(rgData.A, 0);\n\n        return INIT_GAIN_ANALYSIS_OK;\n    }\n\n    this.InitGainAnalysis = function (rgData, samplefreq) {\n        if (ResetSampleFrequency(rgData, samplefreq) != INIT_GAIN_ANALYSIS_OK) {\n            return INIT_GAIN_ANALYSIS_ERROR;\n        }\n\n        rgData.linpre = MAX_ORDER;\n        rgData.rinpre = MAX_ORDER;\n        rgData.lstep = MAX_ORDER;\n        rgData.rstep = MAX_ORDER;\n        rgData.lout = MAX_ORDER;\n        rgData.rout = MAX_ORDER;\n\n        Arrays.fill(rgData.B, 0);\n\n        return INIT_GAIN_ANALYSIS_OK;\n    };\n\n    /**\n     * square\n     */\n    function fsqr(d) {\n        return d * d;\n    }\n\n    this.AnalyzeSamples = function (rgData, left_samples, left_samplesPos, right_samples, right_samplesPos, num_samples,\n                                    num_channels) {\n        var curleft;\n        var curleftBase;\n        var curright;\n        var currightBase;\n        var batchsamples;\n        var cursamples;\n        var cursamplepos;\n\n        if (num_samples == 0)\n            return GAIN_ANALYSIS_OK;\n\n        cursamplepos = 0;\n        batchsamples = num_samples;\n\n        switch (num_channels) {\n            case 1:\n                right_samples = left_samples;\n                right_samplesPos = left_samplesPos;\n                break;\n            case 2:\n                break;\n            default:\n                return GAIN_ANALYSIS_ERROR;\n        }\n\n        if (num_samples < MAX_ORDER) {\n            System.arraycopy(left_samples, left_samplesPos, rgData.linprebuf,\n                MAX_ORDER, num_samples);\n            System.arraycopy(right_samples, right_samplesPos, rgData.rinprebuf,\n                MAX_ORDER, num_samples);\n        } else {\n            System.arraycopy(left_samples, left_samplesPos, rgData.linprebuf,\n                MAX_ORDER, MAX_ORDER);\n            System.arraycopy(right_samples, right_samplesPos, rgData.rinprebuf,\n                MAX_ORDER, MAX_ORDER);\n        }\n\n        while (batchsamples > 0) {\n            cursamples = batchsamples > rgData.sampleWindow - rgData.totsamp ? rgData.sampleWindow\n            - rgData.totsamp\n                : batchsamples;\n            if (cursamplepos < MAX_ORDER) {\n                curleft = rgData.linpre + cursamplepos;\n                curleftBase = rgData.linprebuf;\n                curright = rgData.rinpre + cursamplepos;\n                currightBase = rgData.rinprebuf;\n                if (cursamples > MAX_ORDER - cursamplepos)\n                    cursamples = MAX_ORDER - cursamplepos;\n            } else {\n                curleft = left_samplesPos + cursamplepos;\n                curleftBase = left_samples;\n                curright = right_samplesPos + cursamplepos;\n                currightBase = right_samples;\n            }\n\n            filterYule(curleftBase, curleft, rgData.lstepbuf, rgData.lstep\n                + rgData.totsamp, cursamples, ABYule[rgData.reqindex]);\n            filterYule(currightBase, curright, rgData.rstepbuf, rgData.rstep\n                + rgData.totsamp, cursamples, ABYule[rgData.reqindex]);\n\n            filterButter(rgData.lstepbuf, rgData.lstep + rgData.totsamp,\n                rgData.loutbuf, rgData.lout + rgData.totsamp, cursamples,\n                ABButter[rgData.reqindex]);\n            filterButter(rgData.rstepbuf, rgData.rstep + rgData.totsamp,\n                rgData.routbuf, rgData.rout + rgData.totsamp, cursamples,\n                ABButter[rgData.reqindex]);\n\n            curleft = rgData.lout + rgData.totsamp;\n            /* Get the squared values */\n            curleftBase = rgData.loutbuf;\n            curright = rgData.rout + rgData.totsamp;\n            currightBase = rgData.routbuf;\n\n            var i = cursamples % 8;\n            while ((i--) != 0) {\n                rgData.lsum += fsqr(curleftBase[curleft++]);\n                rgData.rsum += fsqr(currightBase[curright++]);\n            }\n            i = cursamples / 8;\n            while ((i--) != 0) {\n                rgData.lsum += fsqr(curleftBase[curleft + 0])\n                    + fsqr(curleftBase[curleft + 1])\n                    + fsqr(curleftBase[curleft + 2])\n                    + fsqr(curleftBase[curleft + 3])\n                    + fsqr(curleftBase[curleft + 4])\n                    + fsqr(curleftBase[curleft + 5])\n                    + fsqr(curleftBase[curleft + 6])\n                    + fsqr(curleftBase[curleft + 7]);\n                curleft += 8;\n                rgData.rsum += fsqr(currightBase[curright + 0])\n                    + fsqr(currightBase[curright + 1])\n                    + fsqr(currightBase[curright + 2])\n                    + fsqr(currightBase[curright + 3])\n                    + fsqr(currightBase[curright + 4])\n                    + fsqr(currightBase[curright + 5])\n                    + fsqr(currightBase[curright + 6])\n                    + fsqr(currightBase[curright + 7]);\n                curright += 8;\n            }\n\n            batchsamples -= cursamples;\n            cursamplepos += cursamples;\n            rgData.totsamp += cursamples;\n            if (rgData.totsamp == rgData.sampleWindow) {\n                /* Get the Root Mean Square (RMS) for this set of samples */\n                var val = GainAnalysis.STEPS_per_dB\n                    * 10.\n                    * Math.log10((rgData.lsum + rgData.rsum)\n                        / rgData.totsamp * 0.5 + 1.e-37);\n                var ival = (val <= 0) ? 0 : 0 | val;\n                if (ival >= rgData.A.length)\n                    ival = rgData.A.length - 1;\n                rgData.A[ival]++;\n                rgData.lsum = rgData.rsum = 0.;\n\n                System.arraycopy(rgData.loutbuf, rgData.totsamp,\n                    rgData.loutbuf, 0, MAX_ORDER);\n                System.arraycopy(rgData.routbuf, rgData.totsamp,\n                    rgData.routbuf, 0, MAX_ORDER);\n                System.arraycopy(rgData.lstepbuf, rgData.totsamp,\n                    rgData.lstepbuf, 0, MAX_ORDER);\n                System.arraycopy(rgData.rstepbuf, rgData.totsamp,\n                    rgData.rstepbuf, 0, MAX_ORDER);\n                rgData.totsamp = 0;\n            }\n            if (rgData.totsamp > rgData.sampleWindow) {\n                /*\n                 * somehow I really screwed up: Error in programming! Contact\n                 * author about totsamp > sampleWindow\n                 */\n                return GAIN_ANALYSIS_ERROR;\n            }\n        }\n        if (num_samples < MAX_ORDER) {\n            System.arraycopy(rgData.linprebuf, num_samples, rgData.linprebuf,\n                0, MAX_ORDER - num_samples);\n            System.arraycopy(rgData.rinprebuf, num_samples, rgData.rinprebuf,\n                0, MAX_ORDER - num_samples);\n            System.arraycopy(left_samples, left_samplesPos, rgData.linprebuf,\n                MAX_ORDER - num_samples, num_samples);\n            System.arraycopy(right_samples, right_samplesPos, rgData.rinprebuf,\n                MAX_ORDER - num_samples, num_samples);\n        } else {\n            System.arraycopy(left_samples, left_samplesPos + num_samples\n                - MAX_ORDER, rgData.linprebuf, 0, MAX_ORDER);\n            System.arraycopy(right_samples, right_samplesPos + num_samples\n                - MAX_ORDER, rgData.rinprebuf, 0, MAX_ORDER);\n        }\n\n        return GAIN_ANALYSIS_OK;\n    };\n\n    function analyzeResult(Array, len) {\n        var i;\n\n        var elems = 0;\n        for (i = 0; i < len; i++)\n            elems += Array[i];\n        if (elems == 0)\n            return GAIN_NOT_ENOUGH_SAMPLES;\n\n        var upper = 0 | Math.ceil(elems * (1. - RMS_PERCENTILE));\n        for (i = len; i-- > 0;) {\n            if ((upper -= Array[i]) <= 0)\n                break;\n        }\n\n        //return (float) ((float) PINK_REF - (float) i / (float) STEPS_per_dB);\n        return (PINK_REF - i / GainAnalysis.STEPS_per_dB);\n    }\n\n    this.GetTitleGain = function (rgData) {\n        var retval = analyzeResult(rgData.A, rgData.A.length);\n\n        for (var i = 0; i < rgData.A.length; i++) {\n            rgData.B[i] += rgData.A[i];\n            rgData.A[i] = 0;\n        }\n\n        for (var i = 0; i < MAX_ORDER; i++)\n            rgData.linprebuf[i] = rgData.lstepbuf[i] = rgData.loutbuf[i] = rgData.rinprebuf[i] = rgData.rstepbuf[i] = rgData.routbuf[i] = 0.;\n\n        rgData.totsamp = 0;\n        rgData.lsum = rgData.rsum = 0.;\n        return retval;\n    }\n\n}\n\nmodule.exports = GainAnalysis;\n","function MeanBits(meanBits) {\n    this.bits = meanBits;\n}\n\nmodule.exports = MeanBits;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Takehiro = require('./Takehiro.js');\nvar Tables = require('./Tables.js');\nvar Encoder = require('./Encoder.js');\nvar LameInternalFlags = require('./LameInternalFlags.js');\n\nBitStream.EQ = function (a, b) {\n    return (Math.abs(a) > Math.abs(b)) ? (Math.abs((a) - (b)) <= (Math\n        .abs(a) * 1e-6))\n        : (Math.abs((a) - (b)) <= (Math.abs(b) * 1e-6));\n};\n\nBitStream.NEQ = function (a, b) {\n    return !BitStream.EQ(a, b);\n};\n\nfunction BitStream() {\n    var self = this;\n    var CRC16_POLYNOMIAL = 0x8005;\n\n    /*\n     * we work with ints, so when doing bit manipulation, we limit ourselves to\n     * MAX_LENGTH-2 just to be on the safe side\n     */\n    var MAX_LENGTH = 32;\n\n    //GainAnalysis ga;\n    //MPGLib mpg;\n    //Version ver;\n    //VBRTag vbr;\n    var ga = null;\n    var mpg = null;\n    var ver = null;\n    var vbr = null;\n\n    //public final void setModules(GainAnalysis ga, MPGLib mpg, Version ver,\n    //\tVBRTag vbr) {\n\n    this.setModules = function (_ga, _mpg, _ver, _vbr) {\n        ga = _ga;\n        mpg = _mpg;\n        ver = _ver;\n        vbr = _vbr;\n    };\n\n    /**\n     * Bit stream buffer.\n     */\n    //private byte[] buf;\n    var buf = null;\n    /**\n     * Bit counter of bit stream.\n     */\n    var totbit = 0;\n    /**\n     * Pointer to top byte in buffer.\n     */\n    var bufByteIdx = 0;\n    /**\n     * Pointer to top bit of top byte in buffer.\n     */\n    var bufBitIdx = 0;\n\n    /**\n     * compute bitsperframe and mean_bits for a layer III frame\n     */\n    this.getframebits = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var bit_rate;\n\n        /* get bitrate in kbps [?] */\n        if (gfc.bitrate_index != 0)\n            bit_rate = Tables.bitrate_table[gfp.version][gfc.bitrate_index];\n        else\n            bit_rate = gfp.brate;\n        assert(8 <= bit_rate && bit_rate <= 640);\n\n        /* main encoding routine toggles padding on and off */\n        /* one Layer3 Slot consists of 8 bits */\n        var bytes = 0 | (gfp.version + 1) * 72000 * bit_rate / gfp.out_samplerate + gfc.padding;\n        return 8 * bytes;\n    };\n\n    function putheader_bits(gfc) {\n        System.arraycopy(gfc.header[gfc.w_ptr].buf, 0, buf, bufByteIdx, gfc.sideinfo_len);\n        bufByteIdx += gfc.sideinfo_len;\n        totbit += gfc.sideinfo_len * 8;\n        gfc.w_ptr = (gfc.w_ptr + 1) & (LameInternalFlags.MAX_HEADER_BUF - 1);\n    }\n\n    /**\n     * write j bits into the bit stream\n     */\n    function putbits2(gfc, val, j) {\n        assert(j < MAX_LENGTH - 2);\n\n        while (j > 0) {\n            var k;\n            if (bufBitIdx == 0) {\n                bufBitIdx = 8;\n                bufByteIdx++;\n                assert(bufByteIdx < Lame.LAME_MAXMP3BUFFER);\n                assert(gfc.header[gfc.w_ptr].write_timing >= totbit);\n                if (gfc.header[gfc.w_ptr].write_timing == totbit) {\n                    putheader_bits(gfc);\n                }\n                buf[bufByteIdx] = 0;\n            }\n\n            k = Math.min(j, bufBitIdx);\n            j -= k;\n\n            bufBitIdx -= k;\n\n            assert(j < MAX_LENGTH);\n            /* 32 too large on 32 bit machines */\n            assert(bufBitIdx < MAX_LENGTH);\n\n            buf[bufByteIdx] |= ((val >> j) << bufBitIdx);\n            totbit += k;\n        }\n    }\n\n    /**\n     * write j bits into the bit stream, ignoring frame headers\n     */\n    function putbits_noheaders(gfc, val, j) {\n        assert(j < MAX_LENGTH - 2);\n\n        while (j > 0) {\n            var k;\n            if (bufBitIdx == 0) {\n                bufBitIdx = 8;\n                bufByteIdx++;\n                assert(bufByteIdx < Lame.LAME_MAXMP3BUFFER);\n                buf[bufByteIdx] = 0;\n            }\n\n            k = Math.min(j, bufBitIdx);\n            j -= k;\n\n            bufBitIdx -= k;\n\n            assert(j < MAX_LENGTH);\n            /* 32 too large on 32 bit machines */\n            assert(bufBitIdx < MAX_LENGTH);\n\n            buf[bufByteIdx] |= ((val >> j) << bufBitIdx);\n            totbit += k;\n        }\n    }\n\n    /**\n     * Some combinations of bitrate, Fs, and stereo make it impossible to stuff\n     * out a frame using just main_data, due to the limited number of bits to\n     * indicate main_data_length. In these situations, we put stuffing bits into\n     * the ancillary data...\n     */\n    function drain_into_ancillary(gfp, remainingBits) {\n        var gfc = gfp.internal_flags;\n        var i;\n        assert(remainingBits >= 0);\n\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x4c, 8);\n            remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x41, 8);\n            remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x4d, 8);\n            remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x45, 8);\n            remainingBits -= 8;\n        }\n\n        if (remainingBits >= 32) {\n            var version = ver.getLameShortVersion();\n            if (remainingBits >= 32)\n                for (i = 0; i < version.length && remainingBits >= 8; ++i) {\n                    remainingBits -= 8;\n                    putbits2(gfc, version.charAt(i), 8);\n                }\n        }\n\n        for (; remainingBits >= 1; remainingBits -= 1) {\n            putbits2(gfc, gfc.ancillary_flag, 1);\n            gfc.ancillary_flag ^= (!gfp.disable_reservoir ? 1 : 0);\n        }\n\n        assert(remainingBits == 0);\n\n    }\n\n    /**\n     * write N bits into the header\n     */\n    function writeheader(gfc, val, j) {\n        var ptr = gfc.header[gfc.h_ptr].ptr;\n\n        while (j > 0) {\n            var k = Math.min(j, 8 - (ptr & 7));\n            j -= k;\n            assert(j < MAX_LENGTH);\n            /* >> 32 too large for 32 bit machines */\n\n            gfc.header[gfc.h_ptr].buf[ptr >> 3] |= ((val >> j)) << (8 - (ptr & 7) - k);\n            ptr += k;\n        }\n        gfc.header[gfc.h_ptr].ptr = ptr;\n    }\n\n    function CRC_update(value, crc) {\n        value <<= 8;\n        for (var i = 0; i < 8; i++) {\n            value <<= 1;\n            crc <<= 1;\n\n            if ((((crc ^ value) & 0x10000) != 0))\n                crc ^= CRC16_POLYNOMIAL;\n        }\n        return crc;\n    }\n\n    this.CRC_writeheader = function (gfc, header) {\n        var crc = 0xffff;\n        /* (jo) init crc16 for error_protection */\n\n        crc = CRC_update(header[2] & 0xff, crc);\n        crc = CRC_update(header[3] & 0xff, crc);\n        for (var i = 6; i < gfc.sideinfo_len; i++) {\n            crc = CRC_update(header[i] & 0xff, crc);\n        }\n\n        header[4] = (byte)(crc >> 8);\n        header[5] = (byte)(crc & 255);\n    };\n\n    function encodeSideInfo2(gfp, bitsPerFrame) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        var gr, ch;\n\n        l3_side = gfc.l3_side;\n        gfc.header[gfc.h_ptr].ptr = 0;\n        Arrays.fill(gfc.header[gfc.h_ptr].buf, 0, gfc.sideinfo_len, 0);\n        if (gfp.out_samplerate < 16000)\n            writeheader(gfc, 0xffe, 12);\n        else\n            writeheader(gfc, 0xfff, 12);\n        writeheader(gfc, (gfp.version), 1);\n        writeheader(gfc, 4 - 3, 2);\n        writeheader(gfc, (!gfp.error_protection ? 1 : 0), 1);\n        writeheader(gfc, (gfc.bitrate_index), 4);\n        writeheader(gfc, (gfc.samplerate_index), 2);\n        writeheader(gfc, (gfc.padding), 1);\n        writeheader(gfc, (gfp.extension), 1);\n        writeheader(gfc, (gfp.mode.ordinal()), 2);\n        writeheader(gfc, (gfc.mode_ext), 2);\n        writeheader(gfc, (gfp.copyright), 1);\n        writeheader(gfc, (gfp.original), 1);\n        writeheader(gfc, (gfp.emphasis), 2);\n        if (gfp.error_protection) {\n            writeheader(gfc, 0, 16);\n            /* dummy */\n        }\n\n        if (gfp.version == 1) {\n            /* MPEG1 */\n            assert(l3_side.main_data_begin >= 0);\n            writeheader(gfc, (l3_side.main_data_begin), 9);\n\n            if (gfc.channels_out == 2)\n                writeheader(gfc, l3_side.private_bits, 3);\n            else\n                writeheader(gfc, l3_side.private_bits, 5);\n\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var band;\n                for (band = 0; band < 4; band++) {\n                    writeheader(gfc, l3_side.scfsi[ch][band], 1);\n                }\n            }\n\n            for (gr = 0; gr < 2; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    var gi = l3_side.tt[gr][ch];\n                    writeheader(gfc, gi.part2_3_length + gi.part2_length, 12);\n                    writeheader(gfc, gi.big_values / 2, 9);\n                    writeheader(gfc, gi.global_gain, 8);\n                    writeheader(gfc, gi.scalefac_compress, 4);\n\n                    if (gi.block_type != Encoder.NORM_TYPE) {\n                        writeheader(gfc, 1, 1);\n                        /* window_switching_flag */\n                        writeheader(gfc, gi.block_type, 2);\n                        writeheader(gfc, gi.mixed_block_flag, 1);\n\n                        if (gi.table_select[0] == 14)\n                            gi.table_select[0] = 16;\n                        writeheader(gfc, gi.table_select[0], 5);\n                        if (gi.table_select[1] == 14)\n                            gi.table_select[1] = 16;\n                        writeheader(gfc, gi.table_select[1], 5);\n\n                        writeheader(gfc, gi.subblock_gain[0], 3);\n                        writeheader(gfc, gi.subblock_gain[1], 3);\n                        writeheader(gfc, gi.subblock_gain[2], 3);\n                    } else {\n                        writeheader(gfc, 0, 1);\n                        /* window_switching_flag */\n                        if (gi.table_select[0] == 14)\n                            gi.table_select[0] = 16;\n                        writeheader(gfc, gi.table_select[0], 5);\n                        if (gi.table_select[1] == 14)\n                            gi.table_select[1] = 16;\n                        writeheader(gfc, gi.table_select[1], 5);\n                        if (gi.table_select[2] == 14)\n                            gi.table_select[2] = 16;\n                        writeheader(gfc, gi.table_select[2], 5);\n\n                        assert(0 <= gi.region0_count && gi.region0_count < 16);\n                        assert(0 <= gi.region1_count && gi.region1_count < 8);\n                        writeheader(gfc, gi.region0_count, 4);\n                        writeheader(gfc, gi.region1_count, 3);\n                    }\n                    writeheader(gfc, gi.preflag, 1);\n                    writeheader(gfc, gi.scalefac_scale, 1);\n                    writeheader(gfc, gi.count1table_select, 1);\n                }\n            }\n        } else {\n            /* MPEG2 */\n            assert(l3_side.main_data_begin >= 0);\n            writeheader(gfc, (l3_side.main_data_begin), 8);\n            writeheader(gfc, l3_side.private_bits, gfc.channels_out);\n\n            gr = 0;\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var gi = l3_side.tt[gr][ch];\n                writeheader(gfc, gi.part2_3_length + gi.part2_length, 12);\n                writeheader(gfc, gi.big_values / 2, 9);\n                writeheader(gfc, gi.global_gain, 8);\n                writeheader(gfc, gi.scalefac_compress, 9);\n\n                if (gi.block_type != Encoder.NORM_TYPE) {\n                    writeheader(gfc, 1, 1);\n                    /* window_switching_flag */\n                    writeheader(gfc, gi.block_type, 2);\n                    writeheader(gfc, gi.mixed_block_flag, 1);\n\n                    if (gi.table_select[0] == 14)\n                        gi.table_select[0] = 16;\n                    writeheader(gfc, gi.table_select[0], 5);\n                    if (gi.table_select[1] == 14)\n                        gi.table_select[1] = 16;\n                    writeheader(gfc, gi.table_select[1], 5);\n\n                    writeheader(gfc, gi.subblock_gain[0], 3);\n                    writeheader(gfc, gi.subblock_gain[1], 3);\n                    writeheader(gfc, gi.subblock_gain[2], 3);\n                } else {\n                    writeheader(gfc, 0, 1);\n                    /* window_switching_flag */\n                    if (gi.table_select[0] == 14)\n                        gi.table_select[0] = 16;\n                    writeheader(gfc, gi.table_select[0], 5);\n                    if (gi.table_select[1] == 14)\n                        gi.table_select[1] = 16;\n                    writeheader(gfc, gi.table_select[1], 5);\n                    if (gi.table_select[2] == 14)\n                        gi.table_select[2] = 16;\n                    writeheader(gfc, gi.table_select[2], 5);\n\n                    assert(0 <= gi.region0_count && gi.region0_count < 16);\n                    assert(0 <= gi.region1_count && gi.region1_count < 8);\n                    writeheader(gfc, gi.region0_count, 4);\n                    writeheader(gfc, gi.region1_count, 3);\n                }\n\n                writeheader(gfc, gi.scalefac_scale, 1);\n                writeheader(gfc, gi.count1table_select, 1);\n            }\n        }\n\n        if (gfp.error_protection) {\n            /* (jo) error_protection: add crc16 information to header */\n            CRC_writeheader(gfc, gfc.header[gfc.h_ptr].buf);\n        }\n\n        {\n            var old = gfc.h_ptr;\n            assert(gfc.header[old].ptr == gfc.sideinfo_len * 8);\n\n            gfc.h_ptr = (old + 1) & (LameInternalFlags.MAX_HEADER_BUF - 1);\n            gfc.header[gfc.h_ptr].write_timing = gfc.header[old].write_timing\n                + bitsPerFrame;\n\n            if (gfc.h_ptr == gfc.w_ptr) {\n                /* yikes! we are out of header buffer space */\n                System.err\n                    .println(\"Error: MAX_HEADER_BUF too small in bitstream.c \\n\");\n            }\n\n        }\n    }\n\n    function huffman_coder_count1(gfc, gi) {\n        /* Write count1 area */\n        var h = Tables.ht[gi.count1table_select + 32];\n        var i, bits = 0;\n\n        var ix = gi.big_values;\n        var xr = gi.big_values;\n        assert(gi.count1table_select < 2);\n\n        for (i = (gi.count1 - gi.big_values) / 4; i > 0; --i) {\n            var huffbits = 0;\n            var p = 0, v;\n\n            v = gi.l3_enc[ix + 0];\n            if (v != 0) {\n                p += 8;\n                if (gi.xr[xr + 0] < 0)\n                    huffbits++;\n                assert(v <= 1);\n            }\n\n            v = gi.l3_enc[ix + 1];\n            if (v != 0) {\n                p += 4;\n                huffbits *= 2;\n                if (gi.xr[xr + 1] < 0)\n                    huffbits++;\n                assert(v <= 1);\n            }\n\n            v = gi.l3_enc[ix + 2];\n            if (v != 0) {\n                p += 2;\n                huffbits *= 2;\n                if (gi.xr[xr + 2] < 0)\n                    huffbits++;\n                assert(v <= 1);\n            }\n\n            v = gi.l3_enc[ix + 3];\n            if (v != 0) {\n                p++;\n                huffbits *= 2;\n                if (gi.xr[xr + 3] < 0)\n                    huffbits++;\n                assert(v <= 1);\n            }\n\n            ix += 4;\n            xr += 4;\n            putbits2(gfc, huffbits + h.table[p], h.hlen[p]);\n            bits += h.hlen[p];\n        }\n        return bits;\n    }\n\n    /**\n     * Implements the pseudocode of page 98 of the IS\n     */\n    function Huffmancode(gfc, tableindex, start, end, gi) {\n        var h = Tables.ht[tableindex];\n        var bits = 0;\n\n        assert(tableindex < 32);\n        if (0 == tableindex)\n            return bits;\n\n        for (var i = start; i < end; i += 2) {\n            var cbits = 0;\n            var xbits = 0;\n            var linbits = h.xlen;\n            var xlen = h.xlen;\n            var ext = 0;\n            var x1 = gi.l3_enc[i];\n            var x2 = gi.l3_enc[i + 1];\n\n            if (x1 != 0) {\n                if (gi.xr[i] < 0)\n                    ext++;\n                cbits--;\n            }\n\n            if (tableindex > 15) {\n                /* use ESC-words */\n                if (x1 > 14) {\n                    var linbits_x1 = x1 - 15;\n                    assert(linbits_x1 <= h.linmax);\n                    ext |= linbits_x1 << 1;\n                    xbits = linbits;\n                    x1 = 15;\n                }\n\n                if (x2 > 14) {\n                    var linbits_x2 = x2 - 15;\n                    assert(linbits_x2 <= h.linmax);\n                    ext <<= linbits;\n                    ext |= linbits_x2;\n                    xbits += linbits;\n                    x2 = 15;\n                }\n                xlen = 16;\n            }\n\n            if (x2 != 0) {\n                ext <<= 1;\n                if (gi.xr[i + 1] < 0)\n                    ext++;\n                cbits--;\n            }\n\n            assert((x1 | x2) < 16);\n\n            x1 = x1 * xlen + x2;\n            xbits -= cbits;\n            cbits += h.hlen[x1];\n\n            assert(cbits <= MAX_LENGTH);\n            assert(xbits <= MAX_LENGTH);\n\n            putbits2(gfc, h.table[x1], cbits);\n            putbits2(gfc, ext, xbits);\n            bits += cbits + xbits;\n        }\n        return bits;\n    }\n\n    /**\n     * Note the discussion of huffmancodebits() on pages 28 and 29 of the IS, as\n     * well as the definitions of the side information on pages 26 and 27.\n     */\n    function ShortHuffmancodebits(gfc, gi) {\n        var region1Start = 3 * gfc.scalefac_band.s[3];\n        if (region1Start > gi.big_values)\n            region1Start = gi.big_values;\n\n        /* short blocks do not have a region2 */\n        var bits = Huffmancode(gfc, gi.table_select[0], 0, region1Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[1], region1Start,\n            gi.big_values, gi);\n        return bits;\n    }\n\n    function LongHuffmancodebits(gfc, gi) {\n        var bigvalues, bits;\n        var region1Start, region2Start;\n\n        bigvalues = gi.big_values;\n        assert(0 <= bigvalues && bigvalues <= 576);\n\n        var i = gi.region0_count + 1;\n        assert(0 <= i);\n        assert(i < gfc.scalefac_band.l.length);\n        region1Start = gfc.scalefac_band.l[i];\n        i += gi.region1_count + 1;\n        assert(0 <= i);\n        assert(i < gfc.scalefac_band.l.length);\n        region2Start = gfc.scalefac_band.l[i];\n\n        if (region1Start > bigvalues)\n            region1Start = bigvalues;\n\n        if (region2Start > bigvalues)\n            region2Start = bigvalues;\n\n        bits = Huffmancode(gfc, gi.table_select[0], 0, region1Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[1], region1Start,\n            region2Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[2], region2Start, bigvalues,\n            gi);\n        return bits;\n    }\n\n    function writeMainData(gfp) {\n        var gr, ch, sfb, data_bits, tot_bits = 0;\n        var gfc = gfp.internal_flags;\n        var l3_side = gfc.l3_side;\n\n        if (gfp.version == 1) {\n            /* MPEG 1 */\n            for (gr = 0; gr < 2; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    var gi = l3_side.tt[gr][ch];\n                    var slen1 = Takehiro.slen1_tab[gi.scalefac_compress];\n                    var slen2 = Takehiro.slen2_tab[gi.scalefac_compress];\n                    data_bits = 0;\n                    for (sfb = 0; sfb < gi.sfbdivide; sfb++) {\n                        if (gi.scalefac[sfb] == -1)\n                            continue;\n                        /* scfsi is used */\n                        putbits2(gfc, gi.scalefac[sfb], slen1);\n                        data_bits += slen1;\n                    }\n                    for (; sfb < gi.sfbmax; sfb++) {\n                        if (gi.scalefac[sfb] == -1)\n                            continue;\n                        /* scfsi is used */\n                        putbits2(gfc, gi.scalefac[sfb], slen2);\n                        data_bits += slen2;\n                    }\n                    assert(data_bits == gi.part2_length);\n\n                    if (gi.block_type == Encoder.SHORT_TYPE) {\n                        data_bits += ShortHuffmancodebits(gfc, gi);\n                    } else {\n                        data_bits += LongHuffmancodebits(gfc, gi);\n                    }\n                    data_bits += huffman_coder_count1(gfc, gi);\n                    /* does bitcount in quantize.c agree with actual bit count? */\n                    assert(data_bits == gi.part2_3_length + gi.part2_length);\n                    tot_bits += data_bits;\n                }\n                /* for ch */\n            }\n            /* for gr */\n        } else {\n            /* MPEG 2 */\n            gr = 0;\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var gi = l3_side.tt[gr][ch];\n                var i, sfb_partition, scale_bits = 0;\n                assert(gi.sfb_partition_table != null);\n                data_bits = 0;\n                sfb = 0;\n                sfb_partition = 0;\n\n                if (gi.block_type == Encoder.SHORT_TYPE) {\n                    for (; sfb_partition < 4; sfb_partition++) {\n                        var sfbs = gi.sfb_partition_table[sfb_partition] / 3;\n                        var slen = gi.slen[sfb_partition];\n                        for (i = 0; i < sfbs; i++, sfb++) {\n                            putbits2(gfc,\n                                Math.max(gi.scalefac[sfb * 3 + 0], 0), slen);\n                            putbits2(gfc,\n                                Math.max(gi.scalefac[sfb * 3 + 1], 0), slen);\n                            putbits2(gfc,\n                                Math.max(gi.scalefac[sfb * 3 + 2], 0), slen);\n                            scale_bits += 3 * slen;\n                        }\n                    }\n                    data_bits += ShortHuffmancodebits(gfc, gi);\n                } else {\n                    for (; sfb_partition < 4; sfb_partition++) {\n                        var sfbs = gi.sfb_partition_table[sfb_partition];\n                        var slen = gi.slen[sfb_partition];\n                        for (i = 0; i < sfbs; i++, sfb++) {\n                            putbits2(gfc, Math.max(gi.scalefac[sfb], 0), slen);\n                            scale_bits += slen;\n                        }\n                    }\n                    data_bits += LongHuffmancodebits(gfc, gi);\n                }\n                data_bits += huffman_coder_count1(gfc, gi);\n                /* does bitcount in quantize.c agree with actual bit count? */\n                assert(data_bits == gi.part2_3_length);\n                assert(scale_bits == gi.part2_length);\n                tot_bits += scale_bits + data_bits;\n            }\n            /* for ch */\n        }\n        /* for gf */\n        return tot_bits;\n    }\n\n    /* main_data */\n\n    function TotalBytes() {\n        this.total = 0;\n    }\n\n    /*\n     * compute the number of bits required to flush all mp3 frames currently in\n     * the buffer. This should be the same as the reservoir size. Only call this\n     * routine between frames - i.e. only after all headers and data have been\n     * added to the buffer by format_bitstream().\n     *\n     * Also compute total_bits_output = size of mp3 buffer (including frame\n     * headers which may not have yet been send to the mp3 buffer) + number of\n     * bits needed to flush all mp3 frames.\n     *\n     * total_bytes_output is the size of the mp3 output buffer if\n     * lame_encode_flush_nogap() was called right now.\n     */\n    function compute_flushbits(gfp, total_bytes_output) {\n        var gfc = gfp.internal_flags;\n        var flushbits, remaining_headers;\n        var bitsPerFrame;\n        var last_ptr, first_ptr;\n        first_ptr = gfc.w_ptr;\n        /* first header to add to bitstream */\n        last_ptr = gfc.h_ptr - 1;\n        /* last header to add to bitstream */\n        if (last_ptr == -1)\n            last_ptr = LameInternalFlags.MAX_HEADER_BUF - 1;\n\n        /* add this many bits to bitstream so we can flush all headers */\n        flushbits = gfc.header[last_ptr].write_timing - totbit;\n        total_bytes_output.total = flushbits;\n\n        if (flushbits >= 0) {\n            /* if flushbits >= 0, some headers have not yet been written */\n            /* reduce flushbits by the size of the headers */\n            remaining_headers = 1 + last_ptr - first_ptr;\n            if (last_ptr < first_ptr)\n                remaining_headers = 1 + last_ptr - first_ptr\n                    + LameInternalFlags.MAX_HEADER_BUF;\n            flushbits -= remaining_headers * 8 * gfc.sideinfo_len;\n        }\n\n        /*\n         * finally, add some bits so that the last frame is complete these bits\n         * are not necessary to decode the last frame, but some decoders will\n         * ignore last frame if these bits are missing\n         */\n        bitsPerFrame = self.getframebits(gfp);\n        flushbits += bitsPerFrame;\n        total_bytes_output.total += bitsPerFrame;\n        /* round up: */\n        if ((total_bytes_output.total % 8) != 0)\n            total_bytes_output.total = 1 + (total_bytes_output.total / 8);\n        else\n            total_bytes_output.total = (total_bytes_output.total / 8);\n        total_bytes_output.total += bufByteIdx + 1;\n\n        if (flushbits < 0) {\n            System.err.println(\"strange error flushing buffer ... \\n\");\n        }\n        return flushbits;\n    }\n\n    this.flush_bitstream = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        var flushbits;\n        var last_ptr = gfc.h_ptr - 1;\n        /* last header to add to bitstream */\n        if (last_ptr == -1)\n            last_ptr = LameInternalFlags.MAX_HEADER_BUF - 1;\n        l3_side = gfc.l3_side;\n\n        if ((flushbits = compute_flushbits(gfp, new TotalBytes())) < 0)\n            return;\n        drain_into_ancillary(gfp, flushbits);\n\n        /* check that the 100% of the last frame has been written to bitstream */\n        assert(gfc.header[last_ptr].write_timing + this.getframebits(gfp) == totbit);\n\n        /*\n         * we have padded out all frames with ancillary data, which is the same\n         * as filling the bitreservoir with ancillary data, so :\n         */\n        gfc.ResvSize = 0;\n        l3_side.main_data_begin = 0;\n\n        /* save the ReplayGain value */\n        if (gfc.findReplayGain) {\n            var RadioGain = ga.GetTitleGain(gfc.rgdata);\n            assert(NEQ(RadioGain, GainAnalysis.GAIN_NOT_ENOUGH_SAMPLES));\n            gfc.RadioGain = Math.floor(RadioGain * 10.0 + 0.5) | 0;\n            /* round to nearest */\n        }\n\n        /* find the gain and scale change required for no clipping */\n        if (gfc.findPeakSample) {\n            gfc.noclipGainChange = Math.ceil(Math\n                        .log10(gfc.PeakSample / 32767.0) * 20.0 * 10.0) | 0;\n            /* round up */\n\n            if (gfc.noclipGainChange > 0) {\n                /* clipping occurs */\n                if (EQ(gfp.scale, 1.0) || EQ(gfp.scale, 0.0))\n                    gfc.noclipScale = (Math\n                        .floor((32767.0 / gfc.PeakSample) * 100.0) / 100.0);\n                /* round down */\n                else {\n                    /*\n                     * the user specified his own scaling factor. We could\n                     * suggest the scaling factor of\n                     * (32767.0/gfp.PeakSample)*(gfp.scale) but it's usually\n                     * very inaccurate. So we'd rather not advice him on the\n                     * scaling factor.\n                     */\n                    gfc.noclipScale = -1;\n                }\n            } else\n            /* no clipping */\n                gfc.noclipScale = -1;\n        }\n    };\n\n    this.add_dummy_byte = function (gfp, val, n) {\n        var gfc = gfp.internal_flags;\n        var i;\n\n        while (n-- > 0) {\n            putbits_noheaders(gfc, val, 8);\n\n            for (i = 0; i < LameInternalFlags.MAX_HEADER_BUF; ++i)\n                gfc.header[i].write_timing += 8;\n        }\n    };\n\n    /**\n     * This is called after a frame of audio has been quantized and coded. It\n     * will write the encoded audio to the bitstream. Note that from a layer3\n     * encoder's perspective the bit stream is primarily a series of main_data()\n     * blocks, with header and side information inserted at the proper locations\n     * to maintain framing. (See Figure A.7 in the IS).\n     */\n    this.format_bitstream = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        l3_side = gfc.l3_side;\n\n        var bitsPerFrame = this.getframebits(gfp);\n        drain_into_ancillary(gfp, l3_side.resvDrain_pre);\n\n        encodeSideInfo2(gfp, bitsPerFrame);\n        var bits = 8 * gfc.sideinfo_len;\n        bits += writeMainData(gfp);\n        drain_into_ancillary(gfp, l3_side.resvDrain_post);\n        bits += l3_side.resvDrain_post;\n\n        l3_side.main_data_begin += (bitsPerFrame - bits) / 8;\n\n        /*\n         * compare number of bits needed to clear all buffered mp3 frames with\n         * what we think the resvsize is:\n         */\n        if (compute_flushbits(gfp, new TotalBytes()) != gfc.ResvSize) {\n            System.err.println(\"Internal buffer inconsistency. flushbits <> ResvSize\");\n        }\n\n        /*\n         * compare main_data_begin for the next frame with what we think the\n         * resvsize is:\n         */\n        if ((l3_side.main_data_begin * 8) != gfc.ResvSize) {\n            System.err.printf(\"bit reservoir error: \\n\"\n                + \"l3_side.main_data_begin: %d \\n\"\n                + \"Resvoir size:             %d \\n\"\n                + \"resv drain (post)         %d \\n\"\n                + \"resv drain (pre)          %d \\n\"\n                + \"header and sideinfo:      %d \\n\"\n                + \"data bits:                %d \\n\"\n                + \"total bits:               %d (remainder: %d) \\n\"\n                + \"bitsperframe:             %d \\n\",\n                8 * l3_side.main_data_begin, gfc.ResvSize,\n                l3_side.resvDrain_post, l3_side.resvDrain_pre,\n                8 * gfc.sideinfo_len, bits - l3_side.resvDrain_post - 8\n                * gfc.sideinfo_len, bits, bits % 8, bitsPerFrame);\n\n            System.err.println(\"This is a fatal error.  It has several possible causes:\");\n            System.err.println(\"90%%  LAME compiled with buggy version of gcc using advanced optimizations\");\n            System.err.println(\" 9%%  Your system is overclocked\");\n            System.err.println(\" 1%%  bug in LAME encoding library\");\n\n            gfc.ResvSize = l3_side.main_data_begin * 8;\n        }\n        //;\n        assert(totbit % 8 == 0);\n\n        if (totbit > 1000000000) {\n            /*\n             * to avoid totbit overflow, (at 8h encoding at 128kbs) lets reset\n             * bit counter\n             */\n            var i;\n            for (i = 0; i < LameInternalFlags.MAX_HEADER_BUF; ++i)\n                gfc.header[i].write_timing -= totbit;\n            totbit = 0;\n        }\n\n        return 0;\n    };\n\n    /**\n     * <PRE>\n     * copy data out of the internal MP3 bit buffer into a user supplied\n     *       unsigned char buffer.\n     *\n     *       mp3data=0      indicates data in buffer is an id3tags and VBR tags\n     *       mp3data=1      data is real mp3 frame data.\n     * </PRE>\n     */\n    this.copy_buffer = function (gfc, buffer, bufferPos, size, mp3data) {\n        var minimum = bufByteIdx + 1;\n        if (minimum <= 0)\n            return 0;\n        if (size != 0 && minimum > size) {\n            /* buffer is too small */\n            return -1;\n        }\n        System.arraycopy(buf, 0, buffer, bufferPos, minimum);\n        bufByteIdx = -1;\n        bufBitIdx = 0;\n\n        if (mp3data != 0) {\n            var crc = new_int(1);\n            crc[0] = gfc.nMusicCRC;\n            vbr.updateMusicCRC(crc, buffer, bufferPos, minimum);\n            gfc.nMusicCRC = crc[0];\n\n            /**\n             * sum number of bytes belonging to the mp3 stream this info will be\n             * written into the Xing/LAME header for seeking\n             */\n            if (minimum > 0) {\n                gfc.VBR_seek_table.nBytesWritten += minimum;\n            }\n\n            if (gfc.decode_on_the_fly) { /* decode the frame */\n                var pcm_buf = new_float_n([2, 1152]);\n                var mp3_in = minimum;\n                var samples_out = -1;\n                var i;\n\n                /* re-synthesis to pcm. Repeat until we get a samples_out=0 */\n                while (samples_out != 0) {\n\n                    samples_out = mpg.hip_decode1_unclipped(gfc.hip, buffer,\n                        bufferPos, mp3_in, pcm_buf[0], pcm_buf[1]);\n                    /*\n                     * samples_out = 0: need more data to decode samples_out =\n                     * -1: error. Lets assume 0 pcm output samples_out = number\n                     * of samples output\n                     */\n\n                    /*\n                     * set the lenght of the mp3 input buffer to zero, so that\n                     * in the next iteration of the loop we will be querying\n                     * mpglib about buffered data\n                     */\n                    mp3_in = 0;\n\n                    if (samples_out == -1) {\n                        /*\n                         * error decoding. Not fatal, but might screw up the\n                         * ReplayGain tag. What should we do? Ignore for now\n                         */\n                        samples_out = 0;\n                    }\n                    if (samples_out > 0) {\n                        /* process the PCM data */\n\n                        /*\n                         * this should not be possible, and indicates we have\n                         * overflown the pcm_buf buffer\n                         */\n                        assert(samples_out <= 1152);\n\n                        if (gfc.findPeakSample) {\n                            for (i = 0; i < samples_out; i++) {\n                                if (pcm_buf[0][i] > gfc.PeakSample)\n                                    gfc.PeakSample = pcm_buf[0][i];\n                                else if (-pcm_buf[0][i] > gfc.PeakSample)\n                                    gfc.PeakSample = -pcm_buf[0][i];\n                            }\n                            if (gfc.channels_out > 1)\n                                for (i = 0; i < samples_out; i++) {\n                                    if (pcm_buf[1][i] > gfc.PeakSample)\n                                        gfc.PeakSample = pcm_buf[1][i];\n                                    else if (-pcm_buf[1][i] > gfc.PeakSample)\n                                        gfc.PeakSample = -pcm_buf[1][i];\n                                }\n                        }\n\n                        if (gfc.findReplayGain)\n                            if (ga.AnalyzeSamples(gfc.rgdata, pcm_buf[0], 0,\n                                    pcm_buf[1], 0, samples_out,\n                                    gfc.channels_out) == GainAnalysis.GAIN_ANALYSIS_ERROR)\n                                return -6;\n\n                    }\n                    /* if (samples_out>0) */\n                }\n                /* while (samples_out!=0) */\n            }\n            /* if (gfc.decode_on_the_fly) */\n\n        }\n        /* if (mp3data) */\n        return minimum;\n    };\n\n    this.init_bit_stream_w = function (gfc) {\n        buf = new_byte(Lame.LAME_MAXMP3BUFFER);\n\n        gfc.h_ptr = gfc.w_ptr = 0;\n        gfc.header[gfc.h_ptr].write_timing = 0;\n        bufByteIdx = -1;\n        bufBitIdx = 0;\n        totbit = 0;\n    };\n\n    // From machine.h\n\n\n}\n\nmodule.exports = BitStream;\n","/*\n *\tMP3 huffman table selecting and bit counting\n *\n *\tCopyright (c) 1999-2005 Takehiro TOMINAGA\n *\tCopyright (c) 2002-2005 Gabriel Bouvigne\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: Takehiro.java,v 1.26 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n//import java.util.Arrays;\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\nvar Tables = require('./Tables.js');\nvar GrInfo = require('./GrInfo.js');\nvar QuantizePVT = require('./QuantizePVT.js');\n\n\nfunction Takehiro() {\n\n    var qupvt = null;\n    this.qupvt = null;\n\n    this.setModules = function (_qupvt) {\n        this.qupvt = _qupvt;\n        qupvt = _qupvt;\n    }\n\n    function Bits(b) {\n        this.bits = 0 | b;\n    }\n\n    var subdv_table = [[0, 0], /* 0 bands */\n        [0, 0], /* 1 bands */\n        [0, 0], /* 2 bands */\n        [0, 0], /* 3 bands */\n        [0, 0], /* 4 bands */\n        [0, 1], /* 5 bands */\n        [1, 1], /* 6 bands */\n        [1, 1], /* 7 bands */\n        [1, 2], /* 8 bands */\n        [2, 2], /* 9 bands */\n        [2, 3], /* 10 bands */\n        [2, 3], /* 11 bands */\n        [3, 4], /* 12 bands */\n        [3, 4], /* 13 bands */\n        [3, 4], /* 14 bands */\n        [4, 5], /* 15 bands */\n        [4, 5], /* 16 bands */\n        [4, 6], /* 17 bands */\n        [5, 6], /* 18 bands */\n        [5, 6], /* 19 bands */\n        [5, 7], /* 20 bands */\n        [6, 7], /* 21 bands */\n        [6, 7], /* 22 bands */\n    ];\n\n    /**\n     * nonlinear quantization of xr More accurate formula than the ISO formula.\n     * Takes into account the fact that we are quantizing xr . ix, but we want\n     * ix^4/3 to be as close as possible to x^4/3. (taking the nearest int would\n     * mean ix is as close as possible to xr, which is different.)\n     *\n     * From Segher Boessenkool <segher@eastsite.nl> 11/1999\n     *\n     * 09/2000: ASM code removed in favor of IEEE754 hack by Takehiro Tominaga.\n     * If you need the ASM code, check CVS circa Aug 2000.\n     *\n     * 01/2004: Optimizations by Gabriel Bouvigne\n     */\n    function quantize_lines_xrpow_01(l, istep, xr, xrPos, ix, ixPos) {\n        var compareval0 = (1.0 - 0.4054) / istep;\n\n        assert(l > 0);\n        l = l >> 1;\n        while ((l--) != 0) {\n            ix[ixPos++] = (compareval0 > xr[xrPos++]) ? 0 : 1;\n            ix[ixPos++] = (compareval0 > xr[xrPos++]) ? 0 : 1;\n        }\n    }\n\n    /**\n     * XRPOW_FTOI is a macro to convert floats to ints.<BR>\n     * if XRPOW_FTOI(x) = nearest_int(x), then QUANTFAC(x)=adj43asm[x]<BR>\n     * ROUNDFAC= -0.0946<BR>\n     *\n     * if XRPOW_FTOI(x) = floor(x), then QUANTFAC(x)=asj43[x]<BR>\n     * ROUNDFAC=0.4054<BR>\n     *\n     * Note: using floor() or 0| is extremely slow. On machines where the\n     * TAKEHIRO_IEEE754_HACK code above does not work, it is worthwile to write\n     * some ASM for XRPOW_FTOI().\n     */\n    function quantize_lines_xrpow(l, istep, xr, xrPos, ix, ixPos) {\n        assert(l > 0);\n\n        l = l >> 1;\n        var remaining = l % 2;\n        l = l >> 1;\n        while (l-- != 0) {\n            var x0, x1, x2, x3;\n            var rx0, rx1, rx2, rx3;\n\n            x0 = xr[xrPos++] * istep;\n            x1 = xr[xrPos++] * istep;\n            rx0 = 0 | x0;\n            x2 = xr[xrPos++] * istep;\n            rx1 = 0 | x1;\n            x3 = xr[xrPos++] * istep;\n            rx2 = 0 | x2;\n            x0 += qupvt.adj43[rx0];\n            rx3 = 0 | x3;\n            x1 += qupvt.adj43[rx1];\n            ix[ixPos++] = 0 | x0;\n            x2 += qupvt.adj43[rx2];\n            ix[ixPos++] = 0 | x1;\n            x3 += qupvt.adj43[rx3];\n            ix[ixPos++] = 0 | x2;\n            ix[ixPos++] = 0 | x3;\n        }\n        if (remaining != 0) {\n            var x0, x1;\n            var rx0, rx1;\n\n            x0 = xr[xrPos++] * istep;\n            x1 = xr[xrPos++] * istep;\n            rx0 = 0 | x0;\n            rx1 = 0 | x1;\n            x0 += qupvt.adj43[rx0];\n            x1 += qupvt.adj43[rx1];\n            ix[ixPos++] = 0 | x0;\n            ix[ixPos++] = 0 | x1;\n        }\n    }\n\n    /**\n     * Quantization function This function will select which lines to quantize\n     * and call the proper quantization function\n     */\n    function quantize_xrpow(xp, pi, istep, codInfo, prevNoise) {\n        /* quantize on xr^(3/4) instead of xr */\n        var sfb;\n        var sfbmax;\n        var j = 0;\n        var prev_data_use;\n        var accumulate = 0;\n        var accumulate01 = 0;\n        var xpPos = 0;\n        var iData = pi;\n        var iDataPos = 0;\n        var acc_iData = iData;\n        var acc_iDataPos = 0;\n        var acc_xp = xp;\n        var acc_xpPos = 0;\n\n        /*\n         * Reusing previously computed data does not seems to work if global\n         * gain is changed. Finding why it behaves this way would allow to use a\n         * cache of previously computed values (let's 10 cached values per sfb)\n         * that would probably provide a noticeable speedup\n         */\n        prev_data_use = (prevNoise != null && (codInfo.global_gain == prevNoise.global_gain));\n\n        if (codInfo.block_type == Encoder.SHORT_TYPE)\n            sfbmax = 38;\n        else\n            sfbmax = 21;\n\n        for (sfb = 0; sfb <= sfbmax; sfb++) {\n            var step = -1;\n\n            if (prev_data_use || codInfo.block_type == Encoder.NORM_TYPE) {\n                step = codInfo.global_gain\n                    - ((codInfo.scalefac[sfb] + (codInfo.preflag != 0 ? qupvt.pretab[sfb]\n                        : 0)) << (codInfo.scalefac_scale + 1))\n                    - codInfo.subblock_gain[codInfo.window[sfb]] * 8;\n            }\n            assert(codInfo.width[sfb] >= 0);\n            if (prev_data_use && (prevNoise.step[sfb] == step)) {\n                /*\n                 * do not recompute this part, but compute accumulated lines\n                 */\n                if (accumulate != 0) {\n                    quantize_lines_xrpow(accumulate, istep, acc_xp, acc_xpPos,\n                        acc_iData, acc_iDataPos);\n                    accumulate = 0;\n                }\n                if (accumulate01 != 0) {\n                    quantize_lines_xrpow_01(accumulate01, istep, acc_xp,\n                        acc_xpPos, acc_iData, acc_iDataPos);\n                    accumulate01 = 0;\n                }\n            } else { /* should compute this part */\n                var l = codInfo.width[sfb];\n\n                if ((j + codInfo.width[sfb]) > codInfo.max_nonzero_coeff) {\n                    /* do not compute upper zero part */\n                    var usefullsize;\n                    usefullsize = codInfo.max_nonzero_coeff - j + 1;\n                    Arrays.fill(pi, codInfo.max_nonzero_coeff, 576, 0);\n                    l = usefullsize;\n\n                    if (l < 0) {\n                        l = 0;\n                    }\n\n                    /* no need to compute higher sfb values */\n                    sfb = sfbmax + 1;\n                }\n\n                /* accumulate lines to quantize */\n                if (0 == accumulate && 0 == accumulate01) {\n                    acc_iData = iData;\n                    acc_iDataPos = iDataPos;\n                    acc_xp = xp;\n                    acc_xpPos = xpPos;\n                }\n                if (prevNoise != null && prevNoise.sfb_count1 > 0\n                    && sfb >= prevNoise.sfb_count1\n                    && prevNoise.step[sfb] > 0\n                    && step >= prevNoise.step[sfb]) {\n\n                    if (accumulate != 0) {\n                        quantize_lines_xrpow(accumulate, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate = 0;\n                        acc_iData = iData;\n                        acc_iDataPos = iDataPos;\n                        acc_xp = xp;\n                        acc_xpPos = xpPos;\n                    }\n                    accumulate01 += l;\n                } else {\n                    if (accumulate01 != 0) {\n                        quantize_lines_xrpow_01(accumulate01, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate01 = 0;\n                        acc_iData = iData;\n                        acc_iDataPos = iDataPos;\n                        acc_xp = xp;\n                        acc_xpPos = xpPos;\n                    }\n                    accumulate += l;\n                }\n\n                if (l <= 0) {\n                    /*\n                     * rh: 20040215 may happen due to \"prev_data_use\"\n                     * optimization\n                     */\n                    if (accumulate01 != 0) {\n                        quantize_lines_xrpow_01(accumulate01, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate01 = 0;\n                    }\n                    if (accumulate != 0) {\n                        quantize_lines_xrpow(accumulate, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate = 0;\n                    }\n\n                    break;\n                    /* ends for-loop */\n                }\n            }\n            if (sfb <= sfbmax) {\n                iDataPos += codInfo.width[sfb];\n                xpPos += codInfo.width[sfb];\n                j += codInfo.width[sfb];\n            }\n        }\n        if (accumulate != 0) { /* last data part */\n            quantize_lines_xrpow(accumulate, istep, acc_xp, acc_xpPos,\n                acc_iData, acc_iDataPos);\n            accumulate = 0;\n        }\n        if (accumulate01 != 0) { /* last data part */\n            quantize_lines_xrpow_01(accumulate01, istep, acc_xp, acc_xpPos,\n                acc_iData, acc_iDataPos);\n            accumulate01 = 0;\n        }\n\n    }\n\n    /**\n     * ix_max\n     */\n    function ix_max(ix, ixPos, endPos) {\n        var max1 = 0, max2 = 0;\n\n        do {\n            var x1 = ix[ixPos++];\n            var x2 = ix[ixPos++];\n            if (max1 < x1)\n                max1 = x1;\n\n            if (max2 < x2)\n                max2 = x2;\n        } while (ixPos < endPos);\n        if (max1 < max2)\n            max1 = max2;\n        return max1;\n    }\n\n    function count_bit_ESC(ix, ixPos, end, t1, t2, s) {\n        /* ESC-table is used */\n        var linbits = Tables.ht[t1].xlen * 65536 + Tables.ht[t2].xlen;\n        var sum = 0, sum2;\n\n        do {\n            var x = ix[ixPos++];\n            var y = ix[ixPos++];\n\n            if (x != 0) {\n                if (x > 14) {\n                    x = 15;\n                    sum += linbits;\n                }\n                x *= 16;\n            }\n\n            if (y != 0) {\n                if (y > 14) {\n                    y = 15;\n                    sum += linbits;\n                }\n                x += y;\n            }\n\n            sum += Tables.largetbl[x];\n        } while (ixPos < end);\n\n        sum2 = sum & 0xffff;\n        sum >>= 16;\n\n        if (sum > sum2) {\n            sum = sum2;\n            t1 = t2;\n        }\n\n        s.bits += sum;\n        return t1;\n    }\n\n    function count_bit_noESC(ix, ixPos, end, s) {\n        /* No ESC-words */\n        var sum1 = 0;\n        var hlen1 = Tables.ht[1].hlen;\n\n        do {\n            var x = ix[ixPos + 0] * 2 + ix[ixPos + 1];\n            ixPos += 2;\n            sum1 += hlen1[x];\n        } while (ixPos < end);\n\n        s.bits += sum1;\n        return 1;\n    }\n\n    function count_bit_noESC_from2(ix, ixPos, end, t1, s) {\n        /* No ESC-words */\n        var sum = 0, sum2;\n        var xlen = Tables.ht[t1].xlen;\n        var hlen;\n        if (t1 == 2)\n            hlen = Tables.table23;\n        else\n            hlen = Tables.table56;\n\n        do {\n            var x = ix[ixPos + 0] * xlen + ix[ixPos + 1];\n            ixPos += 2;\n            sum += hlen[x];\n        } while (ixPos < end);\n\n        sum2 = sum & 0xffff;\n        sum >>= 16;\n\n        if (sum > sum2) {\n            sum = sum2;\n            t1++;\n        }\n\n        s.bits += sum;\n        return t1;\n    }\n\n    function count_bit_noESC_from3(ix, ixPos, end, t1, s) {\n        /* No ESC-words */\n        var sum1 = 0;\n        var sum2 = 0;\n        var sum3 = 0;\n        var xlen = Tables.ht[t1].xlen;\n        var hlen1 = Tables.ht[t1].hlen;\n        var hlen2 = Tables.ht[t1 + 1].hlen;\n        var hlen3 = Tables.ht[t1 + 2].hlen;\n\n        do {\n            var x = ix[ixPos + 0] * xlen + ix[ixPos + 1];\n            ixPos += 2;\n            sum1 += hlen1[x];\n            sum2 += hlen2[x];\n            sum3 += hlen3[x];\n        } while (ixPos < end);\n        var t = t1;\n        if (sum1 > sum2) {\n            sum1 = sum2;\n            t++;\n        }\n        if (sum1 > sum3) {\n            sum1 = sum3;\n            t = t1 + 2;\n        }\n        s.bits += sum1;\n\n        return t;\n    }\n\n    /*************************************************************************/\n    /* choose table */\n    /*************************************************************************/\n\n    var huf_tbl_noESC = [1, 2, 5, 7, 7, 10, 10, 13, 13,\n        13, 13, 13, 13, 13, 13];\n\n    /**\n     * Choose the Huffman table that will encode ix[begin..end] with the fewest\n     * bits.\n     *\n     * Note: This code contains knowledge about the sizes and characteristics of\n     * the Huffman tables as defined in the IS (Table B.7), and will not work\n     * with any arbitrary tables.\n     */\n    function choose_table(ix, ixPos, endPos, s) {\n        var max = ix_max(ix, ixPos, endPos);\n\n        switch (max) {\n            case 0:\n                return max;\n\n            case 1:\n                return count_bit_noESC(ix, ixPos, endPos, s);\n\n            case 2:\n            case 3:\n                return count_bit_noESC_from2(ix, ixPos, endPos,\n                    huf_tbl_noESC[max - 1], s);\n\n            case 4:\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n                return count_bit_noESC_from3(ix, ixPos, endPos,\n                    huf_tbl_noESC[max - 1], s);\n\n            default:\n                /* try tables with linbits */\n                if (max > QuantizePVT.IXMAX_VAL) {\n                    s.bits = QuantizePVT.LARGE_BITS;\n                    return -1;\n                }\n                max -= 15;\n                var choice2;\n                for (choice2 = 24; choice2 < 32; choice2++) {\n                    if (Tables.ht[choice2].linmax >= max) {\n                        break;\n                    }\n                }\n                var choice;\n                for (choice = choice2 - 8; choice < 24; choice++) {\n                    if (Tables.ht[choice].linmax >= max) {\n                        break;\n                    }\n                }\n                return count_bit_ESC(ix, ixPos, endPos, choice, choice2, s);\n        }\n    }\n\n    /**\n     * count_bit\n     */\n    this.noquant_count_bits = function (gfc, gi, prev_noise) {\n        var ix = gi.l3_enc;\n        var i = Math.min(576, ((gi.max_nonzero_coeff + 2) >> 1) << 1);\n\n        if (prev_noise != null)\n            prev_noise.sfb_count1 = 0;\n\n        /* Determine count1 region */\n        for (; i > 1; i -= 2)\n            if ((ix[i - 1] | ix[i - 2]) != 0)\n                break;\n        gi.count1 = i;\n\n        /* Determines the number of bits to encode the quadruples. */\n        var a1 = 0;\n        var a2 = 0;\n        for (; i > 3; i -= 4) {\n            var p;\n            /* hack to check if all values <= 1 */\n            //throw \"TODO: HACK         if ((((long) ix[i - 1] | (long) ix[i - 2] | (long) ix[i - 3] | (long) ix[i - 4]) & 0xffffffffL) > 1L        \"\n            //if (true) {\n            if (((ix[i - 1] | ix[i - 2] | ix[i - 3] | ix[i - 4]) & 0x7fffffff) > 1) {\n                break;\n            }\n            p = ((ix[i - 4] * 2 + ix[i - 3]) * 2 + ix[i - 2]) * 2 + ix[i - 1];\n            a1 += Tables.t32l[p];\n            a2 += Tables.t33l[p];\n        }\n        var bits = a1;\n        gi.count1table_select = 0;\n        if (a1 > a2) {\n            bits = a2;\n            gi.count1table_select = 1;\n        }\n\n        gi.count1bits = bits;\n        gi.big_values = i;\n        if (i == 0)\n            return bits;\n\n        if (gi.block_type == Encoder.SHORT_TYPE) {\n            a1 = 3 * gfc.scalefac_band.s[3];\n            if (a1 > gi.big_values)\n                a1 = gi.big_values;\n            a2 = gi.big_values;\n\n        } else if (gi.block_type == Encoder.NORM_TYPE) {\n            assert(i <= 576);\n            /* bv_scf has 576 entries (0..575) */\n            a1 = gi.region0_count = gfc.bv_scf[i - 2];\n            a2 = gi.region1_count = gfc.bv_scf[i - 1];\n\n            assert(a1 + a2 + 2 < Encoder.SBPSY_l);\n            a2 = gfc.scalefac_band.l[a1 + a2 + 2];\n            a1 = gfc.scalefac_band.l[a1 + 1];\n            if (a2 < i) {\n                var bi = new Bits(bits);\n                gi.table_select[2] = choose_table(ix, a2, i, bi);\n                bits = bi.bits;\n            }\n        } else {\n            gi.region0_count = 7;\n            /* gi.region1_count = SBPSY_l - 7 - 1; */\n            gi.region1_count = Encoder.SBMAX_l - 1 - 7 - 1;\n            a1 = gfc.scalefac_band.l[7 + 1];\n            a2 = i;\n            if (a1 > a2) {\n                a1 = a2;\n            }\n        }\n\n        /* have to allow for the case when bigvalues < region0 < region1 */\n        /* (and region0, region1 are ignored) */\n        a1 = Math.min(a1, i);\n        a2 = Math.min(a2, i);\n\n        assert(a1 >= 0);\n        assert(a2 >= 0);\n\n        /* Count the number of bits necessary to code the bigvalues region. */\n        if (0 < a1) {\n            var bi = new Bits(bits);\n            gi.table_select[0] = choose_table(ix, 0, a1, bi);\n            bits = bi.bits;\n        }\n        if (a1 < a2) {\n            var bi = new Bits(bits);\n            gi.table_select[1] = choose_table(ix, a1, a2, bi);\n            bits = bi.bits;\n        }\n        if (gfc.use_best_huffman == 2) {\n            gi.part2_3_length = bits;\n            best_huffman_divide(gfc, gi);\n            bits = gi.part2_3_length;\n        }\n\n        if (prev_noise != null) {\n            if (gi.block_type == Encoder.NORM_TYPE) {\n                var sfb = 0;\n                while (gfc.scalefac_band.l[sfb] < gi.big_values) {\n                    sfb++;\n                }\n                prev_noise.sfb_count1 = sfb;\n            }\n        }\n\n        return bits;\n    }\n\n    this.count_bits = function (gfc, xr, gi, prev_noise) {\n        var ix = gi.l3_enc;\n\n        /* since quantize_xrpow uses table lookup, we need to check this first: */\n        var w = (QuantizePVT.IXMAX_VAL) / qupvt.IPOW20(gi.global_gain);\n\n        if (gi.xrpow_max > w)\n            return QuantizePVT.LARGE_BITS;\n\n        quantize_xrpow(xr, ix, qupvt.IPOW20(gi.global_gain), gi, prev_noise);\n\n        if ((gfc.substep_shaping & 2) != 0) {\n            var j = 0;\n            /* 0.634521682242439 = 0.5946*2**(.5*0.1875) */\n            var gain = gi.global_gain + gi.scalefac_scale;\n            var roundfac = 0.634521682242439 / qupvt.IPOW20(gain);\n            for (var sfb = 0; sfb < gi.sfbmax; sfb++) {\n                var width = gi.width[sfb];\n                assert(width >= 0);\n                if (0 == gfc.pseudohalf[sfb]) {\n                    j += width;\n                } else {\n                    var k;\n                    for (k = j, j += width; k < j; ++k) {\n                        ix[k] = (xr[k] >= roundfac) ? ix[k] : 0;\n                    }\n                }\n            }\n        }\n        return this.noquant_count_bits(gfc, gi, prev_noise);\n    }\n\n    /**\n     * re-calculate the best scalefac_compress using scfsi the saved bits are\n     * kept in the bit reservoir.\n     */\n    function recalc_divide_init(gfc, cod_info, ix, r01_bits, r01_div, r0_tbl, r1_tbl) {\n        var bigv = cod_info.big_values;\n\n        for (var r0 = 0; r0 <= 7 + 15; r0++) {\n            r01_bits[r0] = QuantizePVT.LARGE_BITS;\n        }\n\n        for (var r0 = 0; r0 < 16; r0++) {\n            var a1 = gfc.scalefac_band.l[r0 + 1];\n            if (a1 >= bigv)\n                break;\n            var r0bits = 0;\n            var bi = new Bits(r0bits);\n            var r0t = choose_table(ix, 0, a1, bi);\n            r0bits = bi.bits;\n\n            for (var r1 = 0; r1 < 8; r1++) {\n                var a2 = gfc.scalefac_band.l[r0 + r1 + 2];\n                if (a2 >= bigv)\n                    break;\n                var bits = r0bits;\n                bi = new Bits(bits);\n                var r1t = choose_table(ix, a1, a2, bi);\n                bits = bi.bits;\n                if (r01_bits[r0 + r1] > bits) {\n                    r01_bits[r0 + r1] = bits;\n                    r01_div[r0 + r1] = r0;\n                    r0_tbl[r0 + r1] = r0t;\n                    r1_tbl[r0 + r1] = r1t;\n                }\n            }\n        }\n    }\n\n    function recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div, r0_tbl, r1_tbl) {\n        var bigv = cod_info2.big_values;\n\n        for (var r2 = 2; r2 < Encoder.SBMAX_l + 1; r2++) {\n            var a2 = gfc.scalefac_band.l[r2];\n            if (a2 >= bigv)\n                break;\n            var bits = r01_bits[r2 - 2] + cod_info2.count1bits;\n            if (gi.part2_3_length <= bits)\n                break;\n\n            var bi = new Bits(bits);\n            var r2t = choose_table(ix, a2, bigv, bi);\n            bits = bi.bits;\n            if (gi.part2_3_length <= bits)\n                continue;\n\n            gi.assign(cod_info2);\n            gi.part2_3_length = bits;\n            gi.region0_count = r01_div[r2 - 2];\n            gi.region1_count = r2 - 2 - r01_div[r2 - 2];\n            gi.table_select[0] = r0_tbl[r2 - 2];\n            gi.table_select[1] = r1_tbl[r2 - 2];\n            gi.table_select[2] = r2t;\n        }\n    }\n\n    this.best_huffman_divide = function (gfc, gi) {\n        var cod_info2 = new GrInfo();\n        var ix = gi.l3_enc;\n        var r01_bits = new_int(7 + 15 + 1);\n        var r01_div = new_int(7 + 15 + 1);\n        var r0_tbl = new_int(7 + 15 + 1);\n        var r1_tbl = new_int(7 + 15 + 1);\n\n        /* SHORT BLOCK stuff fails for MPEG2 */\n        if (gi.block_type == Encoder.SHORT_TYPE && gfc.mode_gr == 1)\n            return;\n\n        cod_info2.assign(gi);\n        if (gi.block_type == Encoder.NORM_TYPE) {\n            recalc_divide_init(gfc, gi, ix, r01_bits, r01_div, r0_tbl, r1_tbl);\n            recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div,\n                r0_tbl, r1_tbl);\n        }\n        var i = cod_info2.big_values;\n        if (i == 0 || (ix[i - 2] | ix[i - 1]) > 1)\n            return;\n\n        i = gi.count1 + 2;\n        if (i > 576)\n            return;\n\n        /* Determines the number of bits to encode the quadruples. */\n        cod_info2.assign(gi);\n        cod_info2.count1 = i;\n        var a1 = 0;\n        var a2 = 0;\n\n        assert(i <= 576);\n\n        for (; i > cod_info2.big_values; i -= 4) {\n            var p = ((ix[i - 4] * 2 + ix[i - 3]) * 2 + ix[i - 2]) * 2\n                + ix[i - 1];\n            a1 += Tables.t32l[p];\n            a2 += Tables.t33l[p];\n        }\n        cod_info2.big_values = i;\n\n        cod_info2.count1table_select = 0;\n        if (a1 > a2) {\n            a1 = a2;\n            cod_info2.count1table_select = 1;\n        }\n\n        cod_info2.count1bits = a1;\n\n        if (cod_info2.block_type == Encoder.NORM_TYPE)\n            recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div,\n                r0_tbl, r1_tbl);\n        else {\n            /* Count the number of bits necessary to code the bigvalues region. */\n            cod_info2.part2_3_length = a1;\n            a1 = gfc.scalefac_band.l[7 + 1];\n            if (a1 > i) {\n                a1 = i;\n            }\n            if (a1 > 0) {\n                var bi = new Bits(cod_info2.part2_3_length);\n                cod_info2.table_select[0] = choose_table(ix, 0, a1, bi);\n                cod_info2.part2_3_length = bi.bits;\n            }\n            if (i > a1) {\n                var bi = new Bits(cod_info2.part2_3_length);\n                cod_info2.table_select[1] = choose_table(ix, a1, i, bi);\n                cod_info2.part2_3_length = bi.bits;\n            }\n            if (gi.part2_3_length > cod_info2.part2_3_length)\n                gi.assign(cod_info2);\n        }\n    }\n\n    var slen1_n = [1, 1, 1, 1, 8, 2, 2, 2, 4, 4, 4, 8, 8, 8, 16, 16];\n    var slen2_n = [1, 2, 4, 8, 1, 2, 4, 8, 2, 4, 8, 2, 4, 8, 4, 8];\n    var slen1_tab = [0, 0, 0, 0, 3, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4];\n    var slen2_tab = [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3];\n    Takehiro.slen1_tab = slen1_tab;\n    Takehiro.slen2_tab = slen2_tab;\n\n    function scfsi_calc(ch, l3_side) {\n        var sfb;\n        var gi = l3_side.tt[1][ch];\n        var g0 = l3_side.tt[0][ch];\n\n        for (var i = 0; i < Tables.scfsi_band.length - 1; i++) {\n            for (sfb = Tables.scfsi_band[i]; sfb < Tables.scfsi_band[i + 1]; sfb++) {\n                if (g0.scalefac[sfb] != gi.scalefac[sfb]\n                    && gi.scalefac[sfb] >= 0)\n                    break;\n            }\n            if (sfb == Tables.scfsi_band[i + 1]) {\n                for (sfb = Tables.scfsi_band[i]; sfb < Tables.scfsi_band[i + 1]; sfb++) {\n                    gi.scalefac[sfb] = -1;\n                }\n                l3_side.scfsi[ch][i] = 1;\n            }\n        }\n        var s1 = 0;\n        var c1 = 0;\n        for (sfb = 0; sfb < 11; sfb++) {\n            if (gi.scalefac[sfb] == -1)\n                continue;\n            c1++;\n            if (s1 < gi.scalefac[sfb])\n                s1 = gi.scalefac[sfb];\n        }\n        var s2 = 0;\n        var c2 = 0;\n        for (; sfb < Encoder.SBPSY_l; sfb++) {\n            if (gi.scalefac[sfb] == -1)\n                continue;\n            c2++;\n            if (s2 < gi.scalefac[sfb])\n                s2 = gi.scalefac[sfb];\n        }\n\n        for (var i = 0; i < 16; i++) {\n            if (s1 < slen1_n[i] && s2 < slen2_n[i]) {\n                var c = slen1_tab[i] * c1 + slen2_tab[i] * c2;\n                if (gi.part2_length > c) {\n                    gi.part2_length = c;\n                    gi.scalefac_compress = i;\n                }\n            }\n        }\n    }\n\n    /**\n     * Find the optimal way to store the scalefactors. Only call this routine\n     * after final scalefactors have been chosen and the channel/granule will\n     * not be re-encoded.\n     */\n    this.best_scalefac_store = function (gfc, gr, ch, l3_side) {\n        /* use scalefac_scale if we can */\n        var gi = l3_side.tt[gr][ch];\n        var sfb, i, j, l;\n        var recalc = 0;\n\n        /*\n         * remove scalefacs from bands with ix=0. This idea comes from the AAC\n         * ISO docs. added mt 3/00\n         */\n        /* check if l3_enc=0 */\n        j = 0;\n        for (sfb = 0; sfb < gi.sfbmax; sfb++) {\n            var width = gi.width[sfb];\n            assert(width >= 0);\n            j += width;\n            for (l = -width; l < 0; l++) {\n                if (gi.l3_enc[l + j] != 0)\n                    break;\n            }\n            if (l == 0)\n                gi.scalefac[sfb] = recalc = -2;\n            /* anything goes. */\n            /*\n             * only best_scalefac_store and calc_scfsi know--and only they\n             * should know--about the magic number -2.\n             */\n        }\n\n        if (0 == gi.scalefac_scale && 0 == gi.preflag) {\n            var s = 0;\n            for (sfb = 0; sfb < gi.sfbmax; sfb++)\n                if (gi.scalefac[sfb] > 0)\n                    s |= gi.scalefac[sfb];\n\n            if (0 == (s & 1) && s != 0) {\n                for (sfb = 0; sfb < gi.sfbmax; sfb++)\n                    if (gi.scalefac[sfb] > 0)\n                        gi.scalefac[sfb] >>= 1;\n\n                gi.scalefac_scale = recalc = 1;\n            }\n        }\n\n        if (0 == gi.preflag && gi.block_type != Encoder.SHORT_TYPE\n            && gfc.mode_gr == 2) {\n            for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                if (gi.scalefac[sfb] < qupvt.pretab[sfb]\n                    && gi.scalefac[sfb] != -2)\n                    break;\n            if (sfb == Encoder.SBPSY_l) {\n                for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                    if (gi.scalefac[sfb] > 0)\n                        gi.scalefac[sfb] -= qupvt.pretab[sfb];\n\n                gi.preflag = recalc = 1;\n            }\n        }\n\n        for (i = 0; i < 4; i++)\n            l3_side.scfsi[ch][i] = 0;\n\n        if (gfc.mode_gr == 2 && gr == 1\n            && l3_side.tt[0][ch].block_type != Encoder.SHORT_TYPE\n            && l3_side.tt[1][ch].block_type != Encoder.SHORT_TYPE) {\n            scfsi_calc(ch, l3_side);\n            recalc = 0;\n        }\n        for (sfb = 0; sfb < gi.sfbmax; sfb++) {\n            if (gi.scalefac[sfb] == -2) {\n                gi.scalefac[sfb] = 0;\n                /* if anything goes, then 0 is a good choice */\n            }\n        }\n        if (recalc != 0) {\n            if (gfc.mode_gr == 2) {\n                this.scale_bitcount(gi);\n            } else {\n                this.scale_bitcount_lsf(gfc, gi);\n            }\n        }\n    }\n\n    function all_scalefactors_not_negative(scalefac, n) {\n        for (var i = 0; i < n; ++i) {\n            if (scalefac[i] < 0)\n                return false;\n        }\n        return true;\n    }\n\n    /**\n     * number of bits used to encode scalefacs.\n     *\n     * 18*slen1_tab[i] + 18*slen2_tab[i]\n     */\n    var scale_short = [0, 18, 36, 54, 54, 36, 54, 72,\n        54, 72, 90, 72, 90, 108, 108, 126];\n\n    /**\n     * number of bits used to encode scalefacs.\n     *\n     * 17*slen1_tab[i] + 18*slen2_tab[i]\n     */\n    var scale_mixed = [0, 18, 36, 54, 51, 35, 53, 71,\n        52, 70, 88, 69, 87, 105, 104, 122];\n\n    /**\n     * number of bits used to encode scalefacs.\n     *\n     * 11*slen1_tab[i] + 10*slen2_tab[i]\n     */\n    var scale_long = [0, 10, 20, 30, 33, 21, 31, 41, 32, 42,\n        52, 43, 53, 63, 64, 74];\n\n    /**\n     * Also calculates the number of bits necessary to code the scalefactors.\n     */\n    this.scale_bitcount = function (cod_info) {\n        var k, sfb, max_slen1 = 0, max_slen2 = 0;\n\n        /* maximum values */\n        var tab;\n        var scalefac = cod_info.scalefac;\n\n        assert(all_scalefactors_not_negative(scalefac, cod_info.sfbmax));\n\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            tab = scale_short;\n            if (cod_info.mixed_block_flag != 0)\n                tab = scale_mixed;\n        } else { /* block_type == 1,2,or 3 */\n            tab = scale_long;\n            if (0 == cod_info.preflag) {\n                for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                    if (scalefac[sfb] < qupvt.pretab[sfb])\n                        break;\n\n                if (sfb == Encoder.SBPSY_l) {\n                    cod_info.preflag = 1;\n                    for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                        scalefac[sfb] -= qupvt.pretab[sfb];\n                }\n            }\n        }\n\n        for (sfb = 0; sfb < cod_info.sfbdivide; sfb++)\n            if (max_slen1 < scalefac[sfb])\n                max_slen1 = scalefac[sfb];\n\n        for (; sfb < cod_info.sfbmax; sfb++)\n            if (max_slen2 < scalefac[sfb])\n                max_slen2 = scalefac[sfb];\n\n        /*\n         * from Takehiro TOMINAGA <tominaga@isoternet.org> 10/99 loop over *all*\n         * posible values of scalefac_compress to find the one which uses the\n         * smallest number of bits. ISO would stop at first valid index\n         */\n        cod_info.part2_length = QuantizePVT.LARGE_BITS;\n        for (k = 0; k < 16; k++) {\n            if (max_slen1 < slen1_n[k] && max_slen2 < slen2_n[k]\n                && cod_info.part2_length > tab[k]) {\n                cod_info.part2_length = tab[k];\n                cod_info.scalefac_compress = k;\n            }\n        }\n        return cod_info.part2_length == QuantizePVT.LARGE_BITS;\n    }\n\n    /**\n     * table of largest scalefactor values for MPEG2\n     */\n    var max_range_sfac_tab = [[15, 15, 7, 7],\n        [15, 15, 7, 0], [7, 3, 0, 0], [15, 31, 31, 0],\n        [7, 7, 7, 0], [3, 3, 0, 0]];\n\n    /**\n     * Also counts the number of bits to encode the scalefacs but for MPEG 2\n     * Lower sampling frequencies (24, 22.05 and 16 kHz.)\n     *\n     * This is reverse-engineered from section 2.4.3.2 of the MPEG2 IS,\n     * \"Audio Decoding Layer III\"\n     */\n    this.scale_bitcount_lsf = function (gfc, cod_info) {\n        var table_number, row_in_table, partition, nr_sfb, window;\n        var over;\n        var i, sfb;\n        var max_sfac = new_int(4);\n//var partition_table;\n        var scalefac = cod_info.scalefac;\n\n        /*\n         * Set partition table. Note that should try to use table one, but do\n         * not yet...\n         */\n        if (cod_info.preflag != 0)\n            table_number = 2;\n        else\n            table_number = 0;\n\n        for (i = 0; i < 4; i++)\n            max_sfac[i] = 0;\n\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            row_in_table = 1;\n            var partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n            for (sfb = 0, partition = 0; partition < 4; partition++) {\n                nr_sfb = partition_table[partition] / 3;\n                for (i = 0; i < nr_sfb; i++, sfb++)\n                    for (window = 0; window < 3; window++)\n                        if (scalefac[sfb * 3 + window] > max_sfac[partition])\n                            max_sfac[partition] = scalefac[sfb * 3 + window];\n            }\n        } else {\n            row_in_table = 0;\n            var partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n            for (sfb = 0, partition = 0; partition < 4; partition++) {\n                nr_sfb = partition_table[partition];\n                for (i = 0; i < nr_sfb; i++, sfb++)\n                    if (scalefac[sfb] > max_sfac[partition])\n                        max_sfac[partition] = scalefac[sfb];\n            }\n        }\n\n        for (over = false, partition = 0; partition < 4; partition++) {\n            if (max_sfac[partition] > max_range_sfac_tab[table_number][partition])\n                over = true;\n        }\n        if (!over) {\n            var slen1, slen2, slen3, slen4;\n\n            cod_info.sfb_partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n            for (partition = 0; partition < 4; partition++)\n                cod_info.slen[partition] = log2tab[max_sfac[partition]];\n\n            /* set scalefac_compress */\n            slen1 = cod_info.slen[0];\n            slen2 = cod_info.slen[1];\n            slen3 = cod_info.slen[2];\n            slen4 = cod_info.slen[3];\n\n            switch (table_number) {\n                case 0:\n                    cod_info.scalefac_compress = (((slen1 * 5) + slen2) << 4)\n                        + (slen3 << 2) + slen4;\n                    break;\n\n                case 1:\n                    cod_info.scalefac_compress = 400 + (((slen1 * 5) + slen2) << 2)\n                        + slen3;\n                    break;\n\n                case 2:\n                    cod_info.scalefac_compress = 500 + (slen1 * 3) + slen2;\n                    break;\n\n                default:\n                    System.err.printf(\"intensity stereo not implemented yet\\n\");\n                    break;\n            }\n        }\n        if (!over) {\n            assert(cod_info.sfb_partition_table != null);\n            cod_info.part2_length = 0;\n            for (partition = 0; partition < 4; partition++)\n                cod_info.part2_length += cod_info.slen[partition]\n                    * cod_info.sfb_partition_table[partition];\n        }\n        return over;\n    }\n\n    /*\n     * Since no bands have been over-amplified, we can set scalefac_compress and\n     * slen[] for the formatter\n     */\n    var log2tab = [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4,\n        4, 4, 4, 4];\n\n    this.huffman_init = function (gfc) {\n        for (var i = 2; i <= 576; i += 2) {\n            var scfb_anz = 0, bv_index;\n            while (gfc.scalefac_band.l[++scfb_anz] < i)\n                ;\n\n            bv_index = subdv_table[scfb_anz][0]; // .region0_count\n            while (gfc.scalefac_band.l[bv_index + 1] > i)\n                bv_index--;\n\n            if (bv_index < 0) {\n                /*\n                 * this is an indication that everything is going to be encoded\n                 * as region0: bigvalues < region0 < region1 so lets set\n                 * region0, region1 to some value larger than bigvalues\n                 */\n                bv_index = subdv_table[scfb_anz][0]; // .region0_count\n            }\n\n            gfc.bv_scf[i - 2] = bv_index;\n\n            bv_index = subdv_table[scfb_anz][1]; // .region1_count\n            while (gfc.scalefac_band.l[bv_index + gfc.bv_scf[i - 2] + 2] > i)\n                bv_index--;\n\n            if (bv_index < 0) {\n                bv_index = subdv_table[scfb_anz][1]; // .region1_count\n            }\n\n            gfc.bv_scf[i - 1] = bv_index;\n        }\n    }\n}\n\nmodule.exports = Takehiro;\n","/*\n *      quantize_pvt source file\n *\n *      Copyright (c) 1999-2002 Takehiro Tominaga\n *      Copyright (c) 2000-2002 Robert Hegemann\n *      Copyright (c) 2001 Naoki Shibata\n *      Copyright (c) 2002-2005 Gabriel Bouvigne\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: QuantizePVT.java,v 1.24 2011/05/24 20:48:06 kenchis Exp $ */\nvar ScaleFac = require('./ScaleFac.js');\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\nvar MeanBits = require('./MeanBits.js');\nvar LameInternalFlags = require('./LameInternalFlags.js');\n\nQuantizePVT.Q_MAX = (256 + 1);\nQuantizePVT.Q_MAX2 = 116;\nQuantizePVT.LARGE_BITS = 100000;\nQuantizePVT.IXMAX_VAL = 8206;\n\nfunction QuantizePVT() {\n\n    var tak = null;\n    var rv = null;\n    var psy = null;\n\n    this.setModules = function (_tk, _rv, _psy) {\n        tak = _tk;\n        rv = _rv;\n        psy = _psy;\n    };\n\n    function POW20(x) {\n        assert(0 <= (x + QuantizePVT.Q_MAX2) && x < QuantizePVT.Q_MAX);\n        return pow20[x + QuantizePVT.Q_MAX2];\n    }\n\n    this.IPOW20 = function (x) {\n        assert(0 <= x && x < QuantizePVT.Q_MAX);\n        return ipow20[x];\n    }\n\n    /**\n     * smallest such that 1.0+DBL_EPSILON != 1.0\n     */\n    var DBL_EPSILON = 2.2204460492503131e-016;\n\n    /**\n     * ix always <= 8191+15. see count_bits()\n     */\n    var IXMAX_VAL = QuantizePVT.IXMAX_VAL;\n\n    var PRECALC_SIZE = (IXMAX_VAL + 2);\n\n    var Q_MAX = QuantizePVT.Q_MAX;\n\n\n    /**\n     * <CODE>\n     * minimum possible number of\n     * -cod_info.global_gain + ((scalefac[] + (cod_info.preflag ? pretab[sfb] : 0))\n     * << (cod_info.scalefac_scale + 1)) + cod_info.subblock_gain[cod_info.window[sfb]] * 8;\n     *\n     * for long block, 0+((15+3)<<2) = 18*4 = 72\n     * for short block, 0+(15<<2)+7*8 = 15*4+56 = 116\n     * </CODE>\n     */\n    var Q_MAX2 = QuantizePVT.Q_MAX2;\n\n    var LARGE_BITS = QuantizePVT.LARGE_BITS;\n\n\n    /**\n     * Assuming dynamic range=96dB, this value should be 92\n     */\n    var NSATHSCALE = 100;\n\n    /**\n     * The following table is used to implement the scalefactor partitioning for\n     * MPEG2 as described in section 2.4.3.2 of the IS. The indexing corresponds\n     * to the way the tables are presented in the IS:\n     *\n     * [table_number][row_in_table][column of nr_of_sfb]\n     */\n    this.nr_of_sfb_block = [\n        [[6, 5, 5, 5], [9, 9, 9, 9], [6, 9, 9, 9]],\n        [[6, 5, 7, 3], [9, 9, 12, 6], [6, 9, 12, 6]],\n        [[11, 10, 0, 0], [18, 18, 0, 0], [15, 18, 0, 0]],\n        [[7, 7, 7, 0], [12, 12, 12, 0], [6, 15, 12, 0]],\n        [[6, 6, 6, 3], [12, 9, 9, 6], [6, 12, 9, 6]],\n        [[8, 8, 5, 0], [15, 12, 9, 0], [6, 18, 9, 0]]];\n\n    /**\n     * Table B.6: layer3 preemphasis\n     */\n    var pretab = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n        2, 2, 3, 3, 3, 2, 0];\n    this.pretab = pretab;\n\n    /**\n     * Here are MPEG1 Table B.8 and MPEG2 Table B.1 -- Layer III scalefactor\n     * bands. <BR>\n     * Index into this using a method such as:<BR>\n     * idx = fr_ps.header.sampling_frequency + (fr_ps.header.version * 3)\n     */\n    this.sfBandIndex = [\n        // Table B.2.b: 22.05 kHz\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0, 4, 8, 12, 18, 24, 32, 42, 56, 74, 100, 132, 174, 192]\n            , [0, 0, 0, 0, 0, 0, 0] //  sfb21 pseudo sub bands\n            , [0, 0, 0, 0, 0, 0, 0] //  sfb12 pseudo sub bands\n        ),\n        /* Table B.2.c: 24 kHz */ /* docs: 332. mpg123(broken): 330 */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 114, 136, 162, 194, 232, 278, 332, 394, 464,\n                540, 576],\n            [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 136, 180, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.2.a: 16 kHz */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 134, 174, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.8.b: 44.1 kHz */\n        new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 52, 62, 74, 90, 110, 134, 162, 196, 238, 288, 342, 418,\n                576],\n            [0, 4, 8, 12, 16, 22, 30, 40, 52, 66, 84, 106, 136, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.8.c: 48 kHz */\n        new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 42, 50, 60, 72, 88, 106, 128, 156, 190, 230, 276, 330, 384,\n                576],\n            [0, 4, 8, 12, 16, 22, 28, 38, 50, 64, 80, 100, 126, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.8.a: 32 kHz */\n        new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 54, 66, 82, 102, 126, 156, 194, 240, 296, 364, 448, 550,\n                576],\n            [0, 4, 8, 12, 16, 22, 30, 42, 58, 78, 104, 138, 180, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* MPEG-2.5 11.025 kHz */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0 / 3, 12 / 3, 24 / 3, 36 / 3, 54 / 3, 78 / 3, 108 / 3, 144 / 3, 186 / 3, 240 / 3, 312 / 3,\n                402 / 3, 522 / 3, 576 / 3]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* MPEG-2.5 12 kHz */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0 / 3, 12 / 3, 24 / 3, 36 / 3, 54 / 3, 78 / 3, 108 / 3, 144 / 3, 186 / 3, 240 / 3, 312 / 3,\n                402 / 3, 522 / 3, 576 / 3]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* MPEG-2.5 8 kHz */\n        new ScaleFac([0, 12, 24, 36, 48, 60, 72, 88, 108, 132, 160, 192, 232, 280, 336, 400, 476, 566, 568, 570,\n                572, 574, 576],\n            [0 / 3, 24 / 3, 48 / 3, 72 / 3, 108 / 3, 156 / 3, 216 / 3, 288 / 3, 372 / 3, 480 / 3, 486 / 3,\n                492 / 3, 498 / 3, 576 / 3]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        )\n    ];\n\n    var pow20 = new_float(Q_MAX + Q_MAX2 + 1);\n    var ipow20 = new_float(Q_MAX);\n    var pow43 = new_float(PRECALC_SIZE);\n\n    var adj43 = new_float(PRECALC_SIZE);\n    this.adj43 = adj43;\n\n    /**\n     * <PRE>\n     * compute the ATH for each scalefactor band cd range: 0..96db\n     *\n     * Input: 3.3kHz signal 32767 amplitude (3.3kHz is where ATH is smallest =\n     * -5db) longblocks: sfb=12 en0/bw=-11db max_en0 = 1.3db shortblocks: sfb=5\n     * -9db 0db\n     *\n     * Input: 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 (repeated) longblocks: amp=1\n     * sfb=12 en0/bw=-103 db max_en0 = -92db amp=32767 sfb=12 -12 db -1.4db\n     *\n     * Input: 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 (repeated) shortblocks: amp=1\n     * sfb=5 en0/bw= -99 -86 amp=32767 sfb=5 -9 db 4db\n     *\n     *\n     * MAX energy of largest wave at 3.3kHz = 1db AVE energy of largest wave at\n     * 3.3kHz = -11db Let's take AVE: -11db = maximum signal in sfb=12. Dynamic\n     * range of CD: 96db. Therefor energy of smallest audible wave in sfb=12 =\n     * -11 - 96 = -107db = ATH at 3.3kHz.\n     *\n     * ATH formula for this wave: -5db. To adjust to LAME scaling, we need ATH =\n     * ATH_formula - 103 (db) ATH = ATH * 2.5e-10 (ener)\n     * </PRE>\n     */\n    function ATHmdct(gfp, f) {\n        var ath = psy.ATHformula(f, gfp);\n\n        ath -= NSATHSCALE;\n\n        /* modify the MDCT scaling for the ATH and convert to energy */\n        ath = Math.pow(10.0, ath / 10.0 + gfp.ATHlower);\n        return ath;\n    }\n\n    function compute_ath(gfp) {\n        var ATH_l = gfp.internal_flags.ATH.l;\n        var ATH_psfb21 = gfp.internal_flags.ATH.psfb21;\n        var ATH_s = gfp.internal_flags.ATH.s;\n        var ATH_psfb12 = gfp.internal_flags.ATH.psfb12;\n        var gfc = gfp.internal_flags;\n        var samp_freq = gfp.out_samplerate;\n\n        for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\n            var start = gfc.scalefac_band.l[sfb];\n            var end = gfc.scalefac_band.l[sfb + 1];\n            ATH_l[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 576);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_l[sfb] = Math.min(ATH_l[sfb], ATH_f);\n            }\n        }\n\n        for (var sfb = 0; sfb < Encoder.PSFB21; sfb++) {\n            var start = gfc.scalefac_band.psfb21[sfb];\n            var end = gfc.scalefac_band.psfb21[sfb + 1];\n            ATH_psfb21[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 576);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_psfb21[sfb] = Math.min(ATH_psfb21[sfb], ATH_f);\n            }\n        }\n\n        for (var sfb = 0; sfb < Encoder.SBMAX_s; sfb++) {\n            var start = gfc.scalefac_band.s[sfb];\n            var end = gfc.scalefac_band.s[sfb + 1];\n            ATH_s[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 192);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_s[sfb] = Math.min(ATH_s[sfb], ATH_f);\n            }\n            ATH_s[sfb] *= (gfc.scalefac_band.s[sfb + 1] - gfc.scalefac_band.s[sfb]);\n        }\n\n        for (var sfb = 0; sfb < Encoder.PSFB12; sfb++) {\n            var start = gfc.scalefac_band.psfb12[sfb];\n            var end = gfc.scalefac_band.psfb12[sfb + 1];\n            ATH_psfb12[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 192);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_psfb12[sfb] = Math.min(ATH_psfb12[sfb], ATH_f);\n            }\n            /* not sure about the following */\n            ATH_psfb12[sfb] *= (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12]);\n        }\n\n        /*\n         * no-ATH mode: reduce ATH to -200 dB\n         */\n        if (gfp.noATH) {\n            for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\n                ATH_l[sfb] = 1E-20;\n            }\n            for (var sfb = 0; sfb < Encoder.PSFB21; sfb++) {\n                ATH_psfb21[sfb] = 1E-20;\n            }\n            for (var sfb = 0; sfb < Encoder.SBMAX_s; sfb++) {\n                ATH_s[sfb] = 1E-20;\n            }\n            for (var sfb = 0; sfb < Encoder.PSFB12; sfb++) {\n                ATH_psfb12[sfb] = 1E-20;\n            }\n        }\n\n        /*\n         * work in progress, don't rely on it too much\n         */\n        gfc.ATH.floor = 10. * Math.log10(ATHmdct(gfp, -1.));\n    }\n\n    /**\n     * initialization for iteration_loop\n     */\n    this.iteration_init = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side = gfc.l3_side;\n        var i;\n\n        if (gfc.iteration_init_init == 0) {\n            gfc.iteration_init_init = 1;\n\n            l3_side.main_data_begin = 0;\n            compute_ath(gfp);\n\n            pow43[0] = 0.0;\n            for (i = 1; i < PRECALC_SIZE; i++)\n                pow43[i] = Math.pow(i, 4.0 / 3.0);\n\n            for (i = 0; i < PRECALC_SIZE - 1; i++)\n                adj43[i] = ((i + 1) - Math.pow(\n                    0.5 * (pow43[i] + pow43[i + 1]), 0.75));\n            adj43[i] = 0.5;\n\n            for (i = 0; i < Q_MAX; i++)\n                ipow20[i] = Math.pow(2.0, (i - 210) * -0.1875);\n            for (i = 0; i <= Q_MAX + Q_MAX2; i++)\n                pow20[i] = Math.pow(2.0, (i - 210 - Q_MAX2) * 0.25);\n\n            tak.huffman_init(gfc);\n\n            {\n                var bass, alto, treble, sfb21;\n\n                i = (gfp.exp_nspsytune >> 2) & 63;\n                if (i >= 32)\n                    i -= 64;\n                bass = Math.pow(10, i / 4.0 / 10.0);\n\n                i = (gfp.exp_nspsytune >> 8) & 63;\n                if (i >= 32)\n                    i -= 64;\n                alto = Math.pow(10, i / 4.0 / 10.0);\n\n                i = (gfp.exp_nspsytune >> 14) & 63;\n                if (i >= 32)\n                    i -= 64;\n                treble = Math.pow(10, i / 4.0 / 10.0);\n\n                /*\n                 * to be compatible with Naoki's original code, the next 6 bits\n                 * define only the amount of changing treble for sfb21\n                 */\n                i = (gfp.exp_nspsytune >> 20) & 63;\n                if (i >= 32)\n                    i -= 64;\n                sfb21 = treble * Math.pow(10, i / 4.0 / 10.0);\n                for (i = 0; i < Encoder.SBMAX_l; i++) {\n                    var f;\n                    if (i <= 6)\n                        f = bass;\n                    else if (i <= 13)\n                        f = alto;\n                    else if (i <= 20)\n                        f = treble;\n                    else\n                        f = sfb21;\n\n                    gfc.nsPsy.longfact[i] = f;\n                }\n                for (i = 0; i < Encoder.SBMAX_s; i++) {\n                    var f;\n                    if (i <= 5)\n                        f = bass;\n                    else if (i <= 10)\n                        f = alto;\n                    else if (i <= 11)\n                        f = treble;\n                    else\n                        f = sfb21;\n\n                    gfc.nsPsy.shortfact[i] = f;\n                }\n            }\n        }\n    }\n\n    /**\n     * allocate bits among 2 channels based on PE<BR>\n     * mt 6/99<BR>\n     * bugfixes rh 8/01: often allocated more than the allowed 4095 bits\n     */\n    this.on_pe = function (gfp, pe,\n                           targ_bits, mean_bits, gr, cbr) {\n        var gfc = gfp.internal_flags;\n        var tbits = 0, bits;\n        var add_bits = new_int(2);\n        var ch;\n\n        /* allocate targ_bits for granule */\n        var mb = new MeanBits(tbits);\n        var extra_bits = rv.ResvMaxBits(gfp, mean_bits, mb, cbr);\n        tbits = mb.bits;\n        /* maximum allowed bits for this granule */\n        var max_bits = tbits + extra_bits;\n        if (max_bits > LameInternalFlags.MAX_BITS_PER_GRANULE) {\n            // hard limit per granule\n            max_bits = LameInternalFlags.MAX_BITS_PER_GRANULE;\n        }\n        for (bits = 0, ch = 0; ch < gfc.channels_out; ++ch) {\n            /******************************************************************\n             * allocate bits for each channel\n             ******************************************************************/\n            targ_bits[ch] = Math.min(LameInternalFlags.MAX_BITS_PER_CHANNEL,\n                tbits / gfc.channels_out);\n\n            add_bits[ch] = 0 | (targ_bits[ch] * pe[gr][ch] / 700.0 - targ_bits[ch]);\n\n            /* at most increase bits by 1.5*average */\n            if (add_bits[ch] > mean_bits * 3 / 4)\n                add_bits[ch] = mean_bits * 3 / 4;\n            if (add_bits[ch] < 0)\n                add_bits[ch] = 0;\n\n            if (add_bits[ch] + targ_bits[ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL)\n                add_bits[ch] = Math.max(0,\n                    LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[ch]);\n\n            bits += add_bits[ch];\n        }\n        if (bits > extra_bits) {\n            for (ch = 0; ch < gfc.channels_out; ++ch) {\n                add_bits[ch] = extra_bits * add_bits[ch] / bits;\n            }\n        }\n\n        for (ch = 0; ch < gfc.channels_out; ++ch) {\n            targ_bits[ch] += add_bits[ch];\n            extra_bits -= add_bits[ch];\n        }\n\n        for (bits = 0, ch = 0; ch < gfc.channels_out; ++ch) {\n            bits += targ_bits[ch];\n        }\n        if (bits > LameInternalFlags.MAX_BITS_PER_GRANULE) {\n            var sum = 0;\n            for (ch = 0; ch < gfc.channels_out; ++ch) {\n                targ_bits[ch] *= LameInternalFlags.MAX_BITS_PER_GRANULE;\n                targ_bits[ch] /= bits;\n                sum += targ_bits[ch];\n            }\n            assert(sum <= LameInternalFlags.MAX_BITS_PER_GRANULE);\n        }\n\n        return max_bits;\n    }\n\n    this.reduce_side = function (targ_bits, ms_ener_ratio, mean_bits, max_bits) {\n        assert(max_bits <= LameInternalFlags.MAX_BITS_PER_GRANULE);\n        assert(targ_bits[0] + targ_bits[1] <= LameInternalFlags.MAX_BITS_PER_GRANULE);\n\n        /*\n         * ms_ener_ratio = 0: allocate 66/33 mid/side fac=.33 ms_ener_ratio =.5:\n         * allocate 50/50 mid/side fac= 0\n         */\n        /* 75/25 split is fac=.5 */\n        var fac = .33 * (.5 - ms_ener_ratio) / .5;\n        if (fac < 0)\n            fac = 0;\n        if (fac > .5)\n            fac = .5;\n\n        /* number of bits to move from side channel to mid channel */\n        /* move_bits = fac*targ_bits[1]; */\n        var move_bits = 0 | (fac * .5 * (targ_bits[0] + targ_bits[1]));\n\n        if (move_bits > LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[0]) {\n            move_bits = LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[0];\n        }\n        if (move_bits < 0)\n            move_bits = 0;\n\n        if (targ_bits[1] >= 125) {\n            /* dont reduce side channel below 125 bits */\n            if (targ_bits[1] - move_bits > 125) {\n\n                /* if mid channel already has 2x more than average, dont bother */\n                /* mean_bits = bits per granule (for both channels) */\n                if (targ_bits[0] < mean_bits)\n                    targ_bits[0] += move_bits;\n                targ_bits[1] -= move_bits;\n            } else {\n                targ_bits[0] += targ_bits[1] - 125;\n                targ_bits[1] = 125;\n            }\n        }\n\n        move_bits = targ_bits[0] + targ_bits[1];\n        if (move_bits > max_bits) {\n            targ_bits[0] = (max_bits * targ_bits[0]) / move_bits;\n            targ_bits[1] = (max_bits * targ_bits[1]) / move_bits;\n        }\n        assert(targ_bits[0] <= LameInternalFlags.MAX_BITS_PER_CHANNEL);\n        assert(targ_bits[1] <= LameInternalFlags.MAX_BITS_PER_CHANNEL);\n        assert(targ_bits[0] + targ_bits[1] <= LameInternalFlags.MAX_BITS_PER_GRANULE);\n    };\n\n    /**\n     *  Robert Hegemann 2001-04-27:\n     *  this adjusts the ATH, keeping the original noise floor\n     *  affects the higher frequencies more than the lower ones\n     */\n    this.athAdjust = function (a, x, athFloor) {\n        /*\n         * work in progress\n         */\n        var o = 90.30873362;\n        var p = 94.82444863;\n        var u = Util.FAST_LOG10_X(x, 10.0);\n        var v = a * a;\n        var w = 0.0;\n        u -= athFloor;\n        /* undo scaling */\n        if (v > 1E-20)\n            w = 1. + Util.FAST_LOG10_X(v, 10.0 / o);\n        if (w < 0)\n            w = 0.;\n        u *= w;\n        u += athFloor + o - p;\n        /* redo scaling */\n\n        return Math.pow(10., 0.1 * u);\n    };\n\n    /**\n     * Calculate the allowed distortion for each scalefactor band, as determined\n     * by the psychoacoustic model. xmin(sb) = ratio(sb) * en(sb) / bw(sb)\n     *\n     * returns number of sfb's with energy > ATH\n     */\n    this.calc_xmin = function (gfp, ratio, cod_info, pxmin) {\n        var pxminPos = 0;\n        var gfc = gfp.internal_flags;\n        var gsfb, j = 0, ath_over = 0;\n        var ATH = gfc.ATH;\n        var xr = cod_info.xr;\n        var enable_athaa_fix = (gfp.VBR == VbrMode.vbr_mtrh) ? 1 : 0;\n        var masking_lower = gfc.masking_lower;\n\n        if (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) {\n            /* was already done in PSY-Model */\n            masking_lower = 1.0;\n        }\n\n        for (gsfb = 0; gsfb < cod_info.psy_lmax; gsfb++) {\n            var en0, xmin;\n            var rh1, rh2;\n            var width, l;\n\n            if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\n                xmin = athAdjust(ATH.adjust, ATH.l[gsfb], ATH.floor);\n            else\n                xmin = ATH.adjust * ATH.l[gsfb];\n\n            width = cod_info.width[gsfb];\n            rh1 = xmin / width;\n            rh2 = DBL_EPSILON;\n            l = width >> 1;\n            en0 = 0.0;\n            do {\n                var xa, xb;\n                xa = xr[j] * xr[j];\n                en0 += xa;\n                rh2 += (xa < rh1) ? xa : rh1;\n                j++;\n                xb = xr[j] * xr[j];\n                en0 += xb;\n                rh2 += (xb < rh1) ? xb : rh1;\n                j++;\n            } while (--l > 0);\n            if (en0 > xmin)\n                ath_over++;\n\n            if (gsfb == Encoder.SBPSY_l) {\n                var x = xmin * gfc.nsPsy.longfact[gsfb];\n                if (rh2 < x) {\n                    rh2 = x;\n                }\n            }\n            if (enable_athaa_fix != 0) {\n                xmin = rh2;\n            }\n            if (!gfp.ATHonly) {\n                var e = ratio.en.l[gsfb];\n                if (e > 0.0) {\n                    var x;\n                    x = en0 * ratio.thm.l[gsfb] * masking_lower / e;\n                    if (enable_athaa_fix != 0)\n                        x *= gfc.nsPsy.longfact[gsfb];\n                    if (xmin < x)\n                        xmin = x;\n                }\n            }\n            if (enable_athaa_fix != 0)\n                pxmin[pxminPos++] = xmin;\n            else\n                pxmin[pxminPos++] = xmin * gfc.nsPsy.longfact[gsfb];\n        }\n        /* end of long block loop */\n\n        /* use this function to determine the highest non-zero coeff */\n        var max_nonzero = 575;\n        if (cod_info.block_type != Encoder.SHORT_TYPE) {\n            // NORM, START or STOP type, but not SHORT\n            var k = 576;\n            while (k-- != 0 && BitStream.EQ(xr[k], 0)) {\n                max_nonzero = k;\n            }\n        }\n        cod_info.max_nonzero_coeff = max_nonzero;\n\n        for (var sfb = cod_info.sfb_smin; gsfb < cod_info.psymax; sfb++, gsfb += 3) {\n            var width, b;\n            var tmpATH;\n            if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\n                tmpATH = athAdjust(ATH.adjust, ATH.s[sfb], ATH.floor);\n            else\n                tmpATH = ATH.adjust * ATH.s[sfb];\n\n            width = cod_info.width[gsfb];\n            for (b = 0; b < 3; b++) {\n                var en0 = 0.0, xmin;\n                var rh1, rh2;\n                var l = width >> 1;\n\n                rh1 = tmpATH / width;\n                rh2 = DBL_EPSILON;\n                do {\n                    var xa, xb;\n                    xa = xr[j] * xr[j];\n                    en0 += xa;\n                    rh2 += (xa < rh1) ? xa : rh1;\n                    j++;\n                    xb = xr[j] * xr[j];\n                    en0 += xb;\n                    rh2 += (xb < rh1) ? xb : rh1;\n                    j++;\n                } while (--l > 0);\n                if (en0 > tmpATH)\n                    ath_over++;\n                if (sfb == Encoder.SBPSY_s) {\n                    var x = tmpATH * gfc.nsPsy.shortfact[sfb];\n                    if (rh2 < x) {\n                        rh2 = x;\n                    }\n                }\n                if (enable_athaa_fix != 0)\n                    xmin = rh2;\n                else\n                    xmin = tmpATH;\n\n                if (!gfp.ATHonly && !gfp.ATHshort) {\n                    var e = ratio.en.s[sfb][b];\n                    if (e > 0.0) {\n                        var x;\n                        x = en0 * ratio.thm.s[sfb][b] * masking_lower / e;\n                        if (enable_athaa_fix != 0)\n                            x *= gfc.nsPsy.shortfact[sfb];\n                        if (xmin < x)\n                            xmin = x;\n                    }\n                }\n                if (enable_athaa_fix != 0)\n                    pxmin[pxminPos++] = xmin;\n                else\n                    pxmin[pxminPos++] = xmin * gfc.nsPsy.shortfact[sfb];\n            }\n            /* b */\n            if (gfp.useTemporal) {\n                if (pxmin[pxminPos - 3] > pxmin[pxminPos - 3 + 1])\n                    pxmin[pxminPos - 3 + 1] += (pxmin[pxminPos - 3] - pxmin[pxminPos - 3 + 1])\n                        * gfc.decay;\n                if (pxmin[pxminPos - 3 + 1] > pxmin[pxminPos - 3 + 2])\n                    pxmin[pxminPos - 3 + 2] += (pxmin[pxminPos - 3 + 1] - pxmin[pxminPos - 3 + 2])\n                        * gfc.decay;\n            }\n        }\n        /* end of short block sfb loop */\n\n        return ath_over;\n    };\n\n    function StartLine(j) {\n        this.s = j;\n    }\n\n    this.calc_noise_core = function (cod_info, startline, l, step) {\n        var noise = 0;\n        var j = startline.s;\n        var ix = cod_info.l3_enc;\n\n        if (j > cod_info.count1) {\n            while ((l--) != 0) {\n                var temp;\n                temp = cod_info.xr[j];\n                j++;\n                noise += temp * temp;\n                temp = cod_info.xr[j];\n                j++;\n                noise += temp * temp;\n            }\n        } else if (j > cod_info.big_values) {\n            var ix01 = new_float(2);\n            ix01[0] = 0;\n            ix01[1] = step;\n            while ((l--) != 0) {\n                var temp;\n                temp = Math.abs(cod_info.xr[j]) - ix01[ix[j]];\n                j++;\n                noise += temp * temp;\n                temp = Math.abs(cod_info.xr[j]) - ix01[ix[j]];\n                j++;\n                noise += temp * temp;\n            }\n        } else {\n            while ((l--) != 0) {\n                var temp;\n                temp = Math.abs(cod_info.xr[j]) - pow43[ix[j]] * step;\n                j++;\n                noise += temp * temp;\n                temp = Math.abs(cod_info.xr[j]) - pow43[ix[j]] * step;\n                j++;\n                noise += temp * temp;\n            }\n        }\n\n        startline.s = j;\n        return noise;\n    }\n\n    /**\n     * <PRE>\n     * -oo dB  =>  -1.00\n     * - 6 dB  =>  -0.97\n     * - 3 dB  =>  -0.80\n     * - 2 dB  =>  -0.64\n     * - 1 dB  =>  -0.38\n     *   0 dB  =>   0.00\n     * + 1 dB  =>  +0.49\n     * + 2 dB  =>  +1.06\n     * + 3 dB  =>  +1.68\n     * + 6 dB  =>  +3.69\n     * +10 dB  =>  +6.45\n     * </PRE>\n     */\n    this.calc_noise = function (cod_info, l3_xmin, distort, res, prev_noise) {\n        var distortPos = 0;\n        var l3_xminPos = 0;\n        var sfb, l, over = 0;\n        var over_noise_db = 0;\n        /* 0 dB relative to masking */\n        var tot_noise_db = 0;\n        /* -200 dB relative to masking */\n        var max_noise = -20.0;\n        var j = 0;\n        var scalefac = cod_info.scalefac;\n        var scalefacPos = 0;\n\n        res.over_SSD = 0;\n\n        for (sfb = 0; sfb < cod_info.psymax; sfb++) {\n            var s = cod_info.global_gain\n                - (((scalefac[scalefacPos++]) + (cod_info.preflag != 0 ? pretab[sfb]\n                    : 0)) << (cod_info.scalefac_scale + 1))\n                - cod_info.subblock_gain[cod_info.window[sfb]] * 8;\n            var noise = 0.0;\n\n            if (prev_noise != null && (prev_noise.step[sfb] == s)) {\n\n                /* use previously computed values */\n                noise = prev_noise.noise[sfb];\n                j += cod_info.width[sfb];\n                distort[distortPos++] = noise / l3_xmin[l3_xminPos++];\n\n                noise = prev_noise.noise_log[sfb];\n\n            } else {\n                var step = POW20(s);\n                l = cod_info.width[sfb] >> 1;\n\n                if ((j + cod_info.width[sfb]) > cod_info.max_nonzero_coeff) {\n                    var usefullsize;\n                    usefullsize = cod_info.max_nonzero_coeff - j + 1;\n\n                    if (usefullsize > 0)\n                        l = usefullsize >> 1;\n                    else\n                        l = 0;\n                }\n\n                var sl = new StartLine(j);\n                noise = this.calc_noise_core(cod_info, sl, l, step);\n                j = sl.s;\n\n                if (prev_noise != null) {\n                    /* save noise values */\n                    prev_noise.step[sfb] = s;\n                    prev_noise.noise[sfb] = noise;\n                }\n\n                noise = distort[distortPos++] = noise / l3_xmin[l3_xminPos++];\n\n                /* multiplying here is adding in dB, but can overflow */\n                noise = Util.FAST_LOG10(Math.max(noise, 1E-20));\n\n                if (prev_noise != null) {\n                    /* save noise values */\n                    prev_noise.noise_log[sfb] = noise;\n                }\n            }\n\n            if (prev_noise != null) {\n                /* save noise values */\n                prev_noise.global_gain = cod_info.global_gain;\n            }\n\n            tot_noise_db += noise;\n\n            if (noise > 0.0) {\n                var tmp;\n\n                tmp = Math.max(0 | (noise * 10 + .5), 1);\n                res.over_SSD += tmp * tmp;\n\n                over++;\n                /* multiplying here is adding in dB -but can overflow */\n                /* over_noise *= noise; */\n                over_noise_db += noise;\n            }\n            max_noise = Math.max(max_noise, noise);\n\n        }\n\n        res.over_count = over;\n        res.tot_noise = tot_noise_db;\n        res.over_noise = over_noise_db;\n        res.max_noise = max_noise;\n\n        return over;\n    }\n\n    /**\n     * updates plotting data\n     *\n     * Mark Taylor 2000-??-??\n     *\n     * Robert Hegemann: moved noise/distortion calc into it\n     */\n    this.set_pinfo = function (gfp, cod_info, ratio, gr, ch) {\n        var gfc = gfp.internal_flags;\n        var sfb, sfb2;\n        var l;\n        var en0, en1;\n        var ifqstep = (cod_info.scalefac_scale == 0) ? .5 : 1.0;\n        var scalefac = cod_info.scalefac;\n\n        var l3_xmin = new_float(L3Side.SFBMAX);\n        var xfsf = new_float(L3Side.SFBMAX);\n        var noise = new CalcNoiseResult();\n\n        calc_xmin(gfp, ratio, cod_info, l3_xmin);\n        calc_noise(cod_info, l3_xmin, xfsf, noise, null);\n\n        var j = 0;\n        sfb2 = cod_info.sfb_lmax;\n        if (cod_info.block_type != Encoder.SHORT_TYPE\n            && 0 == cod_info.mixed_block_flag)\n            sfb2 = 22;\n        for (sfb = 0; sfb < sfb2; sfb++) {\n            var start = gfc.scalefac_band.l[sfb];\n            var end = gfc.scalefac_band.l[sfb + 1];\n            var bw = end - start;\n            for (en0 = 0.0; j < end; j++)\n                en0 += cod_info.xr[j] * cod_info.xr[j];\n            en0 /= bw;\n            /* convert to MDCT units */\n            /* scaling so it shows up on FFT plot */\n            en1 = 1e15;\n            gfc.pinfo.en[gr][ch][sfb] = en1 * en0;\n            gfc.pinfo.xfsf[gr][ch][sfb] = en1 * l3_xmin[sfb] * xfsf[sfb] / bw;\n\n            if (ratio.en.l[sfb] > 0 && !gfp.ATHonly)\n                en0 = en0 / ratio.en.l[sfb];\n            else\n                en0 = 0.0;\n\n            gfc.pinfo.thr[gr][ch][sfb] = en1\n                * Math.max(en0 * ratio.thm.l[sfb], gfc.ATH.l[sfb]);\n\n            /* there is no scalefactor bands >= SBPSY_l */\n            gfc.pinfo.LAMEsfb[gr][ch][sfb] = 0;\n            if (cod_info.preflag != 0 && sfb >= 11)\n                gfc.pinfo.LAMEsfb[gr][ch][sfb] = -ifqstep * pretab[sfb];\n\n            if (sfb < Encoder.SBPSY_l) {\n                /* scfsi should be decoded by caller side */\n                assert(scalefac[sfb] >= 0);\n                gfc.pinfo.LAMEsfb[gr][ch][sfb] -= ifqstep * scalefac[sfb];\n            }\n        }\n        /* for sfb */\n\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            sfb2 = sfb;\n            for (sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                var start = gfc.scalefac_band.s[sfb];\n                var end = gfc.scalefac_band.s[sfb + 1];\n                var bw = end - start;\n                for (var i = 0; i < 3; i++) {\n                    for (en0 = 0.0, l = start; l < end; l++) {\n                        en0 += cod_info.xr[j] * cod_info.xr[j];\n                        j++;\n                    }\n                    en0 = Math.max(en0 / bw, 1e-20);\n                    /* convert to MDCT units */\n                    /* scaling so it shows up on FFT plot */\n                    en1 = 1e15;\n\n                    gfc.pinfo.en_s[gr][ch][3 * sfb + i] = en1 * en0;\n                    gfc.pinfo.xfsf_s[gr][ch][3 * sfb + i] = en1 * l3_xmin[sfb2]\n                        * xfsf[sfb2] / bw;\n                    if (ratio.en.s[sfb][i] > 0)\n                        en0 = en0 / ratio.en.s[sfb][i];\n                    else\n                        en0 = 0.0;\n                    if (gfp.ATHonly || gfp.ATHshort)\n                        en0 = 0;\n\n                    gfc.pinfo.thr_s[gr][ch][3 * sfb + i] = en1\n                        * Math.max(en0 * ratio.thm.s[sfb][i],\n                            gfc.ATH.s[sfb]);\n\n                    /* there is no scalefactor bands >= SBPSY_s */\n                    gfc.pinfo.LAMEsfb_s[gr][ch][3 * sfb + i] = -2.0\n                        * cod_info.subblock_gain[i];\n                    if (sfb < Encoder.SBPSY_s) {\n                        gfc.pinfo.LAMEsfb_s[gr][ch][3 * sfb + i] -= ifqstep\n                            * scalefac[sfb2];\n                    }\n                    sfb2++;\n                }\n            }\n        }\n        /* block type short */\n        gfc.pinfo.LAMEqss[gr][ch] = cod_info.global_gain;\n        gfc.pinfo.LAMEmainbits[gr][ch] = cod_info.part2_3_length\n            + cod_info.part2_length;\n        gfc.pinfo.LAMEsfbits[gr][ch] = cod_info.part2_length;\n\n        gfc.pinfo.over[gr][ch] = noise.over_count;\n        gfc.pinfo.max_noise[gr][ch] = noise.max_noise * 10.0;\n        gfc.pinfo.over_noise[gr][ch] = noise.over_noise * 10.0;\n        gfc.pinfo.tot_noise[gr][ch] = noise.tot_noise * 10.0;\n        gfc.pinfo.over_SSD[gr][ch] = noise.over_SSD;\n    }\n\n    /**\n     * updates plotting data for a whole frame\n     *\n     * Robert Hegemann 2000-10-21\n     */\n    function set_frame_pinfo(gfp, ratio) {\n        var gfc = gfp.internal_flags;\n\n        gfc.masking_lower = 1.0;\n\n        /*\n         * for every granule and channel patch l3_enc and set info\n         */\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                var cod_info = gfc.l3_side.tt[gr][ch];\n                var scalefac_sav = new_int(L3Side.SFBMAX);\n                System.arraycopy(cod_info.scalefac, 0, scalefac_sav, 0,\n                    scalefac_sav.length);\n\n                /*\n                 * reconstruct the scalefactors in case SCFSI was used\n                 */\n                if (gr == 1) {\n                    var sfb;\n                    for (sfb = 0; sfb < cod_info.sfb_lmax; sfb++) {\n                        if (cod_info.scalefac[sfb] < 0) /* scfsi */\n                            cod_info.scalefac[sfb] = gfc.l3_side.tt[0][ch].scalefac[sfb];\n                    }\n                }\n\n                set_pinfo(gfp, cod_info, ratio[gr][ch], gr, ch);\n                System.arraycopy(scalefac_sav, 0, cod_info.scalefac, 0,\n                    scalefac_sav.length);\n            }\n            /* for ch */\n        }\n        /* for gr */\n    }\n\n}\n\nmodule.exports = QuantizePVT;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nLame = require('./Lame.js');\nPresets = require('./Presets.js');\nGainAnalysis = require('./GainAnalysis.js');\nQuantizePVT = require('./QuantizePVT.js');\nQuantize = require('./Quantize.js');\nTakehiro = require('./Takehiro.js');\nReservoir = require('./Reservoir.js');\nMPEGMode = require('./MPEGMode.js');\nBitStream = require('./BitStream.js');\nvar Encoder = require('./Encoder.js');\nvar Version = require('./Version.js');\nvar VBRTag = require('./VBRTag.js');\n\nfunction GetAudio() {\n    var parse;\n    var mpg;\n\n    this.setModules = function (parse2, mpg2) {\n        parse = parse2;\n        mpg = mpg2;\n    }\n}\n\n\nfunction Parse() {\n    var ver;\n    var id3;\n    var pre;\n\n    this.setModules = function (ver2, id32, pre2) {\n        ver = ver2;\n        id3 = id32;\n        pre = pre2;\n    }\n}\n\nfunction MPGLib() {\n}\n\nfunction ID3Tag() {\n    var bits;\n    var ver;\n\n    this.setModules = function (_bits, _ver) {\n        bits = _bits;\n        ver = _ver;\n    }\n}\n\nfunction Mp3Encoder(channels, samplerate, kbps) {\n    if (arguments.length != 3) {\n        console.error('WARN: Mp3Encoder(channels, samplerate, kbps) not specified');\n        channels = 1;\n        samplerate = 44100;\n        kbps = 128;\n    }\n    var lame = new Lame();\n    var gaud = new GetAudio();\n    var ga = new GainAnalysis();\n    var bs = new BitStream();\n    var p = new Presets();\n    var qupvt = new QuantizePVT();\n    var qu = new Quantize();\n    var vbr = new VBRTag();\n    var ver = new Version();\n    var id3 = new ID3Tag();\n    var rv = new Reservoir();\n    var tak = new Takehiro();\n    var parse = new Parse();\n    var mpg = new MPGLib();\n\n    lame.setModules(ga, bs, p, qupvt, qu, vbr, ver, id3, mpg);\n    bs.setModules(ga, mpg, ver, vbr);\n    id3.setModules(bs, ver);\n    p.setModules(lame);\n    qu.setModules(bs, rv, qupvt, tak);\n    qupvt.setModules(tak, rv, lame.enc.psy);\n    rv.setModules(bs);\n    tak.setModules(qupvt);\n    vbr.setModules(lame, bs, ver);\n    gaud.setModules(parse, mpg);\n    parse.setModules(ver, id3, p);\n\n    var gfp = lame.lame_init();\n\n    gfp.num_channels = channels;\n    gfp.in_samplerate = samplerate;\n    gfp.brate = kbps;\n    gfp.mode = MPEGMode.STEREO;\n    gfp.quality = 3;\n    gfp.bWriteVbrTag = false;\n    gfp.disable_reservoir = true;\n    gfp.write_id3tag_automatic = false;\n\n    var retcode = lame.lame_init_params(gfp);\n    assert(0 == retcode);\n    var maxSamples = 1152;\n    var mp3buf_size = 0 | (1.25 * maxSamples + 7200);\n    var mp3buf = new_byte(mp3buf_size);\n\n    this.encodeBuffer = function (left, right) {\n        if (channels == 1) {\n            right = left;\n        }\n        assert(left.length == right.length);\n        if (left.length > maxSamples) {\n            maxSamples = left.length;\n            mp3buf_size = 0 | (1.25 * maxSamples + 7200);\n            mp3buf = new_byte(mp3buf_size);\n        }\n\n        var _sz = lame.lame_encode_buffer(gfp, left, right, left.length, mp3buf, 0, mp3buf_size);\n        return new Int8Array(mp3buf.subarray(0, _sz));\n    };\n\n    this.flush = function () {\n        var _sz = lame.lame_encode_flush(gfp, mp3buf, 0, mp3buf_size);\n        return new Int8Array(mp3buf.subarray(0, _sz));\n    };\n}\n\nfunction WavHeader() {\n    this.dataOffset = 0;\n    this.dataLen = 0;\n    this.channels = 0;\n    this.sampleRate = 0;\n}\n\nfunction fourccToInt(fourcc) {\n    return fourcc.charCodeAt(0) << 24 | fourcc.charCodeAt(1) << 16 | fourcc.charCodeAt(2) << 8 | fourcc.charCodeAt(3);\n}\n\nWavHeader.RIFF = fourccToInt(\"RIFF\");\nWavHeader.WAVE = fourccToInt(\"WAVE\");\nWavHeader.fmt_ = fourccToInt(\"fmt \");\nWavHeader.data = fourccToInt(\"data\");\n\nWavHeader.readHeader = function (dataView) {\n    var w = new WavHeader();\n\n    var header = dataView.getUint32(0, false);\n    if (WavHeader.RIFF != header) {\n        return;\n    }\n    var fileLen = dataView.getUint32(4, true);\n    if (WavHeader.WAVE != dataView.getUint32(8, false)) {\n        return;\n    }\n    if (WavHeader.fmt_ != dataView.getUint32(12, false)) {\n        return;\n    }\n    var fmtLen = dataView.getUint32(16, true);\n    var pos = 16 + 4;\n    switch (fmtLen) {\n        case 16:\n        case 18:\n            w.channels = dataView.getUint16(pos + 2, true);\n            w.sampleRate = dataView.getUint32(pos + 4, true);\n            break;\n        default:\n            throw 'extended fmt chunk not implemented';\n    }\n    pos += fmtLen;\n    var data = WavHeader.data;\n    var len = 0;\n    while (data != header) {\n        header = dataView.getUint32(pos, false);\n        len = dataView.getUint32(pos + 4, true);\n        if (data == header) {\n            break;\n        }\n        pos += (len + 8);\n    }\n    w.dataLen = len;\n    w.dataOffset = pos + 8;\n    return w;\n};\n\nmodule.exports.Mp3Encoder = Mp3Encoder;\nmodule.exports.WavHeader = WavHeader;\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./player.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"9d62102e\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./player.vue\", function() {\n     var newContent = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./player.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\\n.ar-player {\\n  width: 380px;\\n  height: unset;\\n  border: 0;\\n  border-radius: 0;\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n  justify-content: center;\\n  background-color: unset;\\n  font-family: 'Roboto', sans-serif;\\n}\\n.ar-player > .ar-player-bar {\\n    border: 1px solid #E8E8E8;\\n    border-radius: 24px;\\n    margin: 0 0 0 5px;\\n}\\n.ar-player > .ar-player-bar > .ar-player__progress {\\n      width: 125px;\\n}\\n.ar-player-bar {\\n    display: flex;\\n    align-items: center;\\n    height: 38px;\\n    padding: 0 12px;\\n    margin: 0 5px;\\n}\\n.ar-player-actions {\\n    width: 55%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: space-around;\\n}\\n.ar-player__progress {\\n    width: 160px;\\n    margin: 0 8px;\\n}\\n.ar-player__time {\\n    color: rgba(84, 84, 84, 0.5);\\n    font-size: 16px;\\n    width: 41px;\\n}\\n.ar-player__play {\\n    width: 45px;\\n    height: 45px;\\n    background-color: #FFFFFF;\\n    box-shadow: 0 2px 11px 11px rgba(0, 0, 0, 0.07);\\n}\\n.ar-player__play--active {\\n      fill: white !important;\\n      background-color: #05CBCD !important;\\n}\\n.ar-icon {\\n  fill: #747474;\\n  border-radius: 50%;\\n  border: 1px solid #05CBCD;\\n  background-color: #FFFFFF;\\n  padding: 5px;\\n  cursor: pointer;\\n  transition: .2s;\\n}\\n.ar-icon--no-border {\\n    border: 0;\\n    border-radius: 0;\\n    padding: 0;\\n}\\n.ar-icon--rec {\\n    fill: white;\\n    background-color: #FF6B64;\\n    border-color: transparent;\\n}\\n.ar-icon--pulse {\\n    animation: ripple .5s linear infinite;\\n}\\n@keyframes ripple {\\n0% {\\n    box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.1), 0 0 0 1px rgba(255, 0, 0, 0.1), 0 0 0 5px rgba(255, 0, 0, 0.1);\\n}\\n100% {\\n    box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.1), 0 0 0 10px rgba(255, 0, 0, 0.1), 0 0 0 20px rgba(255, 0, 0, 0);\\n}\\n}\\n.ar-icon__xs {\\n    width: 18px;\\n    height: 18px;\\n    line-height: 18px;\\n}\\n.ar-icon__sm {\\n    width: 30px;\\n    height: 30px;\\n    line-height: 30px;\\n}\\n.ar-icon__lg {\\n    width: 45px;\\n    height: 45px;\\n    line-height: 45px;\\n    box-shadow: 0 2px 5px 1px rgba(158, 158, 158, 0.5);\\n}\\n\", \"\"]);\n\n// exports\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./line-control.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"722c44a2\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./line-control.vue\", function() {\n     var newContent = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./line-control.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\\n.ar-line-control {\\n  position: relative;\\n  height: 8px;\\n  border-radius: 5px;\\n  background-color: #E6E6E6;\\n}\\n.ar-line-control__head {\\n    position: absolute;\\n    height: inherit;\\n    background-color: #616161;\\n    border-radius: inherit;\\n}\\n\", \"\"]);\n\n// exports\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./volume-control.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"7e43270a\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./volume-control.vue\", function() {\n     var newContent = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./volume-control.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\\n.ar-volume {\\n  display: flex;\\n  align-items: center;\\n  line-height: 10px;\\n}\\n.ar-volume-bar {\\n    width: 50px;\\n    height: 6px;\\n    background: #E6E6E6;\\n    border-radius: 4px;\\n    position: relative;\\n}\\n.ar-volume__icon {\\n    fill: #747474;\\n    width: 24px;\\n    height: 24px;\\n    border: 0;\\n    border-radius: 0;\\n    padding: 0;\\n    background-color: unset;\\n    margin-right: 3px;\\n}\\n\", \"\"]);\n\n// exports\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./recorder.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"00c7c6ba\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./recorder.vue\", function() {\n     var newContent = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./recorder.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\\n.ar {\\n  width: 420px;\\n  font-family: 'Roboto', sans-serif;\\n  border-radius: 16px;\\n  background-color: #FAFAFA;\\n  box-shadow: 0 4px 18px 0 rgba(0, 0, 0, 0.17);\\n  position: relative;\\n  box-sizing: content-box;\\n}\\n.ar-content {\\n    padding: 16px;\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n}\\n.ar-records {\\n    height: 138px;\\n    padding-top: 1px;\\n    overflow-y: auto;\\n    margin-bottom: 20px;\\n}\\n.ar-records__record {\\n      width: 320px;\\n      height: 45px;\\n      padding: 0 10px;\\n      margin: 0 auto;\\n      line-height: 45px;\\n      display: flex;\\n      justify-content: space-between;\\n      border-bottom: 1px solid #E8E8E8;\\n      position: relative;\\n}\\n.ar-records__record--selected {\\n        border: 1px solid #E8E8E8;\\n        border-radius: 24px;\\n        background-color: #FFFFFF;\\n        margin-top: -1px;\\n        padding: 0 34px;\\n}\\n.ar-recorder {\\n    position: relative;\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n}\\n.ar-recorder__duration {\\n      color: #AEAEAE;\\n      font-size: 32px;\\n      font-weight: 500;\\n      margin-top: 20px;\\n      margin-bottom: 16px;\\n}\\n.ar-recorder__stop {\\n      position: absolute;\\n      top: 10px;\\n      right: -52px;\\n}\\n.ar-recorder__time-limit {\\n      position: absolute;\\n      color: #AEAEAE;\\n      font-size: 12px;\\n      top: 128px;\\n}\\n.ar-recorder__records-limit {\\n      position: absolute;\\n      color: #AEAEAE;\\n      font-size: 13px;\\n      top: 78px;\\n}\\n.ar-spinner {\\n    display: flex;\\n    height: 30px;\\n    position: absolute;\\n    left: 0;\\n    right: 0;\\n    top: 0;\\n    bottom: 0;\\n    margin: auto;\\n    width: 144px;\\n    z-index: 10;\\n}\\n.ar-spinner__dot {\\n      display: block;\\n      margin: 0 8px;\\n      border-radius: 50%;\\n      width: 30px;\\n      height: 30px;\\n      background: #05CBCD;\\n      animation-name: blink;\\n      animation-duration: 1.4s;\\n      animation-iteration-count: infinite;\\n      animation-fill-mode: both;\\n}\\n.ar-spinner__dot:nth-child(2) {\\n        animation-delay: .2s;\\n}\\n.ar-spinner__dot:nth-child(3) {\\n        animation-delay: .4s;\\n}\\n@keyframes blink {\\n0% {\\n    opacity: .2;\\n}\\n20% {\\n    opacity: 1;\\n}\\n100% {\\n    opacity: .2;\\n}\\n}\\n.ar__text {\\n    color: rgba(84, 84, 84, 0.5);\\n    font-size: 16px;\\n}\\n.ar__blur {\\n    filter: blur(2px);\\n    opacity: 0.7;\\n}\\n.ar__overlay {\\n    position: absolute;\\n    width: 100%;\\n    height: 100%;\\n    z-index: 10;\\n}\\n.ar__upload-status {\\n    text-align: center;\\n    font-size: 10px;\\n    padding: 2px;\\n    letter-spacing: 1px;\\n    position: absolute;\\n    bottom: 0;\\n}\\n.ar__upload-status--success {\\n      color: green;\\n}\\n.ar__upload-status--fail {\\n      color: red;\\n}\\n.ar__rm {\\n    cursor: pointer;\\n    position: absolute;\\n    width: 6px;\\n    height: 6px;\\n    padding: 6px;\\n    line-height: 6px;\\n    margin: auto;\\n    left: 10px;\\n    bottom: 0;\\n    top: 0;\\n    color: #f4785a;\\n}\\n.ar__downloader, .ar__uploader {\\n    position: absolute;\\n    top: 0;\\n    bottom: 0;\\n    margin: auto;\\n}\\n.ar__downloader {\\n    right: 115px;\\n}\\n.ar__uploader {\\n    right: 85px;\\n}\\n.ar-icon {\\n  fill: #747474;\\n  border-radius: 50%;\\n  border: 1px solid #05CBCD;\\n  background-color: #FFFFFF;\\n  padding: 5px;\\n  cursor: pointer;\\n  transition: .2s;\\n}\\n.ar-icon--no-border {\\n    border: 0;\\n    border-radius: 0;\\n    padding: 0;\\n}\\n.ar-icon--rec {\\n    fill: white;\\n    background-color: #FF6B64;\\n    border-color: transparent;\\n}\\n.ar-icon--pulse {\\n    animation: ripple .5s linear infinite;\\n}\\n@keyframes ripple {\\n0% {\\n    box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.1), 0 0 0 1px rgba(255, 0, 0, 0.1), 0 0 0 5px rgba(255, 0, 0, 0.1);\\n}\\n100% {\\n    box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.1), 0 0 0 10px rgba(255, 0, 0, 0.1), 0 0 0 20px rgba(255, 0, 0, 0);\\n}\\n}\\n.ar-icon__xs {\\n    width: 18px;\\n    height: 18px;\\n    line-height: 18px;\\n}\\n.ar-icon__sm {\\n    width: 30px;\\n    height: 30px;\\n    line-height: 30px;\\n}\\n.ar-icon__lg {\\n    width: 45px;\\n    height: 45px;\\n    line-height: 45px;\\n    box-shadow: 0 2px 5px 1px rgba(158, 158, 158, 0.5);\\n}\\n\", \"\"]);\n\n// exports\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./downloader.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"07a135de\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./downloader.vue\", function() {\n     var newContent = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./downloader.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\\n.ar-icon {\\n  fill: #747474;\\n  border-radius: 50%;\\n  border: 1px solid #05CBCD;\\n  background-color: #FFFFFF;\\n  padding: 5px;\\n  cursor: pointer;\\n  transition: .2s;\\n}\\n.ar-icon--no-border {\\n    border: 0;\\n    border-radius: 0;\\n    padding: 0;\\n}\\n.ar-icon--rec {\\n    fill: white;\\n    background-color: #FF6B64;\\n    border-color: transparent;\\n}\\n.ar-icon--pulse {\\n    animation: ripple .5s linear infinite;\\n}\\n@keyframes ripple {\\n0% {\\n    box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.1), 0 0 0 1px rgba(255, 0, 0, 0.1), 0 0 0 5px rgba(255, 0, 0, 0.1);\\n}\\n100% {\\n    box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.1), 0 0 0 10px rgba(255, 0, 0, 0.1), 0 0 0 20px rgba(255, 0, 0, 0);\\n}\\n}\\n.ar-icon__xs {\\n    width: 18px;\\n    height: 18px;\\n    line-height: 18px;\\n}\\n.ar-icon__sm {\\n    width: 30px;\\n    height: 30px;\\n    line-height: 30px;\\n}\\n.ar-icon__lg {\\n    width: 45px;\\n    height: 45px;\\n    line-height: 45px;\\n    box-shadow: 0 2px 5px 1px rgba(158, 158, 158, 0.5);\\n}\\n\", \"\"]);\n\n// exports\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar new_short_n = common.new_short_n;\nvar assert = common.assert;\n\nvar PsyModel = require('./PsyModel.js');\nvar LameGlobalFlags = require('./LameGlobalFlags.js');\nvar LameInternalFlags = require('./LameInternalFlags.js');\nvar ATH = require('./ATH.js');\nvar ReplayGain = require('./ReplayGain.js');\nvar CBRNewIterationLoop = require('./CBRNewIterationLoop.js');\nvar BitStream = require('./BitStream.js');\nvar Tables = require('./Tables.js');\nvar Encoder = require('./Encoder.js');\n\nfunction Lame() {\n    var self = this;\n    var LAME_MAXALBUMART = (128 * 1024);\n\n    Lame.V9 = 410;\n    Lame.V8 = 420;\n    Lame.V7 = 430;\n    Lame.V6 = 440;\n    Lame.V5 = 450;\n    Lame.V4 = 460;\n    Lame.V3 = 470;\n    Lame.V2 = 480;\n    Lame.V1 = 490;\n    Lame.V0 = 500;\n\n    /* still there for compatibility */\n\n    Lame.R3MIX = 1000;\n    Lame.STANDARD = 1001;\n    Lame.EXTREME = 1002;\n    Lame.INSANE = 1003;\n    Lame.STANDARD_FAST = 1004;\n    Lame.EXTREME_FAST = 1005;\n    Lame.MEDIUM = 1006;\n    Lame.MEDIUM_FAST = 1007;\n\n    /**\n     * maximum size of mp3buffer needed if you encode at most 1152 samples for\n     * each call to lame_encode_buffer. see lame_encode_buffer() below\n     * (LAME_MAXMP3BUFFER is now obsolete)\n     */\n    var LAME_MAXMP3BUFFER = (16384 + LAME_MAXALBUMART);\n    Lame.LAME_MAXMP3BUFFER = LAME_MAXMP3BUFFER;\n\n    var ga;\n    var bs;\n    var p;\n    var qupvt;\n    var qu;\n    var psy = new PsyModel();\n    var vbr;\n    var ver;\n    var id3;\n    var mpglib;\n    this.enc = new Encoder();\n\n    this.setModules = function (_ga, _bs, _p, _qupvt, _qu, _vbr, _ver, _id3, _mpglib) {\n        ga = _ga;\n        bs = _bs;\n        p = _p;\n        qupvt = _qupvt;\n        qu = _qu;\n        vbr = _vbr;\n        ver = _ver;\n        id3 = _id3;\n        mpglib = _mpglib;\n        this.enc.setModules(bs, psy, qupvt, vbr);\n    }\n\n    /**\n     * PSY Model related stuff\n     */\n    function PSY() {\n        /**\n         * The dbQ stuff.\n         */\n        this.mask_adjust = 0.;\n        /**\n         * The dbQ stuff.\n         */\n        this.mask_adjust_short = 0.;\n        /* at transition from one scalefactor band to next */\n        /**\n         * Band weight long scalefactor bands.\n         */\n        this.bo_l_weight = new_float(Encoder.SBMAX_l);\n        /**\n         * Band weight short scalefactor bands.\n         */\n        this.bo_s_weight = new_float(Encoder.SBMAX_s);\n    }\n\n    function LowPassHighPass() {\n        this.lowerlimit = 0.;\n    }\n\n    function BandPass(bitrate, lPass) {\n        this.lowpass = lPass;\n    }\n\n    var LAME_ID = 0xFFF88E3B;\n\n    function lame_init_old(gfp) {\n        var gfc;\n\n        gfp.class_id = LAME_ID;\n\n        gfc = gfp.internal_flags = new LameInternalFlags();\n\n        /* Global flags. set defaults here for non-zero values */\n        /* see lame.h for description */\n        /*\n         * set integer values to -1 to mean that LAME will compute the best\n         * value, UNLESS the calling program as set it (and the value is no\n         * longer -1)\n         */\n\n        gfp.mode = MPEGMode.NOT_SET;\n        gfp.original = 1;\n        gfp.in_samplerate = 44100;\n        gfp.num_channels = 2;\n        gfp.num_samples = -1;\n\n        gfp.bWriteVbrTag = true;\n        gfp.quality = -1;\n        gfp.short_blocks = null;\n        gfc.subblock_gain = -1;\n\n        gfp.lowpassfreq = 0;\n        gfp.highpassfreq = 0;\n        gfp.lowpasswidth = -1;\n        gfp.highpasswidth = -1;\n\n        gfp.VBR = VbrMode.vbr_off;\n        gfp.VBR_q = 4;\n        gfp.ATHcurve = -1;\n        gfp.VBR_mean_bitrate_kbps = 128;\n        gfp.VBR_min_bitrate_kbps = 0;\n        gfp.VBR_max_bitrate_kbps = 0;\n        gfp.VBR_hard_min = 0;\n        gfc.VBR_min_bitrate = 1;\n        /* not 0 ????? */\n        gfc.VBR_max_bitrate = 13;\n        /* not 14 ????? */\n\n        gfp.quant_comp = -1;\n        gfp.quant_comp_short = -1;\n\n        gfp.msfix = -1;\n\n        gfc.resample_ratio = 1;\n\n        gfc.OldValue[0] = 180;\n        gfc.OldValue[1] = 180;\n        gfc.CurrentStep[0] = 4;\n        gfc.CurrentStep[1] = 4;\n        gfc.masking_lower = 1;\n        gfc.nsPsy.attackthre = -1;\n        gfc.nsPsy.attackthre_s = -1;\n\n        gfp.scale = -1;\n\n        gfp.athaa_type = -1;\n        gfp.ATHtype = -1;\n        /* default = -1 = set in lame_init_params */\n        gfp.athaa_loudapprox = -1;\n        /* 1 = flat loudness approx. (total energy) */\n        /* 2 = equal loudness curve */\n        gfp.athaa_sensitivity = 0.0;\n        /* no offset */\n        gfp.useTemporal = null;\n        gfp.interChRatio = -1;\n\n        /*\n         * The reason for int mf_samples_to_encode = ENCDELAY + POSTDELAY;\n         * ENCDELAY = internal encoder delay. And then we have to add\n         * POSTDELAY=288 because of the 50% MDCT overlap. A 576 MDCT granule\n         * decodes to 1152 samples. To synthesize the 576 samples centered under\n         * this granule we need the previous granule for the first 288 samples\n         * (no problem), and the next granule for the next 288 samples (not\n         * possible if this is last granule). So we need to pad with 288 samples\n         * to make sure we can encode the 576 samples we are interested in.\n         */\n        gfc.mf_samples_to_encode = Encoder.ENCDELAY + Encoder.POSTDELAY;\n        gfp.encoder_padding = 0;\n        gfc.mf_size = Encoder.ENCDELAY - Encoder.MDCTDELAY;\n        /*\n         * we pad input with this many 0's\n         */\n\n        gfp.findReplayGain = false;\n        gfp.decode_on_the_fly = false;\n\n        gfc.decode_on_the_fly = false;\n        gfc.findReplayGain = false;\n        gfc.findPeakSample = false;\n\n        gfc.RadioGain = 0;\n        gfc.AudiophileGain = 0;\n        gfc.noclipGainChange = 0;\n        gfc.noclipScale = -1.0;\n\n        gfp.preset = 0;\n\n        gfp.write_id3tag_automatic = true;\n        return 0;\n    }\n\n    this.lame_init = function () {\n        var gfp = new LameGlobalFlags();\n\n        var ret = lame_init_old(gfp);\n        if (ret != 0) {\n            return null;\n        }\n\n        gfp.lame_allocated_gfp = 1;\n        return gfp;\n    }\n\n    function filter_coef(x) {\n        if (x > 1.0)\n            return 0.0;\n        if (x <= 0.0)\n            return 1.0;\n\n        return Math.cos(Math.PI / 2 * x);\n    }\n\n    this.nearestBitrateFullIndex = function (bitrate) {\n        /* borrowed from DM abr presets */\n\n        var full_bitrate_table = [8, 16, 24, 32, 40, 48, 56, 64, 80,\n            96, 112, 128, 160, 192, 224, 256, 320];\n\n        var lower_range = 0, lower_range_kbps = 0, upper_range = 0, upper_range_kbps = 0;\n\n        /* We assume specified bitrate will be 320kbps */\n        upper_range_kbps = full_bitrate_table[16];\n        upper_range = 16;\n        lower_range_kbps = full_bitrate_table[16];\n        lower_range = 16;\n\n        /*\n         * Determine which significant bitrates the value specified falls\n         * between, if loop ends without breaking then we were correct above\n         * that the value was 320\n         */\n        for (var b = 0; b < 16; b++) {\n            if ((Math.max(bitrate, full_bitrate_table[b + 1])) != bitrate) {\n                upper_range_kbps = full_bitrate_table[b + 1];\n                upper_range = b + 1;\n                lower_range_kbps = full_bitrate_table[b];\n                lower_range = (b);\n                break;\n                /* We found upper range */\n            }\n        }\n\n        /* Determine which range the value specified is closer to */\n        if ((upper_range_kbps - bitrate) > (bitrate - lower_range_kbps)) {\n            return lower_range;\n        }\n        return upper_range;\n    }\n\n    function optimum_samplefreq(lowpassfreq, input_samplefreq) {\n        /*\n         * Rules:\n         *\n         * - if possible, sfb21 should NOT be used\n         */\n        var suggested_samplefreq = 44100;\n\n        if (input_samplefreq >= 48000)\n            suggested_samplefreq = 48000;\n        else if (input_samplefreq >= 44100)\n            suggested_samplefreq = 44100;\n        else if (input_samplefreq >= 32000)\n            suggested_samplefreq = 32000;\n        else if (input_samplefreq >= 24000)\n            suggested_samplefreq = 24000;\n        else if (input_samplefreq >= 22050)\n            suggested_samplefreq = 22050;\n        else if (input_samplefreq >= 16000)\n            suggested_samplefreq = 16000;\n        else if (input_samplefreq >= 12000)\n            suggested_samplefreq = 12000;\n        else if (input_samplefreq >= 11025)\n            suggested_samplefreq = 11025;\n        else if (input_samplefreq >= 8000)\n            suggested_samplefreq = 8000;\n\n        if (lowpassfreq == -1)\n            return suggested_samplefreq;\n\n        if (lowpassfreq <= 15960)\n            suggested_samplefreq = 44100;\n        if (lowpassfreq <= 15250)\n            suggested_samplefreq = 32000;\n        if (lowpassfreq <= 11220)\n            suggested_samplefreq = 24000;\n        if (lowpassfreq <= 9970)\n            suggested_samplefreq = 22050;\n        if (lowpassfreq <= 7230)\n            suggested_samplefreq = 16000;\n        if (lowpassfreq <= 5420)\n            suggested_samplefreq = 12000;\n        if (lowpassfreq <= 4510)\n            suggested_samplefreq = 11025;\n        if (lowpassfreq <= 3970)\n            suggested_samplefreq = 8000;\n\n        if (input_samplefreq < suggested_samplefreq) {\n            /*\n             * choose a valid MPEG sample frequency above the input sample\n             * frequency to avoid SFB21/12 bitrate bloat rh 061115\n             */\n            if (input_samplefreq > 44100) {\n                return 48000;\n            }\n            if (input_samplefreq > 32000) {\n                return 44100;\n            }\n            if (input_samplefreq > 24000) {\n                return 32000;\n            }\n            if (input_samplefreq > 22050) {\n                return 24000;\n            }\n            if (input_samplefreq > 16000) {\n                return 22050;\n            }\n            if (input_samplefreq > 12000) {\n                return 16000;\n            }\n            if (input_samplefreq > 11025) {\n                return 12000;\n            }\n            if (input_samplefreq > 8000) {\n                return 11025;\n            }\n            return 8000;\n        }\n        return suggested_samplefreq;\n    }\n\n    /**\n     * convert samp freq in Hz to index\n     */\n    function SmpFrqIndex(sample_freq, gpf) {\n        switch (sample_freq) {\n            case 44100:\n                gpf.version = 1;\n                return 0;\n            case 48000:\n                gpf.version = 1;\n                return 1;\n            case 32000:\n                gpf.version = 1;\n                return 2;\n            case 22050:\n                gpf.version = 0;\n                return 0;\n            case 24000:\n                gpf.version = 0;\n                return 1;\n            case 16000:\n                gpf.version = 0;\n                return 2;\n            case 11025:\n                gpf.version = 0;\n                return 0;\n            case 12000:\n                gpf.version = 0;\n                return 1;\n            case 8000:\n                gpf.version = 0;\n                return 2;\n            default:\n                gpf.version = 0;\n                return -1;\n        }\n    }\n\n    /**\n     * @param bRate\n     *            legal rates from 8 to 320\n     */\n    function FindNearestBitrate(bRate, version, samplerate) {\n        /* MPEG-1 or MPEG-2 LSF */\n        if (samplerate < 16000)\n            version = 2;\n\n        var bitrate = Tables.bitrate_table[version][1];\n\n        for (var i = 2; i <= 14; i++) {\n            if (Tables.bitrate_table[version][i] > 0) {\n                if (Math.abs(Tables.bitrate_table[version][i] - bRate) < Math\n                        .abs(bitrate - bRate))\n                    bitrate = Tables.bitrate_table[version][i];\n            }\n        }\n        return bitrate;\n    }\n\n    /**\n     * @param bRate\n     *            legal rates from 32 to 448 kbps\n     * @param version\n     *            MPEG-1 or MPEG-2/2.5 LSF\n     */\n    function BitrateIndex(bRate, version, samplerate) {\n        /* convert bitrate in kbps to index */\n        if (samplerate < 16000)\n            version = 2;\n        for (var i = 0; i <= 14; i++) {\n            if (Tables.bitrate_table[version][i] > 0) {\n                if (Tables.bitrate_table[version][i] == bRate) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    function optimum_bandwidth(lh, bitrate) {\n        /**\n         * <PRE>\n         *  Input:\n         *      bitrate     total bitrate in kbps\n         *\n         *   Output:\n         *      lowerlimit: best lowpass frequency limit for input filter in Hz\n         *      upperlimit: best highpass frequency limit for input filter in Hz\n         * </PRE>\n         */\n        var freq_map = [new BandPass(8, 2000),\n            new BandPass(16, 3700), new BandPass(24, 3900),\n            new BandPass(32, 5500), new BandPass(40, 7000),\n            new BandPass(48, 7500), new BandPass(56, 10000),\n            new BandPass(64, 11000), new BandPass(80, 13500),\n            new BandPass(96, 15100), new BandPass(112, 15600),\n            new BandPass(128, 17000), new BandPass(160, 17500),\n            new BandPass(192, 18600), new BandPass(224, 19400),\n            new BandPass(256, 19700), new BandPass(320, 20500)];\n\n        var table_index = self.nearestBitrateFullIndex(bitrate);\n        lh.lowerlimit = freq_map[table_index].lowpass;\n    }\n\n    function lame_init_params_ppflt(gfp) {\n        var gfc = gfp.internal_flags;\n        /***************************************************************/\n        /* compute info needed for polyphase filter (filter type==0, default) */\n        /***************************************************************/\n\n        var lowpass_band = 32;\n        var highpass_band = -1;\n\n        if (gfc.lowpass1 > 0) {\n            var minband = 999;\n            for (var band = 0; band <= 31; band++) {\n                var freq = (band / 31.0);\n                /* this band and above will be zeroed: */\n                if (freq >= gfc.lowpass2) {\n                    lowpass_band = Math.min(lowpass_band, band);\n                }\n                if (gfc.lowpass1 < freq && freq < gfc.lowpass2) {\n                    minband = Math.min(minband, band);\n                }\n            }\n\n            /*\n             * compute the *actual* transition band implemented by the polyphase\n             * filter\n             */\n            if (minband == 999) {\n                gfc.lowpass1 = (lowpass_band - .75) / 31.0;\n            } else {\n                gfc.lowpass1 = (minband - .75) / 31.0;\n            }\n            gfc.lowpass2 = lowpass_band / 31.0;\n        }\n\n        /*\n         * make sure highpass filter is within 90% of what the effective\n         * highpass frequency will be\n         */\n        if (gfc.highpass2 > 0) {\n            if (gfc.highpass2 < .9 * (.75 / 31.0)) {\n                gfc.highpass1 = 0;\n                gfc.highpass2 = 0;\n                System.err.println(\"Warning: highpass filter disabled.  \"\n                    + \"highpass frequency too small\\n\");\n            }\n        }\n\n        if (gfc.highpass2 > 0) {\n            var maxband = -1;\n            for (var band = 0; band <= 31; band++) {\n                var freq = band / 31.0;\n                /* this band and below will be zereod */\n                if (freq <= gfc.highpass1) {\n                    highpass_band = Math.max(highpass_band, band);\n                }\n                if (gfc.highpass1 < freq && freq < gfc.highpass2) {\n                    maxband = Math.max(maxband, band);\n                }\n            }\n            /*\n             * compute the *actual* transition band implemented by the polyphase\n             * filter\n             */\n            gfc.highpass1 = highpass_band / 31.0;\n            if (maxband == -1) {\n                gfc.highpass2 = (highpass_band + .75) / 31.0;\n            } else {\n                gfc.highpass2 = (maxband + .75) / 31.0;\n            }\n        }\n\n        for (var band = 0; band < 32; band++) {\n            var fc1, fc2;\n            var freq = band / 31.0;\n            if (gfc.highpass2 > gfc.highpass1) {\n                fc1 = filter_coef((gfc.highpass2 - freq)\n                    / (gfc.highpass2 - gfc.highpass1 + 1e-20));\n            } else {\n                fc1 = 1.0;\n            }\n            if (gfc.lowpass2 > gfc.lowpass1) {\n                fc2 = filter_coef((freq - gfc.lowpass1)\n                    / (gfc.lowpass2 - gfc.lowpass1 + 1e-20));\n            } else {\n                fc2 = 1.0;\n            }\n            gfc.amp_filter[band] = (fc1 * fc2);\n        }\n    }\n\n    function lame_init_qval(gfp) {\n        var gfc = gfp.internal_flags;\n\n        switch (gfp.quality) {\n            default:\n            case 9: /* no psymodel, no noise shaping */\n                gfc.psymodel = 0;\n                gfc.noise_shaping = 0;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 8:\n                gfp.quality = 7;\n            //$FALL-THROUGH$\n            case 7:\n                /*\n                 * use psymodel (for short block and m/s switching), but no noise\n                 * shapping\n                 */\n                gfc.psymodel = 1;\n                gfc.noise_shaping = 0;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 6:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 5:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 4:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 3:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 1;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 2:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 1;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                /* inner loop */\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 1:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 2;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 0:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 2;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                /*\n                 * type 2 disabled because of it slowness, in favor of full outer\n                 * loop search\n                 */\n                gfc.full_outer_loop = 0;\n                /*\n                 * full outer loop search disabled because of audible distortions it\n                 * may generate rh 060629\n                 */\n                break;\n        }\n\n    }\n\n    function lame_init_bitstream(gfp) {\n        var gfc = gfp.internal_flags;\n        gfp.frameNum = 0;\n\n        if (gfp.write_id3tag_automatic) {\n            id3.id3tag_write_v2(gfp);\n        }\n        /* initialize histogram data optionally used by frontend */\n\n        gfc.bitrate_stereoMode_Hist = new_int_n([16, 4 + 1]);\n        gfc.bitrate_blockType_Hist = new_int_n([16, 4 + 1 + 1]);\n\n        gfc.PeakSample = 0.0;\n\n        /* Write initial VBR Header to bitstream and init VBR data */\n        if (gfp.bWriteVbrTag)\n            vbr.InitVbrTag(gfp);\n    }\n\n    /********************************************************************\n     * initialize internal params based on data in gf (globalflags struct filled\n     * in by calling program)\n     *\n     * OUTLINE:\n     *\n     * We first have some complex code to determine bitrate, output samplerate\n     * and mode. It is complicated by the fact that we allow the user to set\n     * some or all of these parameters, and need to determine best possible\n     * values for the rest of them:\n     *\n     * 1. set some CPU related flags 2. check if we are mono.mono, stereo.mono\n     * or stereo.stereo 3. compute bitrate and output samplerate: user may have\n     * set compression ratio user may have set a bitrate user may have set a\n     * output samplerate 4. set some options which depend on output samplerate\n     * 5. compute the actual compression ratio 6. set mode based on compression\n     * ratio\n     *\n     * The remaining code is much simpler - it just sets options based on the\n     * mode & compression ratio:\n     *\n     * set allow_diff_short based on mode select lowpass filter based on\n     * compression ratio & mode set the bitrate index, and min/max bitrates for\n     * VBR modes disable VBR tag if it is not appropriate initialize the\n     * bitstream initialize scalefac_band data set sideinfo_len (based on\n     * channels, CRC, out_samplerate) write an id3v2 tag into the bitstream\n     * write VBR tag into the bitstream set mpeg1/2 flag estimate the number of\n     * frames (based on a lot of data)\n     *\n     * now we set more flags: nspsytune: see code VBR modes see code CBR/ABR see\n     * code\n     *\n     * Finally, we set the algorithm flags based on the gfp.quality value\n     * lame_init_qval(gfp);\n     *\n     ********************************************************************/\n    this.lame_init_params = function (gfp) {\n        var gfc = gfp.internal_flags;\n\n        gfc.Class_ID = 0;\n        if (gfc.ATH == null)\n            gfc.ATH = new ATH();\n        if (gfc.PSY == null)\n            gfc.PSY = new PSY();\n        if (gfc.rgdata == null)\n            gfc.rgdata = new ReplayGain();\n\n        gfc.channels_in = gfp.num_channels;\n        if (gfc.channels_in == 1)\n            gfp.mode = MPEGMode.MONO;\n        gfc.channels_out = (gfp.mode == MPEGMode.MONO) ? 1 : 2;\n        gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n        if (gfp.mode == MPEGMode.MONO)\n            gfp.force_ms = false;\n        /*\n         * don't allow forced mid/side stereo for mono output\n         */\n\n        if (gfp.VBR == VbrMode.vbr_off && gfp.VBR_mean_bitrate_kbps != 128\n            && gfp.brate == 0)\n            gfp.brate = gfp.VBR_mean_bitrate_kbps;\n\n        if (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_mtrh\n            || gfp.VBR == VbrMode.vbr_mt) {\n            /* these modes can handle free format condition */\n        } else {\n            gfp.free_format = false;\n            /* mode can't be mixed with free format */\n        }\n\n        if (gfp.VBR == VbrMode.vbr_off && gfp.brate == 0) {\n            /* no bitrate or compression ratio specified, use 11.025 */\n            if (BitStream.EQ(gfp.compression_ratio, 0))\n                gfp.compression_ratio = 11.025;\n            /*\n             * rate to compress a CD down to exactly 128000 bps\n             */\n        }\n\n        /* find bitrate if user specify a compression ratio */\n        if (gfp.VBR == VbrMode.vbr_off && gfp.compression_ratio > 0) {\n\n            if (gfp.out_samplerate == 0)\n                gfp.out_samplerate = map2MP3Frequency((int)(0.97 * gfp.in_samplerate));\n            /*\n             * round up with a margin of 3 %\n             */\n\n            /*\n             * choose a bitrate for the output samplerate which achieves\n             * specified compression ratio\n             */\n            gfp.brate = 0 | (gfp.out_samplerate * 16 * gfc.channels_out / (1.e3 * gfp.compression_ratio));\n\n            /* we need the version for the bitrate table look up */\n            gfc.samplerate_index = SmpFrqIndex(gfp.out_samplerate, gfp);\n\n            if (!gfp.free_format) /*\n             * for non Free Format find the nearest allowed\n             * bitrate\n             */\n                gfp.brate = FindNearestBitrate(gfp.brate, gfp.version,\n                    gfp.out_samplerate);\n        }\n\n        if (gfp.out_samplerate != 0) {\n            if (gfp.out_samplerate < 16000) {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    8);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    64);\n            } else if (gfp.out_samplerate < 32000) {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    8);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    160);\n            } else {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    32);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    320);\n            }\n        }\n\n        /****************************************************************/\n        /* if a filter has not been enabled, see if we should add one: */\n        /****************************************************************/\n        if (gfp.lowpassfreq == 0) {\n            var lowpass = 16000.;\n\n            switch (gfp.VBR) {\n                case VbrMode.vbr_off:\n                {\n                    var lh = new LowPassHighPass();\n                    optimum_bandwidth(lh, gfp.brate);\n                    lowpass = lh.lowerlimit;\n                    break;\n                }\n                case VbrMode.vbr_abr:\n                {\n                    var lh = new LowPassHighPass();\n                    optimum_bandwidth(lh, gfp.VBR_mean_bitrate_kbps);\n                    lowpass = lh.lowerlimit;\n                    break;\n                }\n                case VbrMode.vbr_rh:\n                {\n                    var x = [19500, 19000, 18600, 18000, 17500, 16000,\n                        15600, 14900, 12500, 10000, 3950];\n                    if (0 <= gfp.VBR_q && gfp.VBR_q <= 9) {\n                        var a = x[gfp.VBR_q], b = x[gfp.VBR_q + 1], m = gfp.VBR_q_frac;\n                        lowpass = linear_int(a, b, m);\n                    } else {\n                        lowpass = 19500;\n                    }\n                    break;\n                }\n                default:\n                {\n                    var x = [19500, 19000, 18500, 18000, 17500, 16500,\n                        15500, 14500, 12500, 9500, 3950];\n                    if (0 <= gfp.VBR_q && gfp.VBR_q <= 9) {\n                        var a = x[gfp.VBR_q], b = x[gfp.VBR_q + 1], m = gfp.VBR_q_frac;\n                        lowpass = linear_int(a, b, m);\n                    } else {\n                        lowpass = 19500;\n                    }\n                }\n            }\n            if (gfp.mode == MPEGMode.MONO\n                && (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_abr))\n                lowpass *= 1.5;\n\n            gfp.lowpassfreq = lowpass | 0;\n        }\n\n        if (gfp.out_samplerate == 0) {\n            if (2 * gfp.lowpassfreq > gfp.in_samplerate) {\n                gfp.lowpassfreq = gfp.in_samplerate / 2;\n            }\n            gfp.out_samplerate = optimum_samplefreq(gfp.lowpassfreq | 0,\n                gfp.in_samplerate);\n        }\n\n        gfp.lowpassfreq = Math.min(20500, gfp.lowpassfreq);\n        gfp.lowpassfreq = Math.min(gfp.out_samplerate / 2, gfp.lowpassfreq);\n\n        if (gfp.VBR == VbrMode.vbr_off) {\n            gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                / (1.e3 * gfp.brate);\n        }\n        if (gfp.VBR == VbrMode.vbr_abr) {\n            gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                / (1.e3 * gfp.VBR_mean_bitrate_kbps);\n        }\n\n        /*\n         * do not compute ReplayGain values and do not find the peak sample if\n         * we can't store them\n         */\n        if (!gfp.bWriteVbrTag) {\n            gfp.findReplayGain = false;\n            gfp.decode_on_the_fly = false;\n            gfc.findPeakSample = false;\n        }\n        gfc.findReplayGain = gfp.findReplayGain;\n        gfc.decode_on_the_fly = gfp.decode_on_the_fly;\n\n        if (gfc.decode_on_the_fly)\n            gfc.findPeakSample = true;\n\n        if (gfc.findReplayGain) {\n            if (ga.InitGainAnalysis(gfc.rgdata, gfp.out_samplerate) == GainAnalysis.INIT_GAIN_ANALYSIS_ERROR) {\n                gfp.internal_flags = null;\n                return -6;\n            }\n        }\n\n        if (gfc.decode_on_the_fly && !gfp.decode_only) {\n            if (gfc.hip != null) {\n                mpglib.hip_decode_exit(gfc.hip);\n            }\n            gfc.hip = mpglib.hip_decode_init();\n        }\n\n        gfc.mode_gr = gfp.out_samplerate <= 24000 ? 1 : 2;\n        /*\n         * Number of granules per frame\n         */\n        gfp.framesize = 576 * gfc.mode_gr;\n        gfp.encoder_delay = Encoder.ENCDELAY;\n\n        gfc.resample_ratio = gfp.in_samplerate / gfp.out_samplerate;\n\n        /**\n         * <PRE>\n         *  sample freq       bitrate     compression ratio\n         *     [kHz]      [kbps/channel]   for 16 bit input\n         *     44.1            56               12.6\n         *     44.1            64               11.025\n         *     44.1            80                8.82\n         *     22.05           24               14.7\n         *     22.05           32               11.025\n         *     22.05           40                8.82\n         *     16              16               16.0\n         *     16              24               10.667\n         * </PRE>\n         */\n        /**\n         * <PRE>\n         *  For VBR, take a guess at the compression_ratio.\n         *  For example:\n         *\n         *    VBR_q    compression     like\n         *     -        4.4         320 kbps/44 kHz\n         *   0...1      5.5         256 kbps/44 kHz\n         *     2        7.3         192 kbps/44 kHz\n         *     4        8.8         160 kbps/44 kHz\n         *     6       11           128 kbps/44 kHz\n         *     9       14.7          96 kbps\n         *\n         *  for lower bitrates, downsample with --resample\n         * </PRE>\n         */\n        switch (gfp.VBR) {\n            case VbrMode.vbr_mt:\n            case VbrMode.vbr_rh:\n            case VbrMode.vbr_mtrh:\n            {\n                /* numbers are a bit strange, but they determine the lowpass value */\n                var cmp = [5.7, 6.5, 7.3, 8.2, 10, 11.9, 13, 14,\n                    15, 16.5];\n                gfp.compression_ratio = cmp[gfp.VBR_q];\n            }\n                break;\n            case VbrMode.vbr_abr:\n                gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                    / (1.e3 * gfp.VBR_mean_bitrate_kbps);\n                break;\n            default:\n                gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                    / (1.e3 * gfp.brate);\n                break;\n        }\n\n        /*\n         * mode = -1 (not set by user) or mode = MONO (because of only 1 input\n         * channel). If mode has not been set, then select J-STEREO\n         */\n        if (gfp.mode == MPEGMode.NOT_SET) {\n            gfp.mode = MPEGMode.JOINT_STEREO;\n        }\n\n        /* apply user driven high pass filter */\n        if (gfp.highpassfreq > 0) {\n            gfc.highpass1 = 2. * gfp.highpassfreq;\n\n            if (gfp.highpasswidth >= 0)\n                gfc.highpass2 = 2. * (gfp.highpassfreq + gfp.highpasswidth);\n            else\n            /* 0% above on default */\n                gfc.highpass2 = (1 + 0.00) * 2. * gfp.highpassfreq;\n\n            gfc.highpass1 /= gfp.out_samplerate;\n            gfc.highpass2 /= gfp.out_samplerate;\n        } else {\n            gfc.highpass1 = 0;\n            gfc.highpass2 = 0;\n        }\n        /* apply user driven low pass filter */\n        if (gfp.lowpassfreq > 0) {\n            gfc.lowpass2 = 2. * gfp.lowpassfreq;\n            if (gfp.lowpasswidth >= 0) {\n                gfc.lowpass1 = 2. * (gfp.lowpassfreq - gfp.lowpasswidth);\n                if (gfc.lowpass1 < 0) /* has to be >= 0 */\n                    gfc.lowpass1 = 0;\n            } else { /* 0% below on default */\n                gfc.lowpass1 = (1 - 0.00) * 2. * gfp.lowpassfreq;\n            }\n            gfc.lowpass1 /= gfp.out_samplerate;\n            gfc.lowpass2 /= gfp.out_samplerate;\n        } else {\n            gfc.lowpass1 = 0;\n            gfc.lowpass2 = 0;\n        }\n\n        /**********************************************************************/\n        /* compute info needed for polyphase filter (filter type==0, default) */\n        /**********************************************************************/\n        lame_init_params_ppflt(gfp);\n        /*******************************************************\n         * samplerate and bitrate index\n         *******************************************************/\n        gfc.samplerate_index = SmpFrqIndex(gfp.out_samplerate, gfp);\n        if (gfc.samplerate_index < 0) {\n            gfp.internal_flags = null;\n            return -1;\n        }\n\n        if (gfp.VBR == VbrMode.vbr_off) {\n            if (gfp.free_format) {\n                gfc.bitrate_index = 0;\n            } else {\n                gfp.brate = FindNearestBitrate(gfp.brate, gfp.version,\n                    gfp.out_samplerate);\n                gfc.bitrate_index = BitrateIndex(gfp.brate, gfp.version,\n                    gfp.out_samplerate);\n                if (gfc.bitrate_index <= 0) {\n                    gfp.internal_flags = null;\n                    return -1;\n                }\n            }\n        } else {\n            gfc.bitrate_index = 1;\n        }\n\n        /* for CBR, we will write an \"info\" tag. */\n\n        if (gfp.analysis)\n            gfp.bWriteVbrTag = false;\n\n        /* some file options not allowed if output is: not specified or stdout */\n        if (gfc.pinfo != null)\n            gfp.bWriteVbrTag = false;\n        /* disable Xing VBR tag */\n\n        bs.init_bit_stream_w(gfc);\n\n        var j = gfc.samplerate_index + (3 * gfp.version) + 6\n            * (gfp.out_samplerate < 16000 ? 1 : 0);\n        for (var i = 0; i < Encoder.SBMAX_l + 1; i++)\n            gfc.scalefac_band.l[i] = qupvt.sfBandIndex[j].l[i];\n\n        for (var i = 0; i < Encoder.PSFB21 + 1; i++) {\n            var size = (gfc.scalefac_band.l[22] - gfc.scalefac_band.l[21])\n                / Encoder.PSFB21;\n            var start = gfc.scalefac_band.l[21] + i * size;\n            gfc.scalefac_band.psfb21[i] = start;\n        }\n        gfc.scalefac_band.psfb21[Encoder.PSFB21] = 576;\n\n        for (var i = 0; i < Encoder.SBMAX_s + 1; i++)\n            gfc.scalefac_band.s[i] = qupvt.sfBandIndex[j].s[i];\n\n        for (var i = 0; i < Encoder.PSFB12 + 1; i++) {\n            var size = (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12])\n                / Encoder.PSFB12;\n            var start = gfc.scalefac_band.s[12] + i * size;\n            gfc.scalefac_band.psfb12[i] = start;\n        }\n        gfc.scalefac_band.psfb12[Encoder.PSFB12] = 192;\n        /* determine the mean bitrate for main data */\n        if (gfp.version == 1) /* MPEG 1 */\n            gfc.sideinfo_len = (gfc.channels_out == 1) ? 4 + 17 : 4 + 32;\n        else\n        /* MPEG 2 */\n            gfc.sideinfo_len = (gfc.channels_out == 1) ? 4 + 9 : 4 + 17;\n\n        if (gfp.error_protection)\n            gfc.sideinfo_len += 2;\n\n        lame_init_bitstream(gfp);\n\n        gfc.Class_ID = LAME_ID;\n\n        {\n            var k;\n\n            for (k = 0; k < 19; k++)\n                gfc.nsPsy.pefirbuf[k] = 700 * gfc.mode_gr * gfc.channels_out;\n\n            if (gfp.ATHtype == -1)\n                gfp.ATHtype = 4;\n        }\n        assert(gfp.VBR_q <= 9);\n        assert(gfp.VBR_q >= 0);\n\n        switch (gfp.VBR) {\n\n            case VbrMode.vbr_mt:\n                gfp.VBR = VbrMode.vbr_mtrh;\n            //$FALL-THROUGH$\n            case VbrMode.vbr_mtrh:\n            {\n                if (gfp.useTemporal == null) {\n                    gfp.useTemporal = false;\n                    /* off by default for this VBR mode */\n                }\n\n                p.apply_preset(gfp, 500 - (gfp.VBR_q * 10), 0);\n                /**\n                 * <PRE>\n                 *   The newer VBR code supports only a limited\n                 *     subset of quality levels:\n                 *     9-5=5 are the same, uses x^3/4 quantization\n                 *   4-0=0 are the same  5 plus best huffman divide code\n                 * </PRE>\n                 */\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n                if (gfp.quality < 5)\n                    gfp.quality = 0;\n                if (gfp.quality > 5)\n                    gfp.quality = 5;\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                /*\n                 * sfb21 extra only with MPEG-1 at higher sampling rates\n                 */\n                if (gfp.experimentalY)\n                    gfc.sfb21_extra = false;\n                else\n                    gfc.sfb21_extra = (gfp.out_samplerate > 44000);\n\n                gfc.iteration_loop = new VBRNewIterationLoop(qu);\n                break;\n\n            }\n            case VbrMode.vbr_rh:\n            {\n\n                p.apply_preset(gfp, 500 - (gfp.VBR_q * 10), 0);\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                /*\n                 * sfb21 extra only with MPEG-1 at higher sampling rates\n                 */\n                if (gfp.experimentalY)\n                    gfc.sfb21_extra = false;\n                else\n                    gfc.sfb21_extra = (gfp.out_samplerate > 44000);\n\n                /*\n                 * VBR needs at least the output of GPSYCHO, so we have to garantee\n                 * that by setting a minimum quality level, actually level 6 does\n                 * it. down to level 6\n                 */\n                if (gfp.quality > 6)\n                    gfp.quality = 6;\n\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n\n                gfc.iteration_loop = new VBROldIterationLoop(qu);\n                break;\n            }\n\n            default: /* cbr/abr */\n            {\n                var vbrmode;\n\n                /*\n                 * no sfb21 extra with CBR code\n                 */\n                gfc.sfb21_extra = false;\n\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n\n                vbrmode = gfp.VBR;\n                if (vbrmode == VbrMode.vbr_off)\n                    gfp.VBR_mean_bitrate_kbps = gfp.brate;\n                /* second, set parameters depending on bitrate */\n                p.apply_preset(gfp, gfp.VBR_mean_bitrate_kbps, 0);\n                gfp.VBR = vbrmode;\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                if (vbrmode == VbrMode.vbr_off) {\n                    gfc.iteration_loop = new CBRNewIterationLoop(qu);\n                } else {\n                    gfc.iteration_loop = new ABRIterationLoop(qu);\n                }\n                break;\n            }\n        }\n        assert(gfp.scale >= 0);\n        /* initialize default values common for all modes */\n\n        if (gfp.VBR != VbrMode.vbr_off) { /* choose a min/max bitrate for VBR */\n            /* if the user didn't specify VBR_max_bitrate: */\n            gfc.VBR_min_bitrate = 1;\n            /*\n             * default: allow 8 kbps (MPEG-2) or 32 kbps (MPEG-1)\n             */\n            gfc.VBR_max_bitrate = 14;\n            /*\n             * default: allow 160 kbps (MPEG-2) or 320 kbps (MPEG-1)\n             */\n            if (gfp.out_samplerate < 16000)\n                gfc.VBR_max_bitrate = 8;\n            /* default: allow 64 kbps (MPEG-2.5) */\n            if (gfp.VBR_min_bitrate_kbps != 0) {\n                gfp.VBR_min_bitrate_kbps = FindNearestBitrate(\n                    gfp.VBR_min_bitrate_kbps, gfp.version,\n                    gfp.out_samplerate);\n                gfc.VBR_min_bitrate = BitrateIndex(gfp.VBR_min_bitrate_kbps,\n                    gfp.version, gfp.out_samplerate);\n                if (gfc.VBR_min_bitrate < 0)\n                    return -1;\n            }\n            if (gfp.VBR_max_bitrate_kbps != 0) {\n                gfp.VBR_max_bitrate_kbps = FindNearestBitrate(\n                    gfp.VBR_max_bitrate_kbps, gfp.version,\n                    gfp.out_samplerate);\n                gfc.VBR_max_bitrate = BitrateIndex(gfp.VBR_max_bitrate_kbps,\n                    gfp.version, gfp.out_samplerate);\n                if (gfc.VBR_max_bitrate < 0)\n                    return -1;\n            }\n            gfp.VBR_min_bitrate_kbps = Tables.bitrate_table[gfp.version][gfc.VBR_min_bitrate];\n            gfp.VBR_max_bitrate_kbps = Tables.bitrate_table[gfp.version][gfc.VBR_max_bitrate];\n            gfp.VBR_mean_bitrate_kbps = Math.min(\n                Tables.bitrate_table[gfp.version][gfc.VBR_max_bitrate],\n                gfp.VBR_mean_bitrate_kbps);\n            gfp.VBR_mean_bitrate_kbps = Math.max(\n                Tables.bitrate_table[gfp.version][gfc.VBR_min_bitrate],\n                gfp.VBR_mean_bitrate_kbps);\n        }\n\n        /* just another daily changing developer switch */\n        if (gfp.tune) {\n            gfc.PSY.mask_adjust += gfp.tune_value_a;\n            gfc.PSY.mask_adjust_short += gfp.tune_value_a;\n        }\n\n        /* initialize internal qval settings */\n        lame_init_qval(gfp);\n        assert(gfp.scale >= 0);\n        /*\n         * automatic ATH adjustment on\n         */\n        if (gfp.athaa_type < 0)\n            gfc.ATH.useAdjust = 3;\n        else\n            gfc.ATH.useAdjust = gfp.athaa_type;\n\n        /* initialize internal adaptive ATH settings -jd */\n        gfc.ATH.aaSensitivityP = Math.pow(10.0, gfp.athaa_sensitivity\n            / -10.0);\n\n        if (gfp.short_blocks == null) {\n            gfp.short_blocks = ShortBlock.short_block_allowed;\n        }\n\n        /*\n         * Note Jan/2003: Many hardware decoders cannot handle short blocks in\n         * regular stereo mode unless they are coupled (same type in both\n         * channels) it is a rare event (1 frame per min. or so) that LAME would\n         * use uncoupled short blocks, so lets turn them off until we decide how\n         * to handle this. No other encoders allow uncoupled short blocks, even\n         * though it is in the standard.\n         */\n        /*\n         * rh 20040217: coupling makes no sense for mono and dual-mono streams\n         */\n        if (gfp.short_blocks == ShortBlock.short_block_allowed\n            && (gfp.mode == MPEGMode.JOINT_STEREO || gfp.mode == MPEGMode.STEREO)) {\n            gfp.short_blocks = ShortBlock.short_block_coupled;\n        }\n\n        if (gfp.quant_comp < 0)\n            gfp.quant_comp = 1;\n        if (gfp.quant_comp_short < 0)\n            gfp.quant_comp_short = 0;\n\n        if (gfp.msfix < 0)\n            gfp.msfix = 0;\n\n        /* select psychoacoustic model */\n        gfp.exp_nspsytune = gfp.exp_nspsytune | 1;\n\n        if (gfp.internal_flags.nsPsy.attackthre < 0)\n            gfp.internal_flags.nsPsy.attackthre = PsyModel.NSATTACKTHRE;\n        if (gfp.internal_flags.nsPsy.attackthre_s < 0)\n            gfp.internal_flags.nsPsy.attackthre_s = PsyModel.NSATTACKTHRE_S;\n\n        assert(gfp.scale >= 0);\n\n        if (gfp.scale < 0)\n            gfp.scale = 1;\n\n        if (gfp.ATHtype < 0)\n            gfp.ATHtype = 4;\n\n        if (gfp.ATHcurve < 0)\n            gfp.ATHcurve = 4;\n\n        if (gfp.athaa_loudapprox < 0)\n            gfp.athaa_loudapprox = 2;\n\n        if (gfp.interChRatio < 0)\n            gfp.interChRatio = 0;\n\n        if (gfp.useTemporal == null)\n            gfp.useTemporal = true;\n        /* on by default */\n\n        /*\n         * padding method as described in\n         * \"MPEG-Layer3 / Bitstream Syntax and Decoding\" by Martin Sieler, Ralph\n         * Sperschneider\n         *\n         * note: there is no padding for the very first frame\n         *\n         * Robert Hegemann 2000-06-22\n         */\n        gfc.slot_lag = gfc.frac_SpF = 0;\n        if (gfp.VBR == VbrMode.vbr_off)\n            gfc.slot_lag = gfc.frac_SpF = (((gfp.version + 1) * 72000 * gfp.brate) % gfp.out_samplerate) | 0;\n\n        qupvt.iteration_init(gfp);\n        psy.psymodel_init(gfp);\n        assert(gfp.scale >= 0);\n        return 0;\n    }\n\n    function update_inbuffer_size(gfc, nsamples) {\n        if (gfc.in_buffer_0 == null || gfc.in_buffer_nsamples < nsamples) {\n            gfc.in_buffer_0 = new_float(nsamples);\n            gfc.in_buffer_1 = new_float(nsamples);\n            gfc.in_buffer_nsamples = nsamples;\n        }\n    }\n\n    this.lame_encode_flush = function (gfp, mp3buffer, mp3bufferPos, mp3buffer_size) {\n        var gfc = gfp.internal_flags;\n        var buffer = new_short_n([2, 1152]);\n        var imp3 = 0, mp3count, mp3buffer_size_remaining;\n\n        /*\n         * we always add POSTDELAY=288 padding to make sure granule with real\n         * data can be complety decoded (because of 50% overlap with next\n         * granule\n         */\n        var end_padding;\n        var frames_left;\n        var samples_to_encode = gfc.mf_samples_to_encode - Encoder.POSTDELAY;\n        var mf_needed = calcNeeded(gfp);\n\n        /* Was flush already called? */\n        if (gfc.mf_samples_to_encode < 1) {\n            return 0;\n        }\n        mp3count = 0;\n\n        if (gfp.in_samplerate != gfp.out_samplerate) {\n            /*\n             * delay due to resampling; needs to be fixed, if resampling code\n             * gets changed\n             */\n            samples_to_encode += 16. * gfp.out_samplerate / gfp.in_samplerate;\n        }\n        end_padding = gfp.framesize - (samples_to_encode % gfp.framesize);\n        if (end_padding < 576)\n            end_padding += gfp.framesize;\n        gfp.encoder_padding = end_padding;\n\n        frames_left = (samples_to_encode + end_padding) / gfp.framesize;\n\n        /*\n         * send in a frame of 0 padding until all internal sample buffers are\n         * flushed\n         */\n        while (frames_left > 0 && imp3 >= 0) {\n            var bunch = mf_needed - gfc.mf_size;\n            var frame_num = gfp.frameNum;\n\n            bunch *= gfp.in_samplerate;\n            bunch /= gfp.out_samplerate;\n            if (bunch > 1152)\n                bunch = 1152;\n            if (bunch < 1)\n                bunch = 1;\n\n            mp3buffer_size_remaining = mp3buffer_size - mp3count;\n\n            /* if user specifed buffer size = 0, dont check size */\n            if (mp3buffer_size == 0)\n                mp3buffer_size_remaining = 0;\n\n            imp3 = this.lame_encode_buffer(gfp, buffer[0], buffer[1], bunch,\n                mp3buffer, mp3bufferPos, mp3buffer_size_remaining);\n\n            mp3bufferPos += imp3;\n            mp3count += imp3;\n            frames_left -= (frame_num != gfp.frameNum) ? 1 : 0;\n        }\n        /*\n         * Set gfc.mf_samples_to_encode to 0, so we may detect and break loops\n         * calling it more than once in a row.\n         */\n        gfc.mf_samples_to_encode = 0;\n\n        if (imp3 < 0) {\n            /* some type of fatal error */\n            return imp3;\n        }\n\n        mp3buffer_size_remaining = mp3buffer_size - mp3count;\n        /* if user specifed buffer size = 0, dont check size */\n        if (mp3buffer_size == 0)\n            mp3buffer_size_remaining = 0;\n\n        /* mp3 related stuff. bit buffer might still contain some mp3 data */\n        bs.flush_bitstream(gfp);\n        imp3 = bs.copy_buffer(gfc, mp3buffer, mp3bufferPos,\n            mp3buffer_size_remaining, 1);\n        if (imp3 < 0) {\n            /* some type of fatal error */\n            return imp3;\n        }\n        mp3bufferPos += imp3;\n        mp3count += imp3;\n        mp3buffer_size_remaining = mp3buffer_size - mp3count;\n        /* if user specifed buffer size = 0, dont check size */\n        if (mp3buffer_size == 0)\n            mp3buffer_size_remaining = 0;\n\n        if (gfp.write_id3tag_automatic) {\n            /* write a id3 tag to the bitstream */\n            id3.id3tag_write_v1(gfp);\n\n            imp3 = bs.copy_buffer(gfc, mp3buffer, mp3bufferPos,\n                mp3buffer_size_remaining, 0);\n\n            if (imp3 < 0) {\n                return imp3;\n            }\n            mp3count += imp3;\n        }\n        return mp3count;\n    };\n\n    this.lame_encode_buffer = function (gfp, buffer_l, buffer_r, nsamples, mp3buf, mp3bufPos, mp3buf_size) {\n        var gfc = gfp.internal_flags;\n        var in_buffer = [null, null];\n\n        if (gfc.Class_ID != LAME_ID)\n            return -3;\n\n        if (nsamples == 0)\n            return 0;\n\n        update_inbuffer_size(gfc, nsamples);\n\n        in_buffer[0] = gfc.in_buffer_0;\n        in_buffer[1] = gfc.in_buffer_1;\n\n        /* make a copy of input buffer, changing type to sample_t */\n        for (var i = 0; i < nsamples; i++) {\n            in_buffer[0][i] = buffer_l[i];\n            if (gfc.channels_in > 1)\n                in_buffer[1][i] = buffer_r[i];\n        }\n\n        return lame_encode_buffer_sample(gfp, in_buffer[0], in_buffer[1],\n            nsamples, mp3buf, mp3bufPos, mp3buf_size);\n    }\n\n    function calcNeeded(gfp) {\n        var mf_needed = Encoder.BLKSIZE + gfp.framesize - Encoder.FFTOFFSET;\n        /*\n         * amount needed for FFT\n         */\n        mf_needed = Math.max(mf_needed, 512 + gfp.framesize - 32);\n        assert(LameInternalFlags.MFSIZE >= mf_needed);\n\n        return mf_needed;\n    }\n\n    function lame_encode_buffer_sample(gfp, buffer_l, buffer_r, nsamples, mp3buf, mp3bufPos, mp3buf_size) {\n        var gfc = gfp.internal_flags;\n        var mp3size = 0, ret, i, ch, mf_needed;\n        var mp3out;\n        var mfbuf = [null, null];\n        var in_buffer = [null, null];\n\n        if (gfc.Class_ID != LAME_ID)\n            return -3;\n\n        if (nsamples == 0)\n            return 0;\n\n        /* copy out any tags that may have been written into bitstream */\n        mp3out = bs.copy_buffer(gfc, mp3buf, mp3bufPos, mp3buf_size, 0);\n        if (mp3out < 0)\n            return mp3out;\n        /* not enough buffer space */\n        mp3bufPos += mp3out;\n        mp3size += mp3out;\n\n        in_buffer[0] = buffer_l;\n        in_buffer[1] = buffer_r;\n\n        /* Apply user defined re-scaling */\n\n        /* user selected scaling of the samples */\n        if (BitStream.NEQ(gfp.scale, 0) && BitStream.NEQ(gfp.scale, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[0][i] *= gfp.scale;\n                if (gfc.channels_out == 2)\n                    in_buffer[1][i] *= gfp.scale;\n            }\n        }\n\n        /* user selected scaling of the channel 0 (left) samples */\n        if (BitStream.NEQ(gfp.scale_left, 0)\n            && BitStream.NEQ(gfp.scale_left, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[0][i] *= gfp.scale_left;\n            }\n        }\n\n        /* user selected scaling of the channel 1 (right) samples */\n        if (BitStream.NEQ(gfp.scale_right, 0)\n            && BitStream.NEQ(gfp.scale_right, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[1][i] *= gfp.scale_right;\n            }\n        }\n\n        /* Downsample to Mono if 2 channels in and 1 channel out */\n        if (gfp.num_channels == 2 && gfc.channels_out == 1) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[0][i] = 0.5 * ( in_buffer[0][i] + in_buffer[1][i]);\n                in_buffer[1][i] = 0.0;\n            }\n        }\n\n        mf_needed = calcNeeded(gfp);\n\n        mfbuf[0] = gfc.mfbuf[0];\n        mfbuf[1] = gfc.mfbuf[1];\n\n        var in_bufferPos = 0;\n        while (nsamples > 0) {\n            var in_buffer_ptr = [null, null];\n            var n_in = 0;\n            /* number of input samples processed with fill_buffer */\n            var n_out = 0;\n            /* number of samples output with fill_buffer */\n            /* n_in <> n_out if we are resampling */\n\n            in_buffer_ptr[0] = in_buffer[0];\n            in_buffer_ptr[1] = in_buffer[1];\n            /* copy in new samples into mfbuf, with resampling */\n            var inOut = new InOut();\n            fill_buffer(gfp, mfbuf, in_buffer_ptr, in_bufferPos, nsamples,\n                inOut);\n            n_in = inOut.n_in;\n            n_out = inOut.n_out;\n\n            /* compute ReplayGain of resampled input if requested */\n            if (gfc.findReplayGain && !gfc.decode_on_the_fly)\n                if (ga.AnalyzeSamples(gfc.rgdata, mfbuf[0], gfc.mf_size,\n                        mfbuf[1], gfc.mf_size, n_out, gfc.channels_out) == GainAnalysis.GAIN_ANALYSIS_ERROR)\n                    return -6;\n\n            /* update in_buffer counters */\n            nsamples -= n_in;\n            in_bufferPos += n_in;\n            if (gfc.channels_out == 2)\n                ;// in_bufferPos += n_in;\n\n            /* update mfbuf[] counters */\n            gfc.mf_size += n_out;\n            assert(gfc.mf_size <= LameInternalFlags.MFSIZE);\n\n            /*\n             * lame_encode_flush may have set gfc.mf_sample_to_encode to 0 so we\n             * have to reinitialize it here when that happened.\n             */\n            if (gfc.mf_samples_to_encode < 1) {\n                gfc.mf_samples_to_encode = Encoder.ENCDELAY + Encoder.POSTDELAY;\n            }\n            gfc.mf_samples_to_encode += n_out;\n\n            if (gfc.mf_size >= mf_needed) {\n                /* encode the frame. */\n                /* mp3buf = pointer to current location in buffer */\n                /* mp3buf_size = size of original mp3 output buffer */\n                /* = 0 if we should not worry about the */\n                /* buffer size because calling program is */\n                /* to lazy to compute it */\n                /* mp3size = size of data written to buffer so far */\n                /* mp3buf_size-mp3size = amount of space avalable */\n\n                var buf_size = mp3buf_size - mp3size;\n                if (mp3buf_size == 0)\n                    buf_size = 0;\n\n                ret = lame_encode_frame(gfp, mfbuf[0], mfbuf[1], mp3buf,\n                    mp3bufPos, buf_size);\n\n                if (ret < 0)\n                    return ret;\n                mp3bufPos += ret;\n                mp3size += ret;\n\n                /* shift out old samples */\n                gfc.mf_size -= gfp.framesize;\n                gfc.mf_samples_to_encode -= gfp.framesize;\n                for (ch = 0; ch < gfc.channels_out; ch++)\n                    for (i = 0; i < gfc.mf_size; i++)\n                        mfbuf[ch][i] = mfbuf[ch][i + gfp.framesize];\n            }\n        }\n        assert(nsamples == 0);\n\n        return mp3size;\n    }\n\n    function lame_encode_frame(gfp, inbuf_l, inbuf_r, mp3buf, mp3bufPos, mp3buf_size) {\n        var ret = self.enc.lame_encode_mp3_frame(gfp, inbuf_l, inbuf_r, mp3buf,\n            mp3bufPos, mp3buf_size);\n        gfp.frameNum++;\n        return ret;\n    }\n\n    function InOut() {\n        this.n_in = 0;\n        this.n_out = 0;\n    }\n\n\n    function NumUsed() {\n        this.num_used = 0;\n    }\n\n    /**\n     * Greatest common divisor.\n     * <p>\n     * Joint work of Euclid and M. Hendry\n     */\n    function gcd(i, j) {\n        return j != 0 ? gcd(j, i % j) : i;\n    }\n\n    /**\n     * Resampling via FIR filter, blackman window.\n     */\n    function blackman(x, fcn, l) {\n        /*\n         * This algorithm from: SIGNAL PROCESSING ALGORITHMS IN FORTRAN AND C\n         * S.D. Stearns and R.A. David, Prentice-Hall, 1992\n         */\n        var wcn = (Math.PI * fcn);\n\n        x /= l;\n        if (x < 0)\n            x = 0;\n        if (x > 1)\n            x = 1;\n        var x2 = x - .5;\n\n        var bkwn = 0.42 - 0.5 * Math.cos(2 * x * Math.PI) + 0.08 * Math.cos(4 * x * Math.PI);\n        if (Math.abs(x2) < 1e-9)\n            return (wcn / Math.PI);\n        else\n            return (bkwn * Math.sin(l * wcn * x2) / (Math.PI * l * x2));\n    }\n\n    function fill_buffer_resample(gfp, outbuf, outbufPos, desired_len, inbuf, in_bufferPos, len, num_used, ch) {\n        var gfc = gfp.internal_flags;\n        var i, j = 0, k;\n        /* number of convolution functions to pre-compute */\n        var bpc = gfp.out_samplerate\n            / gcd(gfp.out_samplerate, gfp.in_samplerate);\n        if (bpc > LameInternalFlags.BPC)\n            bpc = LameInternalFlags.BPC;\n\n        var intratio = (Math.abs(gfc.resample_ratio\n            - Math.floor(.5 + gfc.resample_ratio)) < .0001) ? 1 : 0;\n        var fcn = 1.00 / gfc.resample_ratio;\n        if (fcn > 1.00)\n            fcn = 1.00;\n        var filter_l = 31;\n        if (0 == filter_l % 2)\n            --filter_l;\n        /* must be odd */\n        filter_l += intratio;\n        /* unless resample_ratio=int, it must be even */\n\n        var BLACKSIZE = filter_l + 1;\n        /* size of data needed for FIR */\n\n        if (gfc.fill_buffer_resample_init == 0) {\n            gfc.inbuf_old[0] = new_float(BLACKSIZE);\n            gfc.inbuf_old[1] = new_float(BLACKSIZE);\n            for (i = 0; i <= 2 * bpc; ++i)\n                gfc.blackfilt[i] = new_float(BLACKSIZE);\n\n            gfc.itime[0] = 0;\n            gfc.itime[1] = 0;\n\n            /* precompute blackman filter coefficients */\n            for (j = 0; j <= 2 * bpc; j++) {\n                var sum = 0.;\n                var offset = (j - bpc) / (2. * bpc);\n                for (i = 0; i <= filter_l; i++)\n                    sum += gfc.blackfilt[j][i] = blackman(i - offset, fcn,\n                        filter_l);\n                for (i = 0; i <= filter_l; i++)\n                    gfc.blackfilt[j][i] /= sum;\n            }\n            gfc.fill_buffer_resample_init = 1;\n        }\n\n        var inbuf_old = gfc.inbuf_old[ch];\n\n        /* time of j'th element in inbuf = itime + j/ifreq; */\n        /* time of k'th element in outbuf = j/ofreq */\n        for (k = 0; k < desired_len; k++) {\n            var time0;\n            var joff;\n\n            time0 = k * gfc.resample_ratio;\n            /* time of k'th output sample */\n            j = 0 | Math.floor(time0 - gfc.itime[ch]);\n\n            /* check if we need more input data */\n            if ((filter_l + j - filter_l / 2) >= len)\n                break;\n\n            /* blackman filter. by default, window centered at j+.5(filter_l%2) */\n            /* but we want a window centered at time0. */\n            var offset = (time0 - gfc.itime[ch] - (j + .5 * (filter_l % 2)));\n            assert(Math.abs(offset) <= .501);\n\n            /* find the closest precomputed window for this offset: */\n            joff = 0 | Math.floor((offset * 2 * bpc) + bpc + .5);\n            var xvalue = 0.;\n            for (i = 0; i <= filter_l; ++i) {\n                var j2 = i + j - filter_l / 2;\n                var y;\n                assert(j2 < len);\n                assert(j2 + BLACKSIZE >= 0);\n                y = (j2 < 0) ? inbuf_old[BLACKSIZE + j2] : inbuf[in_bufferPos\n                + j2];\n                xvalue += y * gfc.blackfilt[joff][i];\n            }\n            outbuf[outbufPos + k] = xvalue;\n        }\n\n        /* k = number of samples added to outbuf */\n        /* last k sample used data from [j-filter_l/2,j+filter_l-filter_l/2] */\n\n        /* how many samples of input data were used: */\n        num_used.num_used = Math.min(len, filter_l + j - filter_l / 2);\n\n        /*\n         * adjust our input time counter. Incriment by the number of samples\n         * used, then normalize so that next output sample is at time 0, next\n         * input buffer is at time itime[ch]\n         */\n        gfc.itime[ch] += num_used.num_used - k * gfc.resample_ratio;\n\n        /* save the last BLACKSIZE samples into the inbuf_old buffer */\n        if (num_used.num_used >= BLACKSIZE) {\n            for (i = 0; i < BLACKSIZE; i++)\n                inbuf_old[i] = inbuf[in_bufferPos + num_used.num_used + i\n                - BLACKSIZE];\n        } else {\n            /* shift in num_used.num_used samples into inbuf_old */\n            var n_shift = BLACKSIZE - num_used.num_used;\n            /*\n             * number of samples to\n             * shift\n             */\n\n            /*\n             * shift n_shift samples by num_used.num_used, to make room for the\n             * num_used new samples\n             */\n            for (i = 0; i < n_shift; ++i)\n                inbuf_old[i] = inbuf_old[i + num_used.num_used];\n\n            /* shift in the num_used.num_used samples */\n            for (j = 0; i < BLACKSIZE; ++i, ++j)\n                inbuf_old[i] = inbuf[in_bufferPos + j];\n\n            assert(j == num_used.num_used);\n        }\n        return k;\n        /* return the number samples created at the new samplerate */\n    }\n\n    function fill_buffer(gfp, mfbuf, in_buffer, in_bufferPos, nsamples, io) {\n        var gfc = gfp.internal_flags;\n\n        /* copy in new samples into mfbuf, with resampling if necessary */\n        if ((gfc.resample_ratio < .9999) || (gfc.resample_ratio > 1.0001)) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                var numUsed = new NumUsed();\n                io.n_out = fill_buffer_resample(gfp, mfbuf[ch], gfc.mf_size,\n                    gfp.framesize, in_buffer[ch], in_bufferPos, nsamples,\n                    numUsed, ch);\n                io.n_in = numUsed.num_used;\n            }\n        } else {\n            io.n_out = Math.min(gfp.framesize, nsamples);\n            io.n_in = io.n_out;\n            for (var i = 0; i < io.n_out; ++i) {\n                mfbuf[0][gfc.mf_size + i] = in_buffer[0][in_bufferPos + i];\n                if (gfc.channels_out == 2)\n                    mfbuf[1][gfc.mf_size + i] = in_buffer[1][in_bufferPos + i];\n            }\n        }\n    }\n\n}\n\nmodule.exports = Lame;\n","/*\n *      psymodel.c\n *\n *      Copyright (c) 1999-2000 Mark Taylor\n *      Copyright (c) 2001-2002 Naoki Shibata\n *      Copyright (c) 2000-2003 Takehiro Tominaga\n *      Copyright (c) 2000-2008 Robert Hegemann\n *      Copyright (c) 2000-2005 Gabriel Bouvigne\n *      Copyright (c) 2000-2005 Alexander Leidinger\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: PsyModel.java,v 1.27 2011/05/24 20:48:06 kenchis Exp $ */\n\n\n/*\n PSYCHO ACOUSTICS\n\n\n This routine computes the psycho acoustics, delayed by one granule.\n\n Input: buffer of PCM data (1024 samples).\n\n This window should be centered over the 576 sample granule window.\n The routine will compute the psycho acoustics for\n this granule, but return the psycho acoustics computed\n for the *previous* granule.  This is because the block\n type of the previous granule can only be determined\n after we have computed the psycho acoustics for the following\n granule.\n\n Output:  maskings and energies for each scalefactor band.\n block type, PE, and some correlation measures.\n The PE is used by CBR modes to determine if extra bits\n from the bit reservoir should be used.  The correlation\n measures are used to determine mid/side or regular stereo.\n */\n/*\n Notation:\n\n barks:  a non-linear frequency scale.  Mapping from frequency to\n barks is given by freq2bark()\n\n scalefactor bands: The spectrum (frequencies) are broken into\n SBMAX \"scalefactor bands\".  Thes bands\n are determined by the MPEG ISO spec.  In\n the noise shaping/quantization code, we allocate\n bits among the partition bands to achieve the\n best possible quality\n\n partition bands:   The spectrum is also broken into about\n 64 \"partition bands\".  Each partition\n band is about .34 barks wide.  There are about 2-5\n partition bands for each scalefactor band.\n\n LAME computes all psycho acoustic information for each partition\n band.  Then at the end of the computations, this information\n is mapped to scalefactor bands.  The energy in each scalefactor\n band is taken as the sum of the energy in all partition bands\n which overlap the scalefactor band.  The maskings can be computed\n in the same way (and thus represent the average masking in that band)\n or by taking the minmum value multiplied by the number of\n partition bands used (which represents a minimum masking in that band).\n */\n/*\n The general outline is as follows:\n\n 1. compute the energy in each partition band\n 2. compute the tonality in each partition band\n 3. compute the strength of each partion band \"masker\"\n 4. compute the masking (via the spreading function applied to each masker)\n 5. Modifications for mid/side masking.\n\n Each partition band is considiered a \"masker\".  The strength\n of the i'th masker in band j is given by:\n\n s3(bark(i)-bark(j))*strength(i)\n\n The strength of the masker is a function of the energy and tonality.\n The more tonal, the less masking.  LAME uses a simple linear formula\n (controlled by NMT and TMN) which says the strength is given by the\n energy divided by a linear function of the tonality.\n */\n/*\n s3() is the \"spreading function\".  It is given by a formula\n determined via listening tests.\n\n The total masking in the j'th partition band is the sum over\n all maskings i.  It is thus given by the convolution of\n the strength with s3(), the \"spreading function.\"\n\n masking(j) = sum_over_i  s3(i-j)*strength(i)  = s3 o strength\n\n where \"o\" = convolution operator.  s3 is given by a formula determined\n via listening tests.  It is normalized so that s3 o 1 = 1.\n\n Note: instead of a simple convolution, LAME also has the\n option of using \"additive masking\"\n\n The most critical part is step 2, computing the tonality of each\n partition band.  LAME has two tonality estimators.  The first\n is based on the ISO spec, and measures how predictiable the\n signal is over time.  The more predictable, the more tonal.\n The second measure is based on looking at the spectrum of\n a single granule.  The more peaky the spectrum, the more\n tonal.  By most indications, the latter approach is better.\n\n Finally, in step 5, the maskings for the mid and side\n channel are possibly increased.  Under certain circumstances,\n noise in the mid & side channels is assumed to also\n be masked by strong maskers in the L or R channels.\n\n\n Other data computed by the psy-model:\n\n ms_ratio        side-channel / mid-channel masking ratio (for previous granule)\n ms_ratio_next   side-channel / mid-channel masking ratio for this granule\n\n percep_entropy[2]     L and R values (prev granule) of PE - A measure of how\n much pre-echo is in the previous granule\n percep_entropy_MS[2]  mid and side channel values (prev granule) of percep_entropy\n energy[4]             L,R,M,S energy in each channel, prev granule\n blocktype_d[2]        block type to use for previous granule\n */\n//package mp3;\n\n//import java.util.Arrays;\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar FFT = require(\"./FFT.js\");\nvar Encoder = require(\"./Encoder.js\");\n\nfunction PsyModel() {\n\n    var fft = new FFT();\n\n    var LOG10 = 2.30258509299404568402;\n\n    var rpelev = 2;\n    var rpelev2 = 16;\n    var rpelev_s = 2;\n    var rpelev2_s = 16;\n\n    /* size of each partition band, in barks: */\n    var DELBARK = .34;\n\n    /* tuned for output level (sensitive to energy scale) */\n    var VO_SCALE = (1. / (14752 * 14752) / (Encoder.BLKSIZE / 2));\n\n    var temporalmask_sustain_sec = 0.01;\n\n    var NS_PREECHO_ATT0 = 0.8;\n    var NS_PREECHO_ATT1 = 0.6;\n    var NS_PREECHO_ATT2 = 0.3;\n\n    var NS_MSFIX = 3.5;\n\n    var NSATTACKTHRE = 4.4;\n    var NSATTACKTHRE_S = 25;\n\n    var NSFIRLEN = 21;\n\n    /* size of each partition band, in barks: */\n    var LN_TO_LOG10 = 0.2302585093;\n\n    function NON_LINEAR_SCALE_ENERGY(x) {\n        return x;\n    }\n\n    /**\n     * <PRE>\n     *       L3psycho_anal.  Compute psycho acoustics.\n     *\n     *       Data returned to the calling program must be delayed by one\n     *       granule.\n     *\n     *       This is done in two places.\n     *       If we do not need to know the blocktype, the copying\n     *       can be done here at the top of the program: we copy the data for\n     *       the last granule (computed during the last call) before it is\n     *       overwritten with the new data.  It looks like this:\n     *\n     *       0. static psymodel_data\n     *       1. calling_program_data = psymodel_data\n     *       2. compute psymodel_data\n     *\n     *       For data which needs to know the blocktype, the copying must be\n     *       done at the end of this loop, and the old values must be saved:\n     *\n     *       0. static psymodel_data_old\n     *       1. compute psymodel_data\n     *       2. compute possible block type of this granule\n     *       3. compute final block type of previous granule based on #2.\n     *       4. calling_program_data = psymodel_data_old\n     *       5. psymodel_data_old = psymodel_data\n     *     psycho_loudness_approx\n     *       jd - 2001 mar 12\n     *    in:  energy   - BLKSIZE/2 elements of frequency magnitudes ^ 2\n     *         gfp      - uses out_samplerate, ATHtype (also needed for ATHformula)\n     *    returns: loudness^2 approximation, a positive value roughly tuned for a value\n     *             of 1.0 for signals near clipping.\n     *    notes:   When calibrated, feeding this function binary white noise at sample\n     *             values +32767 or -32768 should return values that approach 3.\n     *             ATHformula is used to approximate an equal loudness curve.\n     *    future:  Data indicates that the shape of the equal loudness curve varies\n     *             with intensity.  This function might be improved by using an equal\n     *             loudness curve shaped for typical playback levels (instead of the\n     *             ATH, that is shaped for the threshold).  A flexible realization might\n     *             simply bend the existing ATH curve to achieve the desired shape.\n     *             However, the potential gain may not be enough to justify an effort.\n     * </PRE>\n     */\n    function psycho_loudness_approx(energy, gfc) {\n        var loudness_power = 0.0;\n        /* apply weights to power in freq. bands */\n        for (var i = 0; i < Encoder.BLKSIZE / 2; ++i)\n            loudness_power += energy[i] * gfc.ATH.eql_w[i];\n        loudness_power *= VO_SCALE;\n\n        return loudness_power;\n    }\n\n    function compute_ffts(gfp, fftenergy, fftenergy_s, wsamp_l, wsamp_lPos, wsamp_s, wsamp_sPos, gr_out, chn, buffer, bufPos) {\n        var gfc = gfp.internal_flags;\n        if (chn < 2) {\n            fft.fft_long(gfc, wsamp_l[wsamp_lPos], chn, buffer, bufPos);\n            fft.fft_short(gfc, wsamp_s[wsamp_sPos], chn, buffer, bufPos);\n        }\n        /* FFT data for mid and side channel is derived from L & R */\n        else if (chn == 2) {\n            for (var j = Encoder.BLKSIZE - 1; j >= 0; --j) {\n                var l = wsamp_l[wsamp_lPos + 0][j];\n                var r = wsamp_l[wsamp_lPos + 1][j];\n                wsamp_l[wsamp_lPos + 0][j] = (l + r) * Util.SQRT2 * 0.5;\n                wsamp_l[wsamp_lPos + 1][j] = (l - r) * Util.SQRT2 * 0.5;\n            }\n            for (var b = 2; b >= 0; --b) {\n                for (var j = Encoder.BLKSIZE_s - 1; j >= 0; --j) {\n                    var l = wsamp_s[wsamp_sPos + 0][b][j];\n                    var r = wsamp_s[wsamp_sPos + 1][b][j];\n                    wsamp_s[wsamp_sPos + 0][b][j] = (l + r) * Util.SQRT2 * 0.5;\n                    wsamp_s[wsamp_sPos + 1][b][j] = (l - r) * Util.SQRT2 * 0.5;\n                }\n            }\n        }\n\n        /*********************************************************************\n         * compute energies\n         *********************************************************************/\n        fftenergy[0] = NON_LINEAR_SCALE_ENERGY(wsamp_l[wsamp_lPos + 0][0]);\n        fftenergy[0] *= fftenergy[0];\n\n        for (var j = Encoder.BLKSIZE / 2 - 1; j >= 0; --j) {\n            var re = (wsamp_l[wsamp_lPos + 0])[Encoder.BLKSIZE / 2 - j];\n            var im = (wsamp_l[wsamp_lPos + 0])[Encoder.BLKSIZE / 2 + j];\n            fftenergy[Encoder.BLKSIZE / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\n                * re + im * im) * 0.5);\n        }\n        for (var b = 2; b >= 0; --b) {\n            fftenergy_s[b][0] = (wsamp_s[wsamp_sPos + 0])[b][0];\n            fftenergy_s[b][0] *= fftenergy_s[b][0];\n            for (var j = Encoder.BLKSIZE_s / 2 - 1; j >= 0; --j) {\n                var re = (wsamp_s[wsamp_sPos + 0])[b][Encoder.BLKSIZE_s\n                / 2 - j];\n                var im = (wsamp_s[wsamp_sPos + 0])[b][Encoder.BLKSIZE_s\n                / 2 + j];\n                fftenergy_s[b][Encoder.BLKSIZE_s / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\n                    * re + im * im) * 0.5);\n            }\n        }\n        /* total energy */\n        {\n            var totalenergy = 0.0;\n            for (var j = 11; j < Encoder.HBLKSIZE; j++)\n                totalenergy += fftenergy[j];\n\n            gfc.tot_ener[chn] = totalenergy;\n        }\n\n        if (gfp.analysis) {\n            for (var j = 0; j < Encoder.HBLKSIZE; j++) {\n                gfc.pinfo.energy[gr_out][chn][j] = gfc.pinfo.energy_save[chn][j];\n                gfc.pinfo.energy_save[chn][j] = fftenergy[j];\n            }\n            gfc.pinfo.pe[gr_out][chn] = gfc.pe[chn];\n        }\n\n        /*********************************************************************\n         * compute loudness approximation (used for ATH auto-level adjustment)\n         *********************************************************************/\n        if (gfp.athaa_loudapprox == 2 && chn < 2) {\n            // no loudness for mid/side ch\n            gfc.loudness_sq[gr_out][chn] = gfc.loudness_sq_save[chn];\n            gfc.loudness_sq_save[chn] = psycho_loudness_approx(fftenergy, gfc);\n        }\n    }\n\n    /* mask_add optimization */\n    /* init the limit values used to avoid computing log in mask_add when it is not necessary */\n\n    /**\n     * <PRE>\n     *  For example, with i = 10*log10(m2/m1)/10*16         (= log10(m2/m1)*16)\n     *\n     * abs(i)>8 is equivalent (as i is an integer) to\n     * abs(i)>=9\n     * i>=9 || i<=-9\n     * equivalent to (as i is the biggest integer smaller than log10(m2/m1)*16\n     * or the smallest integer bigger than log10(m2/m1)*16 depending on the sign of log10(m2/m1)*16)\n     * log10(m2/m1)>=9/16 || log10(m2/m1)<=-9/16\n     * exp10 is strictly increasing thus this is equivalent to\n     * m2/m1 >= 10^(9/16) || m2/m1<=10^(-9/16) which are comparisons to constants\n     * </PRE>\n     */\n\n    /**\n     * as in if(i>8)\n     */\n    var I1LIMIT = 8;\n    /**\n     * as in if(i>24) . changed 23\n     */\n    var I2LIMIT = 23;\n    /**\n     * as in if(m<15)\n     */\n    var MLIMIT = 15;\n\n    var ma_max_i1;\n    var ma_max_i2;\n    var ma_max_m;\n\n    /**\n     * This is the masking table:<BR>\n     * According to tonality, values are going from 0dB (TMN) to 9.3dB (NMT).<BR>\n     * After additive masking computation, 8dB are added, so final values are\n     * going from 8dB to 17.3dB\n     *\n     * pow(10, -0.0..-0.6)\n     */\n    var tab = [1.0, 0.79433, 0.63096, 0.63096,\n        0.63096, 0.63096, 0.63096, 0.25119, 0.11749];\n\n    function init_mask_add_max_values() {\n        ma_max_i1 = Math.pow(10, (I1LIMIT + 1) / 16.0);\n        ma_max_i2 = Math.pow(10, (I2LIMIT + 1) / 16.0);\n        ma_max_m = Math.pow(10, (MLIMIT) / 10.0);\n    }\n\n    var table1 = [3.3246 * 3.3246,\n        3.23837 * 3.23837, 3.15437 * 3.15437, 3.00412 * 3.00412,\n        2.86103 * 2.86103, 2.65407 * 2.65407, 2.46209 * 2.46209,\n        2.284 * 2.284, 2.11879 * 2.11879, 1.96552 * 1.96552,\n        1.82335 * 1.82335, 1.69146 * 1.69146, 1.56911 * 1.56911,\n        1.46658 * 1.46658, 1.37074 * 1.37074, 1.31036 * 1.31036,\n        1.25264 * 1.25264, 1.20648 * 1.20648, 1.16203 * 1.16203,\n        1.12765 * 1.12765, 1.09428 * 1.09428, 1.0659 * 1.0659,\n        1.03826 * 1.03826, 1.01895 * 1.01895, 1];\n\n    var table2 = [1.33352 * 1.33352,\n        1.35879 * 1.35879, 1.38454 * 1.38454, 1.39497 * 1.39497,\n        1.40548 * 1.40548, 1.3537 * 1.3537, 1.30382 * 1.30382,\n        1.22321 * 1.22321, 1.14758 * 1.14758, 1];\n\n    var table3 = [2.35364 * 2.35364,\n        2.29259 * 2.29259, 2.23313 * 2.23313, 2.12675 * 2.12675,\n        2.02545 * 2.02545, 1.87894 * 1.87894, 1.74303 * 1.74303,\n        1.61695 * 1.61695, 1.49999 * 1.49999, 1.39148 * 1.39148,\n        1.29083 * 1.29083, 1.19746 * 1.19746, 1.11084 * 1.11084,\n        1.03826 * 1.03826];\n\n    /**\n     * addition of simultaneous masking Naoki Shibata 2000/7\n     */\n    function mask_add(m1, m2, kk, b, gfc, shortblock) {\n        var ratio;\n\n        if (m2 > m1) {\n            if (m2 < (m1 * ma_max_i2))\n                ratio = m2 / m1;\n            else\n                return (m1 + m2);\n        } else {\n            if (m1 >= (m2 * ma_max_i2))\n                return (m1 + m2);\n            ratio = m1 / m2;\n        }\n\n        /* Should always be true, just checking */\n        assert(m1 >= 0);\n        assert(m2 >= 0);\n\n        m1 += m2;\n        //if (((long)(b + 3) & 0xffffffff) <= 3 + 3) {\n        if ((b + 3) <= 3 + 3) {\n            /* approximately, 1 bark = 3 partitions */\n            /* 65% of the cases */\n            /* originally 'if(i > 8)' */\n            if (ratio >= ma_max_i1) {\n                /* 43% of the total */\n                return m1;\n            }\n\n            /* 22% of the total */\n            var i = 0 | (Util.FAST_LOG10_X(ratio, 16.0));\n            return m1 * table2[i];\n        }\n\n        /**\n         * <PRE>\n         * m<15 equ log10((m1+m2)/gfc.ATH.cb[k])<1.5\n         * equ (m1+m2)/gfc.ATH.cb[k]<10^1.5\n         * equ (m1+m2)<10^1.5 * gfc.ATH.cb[k]\n         * </PRE>\n         */\n        var i = 0 | Util.FAST_LOG10_X(ratio, 16.0);\n        if (shortblock != 0) {\n            m2 = gfc.ATH.cb_s[kk] * gfc.ATH.adjust;\n        } else {\n            m2 = gfc.ATH.cb_l[kk] * gfc.ATH.adjust;\n        }\n        assert(m2 >= 0);\n        if (m1 < ma_max_m * m2) {\n            /* 3% of the total */\n            /* Originally if (m > 0) { */\n            if (m1 > m2) {\n                var f, r;\n\n                f = 1.0;\n                if (i <= 13)\n                    f = table3[i];\n\n                r = Util.FAST_LOG10_X(m1 / m2, 10.0 / 15.0);\n                return m1 * ((table1[i] - f) * r + f);\n            }\n\n            if (i > 13)\n                return m1;\n\n            return m1 * table3[i];\n        }\n\n        /* 10% of total */\n        return m1 * table1[i];\n    }\n\n    var table2_ = [1.33352 * 1.33352,\n        1.35879 * 1.35879, 1.38454 * 1.38454, 1.39497 * 1.39497,\n        1.40548 * 1.40548, 1.3537 * 1.3537, 1.30382 * 1.30382,\n        1.22321 * 1.22321, 1.14758 * 1.14758, 1];\n\n    /**\n     * addition of simultaneous masking Naoki Shibata 2000/7\n     */\n    function vbrpsy_mask_add(m1, m2, b) {\n        var ratio;\n\n        if (m1 < 0) {\n            m1 = 0;\n        }\n        if (m2 < 0) {\n            m2 = 0;\n        }\n        if (m1 <= 0) {\n            return m2;\n        }\n        if (m2 <= 0) {\n            return m1;\n        }\n        if (m2 > m1) {\n            ratio = m2 / m1;\n        } else {\n            ratio = m1 / m2;\n        }\n        if (-2 <= b && b <= 2) {\n            /* approximately, 1 bark = 3 partitions */\n            /* originally 'if(i > 8)' */\n            if (ratio >= ma_max_i1) {\n                return m1 + m2;\n            } else {\n                var i = 0 | (Util.FAST_LOG10_X(ratio, 16.0));\n                return (m1 + m2) * table2_[i];\n            }\n        }\n        if (ratio < ma_max_i2) {\n            return m1 + m2;\n        }\n        if (m1 < m2) {\n            m1 = m2;\n        }\n        return m1;\n    }\n\n    /**\n     * compute interchannel masking effects\n     */\n    function calc_interchannel_masking(gfp, ratio) {\n        var gfc = gfp.internal_flags;\n        if (gfc.channels_out > 1) {\n            for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n                var l = gfc.thm[0].l[sb];\n                var r = gfc.thm[1].l[sb];\n                gfc.thm[0].l[sb] += r * ratio;\n                gfc.thm[1].l[sb] += l * ratio;\n            }\n            for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                for (var sblock = 0; sblock < 3; sblock++) {\n                    var l = gfc.thm[0].s[sb][sblock];\n                    var r = gfc.thm[1].s[sb][sblock];\n                    gfc.thm[0].s[sb][sblock] += r * ratio;\n                    gfc.thm[1].s[sb][sblock] += l * ratio;\n                }\n            }\n        }\n    }\n\n    /**\n     * compute M/S thresholds from Johnston & Ferreira 1992 ICASSP paper\n     */\n    function msfix1(gfc) {\n        for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n            /* use this fix if L & R masking differs by 2db or less */\n            /* if db = 10*log10(x2/x1) < 2 */\n            /* if (x2 < 1.58*x1) { */\n            if (gfc.thm[0].l[sb] > 1.58 * gfc.thm[1].l[sb]\n                || gfc.thm[1].l[sb] > 1.58 * gfc.thm[0].l[sb])\n                continue;\n            var mld = gfc.mld_l[sb] * gfc.en[3].l[sb];\n            var rmid = Math.max(gfc.thm[2].l[sb],\n                Math.min(gfc.thm[3].l[sb], mld));\n\n            mld = gfc.mld_l[sb] * gfc.en[2].l[sb];\n            var rside = Math.max(gfc.thm[3].l[sb],\n                Math.min(gfc.thm[2].l[sb], mld));\n            gfc.thm[2].l[sb] = rmid;\n            gfc.thm[3].l[sb] = rside;\n        }\n\n        for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                if (gfc.thm[0].s[sb][sblock] > 1.58 * gfc.thm[1].s[sb][sblock]\n                    || gfc.thm[1].s[sb][sblock] > 1.58 * gfc.thm[0].s[sb][sblock])\n                    continue;\n                var mld = gfc.mld_s[sb] * gfc.en[3].s[sb][sblock];\n                var rmid = Math.max(gfc.thm[2].s[sb][sblock],\n                    Math.min(gfc.thm[3].s[sb][sblock], mld));\n\n                mld = gfc.mld_s[sb] * gfc.en[2].s[sb][sblock];\n                var rside = Math.max(gfc.thm[3].s[sb][sblock],\n                    Math.min(gfc.thm[2].s[sb][sblock], mld));\n\n                gfc.thm[2].s[sb][sblock] = rmid;\n                gfc.thm[3].s[sb][sblock] = rside;\n            }\n        }\n    }\n\n    /**\n     * Adjust M/S maskings if user set \"msfix\"\n     *\n     * Naoki Shibata 2000\n     */\n    function ns_msfix(gfc, msfix, athadjust) {\n        var msfix2 = msfix;\n        var athlower = Math.pow(10, athadjust);\n\n        msfix *= 2.0;\n        msfix2 *= 2.0;\n        for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n            var thmLR, thmM, thmS, ath;\n            ath = (gfc.ATH.cb_l[gfc.bm_l[sb]]) * athlower;\n            thmLR = Math.min(Math.max(gfc.thm[0].l[sb], ath),\n                Math.max(gfc.thm[1].l[sb], ath));\n            thmM = Math.max(gfc.thm[2].l[sb], ath);\n            thmS = Math.max(gfc.thm[3].l[sb], ath);\n            if (thmLR * msfix < thmM + thmS) {\n                var f = thmLR * msfix2 / (thmM + thmS);\n                thmM *= f;\n                thmS *= f;\n                assert(thmM + thmS > 0);\n            }\n            gfc.thm[2].l[sb] = Math.min(thmM, gfc.thm[2].l[sb]);\n            gfc.thm[3].l[sb] = Math.min(thmS, gfc.thm[3].l[sb]);\n        }\n\n        athlower *= ( Encoder.BLKSIZE_s / Encoder.BLKSIZE);\n        for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                var thmLR, thmM, thmS, ath;\n                ath = (gfc.ATH.cb_s[gfc.bm_s[sb]]) * athlower;\n                thmLR = Math.min(Math.max(gfc.thm[0].s[sb][sblock], ath),\n                    Math.max(gfc.thm[1].s[sb][sblock], ath));\n                thmM = Math.max(gfc.thm[2].s[sb][sblock], ath);\n                thmS = Math.max(gfc.thm[3].s[sb][sblock], ath);\n\n                if (thmLR * msfix < thmM + thmS) {\n                    var f = thmLR * msfix / (thmM + thmS);\n                    thmM *= f;\n                    thmS *= f;\n                    assert(thmM + thmS > 0);\n                }\n                gfc.thm[2].s[sb][sblock] = Math.min(gfc.thm[2].s[sb][sblock],\n                    thmM);\n                gfc.thm[3].s[sb][sblock] = Math.min(gfc.thm[3].s[sb][sblock],\n                    thmS);\n            }\n        }\n    }\n\n    /**\n     * short block threshold calculation (part 2)\n     *\n     * partition band bo_s[sfb] is at the transition from scalefactor band sfb\n     * to the next one sfb+1; enn and thmm have to be split between them\n     */\n    function convert_partition2scalefac_s(gfc, eb, thr, chn, sblock) {\n        var sb, b;\n        var enn = 0.0;\n        var thmm = 0.0;\n        for (sb = b = 0; sb < Encoder.SBMAX_s; ++b, ++sb) {\n            var bo_s_sb = gfc.bo_s[sb];\n            var npart_s = gfc.npart_s;\n            var b_lim = bo_s_sb < npart_s ? bo_s_sb : npart_s;\n            while (b < b_lim) {\n                assert(eb[b] >= 0);\n                // iff failed, it may indicate some index error elsewhere\n                assert(thr[b] >= 0);\n                enn += eb[b];\n                thmm += thr[b];\n                b++;\n            }\n            gfc.en[chn].s[sb][sblock] = enn;\n            gfc.thm[chn].s[sb][sblock] = thmm;\n\n            if (b >= npart_s) {\n                ++sb;\n                break;\n            }\n            assert(eb[b] >= 0);\n            // iff failed, it may indicate some index error elsewhere\n            assert(thr[b] >= 0);\n            {\n                /* at transition sfb . sfb+1 */\n                var w_curr = gfc.PSY.bo_s_weight[sb];\n                var w_next = 1.0 - w_curr;\n                enn = w_curr * eb[b];\n                thmm = w_curr * thr[b];\n                gfc.en[chn].s[sb][sblock] += enn;\n                gfc.thm[chn].s[sb][sblock] += thmm;\n                enn = w_next * eb[b];\n                thmm = w_next * thr[b];\n            }\n        }\n        /* zero initialize the rest */\n        for (; sb < Encoder.SBMAX_s; ++sb) {\n            gfc.en[chn].s[sb][sblock] = 0;\n            gfc.thm[chn].s[sb][sblock] = 0;\n        }\n    }\n\n    /**\n     * longblock threshold calculation (part 2)\n     */\n    function convert_partition2scalefac_l(gfc, eb, thr, chn) {\n        var sb, b;\n        var enn = 0.0;\n        var thmm = 0.0;\n        for (sb = b = 0; sb < Encoder.SBMAX_l; ++b, ++sb) {\n            var bo_l_sb = gfc.bo_l[sb];\n            var npart_l = gfc.npart_l;\n            var b_lim = bo_l_sb < npart_l ? bo_l_sb : npart_l;\n            while (b < b_lim) {\n                assert(eb[b] >= 0);\n                // iff failed, it may indicate some index error elsewhere\n                assert(thr[b] >= 0);\n                enn += eb[b];\n                thmm += thr[b];\n                b++;\n            }\n            gfc.en[chn].l[sb] = enn;\n            gfc.thm[chn].l[sb] = thmm;\n\n            if (b >= npart_l) {\n                ++sb;\n                break;\n            }\n            assert(eb[b] >= 0);\n            assert(thr[b] >= 0);\n            {\n                /* at transition sfb . sfb+1 */\n                var w_curr = gfc.PSY.bo_l_weight[sb];\n                var w_next = 1.0 - w_curr;\n                enn = w_curr * eb[b];\n                thmm = w_curr * thr[b];\n                gfc.en[chn].l[sb] += enn;\n                gfc.thm[chn].l[sb] += thmm;\n                enn = w_next * eb[b];\n                thmm = w_next * thr[b];\n            }\n        }\n        /* zero initialize the rest */\n        for (; sb < Encoder.SBMAX_l; ++sb) {\n            gfc.en[chn].l[sb] = 0;\n            gfc.thm[chn].l[sb] = 0;\n        }\n    }\n\n    function compute_masking_s(gfp, fftenergy_s, eb, thr, chn, sblock) {\n        var gfc = gfp.internal_flags;\n        var j, b;\n\n        for (b = j = 0; b < gfc.npart_s; ++b) {\n            var ebb = 0, m = 0;\n            var n = gfc.numlines_s[b];\n            for (var i = 0; i < n; ++i, ++j) {\n                var el = fftenergy_s[sblock][j];\n                ebb += el;\n                if (m < el)\n                    m = el;\n            }\n            eb[b] = ebb;\n        }\n        assert(b == gfc.npart_s);\n        assert(j == 129);\n        for (j = b = 0; b < gfc.npart_s; b++) {\n            var kk = gfc.s3ind_s[b][0];\n            var ecb = gfc.s3_ss[j++] * eb[kk];\n            ++kk;\n            while (kk <= gfc.s3ind_s[b][1]) {\n                ecb += gfc.s3_ss[j] * eb[kk];\n                ++j;\n                ++kk;\n            }\n\n            { /* limit calculated threshold by previous granule */\n                var x = rpelev_s * gfc.nb_s1[chn][b];\n                thr[b] = Math.min(ecb, x);\n            }\n            if (gfc.blocktype_old[chn & 1] == Encoder.SHORT_TYPE) {\n                /* limit calculated threshold by even older granule */\n                var x = rpelev2_s * gfc.nb_s2[chn][b];\n                var y = thr[b];\n                thr[b] = Math.min(x, y);\n            }\n\n            gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\n            gfc.nb_s1[chn][b] = ecb;\n            assert(thr[b] >= 0);\n        }\n        for (; b <= Encoder.CBANDS; ++b) {\n            eb[b] = 0;\n            thr[b] = 0;\n        }\n    }\n\n    function block_type_set(gfp, uselongblock, blocktype_d, blocktype) {\n        var gfc = gfp.internal_flags;\n\n        if (gfp.short_blocks == ShortBlock.short_block_coupled\n                /* force both channels to use the same block type */\n                /* this is necessary if the frame is to be encoded in ms_stereo. */\n                /* But even without ms_stereo, FhG does this */\n            && !(uselongblock[0] != 0 && uselongblock[1] != 0))\n            uselongblock[0] = uselongblock[1] = 0;\n\n        /*\n         * update the blocktype of the previous granule, since it depends on\n         * what happend in this granule\n         */\n        for (var chn = 0; chn < gfc.channels_out; chn++) {\n            blocktype[chn] = Encoder.NORM_TYPE;\n            /* disable short blocks */\n            if (gfp.short_blocks == ShortBlock.short_block_dispensed)\n                uselongblock[chn] = 1;\n            if (gfp.short_blocks == ShortBlock.short_block_forced)\n                uselongblock[chn] = 0;\n\n            if (uselongblock[chn] != 0) {\n                /* no attack : use long blocks */\n                assert(gfc.blocktype_old[chn] != Encoder.START_TYPE);\n                if (gfc.blocktype_old[chn] == Encoder.SHORT_TYPE)\n                    blocktype[chn] = Encoder.STOP_TYPE;\n            } else {\n                /* attack : use short blocks */\n                blocktype[chn] = Encoder.SHORT_TYPE;\n                if (gfc.blocktype_old[chn] == Encoder.NORM_TYPE) {\n                    gfc.blocktype_old[chn] = Encoder.START_TYPE;\n                }\n                if (gfc.blocktype_old[chn] == Encoder.STOP_TYPE)\n                    gfc.blocktype_old[chn] = Encoder.SHORT_TYPE;\n            }\n\n            blocktype_d[chn] = gfc.blocktype_old[chn];\n            // value returned to calling program\n            gfc.blocktype_old[chn] = blocktype[chn];\n            // save for next call to l3psy_anal\n        }\n    }\n\n    function NS_INTERP(x, y, r) {\n        /* was pow((x),(r))*pow((y),1-(r)) */\n        if (r >= 1.0) {\n            /* 99.7% of the time */\n            return x;\n        }\n        if (r <= 0.0)\n            return y;\n        if (y > 0.0) {\n            /* rest of the time */\n            return (Math.pow(x / y, r) * y);\n        }\n        /* never happens */\n        return 0.0;\n    }\n\n    /**\n     * these values are tuned only for 44.1kHz...\n     */\n    var regcoef_s = [11.8, 13.6, 17.2, 32, 46.5,\n        51.3, 57.5, 67.1, 71.5, 84.6, 97.6, 130,\n        /* 255.8 */\n    ];\n\n    function pecalc_s(mr, masking_lower) {\n        var pe_s = 1236.28 / 4;\n        for (var sb = 0; sb < Encoder.SBMAX_s - 1; sb++) {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                var thm = mr.thm.s[sb][sblock];\n                assert(sb < regcoef_s.length);\n                if (thm > 0.0) {\n                    var x = thm * masking_lower;\n                    var en = mr.en.s[sb][sblock];\n                    if (en > x) {\n                        if (en > x * 1e10) {\n                            pe_s += regcoef_s[sb] * (10.0 * LOG10);\n                        } else {\n                            assert(x > 0);\n                            pe_s += regcoef_s[sb] * Util.FAST_LOG10(en / x);\n                        }\n                    }\n                }\n            }\n        }\n\n        return pe_s;\n    }\n\n    /**\n     * these values are tuned only for 44.1kHz...\n     */\n    var regcoef_l = [6.8, 5.8, 5.8, 6.4, 6.5, 9.9,\n        12.1, 14.4, 15, 18.9, 21.6, 26.9, 34.2, 40.2, 46.8, 56.5,\n        60.7, 73.9, 85.7, 93.4, 126.1,\n        /* 241.3 */\n    ];\n\n    function pecalc_l(mr, masking_lower) {\n        var pe_l = 1124.23 / 4;\n        for (var sb = 0; sb < Encoder.SBMAX_l - 1; sb++) {\n            var thm = mr.thm.l[sb];\n            assert(sb < regcoef_l.length);\n            if (thm > 0.0) {\n                var x = thm * masking_lower;\n                var en = mr.en.l[sb];\n                if (en > x) {\n                    if (en > x * 1e10) {\n                        pe_l += regcoef_l[sb] * (10.0 * LOG10);\n                    } else {\n                        assert(x > 0);\n                        pe_l += regcoef_l[sb] * Util.FAST_LOG10(en / x);\n                    }\n                }\n            }\n        }\n        return pe_l;\n    }\n\n    function calc_energy(gfc, fftenergy, eb, max, avg) {\n        var b, j;\n\n        for (b = j = 0; b < gfc.npart_l; ++b) {\n            var ebb = 0, m = 0;\n            var i;\n            for (i = 0; i < gfc.numlines_l[b]; ++i, ++j) {\n                var el = fftenergy[j];\n                assert(el >= 0);\n                ebb += el;\n                if (m < el)\n                    m = el;\n            }\n            eb[b] = ebb;\n            max[b] = m;\n            avg[b] = ebb * gfc.rnumlines_l[b];\n            assert(gfc.rnumlines_l[b] >= 0);\n            assert(ebb >= 0);\n            assert(eb[b] >= 0);\n            assert(max[b] >= 0);\n            assert(avg[b] >= 0);\n        }\n    }\n\n    function calc_mask_index_l(gfc, max, avg, mask_idx) {\n        var last_tab_entry = tab.length - 1;\n        var b = 0;\n        var a = avg[b] + avg[b + 1];\n        assert(a >= 0);\n        if (a > 0.0) {\n            var m = max[b];\n            if (m < max[b + 1])\n                m = max[b + 1];\n            assert((gfc.numlines_l[b] + gfc.numlines_l[b + 1] - 1) > 0);\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_l[b] + gfc.numlines_l[b + 1] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n\n        for (b = 1; b < gfc.npart_l - 1; b++) {\n            a = avg[b - 1] + avg[b] + avg[b + 1];\n            assert(a >= 0);\n            if (a > 0.0) {\n                var m = max[b - 1];\n                if (m < max[b])\n                    m = max[b];\n                if (m < max[b + 1])\n                    m = max[b + 1];\n                assert((gfc.numlines_l[b - 1] + gfc.numlines_l[b] + gfc.numlines_l[b + 1] - 1) > 0);\n                a = 20.0\n                    * (m * 3.0 - a)\n                    / (a * (gfc.numlines_l[b - 1] + gfc.numlines_l[b]\n                    + gfc.numlines_l[b + 1] - 1));\n                var k = 0 | a;\n                if (k > last_tab_entry)\n                    k = last_tab_entry;\n                mask_idx[b] = k;\n            } else {\n                mask_idx[b] = 0;\n            }\n        }\n        assert(b > 0);\n        assert(b == gfc.npart_l - 1);\n\n        a = avg[b - 1] + avg[b];\n        assert(a >= 0);\n        if (a > 0.0) {\n            var m = max[b - 1];\n            if (m < max[b])\n                m = max[b];\n            assert((gfc.numlines_l[b - 1] + gfc.numlines_l[b] - 1) > 0);\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_l[b - 1] + gfc.numlines_l[b] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n        assert(b == (gfc.npart_l - 1));\n    }\n\n    var fircoef = [\n        -8.65163e-18 * 2, -0.00851586 * 2, -6.74764e-18 * 2, 0.0209036 * 2,\n        -3.36639e-17 * 2, -0.0438162 * 2, -1.54175e-17 * 2, 0.0931738 * 2,\n        -5.52212e-17 * 2, -0.313819 * 2\n    ];\n\n    this.L3psycho_anal_ns = function (gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, percep_entropy, percep_MS_entropy, energy, blocktype_d) {\n        /*\n         * to get a good cache performance, one has to think about the sequence,\n         * in which the variables are used.\n         */\n        var gfc = gfp.internal_flags;\n\n        /* fft and energy calculation */\n        var wsamp_L = new_float_n([2, Encoder.BLKSIZE]);\n        var wsamp_S = new_float_n([2, 3, Encoder.BLKSIZE_s]);\n\n        /* convolution */\n        var eb_l = new_float(Encoder.CBANDS + 1);\n        var eb_s = new_float(Encoder.CBANDS + 1);\n        var thr = new_float(Encoder.CBANDS + 2);\n\n        /* block type */\n        var blocktype = new_int(2), uselongblock = new_int(2);\n\n        /* usual variables like loop indices, etc.. */\n        var numchn, chn;\n        var b, i, j, k;\n        var sb, sblock;\n\n        /* variables used for --nspsytune */\n        var ns_hpfsmpl = new_float_n([2, 576]);\n        var pcfact;\n        var mask_idx_l = new_int(Encoder.CBANDS + 2), mask_idx_s = new_int(Encoder.CBANDS + 2);\n\n        Arrays.fill(mask_idx_s, 0);\n\n        numchn = gfc.channels_out;\n        /* chn=2 and 3 = Mid and Side channels */\n        if (gfp.mode == MPEGMode.JOINT_STEREO)\n            numchn = 4;\n\n        if (gfp.VBR == VbrMode.vbr_off)\n            pcfact = gfc.ResvMax == 0 ? 0 : ( gfc.ResvSize)\n            / gfc.ResvMax * 0.5;\n        else if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh\n            || gfp.VBR == VbrMode.vbr_mt) {\n            pcfact = 0.6;\n        } else\n            pcfact = 1.0;\n\n        /**********************************************************************\n         * Apply HPF of fs/4 to the input signal. This is used for attack\n         * detection / handling.\n         **********************************************************************/\n        /* Don't copy the input buffer into a temporary buffer */\n        /* unroll the loop 2 times */\n        for (chn = 0; chn < gfc.channels_out; chn++) {\n            /* apply high pass filter of fs/4 */\n            var firbuf = buffer[chn];\n            var firbufPos = bufPos + 576 - 350 - NSFIRLEN + 192;\n            assert(fircoef.length == ((NSFIRLEN - 1) / 2));\n            for (i = 0; i < 576; i++) {\n                var sum1, sum2;\n                sum1 = firbuf[firbufPos + i + 10];\n                sum2 = 0.0;\n                for (j = 0; j < ((NSFIRLEN - 1) / 2) - 1; j += 2) {\n                    sum1 += fircoef[j]\n                        * (firbuf[firbufPos + i + j] + firbuf[firbufPos + i\n                        + NSFIRLEN - j]);\n                    sum2 += fircoef[j + 1]\n                        * (firbuf[firbufPos + i + j + 1] + firbuf[firbufPos\n                        + i + NSFIRLEN - j - 1]);\n                }\n                ns_hpfsmpl[chn][i] = sum1 + sum2;\n            }\n            masking_ratio[gr_out][chn].en.assign(gfc.en[chn]);\n            masking_ratio[gr_out][chn].thm.assign(gfc.thm[chn]);\n            if (numchn > 2) {\n                /* MS maskings */\n                /* percep_MS_entropy [chn-2] = gfc . pe [chn]; */\n                masking_MS_ratio[gr_out][chn].en.assign(gfc.en[chn + 2]);\n                masking_MS_ratio[gr_out][chn].thm.assign(gfc.thm[chn + 2]);\n            }\n        }\n\n        for (chn = 0; chn < numchn; chn++) {\n            var wsamp_l;\n            var wsamp_s;\n            var en_subshort = new_float(12);\n            var en_short = [0, 0, 0, 0];\n            var attack_intensity = new_float(12);\n            var ns_uselongblock = 1;\n            var attackThreshold;\n            var max = new_float(Encoder.CBANDS), avg = new_float(Encoder.CBANDS);\n            var ns_attacks = [0, 0, 0, 0];\n            var fftenergy = new_float(Encoder.HBLKSIZE);\n            var fftenergy_s = new_float_n([3, Encoder.HBLKSIZE_s]);\n\n            /*\n             * rh 20040301: the following loops do access one off the limits so\n             * I increase the array dimensions by one and initialize the\n             * accessed values to zero\n             */\n            assert(gfc.npart_s <= Encoder.CBANDS);\n            assert(gfc.npart_l <= Encoder.CBANDS);\n\n            /***************************************************************\n             * determine the block type (window type)\n             ***************************************************************/\n            /* calculate energies of each sub-shortblocks */\n            for (i = 0; i < 3; i++) {\n                en_subshort[i] = gfc.nsPsy.last_en_subshort[chn][i + 6];\n                assert(gfc.nsPsy.last_en_subshort[chn][i + 4] > 0);\n                attack_intensity[i] = en_subshort[i]\n                    / gfc.nsPsy.last_en_subshort[chn][i + 4];\n                en_short[0] += en_subshort[i];\n            }\n\n            if (chn == 2) {\n                for (i = 0; i < 576; i++) {\n                    var l, r;\n                    l = ns_hpfsmpl[0][i];\n                    r = ns_hpfsmpl[1][i];\n                    ns_hpfsmpl[0][i] = l + r;\n                    ns_hpfsmpl[1][i] = l - r;\n                }\n            }\n            {\n                var pf = ns_hpfsmpl[chn & 1];\n                var pfPos = 0;\n                for (i = 0; i < 9; i++) {\n                    var pfe = pfPos + 576 / 9;\n                    var p = 1.;\n                    for (; pfPos < pfe; pfPos++)\n                        if (p < Math.abs(pf[pfPos]))\n                            p = Math.abs(pf[pfPos]);\n\n                    gfc.nsPsy.last_en_subshort[chn][i] = en_subshort[i + 3] = p;\n                    en_short[1 + i / 3] += p;\n                    if (p > en_subshort[i + 3 - 2]) {\n                        assert(en_subshort[i + 3 - 2] > 0);\n                        p = p / en_subshort[i + 3 - 2];\n                    } else if (en_subshort[i + 3 - 2] > p * 10.0) {\n                        assert(p > 0);\n                        p = en_subshort[i + 3 - 2] / (p * 10.0);\n                    } else\n                        p = 0.0;\n                    attack_intensity[i + 3] = p;\n                }\n            }\n\n            if (gfp.analysis) {\n                var x = attack_intensity[0];\n                for (i = 1; i < 12; i++)\n                    if (x < attack_intensity[i])\n                        x = attack_intensity[i];\n                gfc.pinfo.ers[gr_out][chn] = gfc.pinfo.ers_save[chn];\n                gfc.pinfo.ers_save[chn] = x;\n            }\n\n            /* compare energies between sub-shortblocks */\n            attackThreshold = (chn == 3) ? gfc.nsPsy.attackthre_s\n                : gfc.nsPsy.attackthre;\n            for (i = 0; i < 12; i++)\n                if (0 == ns_attacks[i / 3]\n                    && attack_intensity[i] > attackThreshold)\n                    ns_attacks[i / 3] = (i % 3) + 1;\n\n            /*\n             * should have energy change between short blocks, in order to avoid\n             * periodic signals\n             */\n            for (i = 1; i < 4; i++) {\n                var ratio;\n                if (en_short[i - 1] > en_short[i]) {\n                    assert(en_short[i] > 0);\n                    ratio = en_short[i - 1] / en_short[i];\n                } else {\n                    assert(en_short[i - 1] > 0);\n                    ratio = en_short[i] / en_short[i - 1];\n                }\n                if (ratio < 1.7) {\n                    ns_attacks[i] = 0;\n                    if (i == 1)\n                        ns_attacks[0] = 0;\n                }\n            }\n\n            if (ns_attacks[0] != 0 && gfc.nsPsy.lastAttacks[chn] != 0)\n                ns_attacks[0] = 0;\n\n            if (gfc.nsPsy.lastAttacks[chn] == 3\n                || (ns_attacks[0] + ns_attacks[1] + ns_attacks[2] + ns_attacks[3]) != 0) {\n                ns_uselongblock = 0;\n\n                if (ns_attacks[1] != 0 && ns_attacks[0] != 0)\n                    ns_attacks[1] = 0;\n                if (ns_attacks[2] != 0 && ns_attacks[1] != 0)\n                    ns_attacks[2] = 0;\n                if (ns_attacks[3] != 0 && ns_attacks[2] != 0)\n                    ns_attacks[3] = 0;\n            }\n\n            if (chn < 2) {\n                uselongblock[chn] = ns_uselongblock;\n            } else {\n                if (ns_uselongblock == 0) {\n                    uselongblock[0] = uselongblock[1] = 0;\n                }\n            }\n\n            /*\n             * there is a one granule delay. Copy maskings computed last call\n             * into masking_ratio to return to calling program.\n             */\n            energy[chn] = gfc.tot_ener[chn];\n\n            /*********************************************************************\n             * compute FFTs\n             *********************************************************************/\n            wsamp_s = wsamp_S;\n            wsamp_l = wsamp_L;\n            compute_ffts(gfp, fftenergy, fftenergy_s, wsamp_l, (chn & 1),\n                wsamp_s, (chn & 1), gr_out, chn, buffer, bufPos);\n\n            /*********************************************************************\n             * Calculate the energy and the tonality of each partition.\n             *********************************************************************/\n            calc_energy(gfc, fftenergy, eb_l, max, avg);\n            calc_mask_index_l(gfc, max, avg, mask_idx_l);\n            /* compute masking thresholds for short blocks */\n            for (sblock = 0; sblock < 3; sblock++) {\n                var enn, thmm;\n                compute_masking_s(gfp, fftenergy_s, eb_s, thr, chn, sblock);\n                convert_partition2scalefac_s(gfc, eb_s, thr, chn, sblock);\n                /**** short block pre-echo control ****/\n                for (sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                    thmm = gfc.thm[chn].s[sb][sblock];\n\n                    thmm *= NS_PREECHO_ATT0;\n                    if (ns_attacks[sblock] >= 2 || ns_attacks[sblock + 1] == 1) {\n                        var idx = (sblock != 0) ? sblock - 1 : 2;\n                        var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                            NS_PREECHO_ATT1 * pcfact);\n                        thmm = Math.min(thmm, p);\n                    }\n\n                    if (ns_attacks[sblock] == 1) {\n                        var idx = (sblock != 0) ? sblock - 1 : 2;\n                        var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                            NS_PREECHO_ATT2 * pcfact);\n                        thmm = Math.min(thmm, p);\n                    } else if ((sblock != 0 && ns_attacks[sblock - 1] == 3)\n                        || (sblock == 0 && gfc.nsPsy.lastAttacks[chn] == 3)) {\n                        var idx = (sblock != 2) ? sblock + 1 : 0;\n                        var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                            NS_PREECHO_ATT2 * pcfact);\n                        thmm = Math.min(thmm, p);\n                    }\n\n                    /* pulse like signal detection for fatboy.wav and so on */\n                    enn = en_subshort[sblock * 3 + 3]\n                        + en_subshort[sblock * 3 + 4]\n                        + en_subshort[sblock * 3 + 5];\n                    if (en_subshort[sblock * 3 + 5] * 6 < enn) {\n                        thmm *= 0.5;\n                        if (en_subshort[sblock * 3 + 4] * 6 < enn)\n                            thmm *= 0.5;\n                    }\n\n                    gfc.thm[chn].s[sb][sblock] = thmm;\n                }\n            }\n            gfc.nsPsy.lastAttacks[chn] = ns_attacks[2];\n\n            /*********************************************************************\n             * convolve the partitioned energy and unpredictability with the\n             * spreading function, s3_l[b][k]\n             ********************************************************************/\n            k = 0;\n            {\n                for (b = 0; b < gfc.npart_l; b++) {\n                    /*\n                     * convolve the partitioned energy with the spreading\n                     * function\n                     */\n                    var kk = gfc.s3ind[b][0];\n                    var eb2 = eb_l[kk] * tab[mask_idx_l[kk]];\n                    var ecb = gfc.s3_ll[k++] * eb2;\n                    while (++kk <= gfc.s3ind[b][1]) {\n                        eb2 = eb_l[kk] * tab[mask_idx_l[kk]];\n                        ecb = mask_add(ecb, gfc.s3_ll[k++] * eb2, kk, kk - b,\n                            gfc, 0);\n                    }\n                    ecb *= 0.158489319246111;\n                    /* pow(10,-0.8) */\n\n                    /**** long block pre-echo control ****/\n                    /**\n                     * <PRE>\n                     * dont use long block pre-echo control if previous granule was\n                     * a short block.  This is to avoid the situation:\n                     * frame0:  quiet (very low masking)\n                     * frame1:  surge  (triggers short blocks)\n                     * frame2:  regular frame.  looks like pre-echo when compared to\n                     *          frame0, but all pre-echo was in frame1.\n                     * </PRE>\n                     */\n                    /*\n                     * chn=0,1 L and R channels\n                     *\n                     * chn=2,3 S and M channels.\n                     */\n\n                    if (gfc.blocktype_old[chn & 1] == Encoder.SHORT_TYPE)\n                        thr[b] = ecb;\n                    else\n                        thr[b] = NS_INTERP(\n                            Math.min(ecb, Math.min(rpelev\n                                * gfc.nb_1[chn][b], rpelev2\n                                * gfc.nb_2[chn][b])), ecb, pcfact);\n\n                    gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\n                    gfc.nb_1[chn][b] = ecb;\n                }\n            }\n            for (; b <= Encoder.CBANDS; ++b) {\n                eb_l[b] = 0;\n                thr[b] = 0;\n            }\n            /* compute masking thresholds for long blocks */\n            convert_partition2scalefac_l(gfc, eb_l, thr, chn);\n        }\n        /* end loop over chn */\n\n        if (gfp.mode == MPEGMode.STEREO || gfp.mode == MPEGMode.JOINT_STEREO) {\n            if (gfp.interChRatio > 0.0) {\n                calc_interchannel_masking(gfp, gfp.interChRatio);\n            }\n        }\n\n        if (gfp.mode == MPEGMode.JOINT_STEREO) {\n            var msfix;\n            msfix1(gfc);\n            msfix = gfp.msfix;\n            if (Math.abs(msfix) > 0.0)\n                ns_msfix(gfc, msfix, gfp.ATHlower * gfc.ATH.adjust);\n        }\n\n        /***************************************************************\n         * determine final block type\n         ***************************************************************/\n        block_type_set(gfp, uselongblock, blocktype_d, blocktype);\n\n        /*********************************************************************\n         * compute the value of PE to return ... no delay and advance\n         *********************************************************************/\n        for (chn = 0; chn < numchn; chn++) {\n            var ppe;\n            var ppePos = 0;\n            var type;\n            var mr;\n\n            if (chn > 1) {\n                ppe = percep_MS_entropy;\n                ppePos = -2;\n                type = Encoder.NORM_TYPE;\n                if (blocktype_d[0] == Encoder.SHORT_TYPE\n                    || blocktype_d[1] == Encoder.SHORT_TYPE)\n                    type = Encoder.SHORT_TYPE;\n                mr = masking_MS_ratio[gr_out][chn - 2];\n            } else {\n                ppe = percep_entropy;\n                ppePos = 0;\n                type = blocktype_d[chn];\n                mr = masking_ratio[gr_out][chn];\n            }\n\n            if (type == Encoder.SHORT_TYPE)\n                ppe[ppePos + chn] = pecalc_s(mr, gfc.masking_lower);\n            else\n                ppe[ppePos + chn] = pecalc_l(mr, gfc.masking_lower);\n\n            if (gfp.analysis)\n                gfc.pinfo.pe[gr_out][chn] = ppe[ppePos + chn];\n\n        }\n        return 0;\n    }\n\n    function vbrpsy_compute_fft_l(gfp, buffer, bufPos, chn, gr_out, fftenergy, wsamp_l, wsamp_lPos) {\n        var gfc = gfp.internal_flags;\n        if (chn < 2) {\n            fft.fft_long(gfc, wsamp_l[wsamp_lPos], chn, buffer, bufPos);\n        } else if (chn == 2) {\n            /* FFT data for mid and side channel is derived from L & R */\n            for (var j = Encoder.BLKSIZE - 1; j >= 0; --j) {\n                var l = wsamp_l[wsamp_lPos + 0][j];\n                var r = wsamp_l[wsamp_lPos + 1][j];\n                wsamp_l[wsamp_lPos + 0][j] = (l + r) * Util.SQRT2 * 0.5;\n                wsamp_l[wsamp_lPos + 1][j] = (l - r) * Util.SQRT2 * 0.5;\n            }\n        }\n\n        /*********************************************************************\n         * compute energies\n         *********************************************************************/\n        fftenergy[0] = NON_LINEAR_SCALE_ENERGY(wsamp_l[wsamp_lPos + 0][0]);\n        fftenergy[0] *= fftenergy[0];\n\n        for (var j = Encoder.BLKSIZE / 2 - 1; j >= 0; --j) {\n            var re = wsamp_l[wsamp_lPos + 0][Encoder.BLKSIZE / 2 - j];\n            var im = wsamp_l[wsamp_lPos + 0][Encoder.BLKSIZE / 2 + j];\n            fftenergy[Encoder.BLKSIZE / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\n                * re + im * im) * 0.5);\n        }\n        /* total energy */\n        {\n            var totalenergy = 0.0;\n            for (var j = 11; j < Encoder.HBLKSIZE; j++)\n                totalenergy += fftenergy[j];\n\n            gfc.tot_ener[chn] = totalenergy;\n        }\n\n        if (gfp.analysis) {\n            for (var j = 0; j < Encoder.HBLKSIZE; j++) {\n                gfc.pinfo.energy[gr_out][chn][j] = gfc.pinfo.energy_save[chn][j];\n                gfc.pinfo.energy_save[chn][j] = fftenergy[j];\n            }\n            gfc.pinfo.pe[gr_out][chn] = gfc.pe[chn];\n        }\n    }\n\n    function vbrpsy_compute_fft_s(gfp, buffer, bufPos, chn, sblock, fftenergy_s, wsamp_s, wsamp_sPos) {\n        var gfc = gfp.internal_flags;\n\n        if (sblock == 0 && chn < 2) {\n            fft.fft_short(gfc, wsamp_s[wsamp_sPos], chn, buffer, bufPos);\n        }\n        if (chn == 2) {\n            /* FFT data for mid and side channel is derived from L & R */\n            for (var j = Encoder.BLKSIZE_s - 1; j >= 0; --j) {\n                var l = wsamp_s[wsamp_sPos + 0][sblock][j];\n                var r = wsamp_s[wsamp_sPos + 1][sblock][j];\n                wsamp_s[wsamp_sPos + 0][sblock][j] = (l + r) * Util.SQRT2 * 0.5;\n                wsamp_s[wsamp_sPos + 1][sblock][j] = (l - r) * Util.SQRT2 * 0.5;\n            }\n        }\n\n        /*********************************************************************\n         * compute energies\n         *********************************************************************/\n        fftenergy_s[sblock][0] = wsamp_s[wsamp_sPos + 0][sblock][0];\n        fftenergy_s[sblock][0] *= fftenergy_s[sblock][0];\n        for (var j = Encoder.BLKSIZE_s / 2 - 1; j >= 0; --j) {\n            var re = wsamp_s[wsamp_sPos + 0][sblock][Encoder.BLKSIZE_s / 2 - j];\n            var im = wsamp_s[wsamp_sPos + 0][sblock][Encoder.BLKSIZE_s / 2 + j];\n            fftenergy_s[sblock][Encoder.BLKSIZE_s / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\n                * re + im * im) * 0.5);\n        }\n    }\n\n    /**\n     * compute loudness approximation (used for ATH auto-level adjustment)\n     */\n    function vbrpsy_compute_loudness_approximation_l(gfp, gr_out, chn, fftenergy) {\n        var gfc = gfp.internal_flags;\n        if (gfp.athaa_loudapprox == 2 && chn < 2) {\n            // no loudness for mid/side ch\n            gfc.loudness_sq[gr_out][chn] = gfc.loudness_sq_save[chn];\n            gfc.loudness_sq_save[chn] = psycho_loudness_approx(fftenergy, gfc);\n        }\n    }\n\n    var fircoef_ = [-8.65163e-18 * 2,\n        -0.00851586 * 2, -6.74764e-18 * 2, 0.0209036 * 2,\n        -3.36639e-17 * 2, -0.0438162 * 2, -1.54175e-17 * 2,\n        0.0931738 * 2, -5.52212e-17 * 2, -0.313819 * 2];\n\n    /**\n     * Apply HPF of fs/4 to the input signal. This is used for attack detection\n     * / handling.\n     */\n    function vbrpsy_attack_detection(gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, energy, sub_short_factor, ns_attacks, uselongblock) {\n        var ns_hpfsmpl = new_float_n([2, 576]);\n        var gfc = gfp.internal_flags;\n        var n_chn_out = gfc.channels_out;\n        /* chn=2 and 3 = Mid and Side channels */\n        var n_chn_psy = (gfp.mode == MPEGMode.JOINT_STEREO) ? 4 : n_chn_out;\n        /* Don't copy the input buffer into a temporary buffer */\n        /* unroll the loop 2 times */\n        for (var chn = 0; chn < n_chn_out; chn++) {\n            /* apply high pass filter of fs/4 */\n            firbuf = buffer[chn];\n            var firbufPos = bufPos + 576 - 350 - NSFIRLEN + 192;\n            assert(fircoef_.length == ((NSFIRLEN - 1) / 2));\n            for (var i = 0; i < 576; i++) {\n                var sum1, sum2;\n                sum1 = firbuf[firbufPos + i + 10];\n                sum2 = 0.0;\n                for (var j = 0; j < ((NSFIRLEN - 1) / 2) - 1; j += 2) {\n                    sum1 += fircoef_[j]\n                        * (firbuf[firbufPos + i + j] + firbuf[firbufPos + i\n                        + NSFIRLEN - j]);\n                    sum2 += fircoef_[j + 1]\n                        * (firbuf[firbufPos + i + j + 1] + firbuf[firbufPos\n                        + i + NSFIRLEN - j - 1]);\n                }\n                ns_hpfsmpl[chn][i] = sum1 + sum2;\n            }\n            masking_ratio[gr_out][chn].en.assign(gfc.en[chn]);\n            masking_ratio[gr_out][chn].thm.assign(gfc.thm[chn]);\n            if (n_chn_psy > 2) {\n                /* MS maskings */\n                /* percep_MS_entropy [chn-2] = gfc . pe [chn]; */\n                masking_MS_ratio[gr_out][chn].en.assign(gfc.en[chn + 2]);\n                masking_MS_ratio[gr_out][chn].thm.assign(gfc.thm[chn + 2]);\n            }\n        }\n        for (var chn = 0; chn < n_chn_psy; chn++) {\n            var attack_intensity = new_float(12);\n            var en_subshort = new_float(12);\n            var en_short = [0, 0, 0, 0];\n            var pf = ns_hpfsmpl[chn & 1];\n            var pfPos = 0;\n            var attackThreshold = (chn == 3) ? gfc.nsPsy.attackthre_s\n                : gfc.nsPsy.attackthre;\n            var ns_uselongblock = 1;\n\n            if (chn == 2) {\n                for (var i = 0, j = 576; j > 0; ++i, --j) {\n                    var l = ns_hpfsmpl[0][i];\n                    var r = ns_hpfsmpl[1][i];\n                    ns_hpfsmpl[0][i] = l + r;\n                    ns_hpfsmpl[1][i] = l - r;\n                }\n            }\n            /***************************************************************\n             * determine the block type (window type)\n             ***************************************************************/\n            /* calculate energies of each sub-shortblocks */\n            for (var i = 0; i < 3; i++) {\n                en_subshort[i] = gfc.nsPsy.last_en_subshort[chn][i + 6];\n                assert(gfc.nsPsy.last_en_subshort[chn][i + 4] > 0);\n                attack_intensity[i] = en_subshort[i]\n                    / gfc.nsPsy.last_en_subshort[chn][i + 4];\n                en_short[0] += en_subshort[i];\n            }\n\n            for (var i = 0; i < 9; i++) {\n                var pfe = pfPos + 576 / 9;\n                var p = 1.;\n                for (; pfPos < pfe; pfPos++)\n                    if (p < Math.abs(pf[pfPos]))\n                        p = Math.abs(pf[pfPos]);\n\n                gfc.nsPsy.last_en_subshort[chn][i] = en_subshort[i + 3] = p;\n                en_short[1 + i / 3] += p;\n                if (p > en_subshort[i + 3 - 2]) {\n                    assert(en_subshort[i + 3 - 2] > 0);\n                    p = p / en_subshort[i + 3 - 2];\n                } else if (en_subshort[i + 3 - 2] > p * 10.0) {\n                    assert(p > 0);\n                    p = en_subshort[i + 3 - 2] / (p * 10.0);\n                } else {\n                    p = 0.0;\n                }\n                attack_intensity[i + 3] = p;\n            }\n            /* pulse like signal detection for fatboy.wav and so on */\n            for (var i = 0; i < 3; ++i) {\n                var enn = en_subshort[i * 3 + 3]\n                    + en_subshort[i * 3 + 4] + en_subshort[i * 3 + 5];\n                var factor = 1.;\n                if (en_subshort[i * 3 + 5] * 6 < enn) {\n                    factor *= 0.5;\n                    if (en_subshort[i * 3 + 4] * 6 < enn) {\n                        factor *= 0.5;\n                    }\n                }\n                sub_short_factor[chn][i] = factor;\n            }\n\n            if (gfp.analysis) {\n                var x = attack_intensity[0];\n                for (var i = 1; i < 12; i++) {\n                    if (x < attack_intensity[i]) {\n                        x = attack_intensity[i];\n                    }\n                }\n                gfc.pinfo.ers[gr_out][chn] = gfc.pinfo.ers_save[chn];\n                gfc.pinfo.ers_save[chn] = x;\n            }\n\n            /* compare energies between sub-shortblocks */\n            for (var i = 0; i < 12; i++) {\n                if (0 == ns_attacks[chn][i / 3]\n                    && attack_intensity[i] > attackThreshold) {\n                    ns_attacks[chn][i / 3] = (i % 3) + 1;\n                }\n            }\n\n            /*\n             * should have energy change between short blocks, in order to avoid\n             * periodic signals\n             */\n            /* Good samples to show the effect are Trumpet test songs */\n            /*\n             * GB: tuned (1) to avoid too many short blocks for test sample\n             * TRUMPET\n             */\n            /*\n             * RH: tuned (2) to let enough short blocks through for test sample\n             * FSOL and SNAPS\n             */\n            for (var i = 1; i < 4; i++) {\n                var u = en_short[i - 1];\n                var v = en_short[i];\n                var m = Math.max(u, v);\n                if (m < 40000) { /* (2) */\n                    if (u < 1.7 * v && v < 1.7 * u) { /* (1) */\n                        if (i == 1 && ns_attacks[chn][0] <= ns_attacks[chn][i]) {\n                            ns_attacks[chn][0] = 0;\n                        }\n                        ns_attacks[chn][i] = 0;\n                    }\n                }\n            }\n\n            if (ns_attacks[chn][0] <= gfc.nsPsy.lastAttacks[chn]) {\n                ns_attacks[chn][0] = 0;\n            }\n\n            if (gfc.nsPsy.lastAttacks[chn] == 3\n                || (ns_attacks[chn][0] + ns_attacks[chn][1]\n                + ns_attacks[chn][2] + ns_attacks[chn][3]) != 0) {\n                ns_uselongblock = 0;\n\n                if (ns_attacks[chn][1] != 0 && ns_attacks[chn][0] != 0) {\n                    ns_attacks[chn][1] = 0;\n                }\n                if (ns_attacks[chn][2] != 0 && ns_attacks[chn][1] != 0) {\n                    ns_attacks[chn][2] = 0;\n                }\n                if (ns_attacks[chn][3] != 0 && ns_attacks[chn][2] != 0) {\n                    ns_attacks[chn][3] = 0;\n                }\n            }\n            if (chn < 2) {\n                uselongblock[chn] = ns_uselongblock;\n            } else {\n                if (ns_uselongblock == 0) {\n                    uselongblock[0] = uselongblock[1] = 0;\n                }\n            }\n\n            /*\n             * there is a one granule delay. Copy maskings computed last call\n             * into masking_ratio to return to calling program.\n             */\n            energy[chn] = gfc.tot_ener[chn];\n        }\n    }\n\n    function vbrpsy_skip_masking_s(gfc, chn, sblock) {\n        if (sblock == 0) {\n            for (var b = 0; b < gfc.npart_s; b++) {\n                gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\n                gfc.nb_s1[chn][b] = 0;\n            }\n        }\n    }\n\n    function vbrpsy_skip_masking_l(gfc, chn) {\n        for (var b = 0; b < gfc.npart_l; b++) {\n            gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\n            gfc.nb_1[chn][b] = 0;\n        }\n    }\n\n    function psyvbr_calc_mask_index_s(gfc, max, avg, mask_idx) {\n        var last_tab_entry = tab.length - 1;\n        var b = 0;\n        var a = avg[b] + avg[b + 1];\n        assert(a >= 0);\n        if (a > 0.0) {\n            var m = max[b];\n            if (m < max[b + 1])\n                m = max[b + 1];\n            assert((gfc.numlines_s[b] + gfc.numlines_s[b + 1] - 1) > 0);\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_s[b] + gfc.numlines_s[b + 1] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n\n        for (b = 1; b < gfc.npart_s - 1; b++) {\n            a = avg[b - 1] + avg[b] + avg[b + 1];\n            assert(b + 1 < gfc.npart_s);\n            assert(a >= 0);\n            if (a > 0.0) {\n                var m = max[b - 1];\n                if (m < max[b])\n                    m = max[b];\n                if (m < max[b + 1])\n                    m = max[b + 1];\n                assert((gfc.numlines_s[b - 1] + gfc.numlines_s[b] + gfc.numlines_s[b + 1] - 1) > 0);\n                a = 20.0\n                    * (m * 3.0 - a)\n                    / (a * (gfc.numlines_s[b - 1] + gfc.numlines_s[b]\n                    + gfc.numlines_s[b + 1] - 1));\n                var k = 0 | a;\n                if (k > last_tab_entry)\n                    k = last_tab_entry;\n                mask_idx[b] = k;\n            } else {\n                mask_idx[b] = 0;\n            }\n        }\n        assert(b > 0);\n        assert(b == gfc.npart_s - 1);\n\n        a = avg[b - 1] + avg[b];\n        assert(a >= 0);\n        if (a > 0.0) {\n            var m = max[b - 1];\n            if (m < max[b])\n                m = max[b];\n            assert((gfc.numlines_s[b - 1] + gfc.numlines_s[b] - 1) > 0);\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_s[b - 1] + gfc.numlines_s[b] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n        assert(b == (gfc.npart_s - 1));\n    }\n\n    function vbrpsy_compute_masking_s(gfp, fftenergy_s, eb, thr, chn, sblock) {\n        var gfc = gfp.internal_flags;\n        var max = new float[Encoder.CBANDS], avg = new_float(Encoder.CBANDS);\n        var i, j, b;\n        var mask_idx_s = new int[Encoder.CBANDS];\n\n        for (b = j = 0; b < gfc.npart_s; ++b) {\n            var ebb = 0, m = 0;\n            var n = gfc.numlines_s[b];\n            for (i = 0; i < n; ++i, ++j) {\n                var el = fftenergy_s[sblock][j];\n                ebb += el;\n                if (m < el)\n                    m = el;\n            }\n            eb[b] = ebb;\n            assert(ebb >= 0);\n            max[b] = m;\n            assert(n > 0);\n            avg[b] = ebb / n;\n            assert(avg[b] >= 0);\n        }\n        assert(b == gfc.npart_s);\n        assert(j == 129);\n        for (; b < Encoder.CBANDS; ++b) {\n            max[b] = 0;\n            avg[b] = 0;\n        }\n        psyvbr_calc_mask_index_s(gfc, max, avg, mask_idx_s);\n        for (j = b = 0; b < gfc.npart_s; b++) {\n            var kk = gfc.s3ind_s[b][0];\n            var last = gfc.s3ind_s[b][1];\n            var dd, dd_n;\n            var x, ecb, avg_mask;\n            dd = mask_idx_s[kk];\n            dd_n = 1;\n            ecb = gfc.s3_ss[j] * eb[kk] * tab[mask_idx_s[kk]];\n            ++j;\n            ++kk;\n            while (kk <= last) {\n                dd += mask_idx_s[kk];\n                dd_n += 1;\n                x = gfc.s3_ss[j] * eb[kk] * tab[mask_idx_s[kk]];\n                ecb = vbrpsy_mask_add(ecb, x, kk - b);\n                ++j;\n                ++kk;\n            }\n            dd = (1 + 2 * dd) / (2 * dd_n);\n            avg_mask = tab[dd] * 0.5;\n            ecb *= avg_mask;\n            thr[b] = ecb;\n            gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\n            gfc.nb_s1[chn][b] = ecb;\n            {\n                /*\n                 * if THR exceeds EB, the quantization routines will take the\n                 * difference from other bands. in case of strong tonal samples\n                 * (tonaltest.wav) this leads to heavy distortions. that's why\n                 * we limit THR here.\n                 */\n                x = max[b];\n                x *= gfc.minval_s[b];\n                x *= avg_mask;\n                if (thr[b] > x) {\n                    thr[b] = x;\n                }\n            }\n            if (gfc.masking_lower > 1) {\n                thr[b] *= gfc.masking_lower;\n            }\n            if (thr[b] > eb[b]) {\n                thr[b] = eb[b];\n            }\n            if (gfc.masking_lower < 1) {\n                thr[b] *= gfc.masking_lower;\n            }\n\n            assert(thr[b] >= 0);\n        }\n        for (; b < Encoder.CBANDS; ++b) {\n            eb[b] = 0;\n            thr[b] = 0;\n        }\n    }\n\n    function vbrpsy_compute_masking_l(gfc, fftenergy, eb_l, thr, chn) {\n        var max = new_float(Encoder.CBANDS), avg = new_float(Encoder.CBANDS);\n        var mask_idx_l = new_int(Encoder.CBANDS + 2);\n        var b;\n\n        /*********************************************************************\n         * Calculate the energy and the tonality of each partition.\n         *********************************************************************/\n        calc_energy(gfc, fftenergy, eb_l, max, avg);\n        calc_mask_index_l(gfc, max, avg, mask_idx_l);\n\n        /*********************************************************************\n         * convolve the partitioned energy and unpredictability with the\n         * spreading function, s3_l[b][k]\n         ********************************************************************/\n        var k = 0;\n        for (b = 0; b < gfc.npart_l; b++) {\n            var x, ecb, avg_mask, t;\n            /* convolve the partitioned energy with the spreading function */\n            var kk = gfc.s3ind[b][0];\n            var last = gfc.s3ind[b][1];\n            var dd = 0, dd_n = 0;\n            dd = mask_idx_l[kk];\n            dd_n += 1;\n            ecb = gfc.s3_ll[k] * eb_l[kk] * tab[mask_idx_l[kk]];\n            ++k;\n            ++kk;\n            while (kk <= last) {\n                dd += mask_idx_l[kk];\n                dd_n += 1;\n                x = gfc.s3_ll[k] * eb_l[kk] * tab[mask_idx_l[kk]];\n                t = vbrpsy_mask_add(ecb, x, kk - b);\n                ecb = t;\n                ++k;\n                ++kk;\n            }\n            dd = (1 + 2 * dd) / (2 * dd_n);\n            avg_mask = tab[dd] * 0.5;\n            ecb *= avg_mask;\n\n            /**** long block pre-echo control ****/\n            /**\n             * <PRE>\n             * dont use long block pre-echo control if previous granule was\n             * a short block.  This is to avoid the situation:\n             * frame0:  quiet (very low masking)\n             * frame1:  surge  (triggers short blocks)\n             * frame2:  regular frame.  looks like pre-echo when compared to\n             *          frame0, but all pre-echo was in frame1.\n             * </PRE>\n             */\n            /*\n             * chn=0,1 L and R channels chn=2,3 S and M channels.\n             */\n            if (gfc.blocktype_old[chn & 0x01] == Encoder.SHORT_TYPE) {\n                var ecb_limit = rpelev * gfc.nb_1[chn][b];\n                if (ecb_limit > 0) {\n                    thr[b] = Math.min(ecb, ecb_limit);\n                } else {\n                    /**\n                     * <PRE>\n                     * Robert 071209:\n                     * Because we don't calculate long block psy when we know a granule\n                     * should be of short blocks, we don't have any clue how the granule\n                     * before would have looked like as a long block. So we have to guess\n                     * a little bit for this END_TYPE block.\n                     * Most of the time we get away with this sloppyness. (fingers crossed :)\n                     * The speed increase is worth it.\n                     * </PRE>\n                     */\n                    thr[b] = Math.min(ecb, eb_l[b] * NS_PREECHO_ATT2);\n                }\n            } else {\n                var ecb_limit_2 = rpelev2 * gfc.nb_2[chn][b];\n                var ecb_limit_1 = rpelev * gfc.nb_1[chn][b];\n                var ecb_limit;\n                if (ecb_limit_2 <= 0) {\n                    ecb_limit_2 = ecb;\n                }\n                if (ecb_limit_1 <= 0) {\n                    ecb_limit_1 = ecb;\n                }\n                if (gfc.blocktype_old[chn & 0x01] == Encoder.NORM_TYPE) {\n                    ecb_limit = Math.min(ecb_limit_1, ecb_limit_2);\n                } else {\n                    ecb_limit = ecb_limit_1;\n                }\n                thr[b] = Math.min(ecb, ecb_limit);\n            }\n            gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\n            gfc.nb_1[chn][b] = ecb;\n            {\n                /*\n                 * if THR exceeds EB, the quantization routines will take the\n                 * difference from other bands. in case of strong tonal samples\n                 * (tonaltest.wav) this leads to heavy distortions. that's why\n                 * we limit THR here.\n                 */\n                x = max[b];\n                x *= gfc.minval_l[b];\n                x *= avg_mask;\n                if (thr[b] > x) {\n                    thr[b] = x;\n                }\n            }\n            if (gfc.masking_lower > 1) {\n                thr[b] *= gfc.masking_lower;\n            }\n            if (thr[b] > eb_l[b]) {\n                thr[b] = eb_l[b];\n            }\n            if (gfc.masking_lower < 1) {\n                thr[b] *= gfc.masking_lower;\n            }\n            assert(thr[b] >= 0);\n        }\n        for (; b < Encoder.CBANDS; ++b) {\n            eb_l[b] = 0;\n            thr[b] = 0;\n        }\n    }\n\n    function vbrpsy_compute_block_type(gfp, uselongblock) {\n        var gfc = gfp.internal_flags;\n\n        if (gfp.short_blocks == ShortBlock.short_block_coupled\n                /* force both channels to use the same block type */\n                /* this is necessary if the frame is to be encoded in ms_stereo. */\n                /* But even without ms_stereo, FhG does this */\n            && !(uselongblock[0] != 0 && uselongblock[1] != 0))\n            uselongblock[0] = uselongblock[1] = 0;\n\n        for (var chn = 0; chn < gfc.channels_out; chn++) {\n            /* disable short blocks */\n            if (gfp.short_blocks == ShortBlock.short_block_dispensed) {\n                uselongblock[chn] = 1;\n            }\n            if (gfp.short_blocks == ShortBlock.short_block_forced) {\n                uselongblock[chn] = 0;\n            }\n        }\n    }\n\n    function vbrpsy_apply_block_type(gfp, uselongblock, blocktype_d) {\n        var gfc = gfp.internal_flags;\n\n        /*\n         * update the blocktype of the previous granule, since it depends on\n         * what happend in this granule\n         */\n        for (var chn = 0; chn < gfc.channels_out; chn++) {\n            var blocktype = Encoder.NORM_TYPE;\n            /* disable short blocks */\n\n            if (uselongblock[chn] != 0) {\n                /* no attack : use long blocks */\n                assert(gfc.blocktype_old[chn] != Encoder.START_TYPE);\n                if (gfc.blocktype_old[chn] == Encoder.SHORT_TYPE)\n                    blocktype = Encoder.STOP_TYPE;\n            } else {\n                /* attack : use short blocks */\n                blocktype = Encoder.SHORT_TYPE;\n                if (gfc.blocktype_old[chn] == Encoder.NORM_TYPE) {\n                    gfc.blocktype_old[chn] = Encoder.START_TYPE;\n                }\n                if (gfc.blocktype_old[chn] == Encoder.STOP_TYPE)\n                    gfc.blocktype_old[chn] = Encoder.SHORT_TYPE;\n            }\n\n            blocktype_d[chn] = gfc.blocktype_old[chn];\n            // value returned to calling program\n            gfc.blocktype_old[chn] = blocktype;\n            // save for next call to l3psy_anal\n        }\n    }\n\n    /**\n     * compute M/S thresholds from Johnston & Ferreira 1992 ICASSP paper\n     */\n    function vbrpsy_compute_MS_thresholds(eb, thr, cb_mld, ath_cb, athadjust, msfix, n) {\n        var msfix2 = msfix * 2;\n        var athlower = msfix > 0 ? Math.pow(10, athadjust) : 1;\n        var rside, rmid;\n        for (var b = 0; b < n; ++b) {\n            var ebM = eb[2][b];\n            var ebS = eb[3][b];\n            var thmL = thr[0][b];\n            var thmR = thr[1][b];\n            var thmM = thr[2][b];\n            var thmS = thr[3][b];\n\n            /* use this fix if L & R masking differs by 2db or less */\n            if (thmL <= 1.58 * thmR && thmR <= 1.58 * thmL) {\n                var mld_m = cb_mld[b] * ebS;\n                var mld_s = cb_mld[b] * ebM;\n                rmid = Math.max(thmM, Math.min(thmS, mld_m));\n                rside = Math.max(thmS, Math.min(thmM, mld_s));\n            } else {\n                rmid = thmM;\n                rside = thmS;\n            }\n            if (msfix > 0) {\n                /***************************************************************/\n                /* Adjust M/S maskings if user set \"msfix\" */\n                /***************************************************************/\n                /* Naoki Shibata 2000 */\n                var thmLR, thmMS;\n                var ath = ath_cb[b] * athlower;\n                thmLR = Math.min(Math.max(thmL, ath), Math.max(thmR, ath));\n                thmM = Math.max(rmid, ath);\n                thmS = Math.max(rside, ath);\n                thmMS = thmM + thmS;\n                if (thmMS > 0 && (thmLR * msfix2) < thmMS) {\n                    var f = thmLR * msfix2 / thmMS;\n                    thmM *= f;\n                    thmS *= f;\n                    assert(thmMS > 0);\n                }\n                rmid = Math.min(thmM, rmid);\n                rside = Math.min(thmS, rside);\n            }\n            if (rmid > ebM) {\n                rmid = ebM;\n            }\n            if (rside > ebS) {\n                rside = ebS;\n            }\n            thr[2][b] = rmid;\n            thr[3][b] = rside;\n        }\n    }\n\n    this.L3psycho_anal_vbr = function (gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, percep_entropy, percep_MS_entropy, energy, blocktype_d) {\n        var gfc = gfp.internal_flags;\n\n        /* fft and energy calculation */\n        var wsamp_l;\n        var wsamp_s;\n        var fftenergy = new_float(Encoder.HBLKSIZE);\n        var fftenergy_s = new_float_n([3, Encoder.HBLKSIZE_s]);\n        var wsamp_L = new_float_n([2, Encoder.BLKSIZE]);\n        var wsamp_S = new_float_n([2, 3, Encoder.BLKSIZE_s]);\n        var eb = new_float_n([4, Encoder.CBANDS]), thr = new_float_n([4, Encoder.CBANDS]);\n        var sub_short_factor = new_float_n([4, 3]);\n        var pcfact = 0.6;\n\n        /* block type */\n        var ns_attacks = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],\n            [0, 0, 0, 0]];\n        var uselongblock = new_int(2);\n\n        /* usual variables like loop indices, etc.. */\n\n        /* chn=2 and 3 = Mid and Side channels */\n        var n_chn_psy = (gfp.mode == MPEGMode.JOINT_STEREO) ? 4\n            : gfc.channels_out;\n\n        vbrpsy_attack_detection(gfp, buffer, bufPos, gr_out, masking_ratio,\n            masking_MS_ratio, energy, sub_short_factor, ns_attacks,\n            uselongblock);\n\n        vbrpsy_compute_block_type(gfp, uselongblock);\n\n        /* LONG BLOCK CASE */\n        {\n            for (var chn = 0; chn < n_chn_psy; chn++) {\n                var ch01 = chn & 0x01;\n                wsamp_l = wsamp_L;\n                vbrpsy_compute_fft_l(gfp, buffer, bufPos, chn, gr_out,\n                    fftenergy, wsamp_l, ch01);\n\n                vbrpsy_compute_loudness_approximation_l(gfp, gr_out, chn,\n                    fftenergy);\n\n                if (uselongblock[ch01] != 0) {\n                    vbrpsy_compute_masking_l(gfc, fftenergy, eb[chn], thr[chn],\n                        chn);\n                } else {\n                    vbrpsy_skip_masking_l(gfc, chn);\n                }\n            }\n            if ((uselongblock[0] + uselongblock[1]) == 2) {\n                /* M/S channel */\n                if (gfp.mode == MPEGMode.JOINT_STEREO) {\n                    vbrpsy_compute_MS_thresholds(eb, thr, gfc.mld_cb_l,\n                        gfc.ATH.cb_l, gfp.ATHlower * gfc.ATH.adjust,\n                        gfp.msfix, gfc.npart_l);\n                }\n            }\n            /* TODO: apply adaptive ATH masking here ?? */\n            for (var chn = 0; chn < n_chn_psy; chn++) {\n                var ch01 = chn & 0x01;\n                if (uselongblock[ch01] != 0) {\n                    convert_partition2scalefac_l(gfc, eb[chn], thr[chn], chn);\n                }\n            }\n        }\n\n        /* SHORT BLOCKS CASE */\n        {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                for (var chn = 0; chn < n_chn_psy; ++chn) {\n                    var ch01 = chn & 0x01;\n\n                    if (uselongblock[ch01] != 0) {\n                        vbrpsy_skip_masking_s(gfc, chn, sblock);\n                    } else {\n                        /* compute masking thresholds for short blocks */\n                        wsamp_s = wsamp_S;\n                        vbrpsy_compute_fft_s(gfp, buffer, bufPos, chn, sblock,\n                            fftenergy_s, wsamp_s, ch01);\n                        vbrpsy_compute_masking_s(gfp, fftenergy_s, eb[chn],\n                            thr[chn], chn, sblock);\n                    }\n                }\n                if ((uselongblock[0] + uselongblock[1]) == 0) {\n                    /* M/S channel */\n                    if (gfp.mode == MPEGMode.JOINT_STEREO) {\n                        vbrpsy_compute_MS_thresholds(eb, thr, gfc.mld_cb_s,\n                            gfc.ATH.cb_s, gfp.ATHlower * gfc.ATH.adjust,\n                            gfp.msfix, gfc.npart_s);\n                    }\n                    /* L/R channel */\n                }\n                /* TODO: apply adaptive ATH masking here ?? */\n                for (var chn = 0; chn < n_chn_psy; ++chn) {\n                    var ch01 = chn & 0x01;\n                    if (0 == uselongblock[ch01]) {\n                        convert_partition2scalefac_s(gfc, eb[chn], thr[chn],\n                            chn, sblock);\n                    }\n                }\n            }\n\n            /**** short block pre-echo control ****/\n            for (var chn = 0; chn < n_chn_psy; chn++) {\n                var ch01 = chn & 0x01;\n\n                if (uselongblock[ch01] != 0) {\n                    continue;\n                }\n                for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                    var new_thmm = new_float(3);\n                    for (var sblock = 0; sblock < 3; sblock++) {\n                        var thmm = gfc.thm[chn].s[sb][sblock];\n                        thmm *= NS_PREECHO_ATT0;\n\n                        if (ns_attacks[chn][sblock] >= 2\n                            || ns_attacks[chn][sblock + 1] == 1) {\n                            var idx = (sblock != 0) ? sblock - 1 : 2;\n                            var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                                NS_PREECHO_ATT1 * pcfact);\n                            thmm = Math.min(thmm, p);\n                        } else if (ns_attacks[chn][sblock] == 1) {\n                            var idx = (sblock != 0) ? sblock - 1 : 2;\n                            var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                                NS_PREECHO_ATT2 * pcfact);\n                            thmm = Math.min(thmm, p);\n                        } else if ((sblock != 0 && ns_attacks[chn][sblock - 1] == 3)\n                            || (sblock == 0 && gfc.nsPsy.lastAttacks[chn] == 3)) {\n                            var idx = (sblock != 2) ? sblock + 1 : 0;\n                            var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                                NS_PREECHO_ATT2 * pcfact);\n                            thmm = Math.min(thmm, p);\n                        }\n\n                        /* pulse like signal detection for fatboy.wav and so on */\n                        thmm *= sub_short_factor[chn][sblock];\n\n                        new_thmm[sblock] = thmm;\n                    }\n                    for (var sblock = 0; sblock < 3; sblock++) {\n                        gfc.thm[chn].s[sb][sblock] = new_thmm[sblock];\n                    }\n                }\n            }\n        }\n        for (var chn = 0; chn < n_chn_psy; chn++) {\n            gfc.nsPsy.lastAttacks[chn] = ns_attacks[chn][2];\n        }\n\n        /***************************************************************\n         * determine final block type\n         ***************************************************************/\n        vbrpsy_apply_block_type(gfp, uselongblock, blocktype_d);\n\n        /*********************************************************************\n         * compute the value of PE to return ... no delay and advance\n         *********************************************************************/\n        for (var chn = 0; chn < n_chn_psy; chn++) {\n            var ppe;\n            var ppePos;\n            var type;\n            var mr;\n\n            if (chn > 1) {\n                ppe = percep_MS_entropy;\n                ppePos = -2;\n                type = Encoder.NORM_TYPE;\n                if (blocktype_d[0] == Encoder.SHORT_TYPE\n                    || blocktype_d[1] == Encoder.SHORT_TYPE)\n                    type = Encoder.SHORT_TYPE;\n                mr = masking_MS_ratio[gr_out][chn - 2];\n            } else {\n                ppe = percep_entropy;\n                ppePos = 0;\n                type = blocktype_d[chn];\n                mr = masking_ratio[gr_out][chn];\n            }\n\n            if (type == Encoder.SHORT_TYPE) {\n                ppe[ppePos + chn] = pecalc_s(mr, gfc.masking_lower);\n            } else {\n                ppe[ppePos + chn] = pecalc_l(mr, gfc.masking_lower);\n            }\n\n            if (gfp.analysis) {\n                gfc.pinfo.pe[gr_out][chn] = ppe[ppePos + chn];\n            }\n        }\n        return 0;\n    }\n\n    function s3_func_x(bark, hf_slope) {\n        var tempx = bark, tempy;\n\n        if (tempx >= 0) {\n            tempy = -tempx * 27;\n        } else {\n            tempy = tempx * hf_slope;\n        }\n        if (tempy <= -72.0) {\n            return 0;\n        }\n        return Math.exp(tempy * LN_TO_LOG10);\n    }\n\n    function norm_s3_func_x(hf_slope) {\n        var lim_a = 0, lim_b = 0;\n        {\n            var x = 0, l, h;\n            for (x = 0; s3_func_x(x, hf_slope) > 1e-20; x -= 1)\n                ;\n            l = x;\n            h = 0;\n            while (Math.abs(h - l) > 1e-12) {\n                x = (h + l) / 2;\n                if (s3_func_x(x, hf_slope) > 0) {\n                    h = x;\n                } else {\n                    l = x;\n                }\n            }\n            lim_a = l;\n        }\n        {\n            var x = 0, l, h;\n            for (x = 0; s3_func_x(x, hf_slope) > 1e-20; x += 1)\n                ;\n            l = 0;\n            h = x;\n            while (Math.abs(h - l) > 1e-12) {\n                x = (h + l) / 2;\n                if (s3_func_x(x, hf_slope) > 0) {\n                    l = x;\n                } else {\n                    h = x;\n                }\n            }\n            lim_b = h;\n        }\n        {\n            var sum = 0;\n            var m = 1000;\n            var i;\n            for (i = 0; i <= m; ++i) {\n                var x = lim_a + i * (lim_b - lim_a) / m;\n                var y = s3_func_x(x, hf_slope);\n                sum += y;\n            }\n            {\n                var norm = (m + 1) / (sum * (lim_b - lim_a));\n                /* printf( \"norm = %lf\\n\",norm); */\n                return norm;\n            }\n        }\n    }\n\n    /**\n     *   The spreading function.  Values returned in units of energy\n     */\n    function s3_func(bark) {\n        var tempx, x, tempy, temp;\n        tempx = bark;\n        if (tempx >= 0)\n            tempx *= 3;\n        else\n            tempx *= 1.5;\n\n        if (tempx >= 0.5 && tempx <= 2.5) {\n            temp = tempx - 0.5;\n            x = 8.0 * (temp * temp - 2.0 * temp);\n        } else\n            x = 0.0;\n        tempx += 0.474;\n        tempy = 15.811389 + 7.5 * tempx - 17.5\n            * Math.sqrt(1.0 + tempx * tempx);\n\n        if (tempy <= -60.0)\n            return 0.0;\n\n        tempx = Math.exp((x + tempy) * LN_TO_LOG10);\n\n        /**\n         * <PRE>\n         * Normalization.  The spreading function should be normalized so that:\n         * +inf\n         * /\n         * |  s3 [ bark ]  d(bark)   =  1\n         * /\n         * -inf\n         * </PRE>\n         */\n        tempx /= .6609193;\n        return tempx;\n    }\n\n    /**\n     * see for example \"Zwicker: Psychoakustik, 1982; ISBN 3-540-11401-7\n     */\n    function freq2bark(freq) {\n        /* input: freq in hz output: barks */\n        if (freq < 0)\n            freq = 0;\n        freq = freq * 0.001;\n        return 13.0 * Math.atan(.76 * freq) + 3.5\n            * Math.atan(freq * freq / (7.5 * 7.5));\n    }\n\n    function init_numline(numlines, bo, bm, bval, bval_width, mld, bo_w, sfreq, blksize, scalepos, deltafreq, sbmax) {\n        var b_frq = new_float(Encoder.CBANDS + 1);\n        var sample_freq_frac = sfreq / (sbmax > 15 ? 2 * 576 : 2 * 192);\n        var partition = new_int(Encoder.HBLKSIZE);\n        var i;\n        sfreq /= blksize;\n        var j = 0;\n        var ni = 0;\n        /* compute numlines, the number of spectral lines in each partition band */\n        /* each partition band should be about DELBARK wide. */\n        for (i = 0; i < Encoder.CBANDS; i++) {\n            var bark1;\n            var j2;\n            bark1 = freq2bark(sfreq * j);\n\n            b_frq[i] = sfreq * j;\n\n            for (j2 = j; freq2bark(sfreq * j2) - bark1 < DELBARK\n            && j2 <= blksize / 2; j2++)\n                ;\n\n            numlines[i] = j2 - j;\n            ni = i + 1;\n\n            while (j < j2) {\n                assert(j < Encoder.HBLKSIZE);\n                partition[j++] = i;\n            }\n            if (j > blksize / 2) {\n                j = blksize / 2;\n                ++i;\n                break;\n            }\n        }\n        assert(i < Encoder.CBANDS);\n        b_frq[i] = sfreq * j;\n\n        for (var sfb = 0; sfb < sbmax; sfb++) {\n            var i1, i2, start, end;\n            var arg;\n            start = scalepos[sfb];\n            end = scalepos[sfb + 1];\n\n            i1 = 0 | Math.floor(.5 + deltafreq * (start - .5));\n            if (i1 < 0)\n                i1 = 0;\n            i2 = 0 | Math.floor(.5 + deltafreq * (end - .5));\n\n            if (i2 > blksize / 2)\n                i2 = blksize / 2;\n\n            bm[sfb] = (partition[i1] + partition[i2]) / 2;\n            bo[sfb] = partition[i2];\n            var f_tmp = sample_freq_frac * end;\n            /*\n             * calculate how much of this band belongs to current scalefactor\n             * band\n             */\n            bo_w[sfb] = (f_tmp - b_frq[bo[sfb]])\n                / (b_frq[bo[sfb] + 1] - b_frq[bo[sfb]]);\n            if (bo_w[sfb] < 0) {\n                bo_w[sfb] = 0;\n            } else {\n                if (bo_w[sfb] > 1) {\n                    bo_w[sfb] = 1;\n                }\n            }\n            /* setup stereo demasking thresholds */\n            /* formula reverse enginerred from plot in paper */\n            arg = freq2bark(sfreq * scalepos[sfb] * deltafreq);\n            arg = ( Math.min(arg, 15.5) / 15.5);\n\n            mld[sfb] = Math.pow(10.0,\n                1.25 * (1 - Math.cos(Math.PI * arg)) - 2.5);\n        }\n\n        /* compute bark values of each critical band */\n        j = 0;\n        for (var k = 0; k < ni; k++) {\n            var w = numlines[k];\n            var bark1, bark2;\n\n            bark1 = freq2bark(sfreq * (j));\n            bark2 = freq2bark(sfreq * (j + w - 1));\n            bval[k] = .5 * (bark1 + bark2);\n\n            bark1 = freq2bark(sfreq * (j - .5));\n            bark2 = freq2bark(sfreq * (j + w - .5));\n            bval_width[k] = bark2 - bark1;\n            j += w;\n        }\n\n        return ni;\n    }\n\n    function init_s3_values(s3ind, npart, bval, bval_width, norm, use_old_s3) {\n        var s3 = new_float_n([Encoder.CBANDS, Encoder.CBANDS]);\n        /*\n         * The s3 array is not linear in the bark scale.\n         *\n         * bval[x] should be used to get the bark value.\n         */\n        var j;\n        var numberOfNoneZero = 0;\n\n        /**\n         * <PRE>\n         * s[i][j], the value of the spreading function,\n         * centered at band j (masker), for band i (maskee)\n         *\n         * i.e.: sum over j to spread into signal barkval=i\n         * NOTE: i and j are used opposite as in the ISO docs\n         * </PRE>\n         */\n        if (use_old_s3) {\n            for (var i = 0; i < npart; i++) {\n                for (j = 0; j < npart; j++) {\n                    var v = s3_func(bval[i] - bval[j]) * bval_width[j];\n                    s3[i][j] = v * norm[i];\n                }\n            }\n        } else {\n            for (j = 0; j < npart; j++) {\n                var hf_slope = 15 + Math.min(21 / bval[j], 12);\n                var s3_x_norm = norm_s3_func_x(hf_slope);\n                for (var i = 0; i < npart; i++) {\n                    var v = s3_x_norm\n                        * s3_func_x(bval[i] - bval[j], hf_slope)\n                        * bval_width[j];\n                    s3[i][j] = v * norm[i];\n                }\n            }\n        }\n        for (var i = 0; i < npart; i++) {\n            for (j = 0; j < npart; j++) {\n                if (s3[i][j] > 0.0)\n                    break;\n            }\n            s3ind[i][0] = j;\n\n            for (j = npart - 1; j > 0; j--) {\n                if (s3[i][j] > 0.0)\n                    break;\n            }\n            s3ind[i][1] = j;\n            numberOfNoneZero += (s3ind[i][1] - s3ind[i][0] + 1);\n        }\n\n        var p = new_float(numberOfNoneZero);\n        var k = 0;\n        for (var i = 0; i < npart; i++)\n            for (j = s3ind[i][0]; j <= s3ind[i][1]; j++)\n                p[k++] = s3[i][j];\n\n        return p;\n    }\n\n    function stereo_demask(f) {\n        /* setup stereo demasking thresholds */\n        /* formula reverse enginerred from plot in paper */\n        var arg = freq2bark(f);\n        arg = (Math.min(arg, 15.5) / 15.5);\n\n        return Math.pow(10.0,\n            1.25 * (1 - Math.cos(Math.PI * arg)) - 2.5);\n    }\n\n    /**\n     * NOTE: the bitrate reduction from the inter-channel masking effect is low\n     * compared to the chance of getting annyoing artefacts. L3psycho_anal_vbr\n     * does not use this feature. (Robert 071216)\n     */\n    this.psymodel_init = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var i;\n        var useOldS3 = true;\n        var bvl_a = 13, bvl_b = 24;\n        var snr_l_a = 0, snr_l_b = 0;\n        var snr_s_a = -8.25, snr_s_b = -4.5;\n        var bval = new_float(Encoder.CBANDS);\n        var bval_width = new_float(Encoder.CBANDS);\n        var norm = new_float(Encoder.CBANDS);\n        var sfreq = gfp.out_samplerate;\n\n        switch (gfp.experimentalZ) {\n            default:\n            case 0:\n                useOldS3 = true;\n                break;\n            case 1:\n                useOldS3 = (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) ? false\n                    : true;\n                break;\n            case 2:\n                useOldS3 = false;\n                break;\n            case 3:\n                bvl_a = 8;\n                snr_l_a = -1.75;\n                snr_l_b = -0.0125;\n                snr_s_a = -8.25;\n                snr_s_b = -2.25;\n                break;\n        }\n        gfc.ms_ener_ratio_old = .25;\n        gfc.blocktype_old[0] = gfc.blocktype_old[1] = Encoder.NORM_TYPE;\n        // the vbr header is long blocks\n\n        for (i = 0; i < 4; ++i) {\n            for (var j = 0; j < Encoder.CBANDS; ++j) {\n                gfc.nb_1[i][j] = 1e20;\n                gfc.nb_2[i][j] = 1e20;\n                gfc.nb_s1[i][j] = gfc.nb_s2[i][j] = 1.0;\n            }\n            for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n                gfc.en[i].l[sb] = 1e20;\n                gfc.thm[i].l[sb] = 1e20;\n            }\n            for (var j = 0; j < 3; ++j) {\n                for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                    gfc.en[i].s[sb][j] = 1e20;\n                    gfc.thm[i].s[sb][j] = 1e20;\n                }\n                gfc.nsPsy.lastAttacks[i] = 0;\n            }\n            for (var j = 0; j < 9; j++)\n                gfc.nsPsy.last_en_subshort[i][j] = 10.;\n        }\n\n        /* init. for loudness approx. -jd 2001 mar 27 */\n        gfc.loudness_sq_save[0] = gfc.loudness_sq_save[1] = 0.0;\n\n        /*************************************************************************\n         * now compute the psychoacoustic model specific constants\n         ************************************************************************/\n        /* compute numlines, bo, bm, bval, bval_width, mld */\n\n        gfc.npart_l = init_numline(gfc.numlines_l, gfc.bo_l, gfc.bm_l, bval,\n            bval_width, gfc.mld_l, gfc.PSY.bo_l_weight, sfreq,\n            Encoder.BLKSIZE, gfc.scalefac_band.l, Encoder.BLKSIZE\n            / (2.0 * 576), Encoder.SBMAX_l);\n        assert(gfc.npart_l < Encoder.CBANDS);\n        /* compute the spreading function */\n        for (i = 0; i < gfc.npart_l; i++) {\n            var snr = snr_l_a;\n            if (bval[i] >= bvl_a) {\n                snr = snr_l_b * (bval[i] - bvl_a) / (bvl_b - bvl_a) + snr_l_a\n                    * (bvl_b - bval[i]) / (bvl_b - bvl_a);\n            }\n            norm[i] = Math.pow(10.0, snr / 10.0);\n            if (gfc.numlines_l[i] > 0) {\n                gfc.rnumlines_l[i] = 1.0 / gfc.numlines_l[i];\n            } else {\n                gfc.rnumlines_l[i] = 0;\n            }\n        }\n        gfc.s3_ll = init_s3_values(gfc.s3ind, gfc.npart_l, bval, bval_width,\n            norm, useOldS3);\n\n        /* compute long block specific values, ATH and MINVAL */\n        var j = 0;\n        for (i = 0; i < gfc.npart_l; i++) {\n            var x;\n\n            /* ATH */\n            x = Float.MAX_VALUE;\n            for (var k = 0; k < gfc.numlines_l[i]; k++, j++) {\n                var freq = sfreq * j / (1000.0 * Encoder.BLKSIZE);\n                var level;\n                /*\n                 * ATH below 100 Hz constant, not further climbing\n                 */\n                level = this.ATHformula(freq * 1000, gfp) - 20;\n                // scale to FFT units; returned value is in dB\n                level = Math.pow(10., 0.1 * level);\n                // convert from dB . energy\n                level *= gfc.numlines_l[i];\n                if (x > level)\n                    x = level;\n            }\n            gfc.ATH.cb_l[i] = x;\n\n            /*\n             * MINVAL. For low freq, the strength of the masking is limited by\n             * minval this is an ISO MPEG1 thing, dont know if it is really\n             * needed\n             */\n            /*\n             * FIXME: it does work to reduce low-freq problems in S53-Wind-Sax\n             * and lead-voice samples, but introduces some 3 kbps bit bloat too.\n             * TODO: Further refinement of the shape of this hack.\n             */\n            x = -20 + bval[i] * 20 / 10;\n            if (x > 6) {\n                x = 100;\n            }\n            if (x < -15) {\n                x = -15;\n            }\n            x -= 8.;\n            gfc.minval_l[i] = (Math.pow(10.0, x / 10.) * gfc.numlines_l[i]);\n        }\n\n        /************************************************************************\n         * do the same things for short blocks\n         ************************************************************************/\n        gfc.npart_s = init_numline(gfc.numlines_s, gfc.bo_s, gfc.bm_s, bval,\n            bval_width, gfc.mld_s, gfc.PSY.bo_s_weight, sfreq,\n            Encoder.BLKSIZE_s, gfc.scalefac_band.s, Encoder.BLKSIZE_s\n            / (2.0 * 192), Encoder.SBMAX_s);\n        assert(gfc.npart_s < Encoder.CBANDS);\n\n        /* SNR formula. short block is normalized by SNR. is it still right ? */\n        j = 0;\n        for (i = 0; i < gfc.npart_s; i++) {\n            var x;\n            var snr = snr_s_a;\n            if (bval[i] >= bvl_a) {\n                snr = snr_s_b * (bval[i] - bvl_a) / (bvl_b - bvl_a) + snr_s_a\n                    * (bvl_b - bval[i]) / (bvl_b - bvl_a);\n            }\n            norm[i] = Math.pow(10.0, snr / 10.0);\n\n            /* ATH */\n            x = Float.MAX_VALUE;\n            for (var k = 0; k < gfc.numlines_s[i]; k++, j++) {\n                var freq = sfreq * j / (1000.0 * Encoder.BLKSIZE_s);\n                var level;\n                /* freq = Min(.1,freq); */\n                /*\n                 * ATH below 100 Hz constant, not\n                 * further climbing\n                 */\n                level = this.ATHformula(freq * 1000, gfp) - 20;\n                // scale to FFT units; returned value is in dB\n                level = Math.pow(10., 0.1 * level);\n                // convert from dB . energy\n                level *= gfc.numlines_s[i];\n                if (x > level)\n                    x = level;\n            }\n            gfc.ATH.cb_s[i] = x;\n\n            /*\n             * MINVAL. For low freq, the strength of the masking is limited by\n             * minval this is an ISO MPEG1 thing, dont know if it is really\n             * needed\n             */\n            x = (-7.0 + bval[i] * 7.0 / 12.0);\n            if (bval[i] > 12) {\n                x *= 1 + Math.log(1 + x) * 3.1;\n            }\n            if (bval[i] < 12) {\n                x *= 1 + Math.log(1 - x) * 2.3;\n            }\n            if (x < -15) {\n                x = -15;\n            }\n            x -= 8;\n            gfc.minval_s[i] = Math.pow(10.0, x / 10)\n                * gfc.numlines_s[i];\n        }\n\n        gfc.s3_ss = init_s3_values(gfc.s3ind_s, gfc.npart_s, bval, bval_width,\n            norm, useOldS3);\n\n        init_mask_add_max_values();\n        fft.init_fft(gfc);\n\n        /* setup temporal masking */\n        gfc.decay = Math.exp(-1.0 * LOG10\n            / (temporalmask_sustain_sec * sfreq / 192.0));\n\n        {\n            var msfix;\n            msfix = NS_MSFIX;\n            if ((gfp.exp_nspsytune & 2) != 0)\n                msfix = 1.0;\n            if (Math.abs(gfp.msfix) > 0.0)\n                msfix = gfp.msfix;\n            gfp.msfix = msfix;\n\n            /*\n             * spread only from npart_l bands. Normally, we use the spreading\n             * function to convolve from npart_l down to npart_l bands\n             */\n            for (var b = 0; b < gfc.npart_l; b++)\n                if (gfc.s3ind[b][1] > gfc.npart_l - 1)\n                    gfc.s3ind[b][1] = gfc.npart_l - 1;\n        }\n\n        /*\n         * prepare for ATH auto adjustment: we want to decrease the ATH by 12 dB\n         * per second\n         */\n        var frame_duration = (576. * gfc.mode_gr / sfreq);\n        gfc.ATH.decay = Math.pow(10., -12. / 10. * frame_duration);\n        gfc.ATH.adjust = 0.01;\n        /* minimum, for leading low loudness */\n        gfc.ATH.adjustLimit = 1.0;\n        /* on lead, allow adjust up to maximum */\n\n        assert(gfc.bo_l[Encoder.SBMAX_l - 1] <= gfc.npart_l);\n        assert(gfc.bo_s[Encoder.SBMAX_s - 1] <= gfc.npart_s);\n\n        if (gfp.ATHtype != -1) {\n            /* compute equal loudness weights (eql_w) */\n            var freq;\n            var freq_inc = gfp.out_samplerate\n                / (Encoder.BLKSIZE);\n            var eql_balance = 0.0;\n            freq = 0.0;\n            for (i = 0; i < Encoder.BLKSIZE / 2; ++i) {\n                /* convert ATH dB to relative power (not dB) */\n                /* to determine eql_w */\n                freq += freq_inc;\n                gfc.ATH.eql_w[i] = 1. / Math.pow(10, this.ATHformula(freq, gfp) / 10);\n                eql_balance += gfc.ATH.eql_w[i];\n            }\n            eql_balance = 1.0 / eql_balance;\n            for (i = Encoder.BLKSIZE / 2; --i >= 0;) { /* scale weights */\n                gfc.ATH.eql_w[i] *= eql_balance;\n            }\n        }\n        {\n            for (var b = j = 0; b < gfc.npart_s; ++b) {\n                for (i = 0; i < gfc.numlines_s[b]; ++i) {\n                    ++j;\n                }\n            }\n            assert(j == 129);\n            for (var b = j = 0; b < gfc.npart_l; ++b) {\n                for (i = 0; i < gfc.numlines_l[b]; ++i) {\n                    ++j;\n                }\n            }\n            assert(j == 513);\n        }\n        j = 0;\n        for (i = 0; i < gfc.npart_l; i++) {\n            var freq = sfreq * (j + gfc.numlines_l[i] / 2) / (1.0 * Encoder.BLKSIZE);\n            gfc.mld_cb_l[i] = stereo_demask(freq);\n            j += gfc.numlines_l[i];\n        }\n        for (; i < Encoder.CBANDS; ++i) {\n            gfc.mld_cb_l[i] = 1;\n        }\n        j = 0;\n        for (i = 0; i < gfc.npart_s; i++) {\n            var freq = sfreq * (j + gfc.numlines_s[i] / 2) / (1.0 * Encoder.BLKSIZE_s);\n            gfc.mld_cb_s[i] = stereo_demask(freq);\n            j += gfc.numlines_s[i];\n        }\n        for (; i < Encoder.CBANDS; ++i) {\n            gfc.mld_cb_s[i] = 1;\n        }\n        return 0;\n    }\n\n    /**\n     * Those ATH formulas are returning their minimum value for input = -1\n     */\n    function ATHformula_GB(f, value) {\n        /**\n         * <PRE>\n         *  from Painter & Spanias\n         *           modified by Gabriel Bouvigne to better fit the reality\n         *           ath =    3.640 * pow(f,-0.8)\n         *           - 6.800 * exp(-0.6*pow(f-3.4,2.0))\n         *           + 6.000 * exp(-0.15*pow(f-8.7,2.0))\n         *           + 0.6* 0.001 * pow(f,4.0);\n         *\n         *\n         *           In the past LAME was using the Painter &Spanias formula.\n         *           But we had some recurrent problems with HF content.\n         *           We measured real ATH values, and found the older formula\n         *           to be inaccurate in the higher part. So we made this new\n         *           formula and this solved most of HF problematic test cases.\n         *           The tradeoff is that in VBR mode it increases a lot the\n         *           bitrate.\n         * </PRE>\n         */\n\n        /*\n         * This curve can be adjusted according to the VBR scale: it adjusts\n         * from something close to Painter & Spanias on V9 up to Bouvigne's\n         * formula for V0. This way the VBR bitrate is more balanced according\n         * to the -V value.\n         */\n\n        // the following Hack allows to ask for the lowest value\n        if (f < -.3)\n            f = 3410;\n\n        // convert to khz\n        f /= 1000;\n        f = Math.max(0.1, f);\n        var ath = 3.640 * Math.pow(f, -0.8) - 6.800\n            * Math.exp(-0.6 * Math.pow(f - 3.4, 2.0)) + 6.000\n            * Math.exp(-0.15 * Math.pow(f - 8.7, 2.0))\n            + (0.6 + 0.04 * value) * 0.001 * Math.pow(f, 4.0);\n        return ath;\n    }\n\n    this.ATHformula = function (f, gfp) {\n        var ath;\n        switch (gfp.ATHtype) {\n            case 0:\n                ath = ATHformula_GB(f, 9);\n                break;\n            case 1:\n                // over sensitive, should probably be removed\n                ath = ATHformula_GB(f, -1);\n                break;\n            case 2:\n                ath = ATHformula_GB(f, 0);\n                break;\n            case 3:\n                // modification of GB formula by Roel\n                ath = ATHformula_GB(f, 1) + 6;\n                break;\n            case 4:\n                ath = ATHformula_GB(f, gfp.ATHcurve);\n                break;\n            default:\n                ath = ATHformula_GB(f, 0);\n                break;\n        }\n        return ath;\n    }\n\n}\n\nmodule.exports = PsyModel;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\n\nfunction FFT() {\n\n    var window = new_float(Encoder.BLKSIZE);\n    var window_s = new_float(Encoder.BLKSIZE_s / 2);\n\n    var costab = [\n        9.238795325112867e-01, 3.826834323650898e-01,\n        9.951847266721969e-01, 9.801714032956060e-02,\n        9.996988186962042e-01, 2.454122852291229e-02,\n        9.999811752826011e-01, 6.135884649154475e-03\n    ];\n\n    function fht(fz, fzPos, n) {\n        var tri = 0;\n        var k4;\n        var fi;\n        var gi;\n\n        n <<= 1;\n        /* to get BLKSIZE, because of 3DNow! ASM routine */\n        var fn = fzPos + n;\n        k4 = 4;\n        do {\n            var s1, c1;\n            var i, k1, k2, k3, kx;\n            kx = k4 >> 1;\n            k1 = k4;\n            k2 = k4 << 1;\n            k3 = k2 + k1;\n            k4 = k2 << 1;\n            fi = fzPos;\n            gi = fi + kx;\n            do {\n                var f0, f1, f2, f3;\n                f1 = fz[fi + 0] - fz[fi + k1];\n                f0 = fz[fi + 0] + fz[fi + k1];\n                f3 = fz[fi + k2] - fz[fi + k3];\n                f2 = fz[fi + k2] + fz[fi + k3];\n                fz[fi + k2] = f0 - f2;\n                fz[fi + 0] = f0 + f2;\n                fz[fi + k3] = f1 - f3;\n                fz[fi + k1] = f1 + f3;\n                f1 = fz[gi + 0] - fz[gi + k1];\n                f0 = fz[gi + 0] + fz[gi + k1];\n                f3 = (Util.SQRT2 * fz[gi + k3]);\n                f2 = (Util.SQRT2 * fz[gi + k2]);\n                fz[gi + k2] = f0 - f2;\n                fz[gi + 0] = f0 + f2;\n                fz[gi + k3] = f1 - f3;\n                fz[gi + k1] = f1 + f3;\n                gi += k4;\n                fi += k4;\n            } while (fi < fn);\n            c1 = costab[tri + 0];\n            s1 = costab[tri + 1];\n            for (i = 1; i < kx; i++) {\n                var c2, s2;\n                c2 = 1 - (2 * s1) * s1;\n                s2 = (2 * s1) * c1;\n                fi = fzPos + i;\n                gi = fzPos + k1 - i;\n                do {\n                    var a, b, g0, f0, f1, g1, f2, g2, f3, g3;\n                    b = s2 * fz[fi + k1] - c2 * fz[gi + k1];\n                    a = c2 * fz[fi + k1] + s2 * fz[gi + k1];\n                    f1 = fz[fi + 0] - a;\n                    f0 = fz[fi + 0] + a;\n                    g1 = fz[gi + 0] - b;\n                    g0 = fz[gi + 0] + b;\n                    b = s2 * fz[fi + k3] - c2 * fz[gi + k3];\n                    a = c2 * fz[fi + k3] + s2 * fz[gi + k3];\n                    f3 = fz[fi + k2] - a;\n                    f2 = fz[fi + k2] + a;\n                    g3 = fz[gi + k2] - b;\n                    g2 = fz[gi + k2] + b;\n                    b = s1 * f2 - c1 * g3;\n                    a = c1 * f2 + s1 * g3;\n                    fz[fi + k2] = f0 - a;\n                    fz[fi + 0] = f0 + a;\n                    fz[gi + k3] = g1 - b;\n                    fz[gi + k1] = g1 + b;\n                    b = c1 * g2 - s1 * f3;\n                    a = s1 * g2 + c1 * f3;\n                    fz[gi + k2] = g0 - a;\n                    fz[gi + 0] = g0 + a;\n                    fz[fi + k3] = f1 - b;\n                    fz[fi + k1] = f1 + b;\n                    gi += k4;\n                    fi += k4;\n                } while (fi < fn);\n                c2 = c1;\n                c1 = c2 * costab[tri + 0] - s1 * costab[tri + 1];\n                s1 = c2 * costab[tri + 1] + s1 * costab[tri + 0];\n            }\n            tri += 2;\n        } while (k4 < n);\n    }\n\n    var rv_tbl = [0x00, 0x80, 0x40,\n        0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10,\n        0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70,\n        0xf0, 0x08, 0x88, 0x48, 0xc8, 0x28,\n        0xa8, 0x68, 0xe8, 0x18, 0x98, 0x58,\n        0xd8, 0x38, 0xb8, 0x78, 0xf8, 0x04,\n        0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64,\n        0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34,\n        0xb4, 0x74, 0xf4, 0x0c, 0x8c, 0x4c,\n        0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c,\n        0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c,\n        0xfc, 0x02, 0x82, 0x42, 0xc2, 0x22,\n        0xa2, 0x62, 0xe2, 0x12, 0x92, 0x52,\n        0xd2, 0x32, 0xb2, 0x72, 0xf2, 0x0a,\n        0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a,\n        0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a,\n        0xba, 0x7a, 0xfa, 0x06, 0x86, 0x46,\n        0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16,\n        0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76,\n        0xf6, 0x0e, 0x8e, 0x4e, 0xce, 0x2e,\n        0xae, 0x6e, 0xee, 0x1e, 0x9e, 0x5e,\n        0xde, 0x3e, 0xbe, 0x7e, 0xfe];\n\n    this.fft_short = function (gfc, x_real, chn, buffer, bufPos) {\n        for (var b = 0; b < 3; b++) {\n            var x = Encoder.BLKSIZE_s / 2;\n            var k = 0xffff & ((576 / 3) * (b + 1));\n            var j = Encoder.BLKSIZE_s / 8 - 1;\n            do {\n                var f0, f1, f2, f3, w;\n                var i = rv_tbl[j << 2] & 0xff;\n\n                f0 = window_s[i] * buffer[chn][bufPos + i + k];\n                w = window_s[0x7f - i] * buffer[chn][bufPos + i + k + 0x80];\n                f1 = f0 - w;\n                f0 = f0 + w;\n                f2 = window_s[i + 0x40] * buffer[chn][bufPos + i + k + 0x40];\n                w = window_s[0x3f - i] * buffer[chn][bufPos + i + k + 0xc0];\n                f3 = f2 - w;\n                f2 = f2 + w;\n\n                x -= 4;\n                x_real[b][x + 0] = f0 + f2;\n                x_real[b][x + 2] = f0 - f2;\n                x_real[b][x + 1] = f1 + f3;\n                x_real[b][x + 3] = f1 - f3;\n\n                f0 = window_s[i + 0x01] * buffer[chn][bufPos + i + k + 0x01];\n                w = window_s[0x7e - i] * buffer[chn][bufPos + i + k + 0x81];\n                f1 = f0 - w;\n                f0 = f0 + w;\n                f2 = window_s[i + 0x41] * buffer[chn][bufPos + i + k + 0x41];\n                w = window_s[0x3e - i] * buffer[chn][bufPos + i + k + 0xc1];\n                f3 = f2 - w;\n                f2 = f2 + w;\n\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 0] = f0 + f2;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 2] = f0 - f2;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 1] = f1 + f3;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 3] = f1 - f3;\n            } while (--j >= 0);\n\n            fht(x_real[b], x, Encoder.BLKSIZE_s / 2);\n            /* BLKSIZE_s/2 because of 3DNow! ASM routine */\n            /* BLKSIZE/2 because of 3DNow! ASM routine */\n        }\n    }\n\n    this.fft_long = function (gfc, y, chn, buffer, bufPos) {\n        var jj = Encoder.BLKSIZE / 8 - 1;\n        var x = Encoder.BLKSIZE / 2;\n\n        do {\n            var f0, f1, f2, f3, w;\n            var i = rv_tbl[jj] & 0xff;\n            f0 = window[i] * buffer[chn][bufPos + i];\n            w = window[i + 0x200] * buffer[chn][bufPos + i + 0x200];\n            f1 = f0 - w;\n            f0 = f0 + w;\n            f2 = window[i + 0x100] * buffer[chn][bufPos + i + 0x100];\n            w = window[i + 0x300] * buffer[chn][bufPos + i + 0x300];\n            f3 = f2 - w;\n            f2 = f2 + w;\n\n            x -= 4;\n            y[x + 0] = f0 + f2;\n            y[x + 2] = f0 - f2;\n            y[x + 1] = f1 + f3;\n            y[x + 3] = f1 - f3;\n\n            f0 = window[i + 0x001] * buffer[chn][bufPos + i + 0x001];\n            w = window[i + 0x201] * buffer[chn][bufPos + i + 0x201];\n            f1 = f0 - w;\n            f0 = f0 + w;\n            f2 = window[i + 0x101] * buffer[chn][bufPos + i + 0x101];\n            w = window[i + 0x301] * buffer[chn][bufPos + i + 0x301];\n            f3 = f2 - w;\n            f2 = f2 + w;\n\n            y[x + Encoder.BLKSIZE / 2 + 0] = f0 + f2;\n            y[x + Encoder.BLKSIZE / 2 + 2] = f0 - f2;\n            y[x + Encoder.BLKSIZE / 2 + 1] = f1 + f3;\n            y[x + Encoder.BLKSIZE / 2 + 3] = f1 - f3;\n        } while (--jj >= 0);\n\n        fht(y, x, Encoder.BLKSIZE / 2);\n        /* BLKSIZE/2 because of 3DNow! ASM routine */\n    }\n\n    this.init_fft = function (gfc) {\n        /* The type of window used here will make no real difference, but */\n        /*\n         * in the interest of merging nspsytune stuff - switch to blackman\n         * window\n         */\n        for (var i = 0; i < Encoder.BLKSIZE; i++)\n            /* blackman window */\n            window[i] = (0.42 - 0.5 * Math.cos(2 * Math.PI * (i + .5)\n                / Encoder.BLKSIZE) + 0.08 * Math.cos(4 * Math.PI * (i + .5)\n                / Encoder.BLKSIZE));\n\n        for (var i = 0; i < Encoder.BLKSIZE_s / 2; i++)\n            window_s[i] = (0.5 * (1.0 - Math.cos(2.0 * Math.PI\n                * (i + 0.5) / Encoder.BLKSIZE_s)));\n\n    }\n\n}\n\nmodule.exports = FFT;\n","/*\n *      MP3 window subband -> subband filtering -> mdct routine\n *\n *      Copyright (c) 1999-2000 Takehiro Tominaga\n *\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Library General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n/*\n *         Special Thanks to Patrick De Smet for your advices.\n */\n\n/* $Id: NewMDCT.java,v 1.11 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n//import java.util.Arrays;\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\n\n\nfunction NewMDCT() {\n\n\tvar enwindow = [\n\t\t\t-4.77e-07 * 0.740951125354959 / 2.384e-06,\n\t\t\t1.03951e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.53674e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t2.841473e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t3.5758972e-02 * 0.740951125354959 / 2.384e-06,\n\t\t\t3.401756e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.83715e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.9182e-05 * 0.740951125354959 / 2.384e-06, /* 15 */\n\t\t\t1.2398e-05 * 0.740951125354959 / 2.384e-06,\n\t\t\t1.91212e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t2.283096e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t1.6994476e-02 * 0.740951125354959 / 2.384e-06,\n\t\t\t-1.8756866e-02 * 0.740951125354959 / 2.384e-06,\n\t\t\t-2.630711e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t-2.47478e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t-1.4782e-05 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.063471690191471e-01, 1.960342806591213e-01,\n\n\t\t\t-4.77e-07 * 0.773010453362737 / 2.384e-06,\n\t\t\t1.05858e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t9.30786e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t2.521515e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t3.5694122e-02 * 0.773010453362737 / 2.384e-06,\n\t\t\t3.643036e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t9.91821e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t9.6321e-05 * 0.773010453362737 / 2.384e-06, /* 14 */\n\t\t\t1.1444e-05 * 0.773010453362737 / 2.384e-06,\n\t\t\t1.65462e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t2.110004e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t1.6112804e-02 * 0.773010453362737 / 2.384e-06,\n\t\t\t-1.9634247e-02 * 0.773010453362737 / 2.384e-06,\n\t\t\t-2.803326e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t-2.77042e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t-1.6689e-05 * 0.773010453362737 / 2.384e-06,\n\t\t\t8.206787908286602e-01, 3.901806440322567e-01,\n\n\t\t\t-4.77e-07 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.07288e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t9.02653e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t2.174854e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t3.5586357e-02 * 0.803207531480645 / 2.384e-06,\n\t\t\t3.858566e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t9.95159e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t9.3460e-05 * 0.803207531480645 / 2.384e-06, /* 13 */\n\t\t\t1.0014e-05 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.40190e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.937389e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.5233517e-02 * 0.803207531480645 / 2.384e-06,\n\t\t\t-2.0506859e-02 * 0.803207531480645 / 2.384e-06,\n\t\t\t-2.974033e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t-3.07560e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t-1.8120e-05 * 0.803207531480645 / 2.384e-06,\n\t\t\t7.416505462720353e-01, 5.805693545089249e-01,\n\n\t\t\t-4.77e-07 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.08242e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t8.68797e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.800537e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t3.5435200e-02 * 0.831469612302545 / 2.384e-06,\n\t\t\t4.049301e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t9.94205e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t9.0599e-05 * 0.831469612302545 / 2.384e-06, /* 12 */\n\t\t\t9.060e-06 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.16348e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.766682e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.4358521e-02 * 0.831469612302545 / 2.384e-06,\n\t\t\t-2.1372318e-02 * 0.831469612302545 / 2.384e-06,\n\t\t\t-3.14188e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t-3.39031e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t-1.9550e-05 * 0.831469612302545 / 2.384e-06,\n\t\t\t6.681786379192989e-01, 7.653668647301797e-01,\n\n\t\t\t-4.77e-07 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.08719e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t8.29220e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.399517e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t3.5242081e-02 * 0.857728610000272 / 2.384e-06,\n\t\t\t4.215240e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t9.89437e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t8.7261e-05 * 0.857728610000272 / 2.384e-06, /* 11 */\n\t\t\t8.106e-06 * 0.857728610000272 / 2.384e-06,\n\t\t\t9.3937e-05 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.597881e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.3489246e-02 * 0.857728610000272 / 2.384e-06,\n\t\t\t-2.2228718e-02 * 0.857728610000272 / 2.384e-06,\n\t\t\t-3.306866e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t-3.71456e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t-2.1458e-05 * 0.857728610000272 / 2.384e-06,\n\t\t\t5.993769336819237e-01, 9.427934736519954e-01,\n\n\t\t\t-4.77e-07 * 0.881921264348355 / 2.384e-06,\n\t\t\t1.08719e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t7.8392e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t9.71317e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t3.5007000e-02 * 0.881921264348355 / 2.384e-06,\n\t\t\t4.357815e-03 * 0.881921264348355 / 2.384e-06,\n\t\t\t9.80854e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t8.3923e-05 * 0.881921264348355 / 2.384e-06, /* 10 */\n\t\t\t7.629e-06 * 0.881921264348355 / 2.384e-06,\n\t\t\t7.2956e-05 * 0.881921264348355 / 2.384e-06,\n\t\t\t1.432419e-03 * 0.881921264348355 / 2.384e-06,\n\t\t\t1.2627602e-02 * 0.881921264348355 / 2.384e-06,\n\t\t\t-2.3074150e-02 * 0.881921264348355 / 2.384e-06,\n\t\t\t-3.467083e-03 * 0.881921264348355 / 2.384e-06,\n\t\t\t-4.04358e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t-2.3365e-05 * 0.881921264348355 / 2.384e-06,\n\t\t\t5.345111359507916e-01, 1.111140466039205e+00,\n\n\t\t\t-9.54e-07 * 0.903989293123443 / 2.384e-06,\n\t\t\t1.08242e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t7.31945e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t5.15938e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t3.4730434e-02 * 0.903989293123443 / 2.384e-06,\n\t\t\t4.477024e-03 * 0.903989293123443 / 2.384e-06,\n\t\t\t9.68933e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t8.0585e-05 * 0.903989293123443 / 2.384e-06, /* 9 */\n\t\t\t6.676e-06 * 0.903989293123443 / 2.384e-06,\n\t\t\t5.2929e-05 * 0.903989293123443 / 2.384e-06,\n\t\t\t1.269817e-03 * 0.903989293123443 / 2.384e-06,\n\t\t\t1.1775017e-02 * 0.903989293123443 / 2.384e-06,\n\t\t\t-2.3907185e-02 * 0.903989293123443 / 2.384e-06,\n\t\t\t-3.622532e-03 * 0.903989293123443 / 2.384e-06,\n\t\t\t-4.38213e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t-2.5272e-05 * 0.903989293123443 / 2.384e-06,\n\t\t\t4.729647758913199e-01, 1.268786568327291e+00,\n\n\t\t\t-9.54e-07 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t1.06812e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t6.74248e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t3.3379e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t3.4412861e-02 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t4.573822e-03 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t9.54151e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t7.6771e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t6.199e-06 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t3.4332e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t1.111031e-03 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t1.0933399e-02 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-2.4725437e-02 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-3.771782e-03 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-4.72546e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-2.7657e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t4.1421356237309504879e-01, /* tan(PI/8) */\n\t\t\t1.414213562373095e+00,\n\n\t\t\t-9.54e-07 * 0.941544065183021 / 2.384e-06,\n\t\t\t1.05381e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t6.10352e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t-4.75883e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t3.4055710e-02 * 0.941544065183021 / 2.384e-06,\n\t\t\t4.649162e-03 * 0.941544065183021 / 2.384e-06,\n\t\t\t9.35555e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t7.3433e-05 * 0.941544065183021 / 2.384e-06, /* 7 */\n\t\t\t5.245e-06 * 0.941544065183021 / 2.384e-06,\n\t\t\t1.7166e-05 * 0.941544065183021 / 2.384e-06,\n\t\t\t9.56535e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t1.0103703e-02 * 0.941544065183021 / 2.384e-06,\n\t\t\t-2.5527000e-02 * 0.941544065183021 / 2.384e-06,\n\t\t\t-3.914356e-03 * 0.941544065183021 / 2.384e-06,\n\t\t\t-5.07355e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t-3.0041e-05 * 0.941544065183021 / 2.384e-06,\n\t\t\t3.578057213145241e-01, 1.546020906725474e+00,\n\n\t\t\t-9.54e-07 * 0.956940335732209 / 2.384e-06,\n\t\t\t1.02520e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t5.39303e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t-1.011848e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t3.3659935e-02 * 0.956940335732209 / 2.384e-06,\n\t\t\t4.703045e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t9.15051e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t7.0095e-05 * 0.956940335732209 / 2.384e-06, /* 6 */\n\t\t\t4.768e-06 * 0.956940335732209 / 2.384e-06,\n\t\t\t9.54e-07 * 0.956940335732209 / 2.384e-06,\n\t\t\t8.06808e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t9.287834e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t-2.6310921e-02 * 0.956940335732209 / 2.384e-06,\n\t\t\t-4.048824e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t-5.42164e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t-3.2425e-05 * 0.956940335732209 / 2.384e-06,\n\t\t\t3.033466836073424e-01, 1.662939224605090e+00,\n\n\t\t\t-1.431e-06 * 0.970031253194544 / 2.384e-06,\n\t\t\t9.9182e-05 * 0.970031253194544 / 2.384e-06,\n\t\t\t4.62532e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t-1.573563e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t3.3225536e-02 * 0.970031253194544 / 2.384e-06,\n\t\t\t4.737377e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t8.91685e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t6.6280e-05 * 0.970031253194544 / 2.384e-06, /* 5 */\n\t\t\t4.292e-06 * 0.970031253194544 / 2.384e-06,\n\t\t\t-1.3828e-05 * 0.970031253194544 / 2.384e-06,\n\t\t\t6.61850e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t8.487225e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t-2.7073860e-02 * 0.970031253194544 / 2.384e-06,\n\t\t\t-4.174709e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t-5.76973e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t-3.4809e-05 * 0.970031253194544 / 2.384e-06,\n\t\t\t2.504869601913055e-01, 1.763842528696710e+00,\n\n\t\t\t-1.431e-06 * 0.98078528040323 / 2.384e-06,\n\t\t\t9.5367e-05 * 0.98078528040323 / 2.384e-06,\n\t\t\t3.78609e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t-2.161503e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t3.2754898e-02 * 0.98078528040323 / 2.384e-06,\n\t\t\t4.752159e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t8.66413e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t6.2943e-05 * 0.98078528040323 / 2.384e-06, /* 4 */\n\t\t\t3.815e-06 * 0.98078528040323 / 2.384e-06,\n\t\t\t-2.718e-05 * 0.98078528040323 / 2.384e-06,\n\t\t\t5.22137e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t7.703304e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t-2.7815342e-02 * 0.98078528040323 / 2.384e-06,\n\t\t\t-4.290581e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t-6.11782e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t-3.7670e-05 * 0.98078528040323 / 2.384e-06,\n\t\t\t1.989123673796580e-01, 1.847759065022573e+00,\n\n\t\t\t-1.907e-06 * 0.989176509964781 / 2.384e-06,\n\t\t\t9.0122e-05 * 0.989176509964781 / 2.384e-06,\n\t\t\t2.88486e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t-2.774239e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t3.2248020e-02 * 0.989176509964781 / 2.384e-06,\n\t\t\t4.748821e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t8.38757e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t5.9605e-05 * 0.989176509964781 / 2.384e-06, /* 3 */\n\t\t\t3.338e-06 * 0.989176509964781 / 2.384e-06,\n\t\t\t-3.9577e-05 * 0.989176509964781 / 2.384e-06,\n\t\t\t3.88145e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t6.937027e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t-2.8532982e-02 * 0.989176509964781 / 2.384e-06,\n\t\t\t-4.395962e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t-6.46591e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t-4.0531e-05 * 0.989176509964781 / 2.384e-06,\n\t\t\t1.483359875383474e-01, 1.913880671464418e+00,\n\n\t\t\t-1.907e-06 * 0.995184726672197 / 2.384e-06,\n\t\t\t8.4400e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t1.91689e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t-3.411293e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t3.1706810e-02 * 0.995184726672197 / 2.384e-06,\n\t\t\t4.728317e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t8.09669e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t5.579e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t3.338e-06 * 0.995184726672197 / 2.384e-06,\n\t\t\t-5.0545e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t2.59876e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t6.189346e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t-2.9224873e-02 * 0.995184726672197 / 2.384e-06,\n\t\t\t-4.489899e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t-6.80923e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t-4.3392e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t9.849140335716425e-02, 1.961570560806461e+00,\n\n\t\t\t-2.384e-06 * 0.998795456205172 / 2.384e-06,\n\t\t\t7.7724e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t8.8215e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t-4.072189e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t3.1132698e-02 * 0.998795456205172 / 2.384e-06,\n\t\t\t4.691124e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t7.79152e-04 * 0.998795456205172 / 2.384e-06,\n\t\t\t5.2929e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t2.861e-06 * 0.998795456205172 / 2.384e-06,\n\t\t\t-6.0558e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t1.37329e-04 * 0.998795456205172 / 2.384e-06,\n\t\t\t5.462170e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t-2.9890060e-02 * 0.998795456205172 / 2.384e-06,\n\t\t\t-4.570484e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t-7.14302e-04 * 0.998795456205172 / 2.384e-06,\n\t\t\t-4.6253e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t4.912684976946725e-02, 1.990369453344394e+00,\n\n\t\t\t3.5780907e-02 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t1.7876148e-02 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t3.134727e-03 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t2.457142e-03 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t9.71317e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t2.18868e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t1.01566e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t1.3828e-05 * Util.SQRT2 * 0.5 / 2.384e-06,\n\n\t\t\t3.0526638e-02 / 2.384e-06, 4.638195e-03 / 2.384e-06,\n\t\t\t7.47204e-04 / 2.384e-06, 4.9591e-05 / 2.384e-06,\n\t\t\t4.756451e-03 / 2.384e-06, 2.1458e-05 / 2.384e-06,\n\t\t\t-6.9618e-05 / 2.384e-06, /* 2.384e-06/2.384e-06 */\n\t];\n\n\tvar NS = 12;\n\tvar NL = 36;\n\n\tvar win = [\n\t    [\n\t     2.382191739347913e-13,\n\t     6.423305872147834e-13,\n\t     9.400849094049688e-13,\n\t     1.122435026096556e-12,\n\t     1.183840321267481e-12,\n\t     1.122435026096556e-12,\n\t     9.400849094049690e-13,\n\t     6.423305872147839e-13,\n\t     2.382191739347918e-13,\n\n\t     5.456116108943412e-12,\n\t     4.878985199565852e-12,\n\t     4.240448995017367e-12,\n\t     3.559909094758252e-12,\n\t     2.858043359288075e-12,\n\t     2.156177623817898e-12,\n\t     1.475637723558783e-12,\n\t     8.371015190102974e-13,\n\t     2.599706096327376e-13,\n\n\t     -5.456116108943412e-12,\n\t     -4.878985199565852e-12,\n\t     -4.240448995017367e-12,\n\t     -3.559909094758252e-12,\n\t     -2.858043359288076e-12,\n\t     -2.156177623817898e-12,\n\t     -1.475637723558783e-12,\n\t     -8.371015190102975e-13,\n\t     -2.599706096327376e-13,\n\n\t     -2.382191739347923e-13,\n\t     -6.423305872147843e-13,\n\t     -9.400849094049696e-13,\n\t     -1.122435026096556e-12,\n\t     -1.183840321267481e-12,\n\t     -1.122435026096556e-12,\n\t     -9.400849094049694e-13,\n\t     -6.423305872147840e-13,\n\t     -2.382191739347918e-13,\n\t     ],\n\t    [\n\t     2.382191739347913e-13,\n\t     6.423305872147834e-13,\n\t     9.400849094049688e-13,\n\t     1.122435026096556e-12,\n\t     1.183840321267481e-12,\n\t     1.122435026096556e-12,\n\t     9.400849094049688e-13,\n\t     6.423305872147841e-13,\n\t     2.382191739347918e-13,\n\n\t     5.456116108943413e-12,\n\t     4.878985199565852e-12,\n\t     4.240448995017367e-12,\n\t     3.559909094758253e-12,\n\t     2.858043359288075e-12,\n\t     2.156177623817898e-12,\n\t     1.475637723558782e-12,\n\t     8.371015190102975e-13,\n\t     2.599706096327376e-13,\n\n\t     -5.461314069809755e-12,\n\t     -4.921085770524055e-12,\n\t     -4.343405037091838e-12,\n\t     -3.732668368707687e-12,\n\t     -3.093523840190885e-12,\n\t     -2.430835727329465e-12,\n\t     -1.734679010007751e-12,\n\t     -9.748253656609281e-13,\n\t     -2.797435120168326e-13,\n\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     -2.283748241799531e-13,\n\t     -4.037858874020686e-13,\n\t     -2.146547464825323e-13,\n\t     ],\n\t    [\n\t     1.316524975873958e-01, /* win[SHORT_TYPE] */\n\t     4.142135623730950e-01,\n\t     7.673269879789602e-01,\n\n\t     1.091308501069271e+00, /* tantab_l */\n\t     1.303225372841206e+00,\n\t     1.569685577117490e+00,\n\t     1.920982126971166e+00,\n\t     2.414213562373094e+00,\n\t     3.171594802363212e+00,\n\t     4.510708503662055e+00,\n\t     7.595754112725146e+00,\n\t     2.290376554843115e+01,\n\n\t     0.98480775301220802032, /* cx */\n\t     0.64278760968653936292,\n\t     0.34202014332566882393,\n\t     0.93969262078590842791,\n\t     -0.17364817766693030343,\n\t     -0.76604444311897790243,\n\t     0.86602540378443870761,\n\t     0.500000000000000e+00,\n\n\t     -5.144957554275265e-01, /* ca */\n\t     -4.717319685649723e-01,\n\t     -3.133774542039019e-01,\n\t     -1.819131996109812e-01,\n\t     -9.457419252642064e-02,\n\t     -4.096558288530405e-02,\n\t     -1.419856857247115e-02,\n\t     -3.699974673760037e-03,\n\n\t     8.574929257125442e-01, /* cs */\n\t     8.817419973177052e-01,\n\t     9.496286491027329e-01,\n\t     9.833145924917901e-01,\n\t     9.955178160675857e-01,\n\t     9.991605581781475e-01,\n\t     9.998991952444470e-01,\n\t     9.999931550702802e-01,\n\t     ],\n\t    [\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     2.283748241799531e-13,\n\t     4.037858874020686e-13,\n\t     2.146547464825323e-13,\n\n\t     5.461314069809755e-12,\n\t     4.921085770524055e-12,\n\t     4.343405037091838e-12,\n\t     3.732668368707687e-12,\n\t     3.093523840190885e-12,\n\t     2.430835727329466e-12,\n\t     1.734679010007751e-12,\n\t     9.748253656609281e-13,\n\t     2.797435120168326e-13,\n\n\t     -5.456116108943413e-12,\n\t     -4.878985199565852e-12,\n\t     -4.240448995017367e-12,\n\t     -3.559909094758253e-12,\n\t     -2.858043359288075e-12,\n\t     -2.156177623817898e-12,\n\t     -1.475637723558782e-12,\n\t     -8.371015190102975e-13,\n\t     -2.599706096327376e-13,\n\n\t     -2.382191739347913e-13,\n\t     -6.423305872147834e-13,\n\t     -9.400849094049688e-13,\n\t     -1.122435026096556e-12,\n\t     -1.183840321267481e-12,\n\t     -1.122435026096556e-12,\n\t     -9.400849094049688e-13,\n\t     -6.423305872147841e-13,\n\t     -2.382191739347918e-13,\n\t     ]\n\t];\n\n\tvar tantab_l = win[Encoder.SHORT_TYPE];\n\tvar cx = win[Encoder.SHORT_TYPE];\n\tvar ca = win[Encoder.SHORT_TYPE];\n\tvar cs = win[Encoder.SHORT_TYPE];\n\n\t/**\n\t * new IDCT routine written by Takehiro TOMINAGA\n\t *\n\t * PURPOSE: Overlapping window on PCM samples<BR>\n\t *\n\t * SEMANTICS:<BR>\n\t * 32 16-bit pcm samples are scaled to fractional 2's complement and\n\t * concatenated to the end of the window buffer #x#. The updated window\n\t * buffer #x# is then windowed by the analysis window #c# to produce the\n\t * windowed sample #z#\n\t */\n\tvar order = [\n\t    0, 1, 16, 17, 8, 9, 24, 25, 4, 5, 20, 21, 12, 13, 28, 29,\n\t    2, 3, 18, 19, 10, 11, 26, 27, 6, 7, 22, 23, 14, 15, 30, 31\n\t];\n\n\t/**\n\t * returns sum_j=0^31 a[j]*cos(PI*j*(k+1/2)/32), 0<=k<32\n\t */\n\tfunction window_subband(x1, x1Pos, a) {\n\t\tvar wp = 10;\n\n\t\tvar x2 = x1Pos + 238 - 14 - 286;\n\n\t\tfor (var i = -15; i < 0; i++) {\n\t\t\tvar w, s, t;\n\n\t\t\tw = enwindow[wp + -10];\n\t\t\ts = x1[x2 + -224] * w;\n\t\t\tt = x1[x1Pos + 224] * w;\n\t\t\tw = enwindow[wp + -9];\n\t\t\ts += x1[x2 + -160] * w;\n\t\t\tt += x1[x1Pos + 160] * w;\n\t\t\tw = enwindow[wp + -8];\n\t\t\ts += x1[x2 + -96] * w;\n\t\t\tt += x1[x1Pos + 96] * w;\n\t\t\tw = enwindow[wp + -7];\n\t\t\ts += x1[x2 + -32] * w;\n\t\t\tt += x1[x1Pos + 32] * w;\n\t\t\tw = enwindow[wp + -6];\n\t\t\ts += x1[x2 + 32] * w;\n\t\t\tt += x1[x1Pos + -32] * w;\n\t\t\tw = enwindow[wp + -5];\n\t\t\ts += x1[x2 + 96] * w;\n\t\t\tt += x1[x1Pos + -96] * w;\n\t\t\tw = enwindow[wp + -4];\n\t\t\ts += x1[x2 + 160] * w;\n\t\t\tt += x1[x1Pos + -160] * w;\n\t\t\tw = enwindow[wp + -3];\n\t\t\ts += x1[x2 + 224] * w;\n\t\t\tt += x1[x1Pos + -224] * w;\n\n\t\t\tw = enwindow[wp + -2];\n\t\t\ts += x1[x1Pos + -256] * w;\n\t\t\tt -= x1[x2 + 256] * w;\n\t\t\tw = enwindow[wp + -1];\n\t\t\ts += x1[x1Pos + -192] * w;\n\t\t\tt -= x1[x2 + 192] * w;\n\t\t\tw = enwindow[wp + 0];\n\t\t\ts += x1[x1Pos + -128] * w;\n\t\t\tt -= x1[x2 + 128] * w;\n\t\t\tw = enwindow[wp + 1];\n\t\t\ts += x1[x1Pos + -64] * w;\n\t\t\tt -= x1[x2 + 64] * w;\n\t\t\tw = enwindow[wp + 2];\n\t\t\ts += x1[x1Pos + 0] * w;\n\t\t\tt -= x1[x2 + 0] * w;\n\t\t\tw = enwindow[wp + 3];\n\t\t\ts += x1[x1Pos + 64] * w;\n\t\t\tt -= x1[x2 + -64] * w;\n\t\t\tw = enwindow[wp + 4];\n\t\t\ts += x1[x1Pos + 128] * w;\n\t\t\tt -= x1[x2 + -128] * w;\n\t\t\tw = enwindow[wp + 5];\n\t\t\ts += x1[x1Pos + 192] * w;\n\t\t\tt -= x1[x2 + -192] * w;\n\n\t\t\t/*\n\t\t\t * this multiplyer could be removed, but it needs more 256 FLOAT\n\t\t\t * data. thinking about the data cache performance, I think we\n\t\t\t * should not use such a huge table. tt 2000/Oct/25\n\t\t\t */\n\t\t\ts *= enwindow[wp + 6];\n\t\t\tw = t - s;\n\t\t\ta[30 + i * 2] = t + s;\n\t\t\ta[31 + i * 2] = enwindow[wp + 7] * w;\n\t\t\twp += 18;\n\t\t\tx1Pos--;\n\t\t\tx2++;\n\t\t}\n\t\t{\n\t\t\tvar s, t, u, v;\n\t\t\tt = x1[x1Pos + -16] * enwindow[wp + -10];\n\t\t\ts = x1[x1Pos + -32] * enwindow[wp + -2];\n\t\t\tt += (x1[x1Pos + -48] - x1[x1Pos + 16]) * enwindow[wp + -9];\n\t\t\ts += x1[x1Pos + -96] * enwindow[wp + -1];\n\t\t\tt += (x1[x1Pos + -80] + x1[x1Pos + 48]) * enwindow[wp + -8];\n\t\t\ts += x1[x1Pos + -160] * enwindow[wp + 0];\n\t\t\tt += (x1[x1Pos + -112] - x1[x1Pos + 80]) * enwindow[wp + -7];\n\t\t\ts += x1[x1Pos + -224] * enwindow[wp + 1];\n\t\t\tt += (x1[x1Pos + -144] + x1[x1Pos + 112]) * enwindow[wp + -6];\n\t\t\ts -= x1[x1Pos + 32] * enwindow[wp + 2];\n\t\t\tt += (x1[x1Pos + -176] - x1[x1Pos + 144]) * enwindow[wp + -5];\n\t\t\ts -= x1[x1Pos + 96] * enwindow[wp + 3];\n\t\t\tt += (x1[x1Pos + -208] + x1[x1Pos + 176]) * enwindow[wp + -4];\n\t\t\ts -= x1[x1Pos + 160] * enwindow[wp + 4];\n\t\t\tt += (x1[x1Pos + -240] - x1[x1Pos + 208]) * enwindow[wp + -3];\n\t\t\ts -= x1[x1Pos + 224];\n\n\t\t\tu = s - t;\n\t\t\tv = s + t;\n\n\t\t\tt = a[14];\n\t\t\ts = a[15] - t;\n\n\t\t\ta[31] = v + t; /* A0 */\n\t\t\ta[30] = u + s; /* A1 */\n\t\t\ta[15] = u - s; /* A2 */\n\t\t\ta[14] = v - t; /* A3 */\n\t\t}\n\t\t{\n\t\t\tvar xr;\n\t\t\txr = a[28] - a[0];\n\t\t\ta[0] += a[28];\n\t\t\ta[28] = xr * enwindow[wp + -2 * 18 + 7];\n\t\t\txr = a[29] - a[1];\n\t\t\ta[1] += a[29];\n\t\t\ta[29] = xr * enwindow[wp + -2 * 18 + 7];\n\n\t\t\txr = a[26] - a[2];\n\t\t\ta[2] += a[26];\n\t\t\ta[26] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = a[27] - a[3];\n\t\t\ta[3] += a[27];\n\t\t\ta[27] = xr * enwindow[wp + -4 * 18 + 7];\n\n\t\t\txr = a[24] - a[4];\n\t\t\ta[4] += a[24];\n\t\t\ta[24] = xr * enwindow[wp + -6 * 18 + 7];\n\t\t\txr = a[25] - a[5];\n\t\t\ta[5] += a[25];\n\t\t\ta[25] = xr * enwindow[wp + -6 * 18 + 7];\n\n\t\t\txr = a[22] - a[6];\n\t\t\ta[6] += a[22];\n\t\t\ta[22] = xr * Util.SQRT2;\n\t\t\txr = a[23] - a[7];\n\t\t\ta[7] += a[23];\n\t\t\ta[23] = xr * Util.SQRT2 - a[7];\n\t\t\ta[7] -= a[6];\n\t\t\ta[22] -= a[7];\n\t\t\ta[23] -= a[22];\n\n\t\t\txr = a[6];\n\t\t\ta[6] = a[31] - xr;\n\t\t\ta[31] = a[31] + xr;\n\t\t\txr = a[7];\n\t\t\ta[7] = a[30] - xr;\n\t\t\ta[30] = a[30] + xr;\n\t\t\txr = a[22];\n\t\t\ta[22] = a[15] - xr;\n\t\t\ta[15] = a[15] + xr;\n\t\t\txr = a[23];\n\t\t\ta[23] = a[14] - xr;\n\t\t\ta[14] = a[14] + xr;\n\n\t\t\txr = a[20] - a[8];\n\t\t\ta[8] += a[20];\n\t\t\ta[20] = xr * enwindow[wp + -10 * 18 + 7];\n\t\t\txr = a[21] - a[9];\n\t\t\ta[9] += a[21];\n\t\t\ta[21] = xr * enwindow[wp + -10 * 18 + 7];\n\n\t\t\txr = a[18] - a[10];\n\t\t\ta[10] += a[18];\n\t\t\ta[18] = xr * enwindow[wp + -12 * 18 + 7];\n\t\t\txr = a[19] - a[11];\n\t\t\ta[11] += a[19];\n\t\t\ta[19] = xr * enwindow[wp + -12 * 18 + 7];\n\n\t\t\txr = a[16] - a[12];\n\t\t\ta[12] += a[16];\n\t\t\ta[16] = xr * enwindow[wp + -14 * 18 + 7];\n\t\t\txr = a[17] - a[13];\n\t\t\ta[13] += a[17];\n\t\t\ta[17] = xr * enwindow[wp + -14 * 18 + 7];\n\n\t\t\txr = -a[20] + a[24];\n\t\t\ta[20] += a[24];\n\t\t\ta[24] = xr * enwindow[wp + -12 * 18 + 7];\n\t\t\txr = -a[21] + a[25];\n\t\t\ta[21] += a[25];\n\t\t\ta[25] = xr * enwindow[wp + -12 * 18 + 7];\n\n\t\t\txr = a[4] - a[8];\n\t\t\ta[4] += a[8];\n\t\t\ta[8] = xr * enwindow[wp + -12 * 18 + 7];\n\t\t\txr = a[5] - a[9];\n\t\t\ta[5] += a[9];\n\t\t\ta[9] = xr * enwindow[wp + -12 * 18 + 7];\n\n\t\t\txr = a[0] - a[12];\n\t\t\ta[0] += a[12];\n\t\t\ta[12] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = a[1] - a[13];\n\t\t\ta[1] += a[13];\n\t\t\ta[13] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = a[16] - a[28];\n\t\t\ta[16] += a[28];\n\t\t\ta[28] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = -a[17] + a[29];\n\t\t\ta[17] += a[29];\n\t\t\ta[29] = xr * enwindow[wp + -4 * 18 + 7];\n\n\t\t\txr = Util.SQRT2 * (a[2] - a[10]);\n\t\t\ta[2] += a[10];\n\t\t\ta[10] = xr;\n\t\t\txr = Util.SQRT2 * (a[3] - a[11]);\n\t\t\ta[3] += a[11];\n\t\t\ta[11] = xr;\n\t\t\txr = Util.SQRT2 * (-a[18] + a[26]);\n\t\t\ta[18] += a[26];\n\t\t\ta[26] = xr - a[18];\n\t\t\txr = Util.SQRT2 * (-a[19] + a[27]);\n\t\t\ta[19] += a[27];\n\t\t\ta[27] = xr - a[19];\n\n\t\t\txr = a[2];\n\t\t\ta[19] -= a[3];\n\t\t\ta[3] -= xr;\n\t\t\ta[2] = a[31] - xr;\n\t\t\ta[31] += xr;\n\t\t\txr = a[3];\n\t\t\ta[11] -= a[19];\n\t\t\ta[18] -= xr;\n\t\t\ta[3] = a[30] - xr;\n\t\t\ta[30] += xr;\n\t\t\txr = a[18];\n\t\t\ta[27] -= a[11];\n\t\t\ta[19] -= xr;\n\t\t\ta[18] = a[15] - xr;\n\t\t\ta[15] += xr;\n\n\t\t\txr = a[19];\n\t\t\ta[10] -= xr;\n\t\t\ta[19] = a[14] - xr;\n\t\t\ta[14] += xr;\n\t\t\txr = a[10];\n\t\t\ta[11] -= xr;\n\t\t\ta[10] = a[23] - xr;\n\t\t\ta[23] += xr;\n\t\t\txr = a[11];\n\t\t\ta[26] -= xr;\n\t\t\ta[11] = a[22] - xr;\n\t\t\ta[22] += xr;\n\t\t\txr = a[26];\n\t\t\ta[27] -= xr;\n\t\t\ta[26] = a[7] - xr;\n\t\t\ta[7] += xr;\n\n\t\t\txr = a[27];\n\t\t\ta[27] = a[6] - xr;\n\t\t\ta[6] += xr;\n\n\t\t\txr = Util.SQRT2 * (a[0] - a[4]);\n\t\t\ta[0] += a[4];\n\t\t\ta[4] = xr;\n\t\t\txr = Util.SQRT2 * (a[1] - a[5]);\n\t\t\ta[1] += a[5];\n\t\t\ta[5] = xr;\n\t\t\txr = Util.SQRT2 * (a[16] - a[20]);\n\t\t\ta[16] += a[20];\n\t\t\ta[20] = xr;\n\t\t\txr = Util.SQRT2 * (a[17] - a[21]);\n\t\t\ta[17] += a[21];\n\t\t\ta[21] = xr;\n\n\t\t\txr = -Util.SQRT2 * (a[8] - a[12]);\n\t\t\ta[8] += a[12];\n\t\t\ta[12] = xr - a[8];\n\t\t\txr = -Util.SQRT2 * (a[9] - a[13]);\n\t\t\ta[9] += a[13];\n\t\t\ta[13] = xr - a[9];\n\t\t\txr = -Util.SQRT2 * (a[25] - a[29]);\n\t\t\ta[25] += a[29];\n\t\t\ta[29] = xr - a[25];\n\t\t\txr = -Util.SQRT2 * (a[24] + a[28]);\n\t\t\ta[24] -= a[28];\n\t\t\ta[28] = xr - a[24];\n\n\t\t\txr = a[24] - a[16];\n\t\t\ta[24] = xr;\n\t\t\txr = a[20] - xr;\n\t\t\ta[20] = xr;\n\t\t\txr = a[28] - xr;\n\t\t\ta[28] = xr;\n\n\t\t\txr = a[25] - a[17];\n\t\t\ta[25] = xr;\n\t\t\txr = a[21] - xr;\n\t\t\ta[21] = xr;\n\t\t\txr = a[29] - xr;\n\t\t\ta[29] = xr;\n\n\t\t\txr = a[17] - a[1];\n\t\t\ta[17] = xr;\n\t\t\txr = a[9] - xr;\n\t\t\ta[9] = xr;\n\t\t\txr = a[25] - xr;\n\t\t\ta[25] = xr;\n\t\t\txr = a[5] - xr;\n\t\t\ta[5] = xr;\n\t\t\txr = a[21] - xr;\n\t\t\ta[21] = xr;\n\t\t\txr = a[13] - xr;\n\t\t\ta[13] = xr;\n\t\t\txr = a[29] - xr;\n\t\t\ta[29] = xr;\n\n\t\t\txr = a[1] - a[0];\n\t\t\ta[1] = xr;\n\t\t\txr = a[16] - xr;\n\t\t\ta[16] = xr;\n\t\t\txr = a[17] - xr;\n\t\t\ta[17] = xr;\n\t\t\txr = a[8] - xr;\n\t\t\ta[8] = xr;\n\t\t\txr = a[9] - xr;\n\t\t\ta[9] = xr;\n\t\t\txr = a[24] - xr;\n\t\t\ta[24] = xr;\n\t\t\txr = a[25] - xr;\n\t\t\ta[25] = xr;\n\t\t\txr = a[4] - xr;\n\t\t\ta[4] = xr;\n\t\t\txr = a[5] - xr;\n\t\t\ta[5] = xr;\n\t\t\txr = a[20] - xr;\n\t\t\ta[20] = xr;\n\t\t\txr = a[21] - xr;\n\t\t\ta[21] = xr;\n\t\t\txr = a[12] - xr;\n\t\t\ta[12] = xr;\n\t\t\txr = a[13] - xr;\n\t\t\ta[13] = xr;\n\t\t\txr = a[28] - xr;\n\t\t\ta[28] = xr;\n\t\t\txr = a[29] - xr;\n\t\t\ta[29] = xr;\n\n\t\t\txr = a[0];\n\t\t\ta[0] += a[31];\n\t\t\ta[31] -= xr;\n\t\t\txr = a[1];\n\t\t\ta[1] += a[30];\n\t\t\ta[30] -= xr;\n\t\t\txr = a[16];\n\t\t\ta[16] += a[15];\n\t\t\ta[15] -= xr;\n\t\t\txr = a[17];\n\t\t\ta[17] += a[14];\n\t\t\ta[14] -= xr;\n\t\t\txr = a[8];\n\t\t\ta[8] += a[23];\n\t\t\ta[23] -= xr;\n\t\t\txr = a[9];\n\t\t\ta[9] += a[22];\n\t\t\ta[22] -= xr;\n\t\t\txr = a[24];\n\t\t\ta[24] += a[7];\n\t\t\ta[7] -= xr;\n\t\t\txr = a[25];\n\t\t\ta[25] += a[6];\n\t\t\ta[6] -= xr;\n\t\t\txr = a[4];\n\t\t\ta[4] += a[27];\n\t\t\ta[27] -= xr;\n\t\t\txr = a[5];\n\t\t\ta[5] += a[26];\n\t\t\ta[26] -= xr;\n\t\t\txr = a[20];\n\t\t\ta[20] += a[11];\n\t\t\ta[11] -= xr;\n\t\t\txr = a[21];\n\t\t\ta[21] += a[10];\n\t\t\ta[10] -= xr;\n\t\t\txr = a[12];\n\t\t\ta[12] += a[19];\n\t\t\ta[19] -= xr;\n\t\t\txr = a[13];\n\t\t\ta[13] += a[18];\n\t\t\ta[18] -= xr;\n\t\t\txr = a[28];\n\t\t\ta[28] += a[3];\n\t\t\ta[3] -= xr;\n\t\t\txr = a[29];\n\t\t\ta[29] += a[2];\n\t\t\ta[2] -= xr;\n\t\t}\n\t}\n\n\t/**\n\t * Function: Calculation of the MDCT In the case of long blocks (type 0,1,3)\n\t * there are 36 coefficents in the time domain and 18 in the frequency\n\t * domain.<BR>\n\t * In the case of short blocks (type 2) there are 3 transformations with\n\t * short length. This leads to 12 coefficents in the time and 6 in the\n\t * frequency domain. In this case the results are stored side by side in the\n\t * vector out[].\n\t *\n\t * New layer3\n\t */\n\tfunction mdct_short(inout, inoutPos) {\n\t\tfor (var l = 0; l < 3; l++) {\n\t\t\tvar tc0, tc1, tc2, ts0, ts1, ts2;\n\n\t\t\tts0 = inout[inoutPos + 2 * 3] * win[Encoder.SHORT_TYPE][0]\n\t\t\t\t\t- inout[inoutPos + 5 * 3];\n\t\t\ttc0 = inout[inoutPos + 0 * 3] * win[Encoder.SHORT_TYPE][2]\n\t\t\t\t\t- inout[inoutPos + 3 * 3];\n\t\t\ttc1 = ts0 + tc0;\n\t\t\ttc2 = ts0 - tc0;\n\n\t\t\tts0 = inout[inoutPos + 5 * 3] * win[Encoder.SHORT_TYPE][0]\n\t\t\t\t\t+ inout[inoutPos + 2 * 3];\n\t\t\ttc0 = inout[inoutPos + 3 * 3] * win[Encoder.SHORT_TYPE][2]\n\t\t\t\t\t+ inout[inoutPos + 0 * 3];\n\t\t\tts1 = ts0 + tc0;\n\t\t\tts2 = -ts0 + tc0;\n\n\t\t\ttc0 = (inout[inoutPos + 1 * 3] * win[Encoder.SHORT_TYPE][1] - inout[inoutPos + 4 * 3]) * 2.069978111953089e-11;\n\t\t\t/*\n\t\t\t * tritab_s [ 1 ]\n\t\t\t */\n\t\t\tts0 = (inout[inoutPos + 4 * 3] * win[Encoder.SHORT_TYPE][1] + inout[inoutPos + 1 * 3]) * 2.069978111953089e-11;\n\t\t\t/*\n\t\t\t * tritab_s [ 1 ]\n\t\t\t */\n\t\t\tinout[inoutPos + 3 * 0] = tc1 * 1.907525191737280e-11 + tc0;\n\t\t\t/*\n\t\t\t * tritab_s[ 2 ]\n\t\t\t */\n\t\t\tinout[inoutPos + 3 * 5] = -ts1 * 1.907525191737280e-11 + ts0;\n\t\t\t/*\n\t\t\t * tritab_s[0 ]\n\t\t\t */\n\t\t\ttc2 = tc2 * 0.86602540378443870761 * 1.907525191737281e-11;\n\t\t\t/*\n\t\t\t * tritab_s[ 2]\n\t\t\t */\n\t\t\tts1 = ts1 * 0.5 * 1.907525191737281e-11 + ts0;\n\t\t\tinout[inoutPos + 3 * 1] = tc2 - ts1;\n\t\t\tinout[inoutPos + 3 * 2] = tc2 + ts1;\n\n\t\t\ttc1 = tc1 * 0.5 * 1.907525191737281e-11 - tc0;\n\t\t\tts2 = ts2 * 0.86602540378443870761 * 1.907525191737281e-11;\n\t\t\t/*\n\t\t\t * tritab_s[ 0]\n\t\t\t */\n\t\t\tinout[inoutPos + 3 * 3] = tc1 + ts2;\n\t\t\tinout[inoutPos + 3 * 4] = tc1 - ts2;\n\n\t\t\tinoutPos++;\n\t\t}\n\t}\n\n\tfunction mdct_long(out, outPos, _in) {\n\t\tvar ct, st;\n\t\t{\n\t\t\tvar tc1, tc2, tc3, tc4, ts5, ts6, ts7, ts8;\n\t\t\t/* 1,2, 5,6, 9,10, 13,14, 17 */\n\t\t\ttc1 = _in[17] - _in[9];\n\t\t\ttc3 = _in[15] - _in[11];\n\t\t\ttc4 = _in[14] - _in[12];\n\t\t\tts5 = _in[0] + _in[8];\n\t\t\tts6 = _in[1] + _in[7];\n\t\t\tts7 = _in[2] + _in[6];\n\t\t\tts8 = _in[3] + _in[5];\n\n\t\t\tout[outPos + 17] = (ts5 + ts7 - ts8) - (ts6 - _in[4]);\n\t\t\tst = (ts5 + ts7 - ts8) * cx[12 + 7] + (ts6 - _in[4]);\n\t\t\tct = (tc1 - tc3 - tc4) * cx[12 + 6];\n\t\t\tout[outPos + 5] = ct + st;\n\t\t\tout[outPos + 6] = ct - st;\n\n\t\t\ttc2 = (_in[16] - _in[10]) * cx[12 + 6];\n\t\t\tts6 = ts6 * cx[12 + 7] + _in[4];\n\t\t\tct = tc1 * cx[12 + 0] + tc2 + tc3 * cx[12 + 1] + tc4 * cx[12 + 2];\n\t\t\tst = -ts5 * cx[12 + 4] + ts6 - ts7 * cx[12 + 5] + ts8 * cx[12 + 3];\n\t\t\tout[outPos + 1] = ct + st;\n\t\t\tout[outPos + 2] = ct - st;\n\n\t\t\tct = tc1 * cx[12 + 1] - tc2 - tc3 * cx[12 + 2] + tc4 * cx[12 + 0];\n\t\t\tst = -ts5 * cx[12 + 5] + ts6 - ts7 * cx[12 + 3] + ts8 * cx[12 + 4];\n\t\t\tout[outPos + 9] = ct + st;\n\t\t\tout[outPos + 10] = ct - st;\n\n\t\t\tct = tc1 * cx[12 + 2] - tc2 + tc3 * cx[12 + 0] - tc4 * cx[12 + 1];\n\t\t\tst = ts5 * cx[12 + 3] - ts6 + ts7 * cx[12 + 4] - ts8 * cx[12 + 5];\n\t\t\tout[outPos + 13] = ct + st;\n\t\t\tout[outPos + 14] = ct - st;\n\t\t}\n\t\t{\n\t\t\tvar ts1, ts2, ts3, ts4, tc5, tc6, tc7, tc8;\n\n\t\t\tts1 = _in[8] - _in[0];\n\t\t\tts3 = _in[6] - _in[2];\n\t\t\tts4 = _in[5] - _in[3];\n\t\t\ttc5 = _in[17] + _in[9];\n\t\t\ttc6 = _in[16] + _in[10];\n\t\t\ttc7 = _in[15] + _in[11];\n\t\t\ttc8 = _in[14] + _in[12];\n\n\t\t\tout[outPos + 0] = (tc5 + tc7 + tc8) + (tc6 + _in[13]);\n\t\t\tct = (tc5 + tc7 + tc8) * cx[12 + 7] - (tc6 + _in[13]);\n\t\t\tst = (ts1 - ts3 + ts4) * cx[12 + 6];\n\t\t\tout[outPos + 11] = ct + st;\n\t\t\tout[outPos + 12] = ct - st;\n\n\t\t\tts2 = (_in[7] - _in[1]) * cx[12 + 6];\n\t\t\ttc6 = _in[13] - tc6 * cx[12 + 7];\n\t\t\tct = tc5 * cx[12 + 3] - tc6 + tc7 * cx[12 + 4] + tc8 * cx[12 + 5];\n\t\t\tst = ts1 * cx[12 + 2] + ts2 + ts3 * cx[12 + 0] + ts4 * cx[12 + 1];\n\t\t\tout[outPos + 3] = ct + st;\n\t\t\tout[outPos + 4] = ct - st;\n\n\t\t\tct = -tc5 * cx[12 + 5] + tc6 - tc7 * cx[12 + 3] - tc8 * cx[12 + 4];\n\t\t\tst = ts1 * cx[12 + 1] + ts2 - ts3 * cx[12 + 2] - ts4 * cx[12 + 0];\n\t\t\tout[outPos + 7] = ct + st;\n\t\t\tout[outPos + 8] = ct - st;\n\n\t\t\tct = -tc5 * cx[12 + 4] + tc6 - tc7 * cx[12 + 5] - tc8 * cx[12 + 3];\n\t\t\tst = ts1 * cx[12 + 0] - ts2 + ts3 * cx[12 + 1] - ts4 * cx[12 + 2];\n\t\t\tout[outPos + 15] = ct + st;\n\t\t\tout[outPos + 16] = ct - st;\n\t\t}\n\t}\n\n\tthis.mdct_sub48 = function(gfc, w0, w1) {\n\t\tvar wk = w0;\n\t\tvar wkPos = 286;\n\t\t/* thinking cache performance, ch->gr loop is better than gr->ch loop */\n\t\tfor (var ch = 0; ch < gfc.channels_out; ch++) {\n\t\t\tfor (var gr = 0; gr < gfc.mode_gr; gr++) {\n\t\t\t\tvar band;\n\t\t\t\tvar gi = (gfc.l3_side.tt[gr][ch]);\n\t\t\t\tvar mdct_enc = gi.xr;\n\t\t\t\tvar mdct_encPos = 0;\n\t\t\t\tvar samp = gfc.sb_sample[ch][1 - gr];\n\t\t\t\tvar sampPos = 0;\n\n\t\t\t\tfor (var k = 0; k < 18 / 2; k++) {\n\t\t\t\t\twindow_subband(wk, wkPos, samp[sampPos]);\n\t\t\t\t\twindow_subband(wk, wkPos + 32, samp[sampPos + 1]);\n\t\t\t\t\tsampPos += 2;\n\t\t\t\t\twkPos += 64;\n\t\t\t\t\t/*\n\t\t\t\t\t * Compensate for inversion in the analysis filter\n\t\t\t\t\t */\n\t\t\t\t\tfor (band = 1; band < 32; band += 2) {\n\t\t\t\t\t\tsamp[sampPos - 1][band] *= -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * Perform imdct of 18 previous subband samples + 18 current\n\t\t\t\t * subband samples\n\t\t\t\t */\n\t\t\t\tfor (band = 0; band < 32; band++, mdct_encPos += 18) {\n\t\t\t\t\tvar type = gi.block_type;\n\t\t\t\t\tvar band0 = gfc.sb_sample[ch][gr];\n\t\t\t\t\tvar band1 = gfc.sb_sample[ch][1 - gr];\n\t\t\t\t\tif (gi.mixed_block_flag != 0 && band < 2)\n\t\t\t\t\t\ttype = 0;\n\t\t\t\t\tif (gfc.amp_filter[band] < 1e-12) {\n\t\t\t\t\t\tArrays.fill(mdct_enc, mdct_encPos + 0,\n\t\t\t\t\t\t\t\tmdct_encPos + 18, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (gfc.amp_filter[band] < 1.0) {\n\t\t\t\t\t\t\tfor (var k = 0; k < 18; k++)\n\t\t\t\t\t\t\t\tband1[k][order[band]] *= gfc.amp_filter[band];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (type == Encoder.SHORT_TYPE) {\n\t\t\t\t\t\t\tfor (var k = -NS / 4; k < 0; k++) {\n\t\t\t\t\t\t\t\tvar w = win[Encoder.SHORT_TYPE][k + 3];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 9] = band0[9 + k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w - band0[8 - k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 18] = band0[14 - k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w + band0[15 + k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 10] = band0[15 + k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w - band0[14 - k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 19] = band1[2 - k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w + band1[3 + k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 11] = band1[3 + k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w - band1[2 - k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 20] = band1[8 - k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w + band1[9 + k][order[band]];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmdct_short(mdct_enc, mdct_encPos);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar work = new_float(18);\n\t\t\t\t\t\t\tfor (var k = -NL / 4; k < 0; k++) {\n\t\t\t\t\t\t\t\tvar a, b;\n\t\t\t\t\t\t\t\ta = win[type][k + 27]\n\t\t\t\t\t\t\t\t\t\t* band1[k + 9][order[band]]\n\t\t\t\t\t\t\t\t\t\t+ win[type][k + 36]\n\t\t\t\t\t\t\t\t\t\t* band1[8 - k][order[band]];\n\t\t\t\t\t\t\t\tb = win[type][k + 9]\n\t\t\t\t\t\t\t\t\t\t* band0[k + 9][order[band]]\n\t\t\t\t\t\t\t\t\t\t- win[type][k + 18]\n\t\t\t\t\t\t\t\t\t\t* band0[8 - k][order[band]];\n\t\t\t\t\t\t\t\twork[k + 9] = a - b * tantab_l[3 + k + 9];\n\t\t\t\t\t\t\t\twork[k + 18] = a * tantab_l[3 + k + 9] + b;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmdct_long(mdct_enc, mdct_encPos, work);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t/*\n\t\t\t\t\t * Perform aliasing reduction butterfly\n\t\t\t\t\t */\n\t\t\t\t\tif (type != Encoder.SHORT_TYPE && band != 0) {\n\t\t\t\t\t\tfor (var k = 7; k >= 0; --k) {\n\t\t\t\t\t\t\tvar bu, bd;\n\t\t\t\t\t\t\tbu = mdct_enc[mdct_encPos + k] * ca[20 + k]\n\t\t\t\t\t\t\t\t\t+ mdct_enc[mdct_encPos + -1 - k]\n\t\t\t\t\t\t\t\t\t* cs[28 + k];\n\t\t\t\t\t\t\tbd = mdct_enc[mdct_encPos + k] * cs[28 + k]\n\t\t\t\t\t\t\t\t\t- mdct_enc[mdct_encPos + -1 - k]\n\t\t\t\t\t\t\t\t\t* ca[20 + k];\n\n\t\t\t\t\t\t\tmdct_enc[mdct_encPos + -1 - k] = bu;\n\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k] = bd;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twk = w1;\n\t\t\twkPos = 286;\n\t\t\tif (gfc.mode_gr == 1) {\n\t\t\t\tfor (var i = 0; i < 18; i++) {\n\t\t\t\t\tSystem.arraycopy(gfc.sb_sample[ch][1][i], 0,\n\t\t\t\t\t\t\tgfc.sb_sample[ch][0][i], 0, 32);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = NewMDCT;\n","//package mp3;\n\nvar III_psy_xmin = require('./III_psy_xmin.js');\n\nfunction III_psy_ratio() {\n\tthis.thm = new III_psy_xmin();\n\tthis.en = new III_psy_xmin();\n}\n\nmodule.exports = III_psy_ratio;\n","var MPEGMode = require('./MPEGMode.js');\n\nfunction LameGlobalFlags() {\n\n    this.class_id = 0;\n\n    /* input description */\n\n    /**\n     * number of samples. default=-1\n     */\n    this.num_samples = 0;\n    /**\n     * input number of channels. default=2\n     */\n    this.num_channels = 0;\n    /**\n     * input_samp_rate in Hz. default=44.1 kHz\n     */\n    this.in_samplerate = 0;\n    /**\n     * output_samp_rate. default: LAME picks best value at least not used for\n     * MP3 decoding: Remember 44.1 kHz MP3s and AC97\n     */\n    this.out_samplerate = 0;\n    /**\n     * scale input by this amount before encoding at least not used for MP3\n     * decoding\n     */\n    this.scale = 0.;\n    /**\n     * scale input of channel 0 (left) by this amount before encoding\n     */\n    this.scale_left = 0.;\n    /**\n     * scale input of channel 1 (right) by this amount before encoding\n     */\n    this.scale_right = 0.;\n\n    /* general control params */\n    /**\n     * collect data for a MP3 frame analyzer?\n     */\n    this.analysis = false;\n    /**\n     * add Xing VBR tag?\n     */\n    this.bWriteVbrTag = false;\n\n    /**\n     * use lame/mpglib to convert mp3 to wav\n     */\n    this.decode_only = false;\n    /**\n     * quality setting 0=best, 9=worst default=5\n     */\n    this.quality = 0;\n    /**\n     * see enum default = LAME picks best value\n     */\n    this.mode = MPEGMode.STEREO;\n    /**\n     * force M/S mode. requires mode=1\n     */\n    this.force_ms = false;\n    /**\n     * use free format? default=0\n     */\n    this.free_format = false;\n    /**\n     * find the RG value? default=0\n     */\n    this.findReplayGain = false;\n    /**\n     * decode on the fly? default=0\n     */\n    this.decode_on_the_fly = false;\n    /**\n     * 1 (default) writes ID3 tags, 0 not\n     */\n    this.write_id3tag_automatic = false;\n\n    /*\n     * set either brate>0 or compression_ratio>0, LAME will compute the value of\n     * the variable not set. Default is compression_ratio = 11.025\n     */\n    /**\n     * bitrate\n     */\n    this.brate = 0;\n    /**\n     * sizeof(wav file)/sizeof(mp3 file)\n     */\n    this.compression_ratio = 0.;\n\n    /* frame params */\n    /**\n     * mark as copyright. default=0\n     */\n    this.copyright = 0;\n    /**\n     * mark as original. default=1\n     */\n    this.original = 0;\n    /**\n     * the MP3 'private extension' bit. Meaningless\n     */\n    this.extension = 0;\n    /**\n     * Input PCM is emphased PCM (for instance from one of the rarely emphased\n     * CDs), it is STRONGLY not recommended to use this, because psycho does not\n     * take it into account, and last but not least many decoders don't care\n     * about these bits\n     */\n    this.emphasis = 0;\n    /**\n     * use 2 bytes per frame for a CRC checksum. default=0\n     */\n    this.error_protection = 0;\n    /**\n     * enforce ISO spec as much as possible\n     */\n    this.strict_ISO = false;\n\n    /**\n     * use bit reservoir?\n     */\n    this.disable_reservoir = false;\n\n    /* quantization/noise shaping */\n    this.quant_comp = 0;\n    this.quant_comp_short = 0;\n    this.experimentalY = false;\n    this.experimentalZ = 0;\n    this.exp_nspsytune = 0;\n\n    this.preset = 0;\n\n    /* VBR control */\n    this.VBR = null;\n    /**\n     * Range [0,...,1[\n     */\n    this.VBR_q_frac = 0.;\n    /**\n     * Range [0,...,9]\n     */\n    this.VBR_q = 0;\n    this.VBR_mean_bitrate_kbps = 0;\n    this.VBR_min_bitrate_kbps = 0;\n    this.VBR_max_bitrate_kbps = 0;\n    /**\n     * strictly enforce VBR_min_bitrate normaly, it will be violated for analog\n     * silence\n     */\n    this.VBR_hard_min = 0;\n\n    /* resampling and filtering */\n\n    /**\n     * freq in Hz. 0=lame choses. -1=no filter\n     */\n    this.lowpassfreq = 0;\n    /**\n     * freq in Hz. 0=lame choses. -1=no filter\n     */\n    this.highpassfreq = 0;\n    /**\n     * freq width of filter, in Hz (default=15%)\n     */\n    this.lowpasswidth = 0;\n    /**\n     * freq width of filter, in Hz (default=15%)\n     */\n    this.highpasswidth = 0;\n\n    /*\n     * psycho acoustics and other arguments which you should not change unless\n     * you know what you are doing\n     */\n\n    this.maskingadjust = 0.;\n    this.maskingadjust_short = 0.;\n    /**\n     * only use ATH\n     */\n    this.ATHonly = false;\n    /**\n     * only use ATH for short blocks\n     */\n    this.ATHshort = false;\n    /**\n     * disable ATH\n     */\n    this.noATH = false;\n    /**\n     * select ATH formula\n     */\n    this.ATHtype = 0;\n    /**\n     * change ATH formula 4 shape\n     */\n    this.ATHcurve = 0.;\n    /**\n     * lower ATH by this many db\n     */\n    this.ATHlower = 0.;\n    /**\n     * select ATH auto-adjust scheme\n     */\n    this.athaa_type = 0;\n    /**\n     * select ATH auto-adjust loudness calc\n     */\n    this.athaa_loudapprox = 0;\n    /**\n     * dB, tune active region of auto-level\n     */\n    this.athaa_sensitivity = 0.;\n    this.short_blocks = null;\n    /**\n     * use temporal masking effect\n     */\n    this.useTemporal = false;\n    this.interChRatio = 0.;\n    /**\n     * Naoki's adjustment of Mid/Side maskings\n     */\n    this.msfix = 0.;\n\n    /**\n     * 0 off, 1 on\n     */\n    this.tune = false;\n    /**\n     * used to pass values for debugging and stuff\n     */\n    this.tune_value_a = 0.;\n\n    /************************************************************************/\n    /* internal variables, do not set... */\n    /* provided because they may be of use to calling application */\n    /************************************************************************/\n\n    /**\n     * 0=MPEG-2/2.5 1=MPEG-1\n     */\n    this.version = 0;\n    this.encoder_delay = 0;\n    /**\n     * number of samples of padding appended to input\n     */\n    this.encoder_padding = 0;\n    this.framesize = 0;\n    /**\n     * number of frames encoded\n     */\n    this.frameNum = 0;\n    /**\n     * is this struct owned by calling program or lame?\n     */\n    this.lame_allocated_gfp = 0;\n    /**************************************************************************/\n    /* more internal variables are stored in this structure: */\n    /**************************************************************************/\n    this.internal_flags = null;\n}\n\nmodule.exports = LameGlobalFlags;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar GrInfo = require('./GrInfo.js');\n\nfunction IIISideInfo() {\n    this.tt = [[null, null], [null, null]];\n    this.main_data_begin = 0;\n    this.private_bits = 0;\n    this.resvDrain_pre = 0;\n    this.resvDrain_post = 0;\n    this.scfsi = [new_int(4), new_int(4)];\n\n    for (var gr = 0; gr < 2; gr++) {\n        for (var ch = 0; ch < 2; ch++) {\n            this.tt[gr][ch] = new GrInfo();\n        }\n    }\n}\n\nmodule.exports = IIISideInfo;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\n\n//package mp3;\n\n/**\n * Variables used for --nspsytune\n *\n * @author Ken\n *\n */\nfunction NsPsy() {\n    this.last_en_subshort = new_float_n([4, 9]);\n    this.lastAttacks = new_int(4);\n    this.pefirbuf = new_float(19);\n    this.longfact = new_float(Encoder.SBMAX_l);\n    this.shortfact = new_float(Encoder.SBMAX_s);\n\n    /**\n     * short block tuning\n     */\n    this.attackthre = 0.;\n    this.attackthre_s = 0.;\n}\n\nmodule.exports = NsPsy;\n","//package mp3;\n\nfunction VBRSeekInfo() {\n    /**\n     * What we have seen so far.\n     */\n    this.sum = 0;\n    /**\n     * How many frames we have seen in this chunk.\n     */\n    this.seen = 0;\n    /**\n     * How many frames we want to collect into one chunk.\n     */\n    this.want = 0;\n    /**\n     * Actual position in our bag.\n     */\n    this.pos = 0;\n    /**\n     * Size of our bag.\n     */\n    this.size = 0;\n    /**\n     * Pointer to our bag.\n     */\n    this.bag = null;\n    this.nVbrNumFrames = 0;\n    this.nBytesWritten = 0;\n    /* VBR tag data */\n    this.TotalFrameSize = 0;\n}\n\nmodule.exports = VBRSeekInfo;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\n\n/**\n * ATH related stuff, if something new ATH related has to be added, please plug\n * it here into the ATH.\n */\nfunction ATH() {\n    /**\n     * Method for the auto adjustment.\n     */\n    this.useAdjust = 0;\n    /**\n     * factor for tuning the (sample power) point below which adaptive threshold\n     * of hearing adjustment occurs\n     */\n    this.aaSensitivityP = 0.;\n    /**\n     * Lowering based on peak volume, 1 = no lowering.\n     */\n    this.adjust = 0.;\n    /**\n     * Limit for dynamic ATH adjust.\n     */\n    this.adjustLimit = 0.;\n    /**\n     * Determined to lower x dB each second.\n     */\n    this.decay = 0.;\n    /**\n     * Lowest ATH value.\n     */\n    this.floor = 0.;\n    /**\n     * ATH for sfbs in long blocks.\n     */\n    this.l = new_float(Encoder.SBMAX_l);\n    /**\n     * ATH for sfbs in short blocks.\n     */\n    this.s = new_float(Encoder.SBMAX_s);\n    /**\n     * ATH for partitioned sfb21 in long blocks.\n     */\n    this.psfb21 = new_float(Encoder.PSFB21);\n    /**\n     * ATH for partitioned sfb12 in short blocks.\n     */\n    this.psfb12 = new_float(Encoder.PSFB12);\n    /**\n     * ATH for long block convolution bands.\n     */\n    this.cb_l = new_float(Encoder.CBANDS);\n    /**\n     * ATH for short block convolution bands.\n     */\n    this.cb_s = new_float(Encoder.CBANDS);\n    /**\n     * Equal loudness weights (based on ATH).\n     */\n    this.eql_w = new_float(Encoder.BLKSIZE / 2);\n}\n\nmodule.exports = ATH;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar GainAnalysis = require('./GainAnalysis.js');\n\nfunction ReplayGain() {\n    this.linprebuf = new_float(GainAnalysis.MAX_ORDER * 2);\n    /**\n     * left input samples, with pre-buffer\n     */\n    this.linpre = 0;\n    this.lstepbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n    /**\n     * left \"first step\" (i.e. post first filter) samples\n     */\n    this.lstep = 0;\n    this.loutbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n    /**\n     * left \"out\" (i.e. post second filter) samples\n     */\n    this.lout = 0;\n    this.rinprebuf = new_float(GainAnalysis.MAX_ORDER * 2);\n    /**\n     * right input samples ...\n     */\n    this.rinpre = 0;\n    this.rstepbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n    this.rstep = 0;\n    this.routbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n    this.rout = 0;\n    /**\n     * number of samples required to reach number of milliseconds required\n     * for RMS window\n     */\n    this.sampleWindow = 0;\n    this.totsamp = 0;\n    this.lsum = 0.;\n    this.rsum = 0.;\n    this.freqindex = 0;\n    this.first = 0;\n    this.A = new_int(0 | (GainAnalysis.STEPS_per_dB * GainAnalysis.MAX_dB));\n    this.B = new_int(0 | (GainAnalysis.STEPS_per_dB * GainAnalysis.MAX_dB));\n\n}\n\nmodule.exports = ReplayGain;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar MeanBits = require('./MeanBits.js');\nvar Encoder = require('./Encoder.js');\nvar L3Side = require('./L3Side.js');\nvar LameInternalFlags = require('./LameInternalFlags.js');\n\nfunction CBRNewIterationLoop(_quantize)  {\n    var quantize = _quantize;\n    this.quantize = quantize;\n\tthis.iteration_loop = function(gfp, pe, ms_ener_ratio, ratio) {\n\t\tvar gfc = gfp.internal_flags;\n        var l3_xmin = new_float(L3Side.SFBMAX);\n\t\tvar xrpow = new_float(576);\n\t\tvar targ_bits = new_int(2);\n\t\tvar mean_bits = 0, max_bits;\n\t\tvar l3_side = gfc.l3_side;\n\n\t\tvar mb = new MeanBits(mean_bits);\n\t\tthis.quantize.rv.ResvFrameBegin(gfp, mb);\n\t\tmean_bits = mb.bits;\n\n\t\t/* quantize! */\n\t\tfor (var gr = 0; gr < gfc.mode_gr; gr++) {\n\n\t\t\t/*\n\t\t\t * calculate needed bits\n\t\t\t */\n\t\t\tmax_bits = this.quantize.qupvt.on_pe(gfp, pe, targ_bits, mean_bits,\n\t\t\t\t\tgr, gr);\n\n\t\t\tif (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n\t\t\t\tthis.quantize.ms_convert(gfc.l3_side, gr);\n\t\t\t\tthis.quantize.qupvt.reduce_side(targ_bits, ms_ener_ratio[gr],\n\t\t\t\t\t\tmean_bits, max_bits);\n\t\t\t}\n\n\t\t\tfor (var ch = 0; ch < gfc.channels_out; ch++) {\n\t\t\t\tvar adjust, masking_lower_db;\n\t\t\t\tvar cod_info = l3_side.tt[gr][ch];\n\n\t\t\t\tif (cod_info.block_type != Encoder.SHORT_TYPE) {\n\t\t\t\t\t// NORM, START or STOP type\n\t\t\t\t\tadjust = 0;\n\t\t\t\t\tmasking_lower_db = gfc.PSY.mask_adjust - adjust;\n\t\t\t\t} else {\n\t\t\t\t\tadjust = 0;\n\t\t\t\t\tmasking_lower_db = gfc.PSY.mask_adjust_short - adjust;\n\t\t\t\t}\n\t\t\t\tgfc.masking_lower =  Math.pow(10.0,\n\t\t\t\t\t\tmasking_lower_db * 0.1);\n\n\t\t\t\t/*\n\t\t\t\t * init_outer_loop sets up cod_info, scalefac and xrpow\n\t\t\t\t */\n\t\t\t\tthis.quantize.init_outer_loop(gfc, cod_info);\n\t\t\t\tif (this.quantize.init_xrpow(gfc, cod_info, xrpow)) {\n\t\t\t\t\t/*\n\t\t\t\t\t * xr contains energy we will have to encode calculate the\n\t\t\t\t\t * masking abilities find some good quantization in\n\t\t\t\t\t * outer_loop\n\t\t\t\t\t */\n\t\t\t\t\tthis.quantize.qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info,\n\t\t\t\t\t\t\tl3_xmin);\n\t\t\t\t\tthis.quantize.outer_loop(gfp, cod_info, l3_xmin, xrpow, ch,\n\t\t\t\t\t\t\ttarg_bits[ch]);\n\t\t\t\t}\n\n\t\t\t\tthis.quantize.iteration_finish_one(gfc, gr, ch);\n\t\t\t\tassert (cod_info.part2_3_length <= LameInternalFlags.MAX_BITS_PER_CHANNEL);\n\t\t\t\tassert (cod_info.part2_3_length <= targ_bits[ch]);\n\t\t\t} /* for ch */\n\t\t} /* for gr */\n\n\t\tthis.quantize.rv.ResvFrameEnd(gfc, mean_bits);\n\t}\n}\nmodule.exports = CBRNewIterationLoop;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nfunction Presets() {\n    function VBRPresets(qual, comp, compS,\n                        y, shThreshold, shThresholdS,\n                        adj, adjShort, lower,\n                        curve, sens, inter,\n                        joint, mod, fix) {\n        this.vbr_q = qual;\n        this.quant_comp = comp;\n        this.quant_comp_s = compS;\n        this.expY = y;\n        this.st_lrm = shThreshold;\n        this.st_s = shThresholdS;\n        this.masking_adj = adj;\n        this.masking_adj_short = adjShort;\n        this.ath_lower = lower;\n        this.ath_curve = curve;\n        this.ath_sensitivity = sens;\n        this.interch = inter;\n        this.safejoint = joint;\n        this.sfb21mod = mod;\n        this.msfix = fix;\n    }\n\n    function ABRPresets(kbps, comp, compS,\n                        joint, fix, shThreshold,\n                        shThresholdS, bass, sc,\n                        mask, lower, curve,\n                        interCh, sfScale) {\n        this.quant_comp = comp;\n        this.quant_comp_s = compS;\n        this.safejoint = joint;\n        this.nsmsfix = fix;\n        this.st_lrm = shThreshold;\n        this.st_s = shThresholdS;\n        this.nsbass = bass;\n        this.scale = sc;\n        this.masking_adj = mask;\n        this.ath_lower = lower;\n        this.ath_curve = curve;\n        this.interch = interCh;\n        this.sfscale = sfScale;\n    }\n\n    var lame;\n\n    this.setModules = function (_lame) {\n        lame = _lame;\n    };\n\n    /**\n     * <PRE>\n     * Switch mappings for VBR mode VBR_RH\n     *             vbr_q  qcomp_l  qcomp_s  expY  st_lrm   st_s  mask adj_l  adj_s  ath_lower  ath_curve  ath_sens  interChR  safejoint sfb21mod  msfix\n     * </PRE>\n     */\n    var vbr_old_switch_map = [\n        new VBRPresets(0, 9, 9, 0, 5.20, 125.0, -4.2, -6.3, 4.8, 1, 0, 0, 2, 21, 0.97),\n        new VBRPresets(1, 9, 9, 0, 5.30, 125.0, -3.6, -5.6, 4.5, 1.5, 0, 0, 2, 21, 1.35),\n        new VBRPresets(2, 9, 9, 0, 5.60, 125.0, -2.2, -3.5, 2.8, 2, 0, 0, 2, 21, 1.49),\n        new VBRPresets(3, 9, 9, 1, 5.80, 130.0, -1.8, -2.8, 2.6, 3, -4, 0, 2, 20, 1.64),\n        new VBRPresets(4, 9, 9, 1, 6.00, 135.0, -0.7, -1.1, 1.1, 3.5, -8, 0, 2, 0, 1.79),\n        new VBRPresets(5, 9, 9, 1, 6.40, 140.0, 0.5, 0.4, -7.5, 4, -12, 0.0002, 0, 0, 1.95),\n        new VBRPresets(6, 9, 9, 1, 6.60, 145.0, 0.67, 0.65, -14.7, 6.5, -19, 0.0004, 0, 0, 2.30),\n        new VBRPresets(7, 9, 9, 1, 6.60, 145.0, 0.8, 0.75, -19.7, 8, -22, 0.0006, 0, 0, 2.70),\n        new VBRPresets(8, 9, 9, 1, 6.60, 145.0, 1.2, 1.15, -27.5, 10, -23, 0.0007, 0, 0, 0),\n        new VBRPresets(9, 9, 9, 1, 6.60, 145.0, 1.6, 1.6, -36, 11, -25, 0.0008, 0, 0, 0),\n        new VBRPresets(10, 9, 9, 1, 6.60, 145.0, 2.0, 2.0, -36, 12, -25, 0.0008, 0, 0, 0)\n    ];\n\n    /**\n     * <PRE>\n     *                 vbr_q  qcomp_l  qcomp_s  expY  st_lrm   st_s  mask adj_l  adj_s  ath_lower  ath_curve  ath_sens  interChR  safejoint sfb21mod  msfix\n     * </PRE>\n     */\n    var vbr_psy_switch_map = [\n        new VBRPresets(0, 9, 9, 0, 4.20, 25.0, -7.0, -4.0, 7.5, 1, 0, 0, 2, 26, 0.97),\n        new VBRPresets(1, 9, 9, 0, 4.20, 25.0, -5.6, -3.6, 4.5, 1.5, 0, 0, 2, 21, 1.35),\n        new VBRPresets(2, 9, 9, 0, 4.20, 25.0, -4.4, -1.8, 2, 2, 0, 0, 2, 18, 1.49),\n        new VBRPresets(3, 9, 9, 1, 4.20, 25.0, -3.4, -1.25, 1.1, 3, -4, 0, 2, 15, 1.64),\n        new VBRPresets(4, 9, 9, 1, 4.20, 25.0, -2.2, 0.1, 0, 3.5, -8, 0, 2, 0, 1.79),\n        new VBRPresets(5, 9, 9, 1, 4.20, 25.0, -1.0, 1.65, -7.7, 4, -12, 0.0002, 0, 0, 1.95),\n        new VBRPresets(6, 9, 9, 1, 4.20, 25.0, -0.0, 2.47, -7.7, 6.5, -19, 0.0004, 0, 0, 2),\n        new VBRPresets(7, 9, 9, 1, 4.20, 25.0, 0.5, 2.0, -14.5, 8, -22, 0.0006, 0, 0, 2),\n        new VBRPresets(8, 9, 9, 1, 4.20, 25.0, 1.0, 2.4, -22.0, 10, -23, 0.0007, 0, 0, 2),\n        new VBRPresets(9, 9, 9, 1, 4.20, 25.0, 1.5, 2.95, -30.0, 11, -25, 0.0008, 0, 0, 2),\n        new VBRPresets(10, 9, 9, 1, 4.20, 25.0, 2.0, 2.95, -36.0, 12, -30, 0.0008, 0, 0, 2)\n    ];\n\n    function apply_vbr_preset(gfp, a, enforce) {\n        var vbr_preset = gfp.VBR == VbrMode.vbr_rh ? vbr_old_switch_map\n            : vbr_psy_switch_map;\n\n        var x = gfp.VBR_q_frac;\n        var p = vbr_preset[a];\n        var q = vbr_preset[a + 1];\n        var set = p;\n\n        // NOOP(vbr_q);\n        // NOOP(quant_comp);\n        // NOOP(quant_comp_s);\n        // NOOP(expY);\n        p.st_lrm = p.st_lrm + x * (q.st_lrm - p.st_lrm);\n        // LERP(st_lrm);\n        p.st_s = p.st_s + x * (q.st_s - p.st_s);\n        // LERP(st_s);\n        p.masking_adj = p.masking_adj + x * (q.masking_adj - p.masking_adj);\n        // LERP(masking_adj);\n        p.masking_adj_short = p.masking_adj_short + x\n            * (q.masking_adj_short - p.masking_adj_short);\n        // LERP(masking_adj_short);\n        p.ath_lower = p.ath_lower + x * (q.ath_lower - p.ath_lower);\n        // LERP(ath_lower);\n        p.ath_curve = p.ath_curve + x * (q.ath_curve - p.ath_curve);\n        // LERP(ath_curve);\n        p.ath_sensitivity = p.ath_sensitivity + x\n            * (q.ath_sensitivity - p.ath_sensitivity);\n        // LERP(ath_sensitivity);\n        p.interch = p.interch + x * (q.interch - p.interch);\n        // LERP(interch);\n        // NOOP(safejoint);\n        // NOOP(sfb21mod);\n        p.msfix = p.msfix + x * (q.msfix - p.msfix);\n        // LERP(msfix);\n\n        lame_set_VBR_q(gfp, set.vbr_q);\n\n        if (enforce != 0)\n            gfp.quant_comp = set.quant_comp;\n        else if (!(Math.abs(gfp.quant_comp - -1) > 0))\n            gfp.quant_comp = set.quant_comp;\n        // SET_OPTION(quant_comp, set.quant_comp, -1);\n        if (enforce != 0)\n            gfp.quant_comp_short = set.quant_comp_s;\n        else if (!(Math.abs(gfp.quant_comp_short - -1) > 0))\n            gfp.quant_comp_short = set.quant_comp_s;\n        // SET_OPTION(quant_comp_short, set.quant_comp_s, -1);\n        if (set.expY != 0) {\n            gfp.experimentalY = set.expY != 0;\n        }\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre = set.st_lrm;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre = set.st_lrm;\n        // SET_OPTION(short_threshold_lrm, set.st_lrm, -1);\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre_s = set.st_s;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre_s - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre_s = set.st_s;\n        // SET_OPTION(short_threshold_s, set.st_s, -1);\n        if (enforce != 0)\n            gfp.maskingadjust = set.masking_adj;\n        else if (!(Math.abs(gfp.maskingadjust - 0) > 0))\n            gfp.maskingadjust = set.masking_adj;\n        // SET_OPTION(maskingadjust, set.masking_adj, 0);\n        if (enforce != 0)\n            gfp.maskingadjust_short = set.masking_adj_short;\n        else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\n            gfp.maskingadjust_short = set.masking_adj_short;\n        // SET_OPTION(maskingadjust_short, set.masking_adj_short, 0);\n        if (enforce != 0)\n            gfp.ATHlower = -set.ath_lower / 10.0;\n        else if (!(Math.abs((-gfp.ATHlower * 10.0) - 0) > 0))\n            gfp.ATHlower = -set.ath_lower / 10.0;\n        // SET_OPTION(ATHlower, set.ath_lower, 0);\n        if (enforce != 0)\n            gfp.ATHcurve = set.ath_curve;\n        else if (!(Math.abs(gfp.ATHcurve - -1) > 0))\n            gfp.ATHcurve = set.ath_curve;\n        // SET_OPTION(ATHcurve, set.ath_curve, -1);\n        if (enforce != 0)\n            gfp.athaa_sensitivity = set.ath_sensitivity;\n        else if (!(Math.abs(gfp.athaa_sensitivity - -1) > 0))\n            gfp.athaa_sensitivity = set.ath_sensitivity;\n        // SET_OPTION(athaa_sensitivity, set.ath_sensitivity, 0);\n        if (set.interch > 0) {\n            if (enforce != 0)\n                gfp.interChRatio = set.interch;\n            else if (!(Math.abs(gfp.interChRatio - -1) > 0))\n                gfp.interChRatio = set.interch;\n            // SET_OPTION(interChRatio, set.interch, -1);\n        }\n\n        /* parameters for which there is no proper set/get interface */\n        if (set.safejoint > 0) {\n            gfp.exp_nspsytune = gfp.exp_nspsytune | set.safejoint;\n        }\n        if (set.sfb21mod > 0) {\n            gfp.exp_nspsytune = gfp.exp_nspsytune | (set.sfb21mod << 20);\n        }\n        if (enforce != 0)\n            gfp.msfix = set.msfix;\n        else if (!(Math.abs(gfp.msfix - -1) > 0))\n            gfp.msfix = set.msfix;\n        // SET_OPTION(msfix, set.msfix, -1);\n\n        if (enforce == 0) {\n            gfp.VBR_q = a;\n            gfp.VBR_q_frac = x;\n        }\n    }\n\n    /**\n     * <PRE>\n     *  Switch mappings for ABR mode\n     *\n     *              kbps  quant q_s safejoint nsmsfix st_lrm  st_s  ns-bass scale   msk ath_lwr ath_curve  interch , sfscale\n     * </PRE>\n     */\n    var abr_switch_map = [\n        new ABRPresets(8, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -30.0, 11, 0.0012, 1), /*   8, impossible to use in stereo */\n        new ABRPresets(16, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -25.0, 11, 0.0010, 1), /*  16 */\n        new ABRPresets(24, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -20.0, 11, 0.0010, 1), /*  24 */\n        new ABRPresets(32, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -15.0, 11, 0.0010, 1), /*  32 */\n        new ABRPresets(40, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -10.0, 11, 0.0009, 1), /*  40 */\n        new ABRPresets(48, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -10.0, 11, 0.0009, 1), /*  48 */\n        new ABRPresets(56, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -6.0, 11, 0.0008, 1), /*  56 */\n        new ABRPresets(64, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -2.0, 11, 0.0008, 1), /*  64 */\n        new ABRPresets(80, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, .0, 8, 0.0007, 1), /*  80 */\n        new ABRPresets(96, 9, 9, 0, 2.50, 6.60, 145, 0, 0.95, 0, 1.0, 5.5, 0.0006, 1), /*  96 */\n        new ABRPresets(112, 9, 9, 0, 2.25, 6.60, 145, 0, 0.95, 0, 2.0, 4.5, 0.0005, 1), /* 112 */\n        new ABRPresets(128, 9, 9, 0, 1.95, 6.40, 140, 0, 0.95, 0, 3.0, 4, 0.0002, 1), /* 128 */\n        new ABRPresets(160, 9, 9, 1, 1.79, 6.00, 135, 0, 0.95, -2, 5.0, 3.5, 0, 1), /* 160 */\n        new ABRPresets(192, 9, 9, 1, 1.49, 5.60, 125, 0, 0.97, -4, 7.0, 3, 0, 0), /* 192 */\n        new ABRPresets(224, 9, 9, 1, 1.25, 5.20, 125, 0, 0.98, -6, 9.0, 2, 0, 0), /* 224 */\n        new ABRPresets(256, 9, 9, 1, 0.97, 5.20, 125, 0, 1.00, -8, 10.0, 1, 0, 0), /* 256 */\n        new ABRPresets(320, 9, 9, 1, 0.90, 5.20, 125, 0, 1.00, -10, 12.0, 0, 0, 0)  /* 320 */\n    ];\n\n    function apply_abr_preset(gfp, preset, enforce) {\n        /* Variables for the ABR stuff */\n        var actual_bitrate = preset;\n\n        var r = lame.nearestBitrateFullIndex(preset);\n\n        gfp.VBR = VbrMode.vbr_abr;\n        gfp.VBR_mean_bitrate_kbps = actual_bitrate;\n        gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps, 320);\n        gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps, 8);\n        gfp.brate = gfp.VBR_mean_bitrate_kbps;\n        if (gfp.VBR_mean_bitrate_kbps > 320) {\n            gfp.disable_reservoir = true;\n        }\n\n        /* parameters for which there is no proper set/get interface */\n        if (abr_switch_map[r].safejoint > 0)\n            gfp.exp_nspsytune = gfp.exp_nspsytune | 2;\n        /* safejoint */\n\n        if (abr_switch_map[r].sfscale > 0) {\n            gfp.internal_flags.noise_shaping = 2;\n        }\n        /* ns-bass tweaks */\n        if (Math.abs(abr_switch_map[r].nsbass) > 0) {\n            var k = (int)(abr_switch_map[r].nsbass * 4);\n            if (k < 0)\n                k += 64;\n            gfp.exp_nspsytune = gfp.exp_nspsytune | (k << 2);\n        }\n\n        if (enforce != 0)\n            gfp.quant_comp = abr_switch_map[r].quant_comp;\n        else if (!(Math.abs(gfp.quant_comp - -1) > 0))\n            gfp.quant_comp = abr_switch_map[r].quant_comp;\n        // SET_OPTION(quant_comp, abr_switch_map[r].quant_comp, -1);\n        if (enforce != 0)\n            gfp.quant_comp_short = abr_switch_map[r].quant_comp_s;\n        else if (!(Math.abs(gfp.quant_comp_short - -1) > 0))\n            gfp.quant_comp_short = abr_switch_map[r].quant_comp_s;\n        // SET_OPTION(quant_comp_short, abr_switch_map[r].quant_comp_s, -1);\n\n        if (enforce != 0)\n            gfp.msfix = abr_switch_map[r].nsmsfix;\n        else if (!(Math.abs(gfp.msfix - -1) > 0))\n            gfp.msfix = abr_switch_map[r].nsmsfix;\n        // SET_OPTION(msfix, abr_switch_map[r].nsmsfix, -1);\n\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre = abr_switch_map[r].st_lrm;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre = abr_switch_map[r].st_lrm;\n        // SET_OPTION(short_threshold_lrm, abr_switch_map[r].st_lrm, -1);\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre_s = abr_switch_map[r].st_s;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre_s - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre_s = abr_switch_map[r].st_s;\n        // SET_OPTION(short_threshold_s, abr_switch_map[r].st_s, -1);\n\n        /*\n         * ABR seems to have big problems with clipping, especially at low\n         * bitrates\n         */\n        /*\n         * so we compensate for that here by using a scale value depending on\n         * bitrate\n         */\n        if (enforce != 0)\n            gfp.scale = abr_switch_map[r].scale;\n        else if (!(Math.abs(gfp.scale - -1) > 0))\n            gfp.scale = abr_switch_map[r].scale;\n        // SET_OPTION(scale, abr_switch_map[r].scale, -1);\n\n        if (enforce != 0)\n            gfp.maskingadjust = abr_switch_map[r].masking_adj;\n        else if (!(Math.abs(gfp.maskingadjust - 0) > 0))\n            gfp.maskingadjust = abr_switch_map[r].masking_adj;\n        // SET_OPTION(maskingadjust, abr_switch_map[r].masking_adj, 0);\n        if (abr_switch_map[r].masking_adj > 0) {\n            if (enforce != 0)\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * .9);\n            else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * .9);\n            // SET_OPTION(maskingadjust_short, abr_switch_map[r].masking_adj *\n            // .9, 0);\n        } else {\n            if (enforce != 0)\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * 1.1);\n            else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * 1.1);\n            // SET_OPTION(maskingadjust_short, abr_switch_map[r].masking_adj *\n            // 1.1, 0);\n        }\n\n        if (enforce != 0)\n            gfp.ATHlower = -abr_switch_map[r].ath_lower / 10.;\n        else if (!(Math.abs((-gfp.ATHlower * 10.) - 0) > 0))\n            gfp.ATHlower = -abr_switch_map[r].ath_lower / 10.;\n        // SET_OPTION(ATHlower, abr_switch_map[r].ath_lower, 0);\n        if (enforce != 0)\n            gfp.ATHcurve = abr_switch_map[r].ath_curve;\n        else if (!(Math.abs(gfp.ATHcurve - -1) > 0))\n            gfp.ATHcurve = abr_switch_map[r].ath_curve;\n        // SET_OPTION(ATHcurve, abr_switch_map[r].ath_curve, -1);\n\n        if (enforce != 0)\n            gfp.interChRatio = abr_switch_map[r].interch;\n        else if (!(Math.abs(gfp.interChRatio - -1) > 0))\n            gfp.interChRatio = abr_switch_map[r].interch;\n        // SET_OPTION(interChRatio, abr_switch_map[r].interch, -1);\n\n        return preset;\n    }\n\n    this.apply_preset = function(gfp, preset, enforce) {\n        /* translate legacy presets */\n        switch (preset) {\n            case Lame.R3MIX:\n            {\n                preset = Lame.V3;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.MEDIUM:\n            {\n                preset = Lame.V4;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.MEDIUM_FAST:\n            {\n                preset = Lame.V4;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.STANDARD:\n            {\n                preset = Lame.V2;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.STANDARD_FAST:\n            {\n                preset = Lame.V2;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.EXTREME:\n            {\n                preset = Lame.V0;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.EXTREME_FAST:\n            {\n                preset = Lame.V0;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.INSANE:\n            {\n                preset = 320;\n                gfp.preset = preset;\n                apply_abr_preset(gfp, preset, enforce);\n                gfp.VBR = VbrMode.vbr_off;\n                return preset;\n            }\n        }\n\n        gfp.preset = preset;\n        {\n            switch (preset) {\n                case Lame.V9:\n                    apply_vbr_preset(gfp, 9, enforce);\n                    return preset;\n                case Lame.V8:\n                    apply_vbr_preset(gfp, 8, enforce);\n                    return preset;\n                case Lame.V7:\n                    apply_vbr_preset(gfp, 7, enforce);\n                    return preset;\n                case Lame.V6:\n                    apply_vbr_preset(gfp, 6, enforce);\n                    return preset;\n                case Lame.V5:\n                    apply_vbr_preset(gfp, 5, enforce);\n                    return preset;\n                case Lame.V4:\n                    apply_vbr_preset(gfp, 4, enforce);\n                    return preset;\n                case Lame.V3:\n                    apply_vbr_preset(gfp, 3, enforce);\n                    return preset;\n                case Lame.V2:\n                    apply_vbr_preset(gfp, 2, enforce);\n                    return preset;\n                case Lame.V1:\n                    apply_vbr_preset(gfp, 1, enforce);\n                    return preset;\n                case Lame.V0:\n                    apply_vbr_preset(gfp, 0, enforce);\n                    return preset;\n                default:\n                    break;\n            }\n        }\n        if (8 <= preset && preset <= 320) {\n            return apply_abr_preset(gfp, preset, enforce);\n        }\n\n        /* no corresponding preset found */\n        gfp.preset = 0;\n        return preset;\n    }\n\n    // Rest from getset.c:\n\n    /**\n     * VBR quality level.<BR>\n     * 0 = highest<BR>\n     * 9 = lowest\n     */\n    function lame_set_VBR_q(gfp, VBR_q) {\n        var ret = 0;\n\n        if (0 > VBR_q) {\n            /* Unknown VBR quality level! */\n            ret = -1;\n            VBR_q = 0;\n        }\n        if (9 < VBR_q) {\n            ret = -1;\n            VBR_q = 9;\n        }\n\n        gfp.VBR_q = VBR_q;\n        gfp.VBR_q_frac = 0;\n        return ret;\n    }\n\n}\n\nmodule.exports = Presets;\n","/*\n * MP3 quantization\n *\n *      Copyright (c) 1999-2000 Mark Taylor\n *      Copyright (c) 1999-2003 Takehiro Tominaga\n *      Copyright (c) 2000-2007 Robert Hegemann\n *      Copyright (c) 2001-2005 Gabriel Bouvigne\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.     See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: Quantize.java,v 1.24 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n//import java.util.Arrays;\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar VBRQuantize = require('./VBRQuantize.js');\nvar CalcNoiseResult = require('./CalcNoiseResult.js');\nvar CalcNoiseData = require('./CalcNoiseData.js');\nvar Encoder = require('./Encoder.js');\nvar GrInfo = require('./GrInfo.js');\nvar L3Side = require('./L3Side.js');\n\nfunction Quantize() {\n    var bs;\n    this.rv = null;\n    var rv;\n    this.qupvt = null;\n    var qupvt;\n\n    var vbr = new VBRQuantize();\n    var tk;\n\n    this.setModules = function (_bs, _rv, _qupvt, _tk) {\n        bs = _bs;\n        rv = _rv;\n        this.rv = _rv;\n        qupvt = _qupvt;\n        this.qupvt = _qupvt;\n        tk = _tk;\n        vbr.setModules(qupvt, tk);\n    }\n\n    /**\n     * convert from L/R <. Mid/Side\n     */\n    this.ms_convert = function (l3_side, gr) {\n        for (var i = 0; i < 576; ++i) {\n            var l = l3_side.tt[gr][0].xr[i];\n            var r = l3_side.tt[gr][1].xr[i];\n            l3_side.tt[gr][0].xr[i] = (l + r) * (Util.SQRT2 * 0.5);\n            l3_side.tt[gr][1].xr[i] = (l - r) * (Util.SQRT2 * 0.5);\n        }\n    };\n\n    /**\n     * mt 6/99\n     *\n     * initializes cod_info, scalefac and xrpow\n     *\n     * returns 0 if all energies in xr are zero, else 1\n     */\n    function init_xrpow_core(cod_info, xrpow, upper, sum) {\n        sum = 0;\n        for (var i = 0; i <= upper; ++i) {\n            var tmp = Math.abs(cod_info.xr[i]);\n            sum += tmp;\n            xrpow[i] = Math.sqrt(tmp * Math.sqrt(tmp));\n\n            if (xrpow[i] > cod_info.xrpow_max)\n                cod_info.xrpow_max = xrpow[i];\n        }\n        return sum;\n    }\n\n    this.init_xrpow = function (gfc, cod_info, xrpow) {\n        var sum = 0;\n        var upper = 0 | cod_info.max_nonzero_coeff;\n\n        assert(xrpow != null);\n        cod_info.xrpow_max = 0;\n\n        /*\n         * check if there is some energy we have to quantize and calculate xrpow\n         * matching our fresh scalefactors\n         */\n        assert(0 <= upper && upper <= 575);\n\n        Arrays.fill(xrpow, upper, 576, 0);\n\n        sum = init_xrpow_core(cod_info, xrpow, upper, sum);\n\n        /*\n         * return 1 if we have something to quantize, else 0\n         */\n        if (sum > 1E-20) {\n            var j = 0;\n            if ((gfc.substep_shaping & 2) != 0)\n                j = 1;\n\n            for (var i = 0; i < cod_info.psymax; i++)\n                gfc.pseudohalf[i] = j;\n\n            return true;\n        }\n\n        Arrays.fill(cod_info.l3_enc, 0, 576, 0);\n        return false;\n    }\n\n    /**\n     * Gabriel Bouvigne feb/apr 2003<BR>\n     * Analog silence detection in partitionned sfb21 or sfb12 for short blocks\n     *\n     * From top to bottom of sfb, changes to 0 coeffs which are below ath. It\n     * stops on the first coeff higher than ath.\n     */\n    function psfb21_analogsilence(gfc, cod_info) {\n        var ath = gfc.ATH;\n        var xr = cod_info.xr;\n\n        if (cod_info.block_type != Encoder.SHORT_TYPE) {\n            /* NORM, START or STOP type, but not SHORT blocks */\n            var stop = false;\n            for (var gsfb = Encoder.PSFB21 - 1; gsfb >= 0 && !stop; gsfb--) {\n                var start = gfc.scalefac_band.psfb21[gsfb];\n                var end = gfc.scalefac_band.psfb21[gsfb + 1];\n                var ath21 = qupvt.athAdjust(ath.adjust, ath.psfb21[gsfb],\n                    ath.floor);\n\n                if (gfc.nsPsy.longfact[21] > 1e-12)\n                    ath21 *= gfc.nsPsy.longfact[21];\n\n                for (var j = end - 1; j >= start; j--) {\n                    if (Math.abs(xr[j]) < ath21)\n                        xr[j] = 0;\n                    else {\n                        stop = true;\n                        break;\n                    }\n                }\n            }\n        } else {\n            /* note: short blocks coeffs are reordered */\n            for (var block = 0; block < 3; block++) {\n                var stop = false;\n                for (var gsfb = Encoder.PSFB12 - 1; gsfb >= 0 && !stop; gsfb--) {\n                    var start = gfc.scalefac_band.s[12]\n                        * 3\n                        + (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12])\n                        * block\n                        + (gfc.scalefac_band.psfb12[gsfb] - gfc.scalefac_band.psfb12[0]);\n                    var end = start\n                        + (gfc.scalefac_band.psfb12[gsfb + 1] - gfc.scalefac_band.psfb12[gsfb]);\n                    var ath12 = qupvt.athAdjust(ath.adjust, ath.psfb12[gsfb],\n                        ath.floor);\n\n                    if (gfc.nsPsy.shortfact[12] > 1e-12)\n                        ath12 *= gfc.nsPsy.shortfact[12];\n\n                    for (var j = end - 1; j >= start; j--) {\n                        if (Math.abs(xr[j]) < ath12)\n                            xr[j] = 0;\n                        else {\n                            stop = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n\n    this.init_outer_loop = function (gfc, cod_info) {\n        /*\n         * initialize fresh cod_info\n         */\n        cod_info.part2_3_length = 0;\n        cod_info.big_values = 0;\n        cod_info.count1 = 0;\n        cod_info.global_gain = 210;\n        cod_info.scalefac_compress = 0;\n        /* mixed_block_flag, block_type was set in psymodel.c */\n        cod_info.table_select[0] = 0;\n        cod_info.table_select[1] = 0;\n        cod_info.table_select[2] = 0;\n        cod_info.subblock_gain[0] = 0;\n        cod_info.subblock_gain[1] = 0;\n        cod_info.subblock_gain[2] = 0;\n        cod_info.subblock_gain[3] = 0;\n        /* this one is always 0 */\n        cod_info.region0_count = 0;\n        cod_info.region1_count = 0;\n        cod_info.preflag = 0;\n        cod_info.scalefac_scale = 0;\n        cod_info.count1table_select = 0;\n        cod_info.part2_length = 0;\n        cod_info.sfb_lmax = Encoder.SBPSY_l;\n        cod_info.sfb_smin = Encoder.SBPSY_s;\n        cod_info.psy_lmax = gfc.sfb21_extra ? Encoder.SBMAX_l : Encoder.SBPSY_l;\n        cod_info.psymax = cod_info.psy_lmax;\n        cod_info.sfbmax = cod_info.sfb_lmax;\n        cod_info.sfbdivide = 11;\n        for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\n            cod_info.width[sfb] = gfc.scalefac_band.l[sfb + 1]\n                - gfc.scalefac_band.l[sfb];\n            /* which is always 0. */\n            cod_info.window[sfb] = 3;\n        }\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            var ixwork = new_float(576);\n\n            cod_info.sfb_smin = 0;\n            cod_info.sfb_lmax = 0;\n            if (cod_info.mixed_block_flag != 0) {\n                /*\n                 * MPEG-1: sfbs 0-7 long block, 3-12 short blocks MPEG-2(.5):\n                 * sfbs 0-5 long block, 3-12 short blocks\n                 */\n                cod_info.sfb_smin = 3;\n                cod_info.sfb_lmax = gfc.mode_gr * 2 + 4;\n            }\n            cod_info.psymax = cod_info.sfb_lmax\n                + 3\n                * ((gfc.sfb21_extra ? Encoder.SBMAX_s : Encoder.SBPSY_s) - cod_info.sfb_smin);\n            cod_info.sfbmax = cod_info.sfb_lmax + 3\n                * (Encoder.SBPSY_s - cod_info.sfb_smin);\n            cod_info.sfbdivide = cod_info.sfbmax - 18;\n            cod_info.psy_lmax = cod_info.sfb_lmax;\n            /* re-order the short blocks, for more efficient encoding below */\n            /* By Takehiro TOMINAGA */\n            /*\n             * Within each scalefactor band, data is given for successive time\n             * windows, beginning with window 0 and ending with window 2. Within\n             * each window, the quantized values are then arranged in order of\n             * increasing frequency...\n             */\n            var ix = gfc.scalefac_band.l[cod_info.sfb_lmax];\n            System.arraycopy(cod_info.xr, 0, ixwork, 0, 576);\n            for (var sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                var start = gfc.scalefac_band.s[sfb];\n                var end = gfc.scalefac_band.s[sfb + 1];\n                for (var window = 0; window < 3; window++) {\n                    for (var l = start; l < end; l++) {\n                        cod_info.xr[ix++] = ixwork[3 * l + window];\n                    }\n                }\n            }\n\n            var j = cod_info.sfb_lmax;\n            for (var sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                cod_info.width[j] = cod_info.width[j + 1] = cod_info.width[j + 2] = gfc.scalefac_band.s[sfb + 1]\n                    - gfc.scalefac_band.s[sfb];\n                cod_info.window[j] = 0;\n                cod_info.window[j + 1] = 1;\n                cod_info.window[j + 2] = 2;\n                j += 3;\n            }\n        }\n\n        cod_info.count1bits = 0;\n        cod_info.sfb_partition_table = qupvt.nr_of_sfb_block[0][0];\n        cod_info.slen[0] = 0;\n        cod_info.slen[1] = 0;\n        cod_info.slen[2] = 0;\n        cod_info.slen[3] = 0;\n\n        cod_info.max_nonzero_coeff = 575;\n\n        /*\n         * fresh scalefactors are all zero\n         */\n        Arrays.fill(cod_info.scalefac, 0);\n\n        psfb21_analogsilence(gfc, cod_info);\n    };\n\n    function BinSearchDirection(ordinal) {\n        this.ordinal = ordinal;\n    }\n\n    BinSearchDirection.BINSEARCH_NONE = new BinSearchDirection(0);\n    BinSearchDirection.BINSEARCH_UP = new BinSearchDirection(1);\n    BinSearchDirection.BINSEARCH_DOWN = new BinSearchDirection(2);\n\n    /**\n     * author/date??\n     *\n     * binary step size search used by outer_loop to get a quantizer step size\n     * to start with\n     */\n    function bin_search_StepSize(gfc, cod_info, desired_rate, ch, xrpow) {\n        var nBits;\n        var CurrentStep = gfc.CurrentStep[ch];\n        var flagGoneOver = false;\n        var start = gfc.OldValue[ch];\n        var Direction = BinSearchDirection.BINSEARCH_NONE;\n        cod_info.global_gain = start;\n        desired_rate -= cod_info.part2_length;\n\n        assert(CurrentStep != 0);\n        for (; ;) {\n            var step;\n            nBits = tk.count_bits(gfc, xrpow, cod_info, null);\n\n            if (CurrentStep == 1 || nBits == desired_rate)\n                break;\n            /* nothing to adjust anymore */\n\n            if (nBits > desired_rate) {\n                /* increase Quantize_StepSize */\n                if (Direction == BinSearchDirection.BINSEARCH_DOWN)\n                    flagGoneOver = true;\n\n                if (flagGoneOver)\n                    CurrentStep /= 2;\n                Direction = BinSearchDirection.BINSEARCH_UP;\n                step = CurrentStep;\n            } else {\n                /* decrease Quantize_StepSize */\n                if (Direction == BinSearchDirection.BINSEARCH_UP)\n                    flagGoneOver = true;\n\n                if (flagGoneOver)\n                    CurrentStep /= 2;\n                Direction = BinSearchDirection.BINSEARCH_DOWN;\n                step = -CurrentStep;\n            }\n            cod_info.global_gain += step;\n            if (cod_info.global_gain < 0) {\n                cod_info.global_gain = 0;\n                flagGoneOver = true;\n            }\n            if (cod_info.global_gain > 255) {\n                cod_info.global_gain = 255;\n                flagGoneOver = true;\n            }\n        }\n\n        assert(cod_info.global_gain >= 0);\n        assert(cod_info.global_gain < 256);\n\n        while (nBits > desired_rate && cod_info.global_gain < 255) {\n            cod_info.global_gain++;\n            nBits = tk.count_bits(gfc, xrpow, cod_info, null);\n        }\n        gfc.CurrentStep[ch] = (start - cod_info.global_gain >= 4) ? 4 : 2;\n        gfc.OldValue[ch] = cod_info.global_gain;\n        cod_info.part2_3_length = nBits;\n        return nBits;\n    }\n\n    this.trancate_smallspectrums = function (gfc, gi, l3_xmin, work) {\n        var distort = new_float(L3Side.SFBMAX);\n\n        if ((0 == (gfc.substep_shaping & 4) && gi.block_type == Encoder.SHORT_TYPE)\n            || (gfc.substep_shaping & 0x80) != 0)\n            return;\n        qupvt.calc_noise(gi, l3_xmin, distort, new CalcNoiseResult(), null);\n        for (var j = 0; j < 576; j++) {\n            var xr = 0.0;\n            if (gi.l3_enc[j] != 0)\n                xr = Math.abs(gi.xr[j]);\n            work[j] = xr;\n        }\n\n        var j = 0;\n        var sfb = 8;\n        if (gi.block_type == Encoder.SHORT_TYPE)\n            sfb = 6;\n        do {\n            var allowedNoise, trancateThreshold;\n            var nsame, start;\n\n            var width = gi.width[sfb];\n            j += width;\n            if (distort[sfb] >= 1.0)\n                continue;\n\n            Arrays.sort(work, j - width, width);\n            if (BitStream.EQ(work[j - 1], 0.0))\n                continue;\n            /* all zero sfb */\n\n            allowedNoise = (1.0 - distort[sfb]) * l3_xmin[sfb];\n            trancateThreshold = 0.0;\n            start = 0;\n            do {\n                var noise;\n                for (nsame = 1; start + nsame < width; nsame++)\n                    if (BitStream.NEQ(work[start + j - width], work[start + j\n                        + nsame - width]))\n                        break;\n\n                noise = work[start + j - width] * work[start + j - width]\n                    * nsame;\n                if (allowedNoise < noise) {\n                    if (start != 0)\n                        trancateThreshold = work[start + j - width - 1];\n                    break;\n                }\n                allowedNoise -= noise;\n                start += nsame;\n            } while (start < width);\n            if (BitStream.EQ(trancateThreshold, 0.0))\n                continue;\n\n            do {\n                if (Math.abs(gi.xr[j - width]) <= trancateThreshold)\n                    gi.l3_enc[j - width] = 0;\n            } while (--width > 0);\n        } while (++sfb < gi.psymax);\n\n        gi.part2_3_length = tk.noquant_count_bits(gfc, gi, null);\n    };\n\n    /**\n     * author/date??\n     *\n     * Function: Returns zero if there is a scalefac which has not been\n     * amplified. Otherwise it returns one.\n     */\n    function loop_break(cod_info) {\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++)\n            if (cod_info.scalefac[sfb]\n                + cod_info.subblock_gain[cod_info.window[sfb]] == 0)\n                return false;\n\n        return true;\n    }\n\n    /* mt 5/99: Function: Improved calc_noise for a single channel */\n\n    function penalties(noise) {\n        return Util.FAST_LOG10((0.368 + 0.632 * noise * noise * noise));\n    }\n\n    /**\n     * author/date??\n     *\n     * several different codes to decide which quantization is better\n     */\n    function get_klemm_noise(distort, gi) {\n        var klemm_noise = 1E-37;\n        for (var sfb = 0; sfb < gi.psymax; sfb++)\n            klemm_noise += penalties(distort[sfb]);\n\n        return Math.max(1e-20, klemm_noise);\n    }\n\n    function quant_compare(quant_comp, best, calc, gi, distort) {\n        /**\n         * noise is given in decibels (dB) relative to masking thesholds.<BR>\n         *\n         * over_noise: ??? (the previous comment is fully wrong)<BR>\n         * tot_noise: ??? (the previous comment is fully wrong)<BR>\n         * max_noise: max quantization noise\n         */\n        var better;\n\n        switch (quant_comp) {\n            default:\n            case 9:\n            {\n                if (best.over_count > 0) {\n                    /* there are distorted sfb */\n                    better = calc.over_SSD <= best.over_SSD;\n                    if (calc.over_SSD == best.over_SSD)\n                        better = calc.bits < best.bits;\n                } else {\n                    /* no distorted sfb */\n                    better = ((calc.max_noise < 0) && ((calc.max_noise * 10 + calc.bits) <= (best.max_noise * 10 + best.bits)));\n                }\n                break;\n            }\n\n            case 0:\n                better = calc.over_count < best.over_count\n                    || (calc.over_count == best.over_count && calc.over_noise < best.over_noise)\n                    || (calc.over_count == best.over_count\n                    && BitStream.EQ(calc.over_noise, best.over_noise) && calc.tot_noise < best.tot_noise);\n                break;\n\n            case 8:\n                calc.max_noise = get_klemm_noise(distort, gi);\n            //$FALL-THROUGH$\n            case 1:\n                better = calc.max_noise < best.max_noise;\n                break;\n            case 2:\n                better = calc.tot_noise < best.tot_noise;\n                break;\n            case 3:\n                better = (calc.tot_noise < best.tot_noise)\n                    && (calc.max_noise < best.max_noise);\n                break;\n            case 4:\n                better = (calc.max_noise <= 0.0 && best.max_noise > 0.2)\n                    || (calc.max_noise <= 0.0 && best.max_noise < 0.0\n                    && best.max_noise > calc.max_noise - 0.2 && calc.tot_noise < best.tot_noise)\n                    || (calc.max_noise <= 0.0 && best.max_noise > 0.0\n                    && best.max_noise > calc.max_noise - 0.2 && calc.tot_noise < best.tot_noise\n                    + best.over_noise)\n                    || (calc.max_noise > 0.0 && best.max_noise > -0.05\n                    && best.max_noise > calc.max_noise - 0.1 && calc.tot_noise\n                    + calc.over_noise < best.tot_noise\n                    + best.over_noise)\n                    || (calc.max_noise > 0.0 && best.max_noise > -0.1\n                    && best.max_noise > calc.max_noise - 0.15 && calc.tot_noise\n                    + calc.over_noise + calc.over_noise < best.tot_noise\n                    + best.over_noise + best.over_noise);\n                break;\n            case 5:\n                better = calc.over_noise < best.over_noise\n                    || (BitStream.EQ(calc.over_noise, best.over_noise) && calc.tot_noise < best.tot_noise);\n                break;\n            case 6:\n                better = calc.over_noise < best.over_noise\n                    || (BitStream.EQ(calc.over_noise, best.over_noise) && (calc.max_noise < best.max_noise || (BitStream\n                        .EQ(calc.max_noise, best.max_noise) && calc.tot_noise <= best.tot_noise)));\n                break;\n            case 7:\n                better = calc.over_count < best.over_count\n                    || calc.over_noise < best.over_noise;\n                break;\n        }\n\n        if (best.over_count == 0) {\n            /*\n             * If no distorted bands, only use this quantization if it is\n             * better, and if it uses less bits. Unfortunately, part2_3_length\n             * is sometimes a poor estimator of the final size at low bitrates.\n             */\n            better = better && calc.bits < best.bits;\n        }\n\n        return better;\n    }\n\n    /**\n     * author/date??\n     *\n     * <PRE>\n     *  Amplify the scalefactor bands that violate the masking threshold.\n     *  See ISO 11172-3 Section C.1.5.4.3.5\n     *\n     *  distort[] = noise/masking\n     *  distort[] > 1   ==> noise is not masked\n     *  distort[] < 1   ==> noise is masked\n     *  max_dist = maximum value of distort[]\n     *\n     *  Three algorithms:\n     *  noise_shaping_amp\n     *        0             Amplify all bands with distort[]>1.\n     *\n     *        1             Amplify all bands with distort[] >= max_dist^(.5);\n     *                     ( 50% in the db scale)\n     *\n     *        2             Amplify first band with distort[] >= max_dist;\n     *\n     *\n     *  For algorithms 0 and 1, if max_dist < 1, then amplify all bands\n     *  with distort[] >= .95*max_dist.  This is to make sure we always\n     *  amplify at least one band.\n     * </PRE>\n     */\n    function amp_scalefac_bands(gfp, cod_info, distort, xrpow, bRefine) {\n        var gfc = gfp.internal_flags;\n        var ifqstep34;\n\n        if (cod_info.scalefac_scale == 0) {\n            ifqstep34 = 1.29683955465100964055;\n            /* 2**(.75*.5) */\n        } else {\n            ifqstep34 = 1.68179283050742922612;\n            /* 2**(.75*1) */\n        }\n\n        /* compute maximum value of distort[] */\n        var trigger = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n            if (trigger < distort[sfb])\n                trigger = distort[sfb];\n        }\n\n        var noise_shaping_amp = gfc.noise_shaping_amp;\n        if (noise_shaping_amp == 3) {\n            if (bRefine)\n                noise_shaping_amp = 2;\n            else\n                noise_shaping_amp = 1;\n        }\n        switch (noise_shaping_amp) {\n            case 2:\n                /* amplify exactly 1 band */\n                break;\n\n            case 1:\n                /* amplify bands within 50% of max (on db scale) */\n                if (trigger > 1.0)\n                    trigger = Math.pow(trigger, .5);\n                else\n                    trigger *= .95;\n                break;\n\n            case 0:\n            default:\n                /* ISO algorithm. amplify all bands with distort>1 */\n                if (trigger > 1.0)\n                    trigger = 1.0;\n                else\n                    trigger *= .95;\n                break;\n        }\n\n        var j = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n            var width = cod_info.width[sfb];\n            var l;\n            j += width;\n            if (distort[sfb] < trigger)\n                continue;\n\n            if ((gfc.substep_shaping & 2) != 0) {\n                gfc.pseudohalf[sfb] = (0 == gfc.pseudohalf[sfb]) ? 1 : 0;\n                if (0 == gfc.pseudohalf[sfb] && gfc.noise_shaping_amp == 2)\n                    return;\n            }\n            cod_info.scalefac[sfb]++;\n            for (l = -width; l < 0; l++) {\n                xrpow[j + l] *= ifqstep34;\n                if (xrpow[j + l] > cod_info.xrpow_max)\n                    cod_info.xrpow_max = xrpow[j + l];\n            }\n\n            if (gfc.noise_shaping_amp == 2)\n                return;\n        }\n    }\n\n    /**\n     * Takehiro Tominaga 2000-xx-xx\n     *\n     * turns on scalefac scale and adjusts scalefactors\n     */\n    function inc_scalefac_scale(cod_info, xrpow) {\n        var ifqstep34 = 1.29683955465100964055;\n\n        var j = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n            var width = cod_info.width[sfb];\n            var s = cod_info.scalefac[sfb];\n            if (cod_info.preflag != 0)\n                s += qupvt.pretab[sfb];\n            j += width;\n            if ((s & 1) != 0) {\n                s++;\n                for (var l = -width; l < 0; l++) {\n                    xrpow[j + l] *= ifqstep34;\n                    if (xrpow[j + l] > cod_info.xrpow_max)\n                        cod_info.xrpow_max = xrpow[j + l];\n                }\n            }\n            cod_info.scalefac[sfb] = s >> 1;\n        }\n        cod_info.preflag = 0;\n        cod_info.scalefac_scale = 1;\n    }\n\n    /**\n     * Takehiro Tominaga 2000-xx-xx\n     *\n     * increases the subblock gain and adjusts scalefactors\n     */\n    function inc_subblock_gain(gfc, cod_info, xrpow) {\n        var sfb;\n        var scalefac = cod_info.scalefac;\n\n        /* subbloc_gain can't do anything in the long block region */\n        for (sfb = 0; sfb < cod_info.sfb_lmax; sfb++) {\n            if (scalefac[sfb] >= 16)\n                return true;\n        }\n\n        for (var window = 0; window < 3; window++) {\n            var s1 = 0;\n            var s2 = 0;\n\n            for (sfb = cod_info.sfb_lmax + window; sfb < cod_info.sfbdivide; sfb += 3) {\n                if (s1 < scalefac[sfb])\n                    s1 = scalefac[sfb];\n            }\n            for (; sfb < cod_info.sfbmax; sfb += 3) {\n                if (s2 < scalefac[sfb])\n                    s2 = scalefac[sfb];\n            }\n\n            if (s1 < 16 && s2 < 8)\n                continue;\n\n            if (cod_info.subblock_gain[window] >= 7)\n                return true;\n\n            /*\n             * even though there is no scalefactor for sfb12 subblock gain\n             * affects upper frequencies too, that's why we have to go up to\n             * SBMAX_s\n             */\n            cod_info.subblock_gain[window]++;\n            var j = gfc.scalefac_band.l[cod_info.sfb_lmax];\n            for (sfb = cod_info.sfb_lmax + window; sfb < cod_info.sfbmax; sfb += 3) {\n                var amp;\n                var width = cod_info.width[sfb];\n                var s = scalefac[sfb];\n                assert(s >= 0);\n                s = s - (4 >> cod_info.scalefac_scale);\n                if (s >= 0) {\n                    scalefac[sfb] = s;\n                    j += width * 3;\n                    continue;\n                }\n\n                scalefac[sfb] = 0;\n                {\n                    var gain = 210 + (s << (cod_info.scalefac_scale + 1));\n                    amp = qupvt.IPOW20(gain);\n                }\n                j += width * (window + 1);\n                for (var l = -width; l < 0; l++) {\n                    xrpow[j + l] *= amp;\n                    if (xrpow[j + l] > cod_info.xrpow_max)\n                        cod_info.xrpow_max = xrpow[j + l];\n                }\n                j += width * (3 - window - 1);\n            }\n\n            {\n                var amp = qupvt.IPOW20(202);\n                j += cod_info.width[sfb] * (window + 1);\n                for (var l = -cod_info.width[sfb]; l < 0; l++) {\n                    xrpow[j + l] *= amp;\n                    if (xrpow[j + l] > cod_info.xrpow_max)\n                        cod_info.xrpow_max = xrpow[j + l];\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * <PRE>\n     *  Takehiro Tominaga /date??\n     *  Robert Hegemann 2000-09-06: made a function of it\n     *\n     *  amplifies scalefactor bands,\n     *   - if all are already amplified returns 0\n     *   - if some bands are amplified too much:\n     *      * try to increase scalefac_scale\n     *      * if already scalefac_scale was set\n     *          try on short blocks to increase subblock gain\n     * </PRE>\n     */\n    function balance_noise(gfp, cod_info, distort, xrpow, bRefine) {\n        var gfc = gfp.internal_flags;\n\n        amp_scalefac_bands(gfp, cod_info, distort, xrpow, bRefine);\n\n        /*\n         * check to make sure we have not amplified too much loop_break returns\n         * 0 if there is an unamplified scalefac scale_bitcount returns 0 if no\n         * scalefactors are too large\n         */\n\n        var status = loop_break(cod_info);\n\n        if (status)\n            return false;\n        /* all bands amplified */\n\n        /*\n         * not all scalefactors have been amplified. so these scalefacs are\n         * possibly valid. encode them:\n         */\n        if (gfc.mode_gr == 2)\n            status = tk.scale_bitcount(cod_info);\n        else\n            status = tk.scale_bitcount_lsf(gfc, cod_info);\n\n        if (!status)\n            return true;\n        /* amplified some bands not exceeding limits */\n\n        /*\n         * some scalefactors are too large. lets try setting scalefac_scale=1\n         */\n        if (gfc.noise_shaping > 1) {\n            Arrays.fill(gfc.pseudohalf, 0);\n            if (0 == cod_info.scalefac_scale) {\n                inc_scalefac_scale(cod_info, xrpow);\n                status = false;\n            } else {\n                if (cod_info.block_type == Encoder.SHORT_TYPE\n                    && gfc.subblock_gain > 0) {\n                    status = (inc_subblock_gain(gfc, cod_info, xrpow) || loop_break(cod_info));\n                }\n            }\n        }\n\n        if (!status) {\n            if (gfc.mode_gr == 2)\n                status = tk.scale_bitcount(cod_info);\n            else\n                status = tk.scale_bitcount_lsf(gfc, cod_info);\n        }\n        return !status;\n    }\n\n    /**\n     * <PRE>\n     *  Function: The outer iteration loop controls the masking conditions\n     *  of all scalefactorbands. It computes the best scalefac and\n     *  global gain. This module calls the inner iteration loop\n     *\n     *  mt 5/99 completely rewritten to allow for bit reservoir control,\n     *  mid/side channels with L/R or mid/side masking thresholds,\n     *  and chooses best quantization instead of last quantization when\n     *  no distortion free quantization can be found.\n     *\n     *  added VBR support mt 5/99\n     *\n     *  some code shuffle rh 9/00\n     * </PRE>\n     *\n     * @param l3_xmin\n     *            allowed distortion\n     * @param xrpow\n     *            coloured magnitudes of spectral\n     * @param targ_bits\n     *            maximum allowed bits\n     */\n    this.outer_loop = function (gfp, cod_info, l3_xmin, xrpow, ch, targ_bits) {\n        var gfc = gfp.internal_flags;\n        var cod_info_w = new GrInfo();\n        var save_xrpow = new_float(576);\n        var distort = new_float(L3Side.SFBMAX);\n        var best_noise_info = new CalcNoiseResult();\n        var better;\n        var prev_noise = new CalcNoiseData();\n        var best_part2_3_length = 9999999;\n        var bEndOfSearch = false;\n        var bRefine = false;\n        var best_ggain_pass1 = 0;\n\n        bin_search_StepSize(gfc, cod_info, targ_bits, ch, xrpow);\n\n        if (0 == gfc.noise_shaping)\n        /* fast mode, no noise shaping, we are ready */\n            return 100;\n        /* default noise_info.over_count */\n\n        /* compute the distortion in this quantization */\n        /* coefficients and thresholds both l/r (or both mid/side) */\n        qupvt.calc_noise(cod_info, l3_xmin, distort, best_noise_info,\n            prev_noise);\n        best_noise_info.bits = cod_info.part2_3_length;\n\n        cod_info_w.assign(cod_info);\n        var age = 0;\n        System.arraycopy(xrpow, 0, save_xrpow, 0, 576);\n\n        while (!bEndOfSearch) {\n            /* BEGIN MAIN LOOP */\n            do {\n                var noise_info = new CalcNoiseResult();\n                var search_limit;\n                var maxggain = 255;\n\n                /*\n                 * When quantization with no distorted bands is found, allow up\n                 * to X new unsuccesful tries in serial. This gives us more\n                 * possibilities for different quant_compare modes. Much more\n                 * than 3 makes not a big difference, it is only slower.\n                 */\n\n                if ((gfc.substep_shaping & 2) != 0) {\n                    search_limit = 20;\n                } else {\n                    search_limit = 3;\n                }\n\n                /*\n                 * Check if the last scalefactor band is distorted. in VBR mode\n                 * we can't get rid of the distortion, so quit now and VBR mode\n                 * will try again with more bits. (makes a 10% speed increase,\n                 * the files I tested were binary identical, 2000/05/20 Robert\n                 * Hegemann) distort[] > 1 means noise > allowed noise\n                 */\n                if (gfc.sfb21_extra) {\n                    if (distort[cod_info_w.sfbmax] > 1.0)\n                        break;\n                    if (cod_info_w.block_type == Encoder.SHORT_TYPE\n                        && (distort[cod_info_w.sfbmax + 1] > 1.0 || distort[cod_info_w.sfbmax + 2] > 1.0))\n                        break;\n                }\n\n                /* try a new scalefactor conbination on cod_info_w */\n                if (!balance_noise(gfp, cod_info_w, distort, xrpow, bRefine))\n                    break;\n                if (cod_info_w.scalefac_scale != 0)\n                    maxggain = 254;\n\n                /*\n                 * inner_loop starts with the initial quantization step computed\n                 * above and slowly increases until the bits < huff_bits. Thus\n                 * it is important not to start with too large of an inital\n                 * quantization step. Too small is ok, but inner_loop will take\n                 * longer\n                 */\n                var huff_bits = targ_bits - cod_info_w.part2_length;\n                if (huff_bits <= 0)\n                    break;\n\n                /*\n                 * increase quantizer stepsize until needed bits are below\n                 * maximum\n                 */\n                while ((cod_info_w.part2_3_length = tk.count_bits(gfc, xrpow,\n                    cod_info_w, prev_noise)) > huff_bits\n                && cod_info_w.global_gain <= maxggain)\n                    cod_info_w.global_gain++;\n\n                if (cod_info_w.global_gain > maxggain)\n                    break;\n\n                if (best_noise_info.over_count == 0) {\n\n                    while ((cod_info_w.part2_3_length = tk.count_bits(gfc,\n                        xrpow, cod_info_w, prev_noise)) > best_part2_3_length\n                    && cod_info_w.global_gain <= maxggain)\n                        cod_info_w.global_gain++;\n\n                    if (cod_info_w.global_gain > maxggain)\n                        break;\n                }\n\n                /* compute the distortion in this quantization */\n                qupvt.calc_noise(cod_info_w, l3_xmin, distort, noise_info,\n                    prev_noise);\n                noise_info.bits = cod_info_w.part2_3_length;\n\n                /*\n                 * check if this quantization is better than our saved\n                 * quantization\n                 */\n                if (cod_info.block_type != Encoder.SHORT_TYPE) {\n                    // NORM, START or STOP type\n                    better = gfp.quant_comp;\n                } else\n                    better = gfp.quant_comp_short;\n\n                better = quant_compare(better, best_noise_info, noise_info,\n                    cod_info_w, distort) ? 1 : 0;\n\n                /* save data so we can restore this quantization later */\n                if (better != 0) {\n                    best_part2_3_length = cod_info.part2_3_length;\n                    best_noise_info = noise_info;\n                    cod_info.assign(cod_info_w);\n                    age = 0;\n                    /* save data so we can restore this quantization later */\n                    /* store for later reuse */\n                    System.arraycopy(xrpow, 0, save_xrpow, 0, 576);\n                } else {\n                    /* early stop? */\n                    if (gfc.full_outer_loop == 0) {\n                        if (++age > search_limit\n                            && best_noise_info.over_count == 0)\n                            break;\n                        if ((gfc.noise_shaping_amp == 3) && bRefine && age > 30)\n                            break;\n                        if ((gfc.noise_shaping_amp == 3)\n                            && bRefine\n                            && (cod_info_w.global_gain - best_ggain_pass1) > 15)\n                            break;\n                    }\n                }\n            } while ((cod_info_w.global_gain + cod_info_w.scalefac_scale) < 255);\n\n            if (gfc.noise_shaping_amp == 3) {\n                if (!bRefine) {\n                    /* refine search */\n                    cod_info_w.assign(cod_info);\n                    System.arraycopy(save_xrpow, 0, xrpow, 0, 576);\n                    age = 0;\n                    best_ggain_pass1 = cod_info_w.global_gain;\n\n                    bRefine = true;\n                } else {\n                    /* search already refined, stop */\n                    bEndOfSearch = true;\n                }\n\n            } else {\n                bEndOfSearch = true;\n            }\n        }\n\n        assert((cod_info.global_gain + cod_info.scalefac_scale) <= 255);\n        /*\n         * finish up\n         */\n        if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\n        /* restore for reuse on next try */\n            System.arraycopy(save_xrpow, 0, xrpow, 0, 576);\n        /*\n         * do the 'substep shaping'\n         */\n        else if ((gfc.substep_shaping & 1) != 0)\n            trancate_smallspectrums(gfc, cod_info, l3_xmin, xrpow);\n\n        return best_noise_info.over_count;\n    }\n\n    /**\n     * Robert Hegemann 2000-09-06\n     *\n     * update reservoir status after FINAL quantization/bitrate\n     */\n    this.iteration_finish_one = function (gfc, gr, ch) {\n        var l3_side = gfc.l3_side;\n        var cod_info = l3_side.tt[gr][ch];\n\n        /*\n         * try some better scalefac storage\n         */\n        tk.best_scalefac_store(gfc, gr, ch, l3_side);\n\n        /*\n         * best huffman_divide may save some bits too\n         */\n        if (gfc.use_best_huffman == 1)\n            tk.best_huffman_divide(gfc, cod_info);\n\n        /*\n         * update reservoir status after FINAL quantization/bitrate\n         */\n        rv.ResvAdjust(gfc, cod_info);\n    };\n\n    /**\n     *\n     * 2000-09-04 Robert Hegemann\n     *\n     * @param l3_xmin\n     *            allowed distortion of the scalefactor\n     * @param xrpow\n     *            coloured magnitudes of spectral values\n     */\n    this.VBR_encode_granule = function (gfp, cod_info, l3_xmin, xrpow, ch, min_bits, max_bits) {\n        var gfc = gfp.internal_flags;\n        var bst_cod_info = new GrInfo();\n        var bst_xrpow = new_float(576);\n        var Max_bits = max_bits;\n        var real_bits = max_bits + 1;\n        var this_bits = (max_bits + min_bits) / 2;\n        var dbits, over, found = 0;\n        var sfb21_extra = gfc.sfb21_extra;\n\n        assert(Max_bits <= LameInternalFlags.MAX_BITS_PER_CHANNEL);\n        Arrays.fill(bst_cod_info.l3_enc, 0);\n\n        /*\n         * search within round about 40 bits of optimal\n         */\n        do {\n            assert(this_bits >= min_bits);\n            assert(this_bits <= max_bits);\n            assert(min_bits <= max_bits);\n\n            if (this_bits > Max_bits - 42)\n                gfc.sfb21_extra = false;\n            else\n                gfc.sfb21_extra = sfb21_extra;\n\n            over = outer_loop(gfp, cod_info, l3_xmin, xrpow, ch, this_bits);\n\n            /*\n             * is quantization as good as we are looking for ? in this case: is\n             * no scalefactor band distorted?\n             */\n            if (over <= 0) {\n                found = 1;\n                /*\n                 * now we know it can be done with \"real_bits\" and maybe we can\n                 * skip some iterations\n                 */\n                real_bits = cod_info.part2_3_length;\n\n                /*\n                 * store best quantization so far\n                 */\n                bst_cod_info.assign(cod_info);\n                System.arraycopy(xrpow, 0, bst_xrpow, 0, 576);\n\n                /*\n                 * try with fewer bits\n                 */\n                max_bits = real_bits - 32;\n                dbits = max_bits - min_bits;\n                this_bits = (max_bits + min_bits) / 2;\n            } else {\n                /*\n                 * try with more bits\n                 */\n                min_bits = this_bits + 32;\n                dbits = max_bits - min_bits;\n                this_bits = (max_bits + min_bits) / 2;\n\n                if (found != 0) {\n                    found = 2;\n                    /*\n                     * start again with best quantization so far\n                     */\n                    cod_info.assign(bst_cod_info);\n                    System.arraycopy(bst_xrpow, 0, xrpow, 0, 576);\n                }\n            }\n        } while (dbits > 12);\n\n        gfc.sfb21_extra = sfb21_extra;\n\n        /*\n         * found=0 => nothing found, use last one found=1 => we just found the\n         * best and left the loop found=2 => we restored a good one and have now\n         * l3_enc to restore too\n         */\n        if (found == 2) {\n            System.arraycopy(bst_cod_info.l3_enc, 0, cod_info.l3_enc, 0, 576);\n        }\n        assert(cod_info.part2_3_length <= Max_bits);\n    }\n\n    /**\n     * Robert Hegemann 2000-09-05\n     *\n     * calculates * how many bits are available for analog silent granules * how\n     * many bits to use for the lowest allowed bitrate * how many bits each\n     * bitrate would provide\n     */\n    this.get_framebits = function (gfp, frameBits) {\n        var gfc = gfp.internal_flags;\n\n        /*\n         * always use at least this many bits per granule per channel unless we\n         * detect analog silence, see below\n         */\n        gfc.bitrate_index = gfc.VBR_min_bitrate;\n        var bitsPerFrame = bs.getframebits(gfp);\n\n        /*\n         * bits for analog silence\n         */\n        gfc.bitrate_index = 1;\n        bitsPerFrame = bs.getframebits(gfp);\n\n        for (var i = 1; i <= gfc.VBR_max_bitrate; i++) {\n            gfc.bitrate_index = i;\n            var mb = new MeanBits(bitsPerFrame);\n            frameBits[i] = rv.ResvFrameBegin(gfp, mb);\n            bitsPerFrame = mb.bits;\n        }\n    };\n\n    /* RH: this one needs to be overhauled sometime */\n\n    /**\n     * <PRE>\n     *  2000-09-04 Robert Hegemann\n     *\n     *  * converts LR to MS coding when necessary\n     *  * calculates allowed/adjusted quantization noise amounts\n     *  * detects analog silent frames\n     *\n     *  some remarks:\n     *  - lower masking depending on Quality setting\n     *  - quality control together with adjusted ATH MDCT scaling\n     *    on lower quality setting allocate more noise from\n     *    ATH masking, and on higher quality setting allocate\n     *    less noise from ATH masking.\n     *  - experiments show that going more than 2dB over GPSYCHO's\n     *    limits ends up in very annoying artefacts\n     * </PRE>\n     */\n    this.VBR_old_prepare = function (gfp, pe, ms_ener_ratio, ratio, l3_xmin, frameBits, min_bits,\n                                     max_bits, bands) {\n        var gfc = gfp.internal_flags;\n\n        var masking_lower_db, adjust = 0.0;\n        var analog_silence = 1;\n        var bits = 0;\n\n        gfc.bitrate_index = gfc.VBR_max_bitrate;\n        var avg = rv.ResvFrameBegin(gfp, new MeanBits(0)) / gfc.mode_gr;\n\n        get_framebits(gfp, frameBits);\n\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            var mxb = qupvt.on_pe(gfp, pe, max_bits[gr], avg, gr, 0);\n            if (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n                ms_convert(gfc.l3_side, gr);\n                qupvt.reduce_side(max_bits[gr], ms_ener_ratio[gr], avg, mxb);\n            }\n            for (var ch = 0; ch < gfc.channels_out; ++ch) {\n                var cod_info = gfc.l3_side.tt[gr][ch];\n\n                if (cod_info.block_type != Encoder.SHORT_TYPE) {\n                    // NORM, START or STOP type\n                    adjust = 1.28 / (1 + Math\n                            .exp(3.5 - pe[gr][ch] / 300.)) - 0.05;\n                    masking_lower_db = gfc.PSY.mask_adjust - adjust;\n                } else {\n                    adjust = 2.56 / (1 + Math\n                            .exp(3.5 - pe[gr][ch] / 300.)) - 0.14;\n                    masking_lower_db = gfc.PSY.mask_adjust_short - adjust;\n                }\n                gfc.masking_lower = Math.pow(10.0,\n                    masking_lower_db * 0.1);\n\n                init_outer_loop(gfc, cod_info);\n                bands[gr][ch] = qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info,\n                    l3_xmin[gr][ch]);\n                if (bands[gr][ch] != 0)\n                    analog_silence = 0;\n\n                min_bits[gr][ch] = 126;\n\n                bits += max_bits[gr][ch];\n            }\n        }\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                if (bits > frameBits[gfc.VBR_max_bitrate]) {\n                    max_bits[gr][ch] *= frameBits[gfc.VBR_max_bitrate];\n                    max_bits[gr][ch] /= bits;\n                }\n                if (min_bits[gr][ch] > max_bits[gr][ch])\n                    min_bits[gr][ch] = max_bits[gr][ch];\n\n            }\n            /* for ch */\n        }\n        /* for gr */\n\n        return analog_silence;\n    };\n\n    this.bitpressure_strategy = function (gfc, l3_xmin, min_bits, max_bits) {\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                var gi = gfc.l3_side.tt[gr][ch];\n                var pxmin = l3_xmin[gr][ch];\n                var pxminPos = 0;\n                for (var sfb = 0; sfb < gi.psy_lmax; sfb++)\n                    pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\n                        / Encoder.SBMAX_l / Encoder.SBMAX_l;\n\n                if (gi.block_type == Encoder.SHORT_TYPE) {\n                    for (var sfb = gi.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                        pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\n                            / Encoder.SBMAX_s / Encoder.SBMAX_s;\n                        pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\n                            / Encoder.SBMAX_s / Encoder.SBMAX_s;\n                        pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\n                            / Encoder.SBMAX_s / Encoder.SBMAX_s;\n                    }\n                }\n                max_bits[gr][ch] = 0 | Math.max(min_bits[gr][ch],\n                        0.9 * max_bits[gr][ch]);\n            }\n        }\n    };\n\n    this.VBR_new_prepare = function (gfp, pe, ratio, l3_xmin, frameBits, max_bits) {\n        var gfc = gfp.internal_flags;\n\n        var analog_silence = 1;\n        var avg = 0, bits = 0;\n        var maximum_framebits;\n\n        if (!gfp.free_format) {\n            gfc.bitrate_index = gfc.VBR_max_bitrate;\n\n            var mb = new MeanBits(avg);\n            rv.ResvFrameBegin(gfp, mb);\n            avg = mb.bits;\n\n            get_framebits(gfp, frameBits);\n            maximum_framebits = frameBits[gfc.VBR_max_bitrate];\n        } else {\n            gfc.bitrate_index = 0;\n            var mb = new MeanBits(avg);\n            maximum_framebits = rv.ResvFrameBegin(gfp, mb);\n            avg = mb.bits;\n            frameBits[0] = maximum_framebits;\n        }\n\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            qupvt.on_pe(gfp, pe, max_bits[gr], avg, gr, 0);\n            if (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n                ms_convert(gfc.l3_side, gr);\n            }\n            for (var ch = 0; ch < gfc.channels_out; ++ch) {\n                var cod_info = gfc.l3_side.tt[gr][ch];\n\n                gfc.masking_lower = Math.pow(10.0,\n                    gfc.PSY.mask_adjust * 0.1);\n\n                init_outer_loop(gfc, cod_info);\n                if (0 != qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info,\n                        l3_xmin[gr][ch]))\n                    analog_silence = 0;\n\n                bits += max_bits[gr][ch];\n            }\n        }\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                if (bits > maximum_framebits) {\n                    max_bits[gr][ch] *= maximum_framebits;\n                    max_bits[gr][ch] /= bits;\n                }\n\n            }\n            /* for ch */\n        }\n        /* for gr */\n\n        return analog_silence;\n    };\n\n    /**\n     * calculates target bits for ABR encoding\n     *\n     * mt 2000/05/31\n     */\n    this.calc_target_bits = function (gfp, pe, ms_ener_ratio, targ_bits, analog_silence_bits, max_frame_bits) {\n        var gfc = gfp.internal_flags;\n        var l3_side = gfc.l3_side;\n        var res_factor;\n        var gr, ch, totbits, mean_bits = 0;\n\n        gfc.bitrate_index = gfc.VBR_max_bitrate;\n        var mb = new MeanBits(mean_bits);\n        max_frame_bits[0] = rv.ResvFrameBegin(gfp, mb);\n        mean_bits = mb.bits;\n\n        gfc.bitrate_index = 1;\n        mean_bits = bs.getframebits(gfp) - gfc.sideinfo_len * 8;\n        analog_silence_bits[0] = mean_bits / (gfc.mode_gr * gfc.channels_out);\n\n        mean_bits = gfp.VBR_mean_bitrate_kbps * gfp.framesize * 1000;\n        if ((gfc.substep_shaping & 1) != 0)\n            mean_bits *= 1.09;\n        mean_bits /= gfp.out_samplerate;\n        mean_bits -= gfc.sideinfo_len * 8;\n        mean_bits /= (gfc.mode_gr * gfc.channels_out);\n\n        /**\n         * <PRE>\n         *           res_factor is the percentage of the target bitrate that should\n         *           be used on average.  the remaining bits are added to the\n         *           bitreservoir and used for difficult to encode frames.\n         *\n         *           Since we are tracking the average bitrate, we should adjust\n         *           res_factor \"on the fly\", increasing it if the average bitrate\n         *           is greater than the requested bitrate, and decreasing it\n         *           otherwise.  Reasonable ranges are from .9 to 1.0\n         *\n         *           Until we get the above suggestion working, we use the following\n         *           tuning:\n         *           compression ratio    res_factor\n         *           5.5  (256kbps)         1.0      no need for bitreservoir\n         *           11   (128kbps)         .93      7% held for reservoir\n         *\n         *           with linear interpolation for other values.\n         * </PRE>\n         */\n        res_factor = .93 + .07 * (11.0 - gfp.compression_ratio)\n            / (11.0 - 5.5);\n        if (res_factor < .90)\n            res_factor = .90;\n        if (res_factor > 1.00)\n            res_factor = 1.00;\n\n        for (gr = 0; gr < gfc.mode_gr; gr++) {\n            var sum = 0;\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                targ_bits[gr][ch] = (int)(res_factor * mean_bits);\n\n                if (pe[gr][ch] > 700) {\n                    var add_bits = (int)((pe[gr][ch] - 700) / 1.4);\n\n                    var cod_info = l3_side.tt[gr][ch];\n                    targ_bits[gr][ch] = (int)(res_factor * mean_bits);\n\n                    /* short blocks use a little extra, no matter what the pe */\n                    if (cod_info.block_type == Encoder.SHORT_TYPE) {\n                        if (add_bits < mean_bits / 2)\n                            add_bits = mean_bits / 2;\n                    }\n                    /* at most increase bits by 1.5*average */\n                    if (add_bits > mean_bits * 3 / 2)\n                        add_bits = mean_bits * 3 / 2;\n                    else if (add_bits < 0)\n                        add_bits = 0;\n\n                    targ_bits[gr][ch] += add_bits;\n                }\n                if (targ_bits[gr][ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL) {\n                    targ_bits[gr][ch] = LameInternalFlags.MAX_BITS_PER_CHANNEL;\n                }\n                sum += targ_bits[gr][ch];\n            }\n            /* for ch */\n            if (sum > LameInternalFlags.MAX_BITS_PER_GRANULE) {\n                for (ch = 0; ch < gfc.channels_out; ++ch) {\n                    targ_bits[gr][ch] *= LameInternalFlags.MAX_BITS_PER_GRANULE;\n                    targ_bits[gr][ch] /= sum;\n                }\n            }\n        }\n        /* for gr */\n\n        if (gfc.mode_ext == Encoder.MPG_MD_MS_LR)\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                qupvt.reduce_side(targ_bits[gr], ms_ener_ratio[gr], mean_bits\n                    * gfc.channels_out,\n                    LameInternalFlags.MAX_BITS_PER_GRANULE);\n            }\n\n        /*\n         * sum target bits\n         */\n        totbits = 0;\n        for (gr = 0; gr < gfc.mode_gr; gr++) {\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                if (targ_bits[gr][ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL)\n                    targ_bits[gr][ch] = LameInternalFlags.MAX_BITS_PER_CHANNEL;\n                totbits += targ_bits[gr][ch];\n            }\n        }\n\n        /*\n         * repartion target bits if needed\n         */\n        if (totbits > max_frame_bits[0]) {\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    targ_bits[gr][ch] *= max_frame_bits[0];\n                    targ_bits[gr][ch] /= totbits;\n                }\n            }\n        }\n    }\n\n}\n\nmodule.exports = Quantize;\n","function VBRQuantize() {\n    var qupvt;\n    var tak;\n\n    this.setModules = function (_qupvt, _tk) {\n        qupvt = _qupvt;\n        tak = _tk;\n    }\n    //TODO\n\n}\n\nmodule.exports = VBRQuantize;\n","//package mp3;\n\nfunction CalcNoiseResult() {\n    /**\n     * sum of quantization noise > masking\n     */\n    this.over_noise = 0.;\n    /**\n     * sum of all quantization noise\n     */\n    this.tot_noise = 0.;\n    /**\n     * max quantization noise\n     */\n    this.max_noise = 0.;\n    /**\n     * number of quantization noise > masking\n     */\n    this.over_count = 0;\n    /**\n     * SSD-like cost of distorted bands\n     */\n    this.over_SSD = 0;\n    this.bits = 0;\n}\n\nmodule.exports = CalcNoiseResult;\n","var common = require('./common.js');\nvar new_float = common.new_float;\nvar new_int = common.new_int;\nvar assert = common.assert;\n\nfunction CalcNoiseData() {\n    this.global_gain = 0;\n    this.sfb_count1 = 0;\n    this.step = new_int(39);\n    this.noise = new_float(39);\n    this.noise_log = new_float(39);\n}\n\nmodule.exports = CalcNoiseData;\n","/*\n *      bit reservoir source file\n *\n *      Copyright (c) 1999-2000 Mark Taylor\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: Reservoir.java,v 1.9 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n/**\n * ResvFrameBegin:<BR>\n * Called (repeatedly) at the beginning of a frame. Updates the maximum size of\n * the reservoir, and checks to make sure main_data_begin was set properly by\n * the formatter<BR>\n * Background information:\n * \n * This is the original text from the ISO standard. Because of sooo many bugs\n * and irritations correcting comments are added in brackets []. A '^W' means\n * you should remove the last word.\n * \n * <PRE>\n *  1. The following rule can be used to calculate the maximum\n *     number of bits used for one granule [^W frame]:<BR>\n *     At the highest possible bitrate of Layer III (320 kbps\n *     per stereo signal [^W^W^W], 48 kHz) the frames must be of\n *     [^W^W^W are designed to have] constant length, i.e.\n *     one buffer [^W^W the frame] length is:<BR>\n * \n *         320 kbps * 1152/48 kHz = 7680 bit = 960 byte\n * \n *     This value is used as the maximum buffer per channel [^W^W] at\n *     lower bitrates [than 320 kbps]. At 64 kbps mono or 128 kbps\n *     stereo the main granule length is 64 kbps * 576/48 kHz = 768 bit\n *     [per granule and channel] at 48 kHz sampling frequency.\n *     This means that there is a maximum deviation (short time buffer\n *     [= reservoir]) of 7680 - 2*2*768 = 4608 bits is allowed at 64 kbps.\n *     The actual deviation is equal to the number of bytes [with the\n *     meaning of octets] denoted by the main_data_end offset pointer.\n *     The actual maximum deviation is (2^9-1)*8 bit = 4088 bits\n *     [for MPEG-1 and (2^8-1)*8 bit for MPEG-2, both are hard limits].\n *     ... The xchange of buffer bits between the left and right channel\n *     is allowed without restrictions [exception: dual channel].\n *     Because of the [constructed] constraint on the buffer size\n *     main_data_end is always set to 0 in the case of bit_rate_index==14,\n *     i.e. data rate 320 kbps per stereo signal [^W^W^W]. In this case\n *     all data are allocated between adjacent header [^W sync] words\n *     [, i.e. there is no buffering at all].\n * </PRE>\n */\n\nvar common = require('./common.js');\nvar assert = common.assert;\n\nfunction Reservoir() {\n\tvar bs;\n\n\tthis.setModules  = function(_bs) {\n\t\tbs = _bs;\n\t}\n\n\tthis.ResvFrameBegin = function(gfp, mean_bits) {\n\t\tvar gfc = gfp.internal_flags;\n\t\tvar maxmp3buf;\n\t\tvar l3_side = gfc.l3_side;\n\n\t\tvar frameLength = bs.getframebits(gfp);\n\t\tmean_bits.bits = (frameLength - gfc.sideinfo_len * 8) / gfc.mode_gr;\n\n\t\t/**\n\t\t * <PRE>\n\t\t *  Meaning of the variables:\n\t\t *      resvLimit: (0, 8, ..., 8*255 (MPEG-2), 8*511 (MPEG-1))\n\t\t *          Number of bits can be stored in previous frame(s) due to\n\t\t *          counter size constaints\n\t\t *      maxmp3buf: ( ??? ... 8*1951 (MPEG-1 and 2), 8*2047 (MPEG-2.5))\n\t\t *          Number of bits allowed to encode one frame (you can take 8*511 bit\n\t\t *          from the bit reservoir and at most 8*1440 bit from the current\n\t\t *          frame (320 kbps, 32 kHz), so 8*1951 bit is the largest possible\n\t\t *          value for MPEG-1 and -2)\n\t\t * \n\t\t *          maximum allowed granule/channel size times 4 = 8*2047 bits.,\n\t\t *          so this is the absolute maximum supported by the format.\n\t\t * \n\t\t * \n\t\t *      fullFrameBits:  maximum number of bits available for encoding\n\t\t *                      the current frame.\n\t\t * \n\t\t *      mean_bits:      target number of bits per granule.\n\t\t * \n\t\t *      frameLength:\n\t\t * \n\t\t *      gfc.ResvMax:   maximum allowed reservoir\n\t\t * \n\t\t *      gfc.ResvSize:  current reservoir size\n\t\t * \n\t\t *      l3_side.resvDrain_pre:\n\t\t *         ancillary data to be added to previous frame:\n\t\t *         (only usefull in VBR modes if it is possible to have\n\t\t *         maxmp3buf < fullFrameBits)).  Currently disabled,\n\t\t *         see #define NEW_DRAIN\n\t\t *         2010-02-13: RH now enabled, it seems to be needed for CBR too,\n\t\t *                     as there exists one example, where the FhG decoder\n\t\t *                     can't decode a -b320 CBR file anymore.\n\t\t * \n\t\t *      l3_side.resvDrain_post:\n\t\t *         ancillary data to be added to this frame:\n\t\t * \n\t\t * </PRE>\n\t\t */\n\n\t\t/* main_data_begin has 9 bits in MPEG-1, 8 bits MPEG-2 */\n\t\tvar resvLimit = (8 * 256) * gfc.mode_gr - 8;\n\n\t\t/*\n\t\t * maximum allowed frame size. dont use more than this number of bits,\n\t\t * even if the frame has the space for them:\n\t\t */\n\t\tif (gfp.brate > 320) {\n\t\t\t/* in freeformat the buffer is constant */\n\t\t\tmaxmp3buf = 8 * ((int) ((gfp.brate * 1000)\n\t\t\t\t\t/ (gfp.out_samplerate / 1152) / 8 + .5));\n\t\t} else {\n\t\t\t/*\n\t\t\t * all mp3 decoders should have enough buffer to handle this value:\n\t\t\t * size of a 320kbps 32kHz frame\n\t\t\t */\n\t\t\tmaxmp3buf = 8 * 1440;\n\n\t\t\t/*\n\t\t\t * Bouvigne suggests this more lax interpretation of the ISO doc\n\t\t\t * instead of using 8*960.\n\t\t\t */\n\n\t\t\tif (gfp.strict_ISO) {\n\t\t\t\tmaxmp3buf = 8 * ((int) (320000 / (gfp.out_samplerate / 1152) / 8 + .5));\n\t\t\t}\n\t\t}\n\n\t\tgfc.ResvMax = maxmp3buf - frameLength;\n\t\tif (gfc.ResvMax > resvLimit)\n\t\t\tgfc.ResvMax = resvLimit;\n\t\tif (gfc.ResvMax < 0 || gfp.disable_reservoir)\n\t\t\tgfc.ResvMax = 0;\n\n\t\tvar fullFrameBits = mean_bits.bits * gfc.mode_gr\n\t\t\t\t+ Math.min(gfc.ResvSize, gfc.ResvMax);\n\n\t\tif (fullFrameBits > maxmp3buf)\n\t\t\tfullFrameBits = maxmp3buf;\n\n\t\tassert (0 == gfc.ResvMax % 8);\n\t\tassert (gfc.ResvMax >= 0);\n\n\t\tl3_side.resvDrain_pre = 0;\n\n\t\t// frame analyzer code\n\t\tif (gfc.pinfo != null) {\n\t\t\t/*\n\t\t\t * expected bits per channel per granule [is this also right for\n\t\t\t * mono/stereo, MPEG-1/2 ?]\n\t\t\t */\n\t\t\tgfc.pinfo.mean_bits = mean_bits.bits / 2;\n\t\t\tgfc.pinfo.resvsize = gfc.ResvSize;\n\t\t}\n\n\t\treturn fullFrameBits;\n\t}\n\n\t/**\n\t * returns targ_bits: target number of bits to use for 1 granule<BR>\n\t * extra_bits: amount extra available from reservoir<BR>\n\t * Mark Taylor 4/99\n\t */\n\tthis.ResvMaxBits = function(gfp, mean_bits, targ_bits, cbr) {\n\t\tvar gfc = gfp.internal_flags;\n\t\tvar add_bits;\n        var ResvSize = gfc.ResvSize, ResvMax = gfc.ResvMax;\n\n\t\t/* compensate the saved bits used in the 1st granule */\n\t\tif (cbr != 0)\n\t\t\tResvSize += mean_bits;\n\n\t\tif ((gfc.substep_shaping & 1) != 0)\n\t\t\tResvMax *= 0.9;\n\n\t\ttarg_bits.bits = mean_bits;\n\n\t\t/* extra bits if the reservoir is almost full */\n\t\tif (ResvSize * 10 > ResvMax * 9) {\n\t\t\tadd_bits = ResvSize - (ResvMax * 9) / 10;\n\t\t\ttarg_bits.bits += add_bits;\n\t\t\tgfc.substep_shaping |= 0x80;\n\t\t} else {\n\t\t\tadd_bits = 0;\n\t\t\tgfc.substep_shaping &= 0x7f;\n\t\t\t/*\n\t\t\t * build up reservoir. this builds the reservoir a little slower\n\t\t\t * than FhG. It could simple be mean_bits/15, but this was rigged to\n\t\t\t * always produce 100 (the old value) at 128kbs\n\t\t\t */\n\t\t\tif (!gfp.disable_reservoir && 0 == (gfc.substep_shaping & 1))\n\t\t\t\ttarg_bits.bits -= .1 * mean_bits;\n\t\t}\n\n\t\t/* amount from the reservoir we are allowed to use. ISO says 6/10 */\n\t\tvar extra_bits = (ResvSize < (gfc.ResvMax * 6) / 10 ? ResvSize\n\t\t\t\t: (gfc.ResvMax * 6) / 10);\n\t\textra_bits -= add_bits;\n\n\t\tif (extra_bits < 0)\n\t\t\textra_bits = 0;\n\t\treturn extra_bits;\n\t}\n\n\t/**\n\t * Called after a granule's bit allocation. Readjusts the size of the\n\t * reservoir to reflect the granule's usage.\n\t */\n\tthis.ResvAdjust = function(gfc, gi) {\n\t\tgfc.ResvSize -= gi.part2_3_length + gi.part2_length;\n\t}\n\n\t/**\n\t * Called after all granules in a frame have been allocated. Makes sure that\n\t * the reservoir size is within limits, possibly by adding stuffing bits.\n\t */\n\tthis.ResvFrameEnd = function(gfc, mean_bits) {\n\t\tvar over_bits;\n\t\tvar l3_side = gfc.l3_side;\n\n\t\tgfc.ResvSize += mean_bits * gfc.mode_gr;\n\t\tvar stuffingBits = 0;\n\t\tl3_side.resvDrain_post = 0;\n\t\tl3_side.resvDrain_pre = 0;\n\n\t\t/* we must be byte aligned */\n\t\tif ((over_bits = gfc.ResvSize % 8) != 0)\n\t\t\tstuffingBits += over_bits;\n\n\t\tover_bits = (gfc.ResvSize - stuffingBits) - gfc.ResvMax;\n\t\tif (over_bits > 0) {\n\t\t\tassert (0 == over_bits % 8);\n\t\t\tassert (over_bits >= 0);\n\t\t\tstuffingBits += over_bits;\n\t\t}\n\n\t\t/*\n\t\t * NOTE: enabling the NEW_DRAIN code fixes some problems with FhG\n\t\t * decoder shipped with MS Windows operating systems. Using this, it is\n\t\t * even possible to use Gabriel's lax buffer consideration again, which\n\t\t * assumes, any decoder should have a buffer large enough for a 320 kbps\n\t\t * frame at 32 kHz sample rate.\n\t\t * \n\t\t * old drain code: lame -b320 BlackBird.wav --. does not play with\n\t\t * GraphEdit.exe using FhG decoder V1.5 Build 50\n\t\t * \n\t\t * new drain code: lame -b320 BlackBird.wav --. plays fine with\n\t\t * GraphEdit.exe using FhG decoder V1.5 Build 50\n\t\t * \n\t\t * Robert Hegemann, 2010-02-13.\n\t\t */\n\t\t/*\n\t\t * drain as many bits as possible into previous frame ancillary data In\n\t\t * particular, in VBR mode ResvMax may have changed, and we have to make\n\t\t * sure main_data_begin does not create a reservoir bigger than ResvMax\n\t\t * mt 4/00\n\t\t */\n\t\t{\n\t\t\tvar mdb_bytes = Math.min(l3_side.main_data_begin * 8, stuffingBits) / 8;\n\t\t\tl3_side.resvDrain_pre += 8 * mdb_bytes;\n\t\t\tstuffingBits -= 8 * mdb_bytes;\n\t\t\tgfc.ResvSize -= 8 * mdb_bytes;\n\t\t\tl3_side.main_data_begin -= mdb_bytes;\n\t\t}\n\t\t/* drain the rest into this frames ancillary data */\n\t\tl3_side.resvDrain_post += stuffingBits;\n\t\tgfc.ResvSize -= stuffingBits;\n\t}\n}\n\nmodule.exports = Reservoir;\n","function Version() {\n\n    /**\n     * URL for the LAME website.\n     */\n    var LAME_URL = \"http://www.mp3dev.org/\";\n\n    /**\n     * Major version number.\n     */\n    var LAME_MAJOR_VERSION = 3;\n    /**\n     * Minor version number.\n     */\n    var LAME_MINOR_VERSION = 98;\n    /**\n     * Patch level.\n     */\n    var LAME_PATCH_VERSION = 4;\n\n    /**\n     * Major version number.\n     */\n    var PSY_MAJOR_VERSION = 0;\n    /**\n     * Minor version number.\n     */\n    var PSY_MINOR_VERSION = 93;\n\n    /**\n     * A string which describes the version of LAME.\n     *\n     * @return string which describes the version of LAME\n     */\n    this.getLameVersion = function () {\n        // primary to write screen reports\n        return (LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \".\" + LAME_PATCH_VERSION);\n    }\n\n    /**\n     * The short version of the LAME version string.\n     *\n     * @return short version of the LAME version string\n     */\n    this.getLameShortVersion = function () {\n        // Adding date and time to version string makes it harder for output\n        // validation\n        return (LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \".\" + LAME_PATCH_VERSION);\n    }\n\n    /**\n     * The shortest version of the LAME version string.\n     *\n     * @return shortest version of the LAME version string\n     */\n    this.getLameVeryShortVersion = function () {\n        // Adding date and time to version string makes it harder for output\n        return (\"LAME\" + LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \"r\");\n    }\n\n    /**\n     * String which describes the version of GPSYCHO\n     *\n     * @return string which describes the version of GPSYCHO\n     */\n    this.getPsyVersion = function () {\n        return (PSY_MAJOR_VERSION + \".\" + PSY_MINOR_VERSION);\n    }\n\n    /**\n     * String which is a URL for the LAME website.\n     *\n     * @return string which is a URL for the LAME website\n     */\n    this.getLameUrl = function () {\n        return LAME_URL;\n    }\n\n    /**\n     * Quite useless for a java version, however we are compatible ;-)\n     *\n     * @return \"32bits\"\n     */\n    this.getLameOsBitness = function () {\n        return \"32bits\";\n    }\n\n}\n\nmodule.exports = Version;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\n/**\n * A Vbr header may be present in the ancillary data field of the first frame of\n * an mp3 bitstream<BR>\n * The Vbr header (optionally) contains\n * <UL>\n * <LI>frames total number of audio frames in the bitstream\n * <LI>bytes total number of bytes in the bitstream\n * <LI>toc table of contents\n * </UL>\n *\n * toc (table of contents) gives seek points for random access.<BR>\n * The ith entry determines the seek point for i-percent duration.<BR>\n * seek point in bytes = (toc[i]/256.0) * total_bitstream_bytes<BR>\n * e.g. half duration seek point = (toc[50]/256.0) * total_bitstream_bytes\n */\nVBRTag.NUMTOCENTRIES = 100;\nVBRTag.MAXFRAMESIZE = 2880;\n\nfunction VBRTag() {\n\n    var lame;\n    var bs;\n    var v;\n\n    this.setModules = function (_lame, _bs, _v) {\n        lame = _lame;\n        bs = _bs;\n        v = _v;\n    };\n\n    var FRAMES_FLAG = 0x0001;\n    var BYTES_FLAG = 0x0002;\n    var TOC_FLAG = 0x0004;\n    var VBR_SCALE_FLAG = 0x0008;\n\n    var NUMTOCENTRIES = VBRTag.NUMTOCENTRIES;\n\n    /**\n     * (0xB40) the max freeformat 640 32kHz framesize.\n     */\n    var MAXFRAMESIZE = VBRTag.MAXFRAMESIZE;\n\n    /**\n     * <PRE>\n     *    4 bytes for Header Tag\n     *    4 bytes for Header Flags\n     *  100 bytes for entry (toc)\n     *    4 bytes for frame size\n     *    4 bytes for stream size\n     *    4 bytes for VBR scale. a VBR quality indicator: 0=best 100=worst\n     *   20 bytes for LAME tag.  for example, \"LAME3.12 (beta 6)\"\n     * ___________\n     *  140 bytes\n     * </PRE>\n     */\n    var VBRHEADERSIZE = (NUMTOCENTRIES + 4 + 4 + 4 + 4 + 4);\n\n    var LAMEHEADERSIZE = (VBRHEADERSIZE + 9 + 1 + 1 + 8\n    + 1 + 1 + 3 + 1 + 1 + 2 + 4 + 2 + 2);\n\n    /**\n     * The size of the Xing header MPEG-1, bit rate in kbps.\n     */\n    var XING_BITRATE1 = 128;\n    /**\n     * The size of the Xing header MPEG-2, bit rate in kbps.\n     */\n    var XING_BITRATE2 = 64;\n    /**\n     * The size of the Xing header MPEG-2.5, bit rate in kbps.\n     */\n    var XING_BITRATE25 = 32;\n\n    /**\n     * ISO-8859-1 charset for byte to string operations.\n     */\n    var ISO_8859_1 = null; //Charset.forName(\"ISO-8859-1\");\n\n    /**\n     * VBR header magic string.\n     */\n    var VBRTag0 = \"Xing\";\n    /**\n     * VBR header magic string (VBR == VBRMode.vbr_off).\n     */\n    var VBRTag1 = \"Info\";\n\n    /**\n     * Lookup table for fast CRC-16 computation. Uses the polynomial\n     * x^16+x^15+x^2+1\n     */\n    var crc16Lookup = [0x0000, 0xC0C1, 0xC181, 0x0140,\n        0xC301, 0x03C0, 0x0280, 0xC241, 0xC601, 0x06C0, 0x0780, 0xC741,\n        0x0500, 0xC5C1, 0xC481, 0x0440, 0xCC01, 0x0CC0, 0x0D80, 0xCD41,\n        0x0F00, 0xCFC1, 0xCE81, 0x0E40, 0x0A00, 0xCAC1, 0xCB81, 0x0B40,\n        0xC901, 0x09C0, 0x0880, 0xC841, 0xD801, 0x18C0, 0x1980, 0xD941,\n        0x1B00, 0xDBC1, 0xDA81, 0x1A40, 0x1E00, 0xDEC1, 0xDF81, 0x1F40,\n        0xDD01, 0x1DC0, 0x1C80, 0xDC41, 0x1400, 0xD4C1, 0xD581, 0x1540,\n        0xD701, 0x17C0, 0x1680, 0xD641, 0xD201, 0x12C0, 0x1380, 0xD341,\n        0x1100, 0xD1C1, 0xD081, 0x1040, 0xF001, 0x30C0, 0x3180, 0xF141,\n        0x3300, 0xF3C1, 0xF281, 0x3240, 0x3600, 0xF6C1, 0xF781, 0x3740,\n        0xF501, 0x35C0, 0x3480, 0xF441, 0x3C00, 0xFCC1, 0xFD81, 0x3D40,\n        0xFF01, 0x3FC0, 0x3E80, 0xFE41, 0xFA01, 0x3AC0, 0x3B80, 0xFB41,\n        0x3900, 0xF9C1, 0xF881, 0x3840, 0x2800, 0xE8C1, 0xE981, 0x2940,\n        0xEB01, 0x2BC0, 0x2A80, 0xEA41, 0xEE01, 0x2EC0, 0x2F80, 0xEF41,\n        0x2D00, 0xEDC1, 0xEC81, 0x2C40, 0xE401, 0x24C0, 0x2580, 0xE541,\n        0x2700, 0xE7C1, 0xE681, 0x2640, 0x2200, 0xE2C1, 0xE381, 0x2340,\n        0xE101, 0x21C0, 0x2080, 0xE041, 0xA001, 0x60C0, 0x6180, 0xA141,\n        0x6300, 0xA3C1, 0xA281, 0x6240, 0x6600, 0xA6C1, 0xA781, 0x6740,\n        0xA501, 0x65C0, 0x6480, 0xA441, 0x6C00, 0xACC1, 0xAD81, 0x6D40,\n        0xAF01, 0x6FC0, 0x6E80, 0xAE41, 0xAA01, 0x6AC0, 0x6B80, 0xAB41,\n        0x6900, 0xA9C1, 0xA881, 0x6840, 0x7800, 0xB8C1, 0xB981, 0x7940,\n        0xBB01, 0x7BC0, 0x7A80, 0xBA41, 0xBE01, 0x7EC0, 0x7F80, 0xBF41,\n        0x7D00, 0xBDC1, 0xBC81, 0x7C40, 0xB401, 0x74C0, 0x7580, 0xB541,\n        0x7700, 0xB7C1, 0xB681, 0x7640, 0x7200, 0xB2C1, 0xB381, 0x7340,\n        0xB101, 0x71C0, 0x7080, 0xB041, 0x5000, 0x90C1, 0x9181, 0x5140,\n        0x9301, 0x53C0, 0x5280, 0x9241, 0x9601, 0x56C0, 0x5780, 0x9741,\n        0x5500, 0x95C1, 0x9481, 0x5440, 0x9C01, 0x5CC0, 0x5D80, 0x9D41,\n        0x5F00, 0x9FC1, 0x9E81, 0x5E40, 0x5A00, 0x9AC1, 0x9B81, 0x5B40,\n        0x9901, 0x59C0, 0x5880, 0x9841, 0x8801, 0x48C0, 0x4980, 0x8941,\n        0x4B00, 0x8BC1, 0x8A81, 0x4A40, 0x4E00, 0x8EC1, 0x8F81, 0x4F40,\n        0x8D01, 0x4DC0, 0x4C80, 0x8C41, 0x4400, 0x84C1, 0x8581, 0x4540,\n        0x8701, 0x47C0, 0x4680, 0x8641, 0x8201, 0x42C0, 0x4380, 0x8341,\n        0x4100, 0x81C1, 0x8081, 0x4040];\n\n    /***********************************************************************\n     * Robert Hegemann 2001-01-17\n     ***********************************************************************/\n\n    function addVbr(v, bitrate) {\n        v.nVbrNumFrames++;\n        v.sum += bitrate;\n        v.seen++;\n\n        if (v.seen < v.want) {\n            return;\n        }\n\n        if (v.pos < v.size) {\n            v.bag[v.pos] = v.sum;\n            v.pos++;\n            v.seen = 0;\n        }\n        if (v.pos == v.size) {\n            for (var i = 1; i < v.size; i += 2) {\n                v.bag[i / 2] = v.bag[i];\n            }\n            v.want *= 2;\n            v.pos /= 2;\n        }\n    }\n\n    function xingSeekTable(v, t) {\n        if (v.pos <= 0)\n            return;\n\n        for (var i = 1; i < NUMTOCENTRIES; ++i) {\n            var j = i / NUMTOCENTRIES, act, sum;\n            var indx = 0 | (Math.floor(j * v.pos));\n            if (indx > v.pos - 1)\n                indx = v.pos - 1;\n            act = v.bag[indx];\n            sum = v.sum;\n            var seek_point = 0 | (256. * act / sum);\n            if (seek_point > 255)\n                seek_point = 255;\n            t[i] = 0xff & seek_point;\n        }\n    }\n\n    /**\n     * Add VBR entry, used to fill the VBR TOC entries.\n     *\n     * @param gfp\n     *            global flags\n     */\n    this.addVbrFrame = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var kbps = Tables.bitrate_table[gfp.version][gfc.bitrate_index];\n        assert(gfc.VBR_seek_table.bag != null);\n        addVbr(gfc.VBR_seek_table, kbps);\n    }\n\n    /**\n     * Read big endian integer (4-bytes) from header.\n     *\n     * @param buf\n     *            header containing the integer\n     * @param bufPos\n     *            offset into the header\n     * @return extracted integer\n     */\n    function extractInteger(buf, bufPos) {\n        var x = buf[bufPos + 0] & 0xff;\n        x <<= 8;\n        x |= buf[bufPos + 1] & 0xff;\n        x <<= 8;\n        x |= buf[bufPos + 2] & 0xff;\n        x <<= 8;\n        x |= buf[bufPos + 3] & 0xff;\n        return x;\n    }\n\n    /**\n     * Write big endian integer (4-bytes) in the header.\n     *\n     * @param buf\n     *            header to write the integer into\n     * @param bufPos\n     *            offset into the header\n     * @param value\n     *            integer value to write\n     */\n    function createInteger(buf, bufPos, value) {\n        buf[bufPos + 0] = 0xff & ((value >> 24) & 0xff);\n        buf[bufPos + 1] = 0xff & ((value >> 16) & 0xff);\n        buf[bufPos + 2] = 0xff & ((value >> 8) & 0xff);\n        buf[bufPos + 3] = 0xff & (value & 0xff);\n    }\n\n    /**\n     * Write big endian short (2-bytes) in the header.\n     *\n     * @param buf\n     *            header to write the integer into\n     * @param bufPos\n     *            offset into the header\n     * @param value\n     *            integer value to write\n     */\n    function createShort(buf, bufPos, value) {\n        buf[bufPos + 0] = 0xff & ((value >> 8) & 0xff);\n        buf[bufPos + 1] = 0xff & (value & 0xff);\n    }\n\n    /**\n     * Check for magic strings (Xing/Info).\n     *\n     * @param buf\n     *            header to check\n     * @param bufPos\n     *            header offset to check\n     * @return magic string found\n     */\n    function isVbrTag(buf, bufPos) {\n        return new String(buf, bufPos, VBRTag0.length(), ISO_8859_1)\n                .equals(VBRTag0)\n            || new String(buf, bufPos, VBRTag1.length(), ISO_8859_1)\n                .equals(VBRTag1);\n    }\n\n    function shiftInBitsValue(x, n, v) {\n        return 0xff & ((x << n) | (v & ~(-1 << n)));\n    }\n\n    /**\n     * Construct the MP3 header using the settings of the global flags.\n     *\n     * <img src=\"1000px-Mp3filestructure.svg.png\">\n     *\n     * @param gfp\n     *            global flags\n     * @param buffer\n     *            header\n     */\n    function setLameTagFrameHeader(gfp, buffer) {\n        var gfc = gfp.internal_flags;\n\n        // MP3 Sync Word\n        buffer[0] = shiftInBitsValue(buffer[0], 8, 0xff);\n\n        buffer[1] = shiftInBitsValue(buffer[1], 3, 7);\n        buffer[1] = shiftInBitsValue(buffer[1], 1,\n            (gfp.out_samplerate < 16000) ? 0 : 1);\n        // Version\n        buffer[1] = shiftInBitsValue(buffer[1], 1, gfp.version);\n        // 01 == Layer 3\n        buffer[1] = shiftInBitsValue(buffer[1], 2, 4 - 3);\n        // Error protection\n        buffer[1] = shiftInBitsValue(buffer[1], 1, (!gfp.error_protection) ? 1\n            : 0);\n\n        // Bit rate\n        buffer[2] = shiftInBitsValue(buffer[2], 4, gfc.bitrate_index);\n        // Frequency\n        buffer[2] = shiftInBitsValue(buffer[2], 2, gfc.samplerate_index);\n        // Pad. Bit\n        buffer[2] = shiftInBitsValue(buffer[2], 1, 0);\n        // Priv. Bit\n        buffer[2] = shiftInBitsValue(buffer[2], 1, gfp.extension);\n\n        // Mode\n        buffer[3] = shiftInBitsValue(buffer[3], 2, gfp.mode.ordinal());\n        // Mode extension (Used with Joint Stereo)\n        buffer[3] = shiftInBitsValue(buffer[3], 2, gfc.mode_ext);\n        // Copy\n        buffer[3] = shiftInBitsValue(buffer[3], 1, gfp.copyright);\n        // Original\n        buffer[3] = shiftInBitsValue(buffer[3], 1, gfp.original);\n        // Emphasis\n        buffer[3] = shiftInBitsValue(buffer[3], 2, gfp.emphasis);\n\n        /* the default VBR header. 48 kbps layer III, no padding, no crc */\n        /* but sampling freq, mode and copyright/copy protection taken */\n        /* from first valid frame */\n        buffer[0] = 0xff;\n        var abyte = 0xff & (buffer[1] & 0xf1);\n        var bitrate;\n        if (1 == gfp.version) {\n            bitrate = XING_BITRATE1;\n        } else {\n            if (gfp.out_samplerate < 16000)\n                bitrate = XING_BITRATE25;\n            else\n                bitrate = XING_BITRATE2;\n        }\n\n        if (gfp.VBR == VbrMode.vbr_off)\n            bitrate = gfp.brate;\n\n        var bbyte;\n        if (gfp.free_format)\n            bbyte = 0x00;\n        else\n            bbyte = 0xff & (16 * lame.BitrateIndex(bitrate, gfp.version,\n                    gfp.out_samplerate));\n\n        /*\n         * Use as much of the info from the real frames in the Xing header:\n         * samplerate, channels, crc, etc...\n         */\n        if (gfp.version == 1) {\n            /* MPEG1 */\n            buffer[1] = 0xff & (abyte | 0x0a);\n            /* was 0x0b; */\n            abyte = 0xff & (buffer[2] & 0x0d);\n            /* AF keep also private bit */\n            buffer[2] = 0xff & (bbyte | abyte);\n            /* 64kbs MPEG1 frame */\n        } else {\n            /* MPEG2 */\n            buffer[1] = 0xff & (abyte | 0x02);\n            /* was 0x03; */\n            abyte = 0xff & (buffer[2] & 0x0d);\n            /* AF keep also private bit */\n            buffer[2] = 0xff & (bbyte | abyte);\n            /* 64kbs MPEG2 frame */\n        }\n    }\n\n    /**\n     * Get VBR tag information\n     *\n     * @param buf\n     *            header to analyze\n     * @param bufPos\n     *            offset into the header\n     * @return VBR tag data\n     */\n    this.getVbrTag = function (buf) {\n        var pTagData = new VBRTagData();\n        var bufPos = 0;\n\n        /* get Vbr header data */\n        pTagData.flags = 0;\n\n        /* get selected MPEG header data */\n        var hId = (buf[bufPos + 1] >> 3) & 1;\n        var hSrIndex = (buf[bufPos + 2] >> 2) & 3;\n        var hMode = (buf[bufPos + 3] >> 6) & 3;\n        var hBitrate = ((buf[bufPos + 2] >> 4) & 0xf);\n        hBitrate = Tables.bitrate_table[hId][hBitrate];\n\n        /* check for FFE syncword */\n        if ((buf[bufPos + 1] >> 4) == 0xE)\n            pTagData.samprate = Tables.samplerate_table[2][hSrIndex];\n        else\n            pTagData.samprate = Tables.samplerate_table[hId][hSrIndex];\n\n        /* determine offset of header */\n        if (hId != 0) {\n            /* mpeg1 */\n            if (hMode != 3)\n                bufPos += (32 + 4);\n            else\n                bufPos += (17 + 4);\n        } else {\n            /* mpeg2 */\n            if (hMode != 3)\n                bufPos += (17 + 4);\n            else\n                bufPos += (9 + 4);\n        }\n\n        if (!isVbrTag(buf, bufPos))\n            return null;\n\n        bufPos += 4;\n\n        pTagData.hId = hId;\n\n        /* get flags */\n        var head_flags = pTagData.flags = extractInteger(buf, bufPos);\n        bufPos += 4;\n\n        if ((head_flags & FRAMES_FLAG) != 0) {\n            pTagData.frames = extractInteger(buf, bufPos);\n            bufPos += 4;\n        }\n\n        if ((head_flags & BYTES_FLAG) != 0) {\n            pTagData.bytes = extractInteger(buf, bufPos);\n            bufPos += 4;\n        }\n\n        if ((head_flags & TOC_FLAG) != 0) {\n            if (pTagData.toc != null) {\n                for (var i = 0; i < NUMTOCENTRIES; i++)\n                    pTagData.toc[i] = buf[bufPos + i];\n            }\n            bufPos += NUMTOCENTRIES;\n        }\n\n        pTagData.vbrScale = -1;\n\n        if ((head_flags & VBR_SCALE_FLAG) != 0) {\n            pTagData.vbrScale = extractInteger(buf, bufPos);\n            bufPos += 4;\n        }\n\n        pTagData.headersize = ((hId + 1) * 72000 * hBitrate)\n            / pTagData.samprate;\n\n        bufPos += 21;\n        var encDelay = buf[bufPos + 0] << 4;\n        encDelay += buf[bufPos + 1] >> 4;\n        var encPadding = (buf[bufPos + 1] & 0x0F) << 8;\n        encPadding += buf[bufPos + 2] & 0xff;\n        /* check for reasonable values (this may be an old Xing header, */\n        /* not a INFO tag) */\n        if (encDelay < 0 || encDelay > 3000)\n            encDelay = -1;\n        if (encPadding < 0 || encPadding > 3000)\n            encPadding = -1;\n\n        pTagData.encDelay = encDelay;\n        pTagData.encPadding = encPadding;\n\n        /* success */\n        return pTagData;\n    }\n\n    /**\n     * Initializes the header\n     *\n     * @param gfp\n     *            global flags\n     */\n    this.InitVbrTag = function (gfp) {\n        var gfc = gfp.internal_flags;\n\n        /**\n         * <PRE>\n         * Xing VBR pretends to be a 48kbs layer III frame.  (at 44.1kHz).\n         * (at 48kHz they use 56kbs since 48kbs frame not big enough for\n         * table of contents)\n         * let's always embed Xing header inside a 64kbs layer III frame.\n         * this gives us enough room for a LAME version string too.\n         * size determined by sampling frequency (MPEG1)\n         * 32kHz:    216 bytes@48kbs    288bytes@ 64kbs\n         * 44.1kHz:  156 bytes          208bytes@64kbs     (+1 if padding = 1)\n         * 48kHz:    144 bytes          192\n         *\n         * MPEG 2 values are the same since the framesize and samplerate\n         * are each reduced by a factor of 2.\n         * </PRE>\n         */\n        var kbps_header;\n        if (1 == gfp.version) {\n            kbps_header = XING_BITRATE1;\n        } else {\n            if (gfp.out_samplerate < 16000)\n                kbps_header = XING_BITRATE25;\n            else\n                kbps_header = XING_BITRATE2;\n        }\n\n        if (gfp.VBR == VbrMode.vbr_off)\n            kbps_header = gfp.brate;\n\n        // make sure LAME Header fits into Frame\n        var totalFrameSize = ((gfp.version + 1) * 72000 * kbps_header)\n            / gfp.out_samplerate;\n        var headerSize = (gfc.sideinfo_len + LAMEHEADERSIZE);\n        gfc.VBR_seek_table.TotalFrameSize = totalFrameSize;\n        if (totalFrameSize < headerSize || totalFrameSize > MAXFRAMESIZE) {\n            /* disable tag, it wont fit */\n            gfp.bWriteVbrTag = false;\n            return;\n        }\n\n        gfc.VBR_seek_table.nVbrNumFrames = 0;\n        gfc.VBR_seek_table.nBytesWritten = 0;\n        gfc.VBR_seek_table.sum = 0;\n\n        gfc.VBR_seek_table.seen = 0;\n        gfc.VBR_seek_table.want = 1;\n        gfc.VBR_seek_table.pos = 0;\n\n        if (gfc.VBR_seek_table.bag == null) {\n            gfc.VBR_seek_table.bag = new int[400];\n            gfc.VBR_seek_table.size = 400;\n        }\n\n        // write dummy VBR tag of all 0's into bitstream\n        var buffer = new_byte(MAXFRAMESIZE);\n\n        setLameTagFrameHeader(gfp, buffer);\n        var n = gfc.VBR_seek_table.TotalFrameSize;\n        for (var i = 0; i < n; ++i) {\n            bs.add_dummy_byte(gfp, buffer[i] & 0xff, 1);\n        }\n    }\n\n    /**\n     * Fast CRC-16 computation (uses table crc16Lookup).\n     *\n     * @param value\n     * @param crc\n     * @return\n     */\n    function crcUpdateLookup(value, crc) {\n        var tmp = crc ^ value;\n        crc = (crc >> 8) ^ crc16Lookup[tmp & 0xff];\n        return crc;\n    }\n\n    this.updateMusicCRC = function (crc, buffer, bufferPos, size) {\n        for (var i = 0; i < size; ++i)\n            crc[0] = crcUpdateLookup(buffer[bufferPos + i], crc[0]);\n    }\n\n    /**\n     * Write LAME info: mini version + info on various switches used (Jonathan\n     * Dee 2001/08/31).\n     *\n     * @param gfp\n     *            global flags\n     * @param musicLength\n     *            music length\n     * @param streamBuffer\n     *            pointer to output buffer\n     * @param streamBufferPos\n     *            offset into the output buffer\n     * @param crc\n     *            computation of CRC-16 of Lame Tag so far (starting at frame\n     *            sync)\n     * @return number of bytes written to the stream\n     */\n    function putLameVBR(gfp, musicLength, streamBuffer, streamBufferPos, crc) {\n        var gfc = gfp.internal_flags;\n        var bytesWritten = 0;\n\n        /* encoder delay */\n        var encDelay = gfp.encoder_delay;\n        /* encoder padding */\n        var encPadding = gfp.encoder_padding;\n\n        /* recall: gfp.VBR_q is for example set by the switch -V */\n        /* gfp.quality by -q, -h, -f, etc */\n        var quality = (100 - 10 * gfp.VBR_q - gfp.quality);\n\n        var version = v.getLameVeryShortVersion();\n        var vbr;\n        var revision = 0x00;\n        var revMethod;\n        // numbering different in vbr_mode vs. Lame tag\n        var vbrTypeTranslator = [1, 5, 3, 2, 4, 0, 3];\n        var lowpass = 0 | (((gfp.lowpassfreq / 100.0) + .5) > 255 ? 255\n                : (gfp.lowpassfreq / 100.0) + .5);\n        var peakSignalAmplitude = 0;\n        var radioReplayGain = 0;\n        var audiophileReplayGain = 0;\n        var noiseShaping = gfp.internal_flags.noise_shaping;\n        var stereoMode = 0;\n        var nonOptimal = 0;\n        var sourceFreq = 0;\n        var misc = 0;\n        var musicCRC = 0;\n\n        // psy model type: Gpsycho or NsPsytune\n        var expNPsyTune = (gfp.exp_nspsytune & 1) != 0;\n        var safeJoint = (gfp.exp_nspsytune & 2) != 0;\n        var noGapMore = false;\n        var noGapPrevious = false;\n        var noGapCount = gfp.internal_flags.nogap_total;\n        var noGapCurr = gfp.internal_flags.nogap_current;\n\n        // 4 bits\n        var athType = gfp.ATHtype;\n        var flags = 0;\n\n        // vbr modes\n        var abrBitrate;\n        switch (gfp.VBR) {\n            case vbr_abr:\n                abrBitrate = gfp.VBR_mean_bitrate_kbps;\n                break;\n            case vbr_off:\n                abrBitrate = gfp.brate;\n                break;\n            default:\n                abrBitrate = gfp.VBR_min_bitrate_kbps;\n        }\n\n        // revision and vbr method\n        if (gfp.VBR.ordinal() < vbrTypeTranslator.length)\n            vbr = vbrTypeTranslator[gfp.VBR.ordinal()];\n        else\n            vbr = 0x00; // unknown\n\n        revMethod = 0x10 * revision + vbr;\n\n        // ReplayGain\n        if (gfc.findReplayGain) {\n            if (gfc.RadioGain > 0x1FE)\n                gfc.RadioGain = 0x1FE;\n            if (gfc.RadioGain < -0x1FE)\n                gfc.RadioGain = -0x1FE;\n\n            // set name code\n            radioReplayGain = 0x2000;\n            // set originator code to `determined automatically'\n            radioReplayGain |= 0xC00;\n\n            if (gfc.RadioGain >= 0) {\n                // set gain adjustment\n                radioReplayGain |= gfc.RadioGain;\n            } else {\n                // set the sign bit\n                radioReplayGain |= 0x200;\n                // set gain adjustment\n                radioReplayGain |= -gfc.RadioGain;\n            }\n        }\n\n        // peak sample\n        if (gfc.findPeakSample)\n            peakSignalAmplitude = Math\n                .abs(0 | ((( gfc.PeakSample) / 32767.0) * Math.pow(2, 23) + .5));\n\n        // nogap\n        if (noGapCount != -1) {\n            if (noGapCurr > 0)\n                noGapPrevious = true;\n\n            if (noGapCurr < noGapCount - 1)\n                noGapMore = true;\n        }\n\n        // flags\n        flags = athType + ((expNPsyTune ? 1 : 0) << 4)\n            + ((safeJoint ? 1 : 0) << 5) + ((noGapMore ? 1 : 0) << 6)\n            + ((noGapPrevious ? 1 : 0) << 7);\n\n        if (quality < 0)\n            quality = 0;\n\n        // stereo mode field (Intensity stereo is not implemented)\n        switch (gfp.mode) {\n            case MONO:\n                stereoMode = 0;\n                break;\n            case STEREO:\n                stereoMode = 1;\n                break;\n            case DUAL_CHANNEL:\n                stereoMode = 2;\n                break;\n            case JOINT_STEREO:\n                if (gfp.force_ms)\n                    stereoMode = 4;\n                else\n                    stereoMode = 3;\n                break;\n            case NOT_SET:\n            //$FALL-THROUGH$\n            default:\n                stereoMode = 7;\n                break;\n        }\n\n        if (gfp.in_samplerate <= 32000)\n            sourceFreq = 0x00;\n        else if (gfp.in_samplerate == 48000)\n            sourceFreq = 0x02;\n        else if (gfp.in_samplerate > 48000)\n            sourceFreq = 0x03;\n        else {\n            // default is 44100Hz\n            sourceFreq = 0x01;\n        }\n\n        // Check if the user overrided the default LAME behavior with some\n        // nasty options\n        if (gfp.short_blocks == ShortBlock.short_block_forced\n            || gfp.short_blocks == ShortBlock.short_block_dispensed\n            || ((gfp.lowpassfreq == -1) && (gfp.highpassfreq == -1)) || /* \"-k\" */\n            (gfp.scale_left < gfp.scale_right)\n            || (gfp.scale_left > gfp.scale_right)\n            || (gfp.disable_reservoir && gfp.brate < 320) || gfp.noATH\n            || gfp.ATHonly || (athType == 0) || gfp.in_samplerate <= 32000)\n            nonOptimal = 1;\n\n        misc = noiseShaping + (stereoMode << 2) + (nonOptimal << 5)\n            + (sourceFreq << 6);\n\n        musicCRC = gfc.nMusicCRC;\n\n        // Write all this information into the stream\n\n        createInteger(streamBuffer, streamBufferPos + bytesWritten, quality);\n        bytesWritten += 4;\n\n        for (var j = 0; j < 9; j++) {\n            streamBuffer[streamBufferPos + bytesWritten + j] = 0xff & version .charAt(j);\n        }\n        bytesWritten += 9;\n\n        streamBuffer[streamBufferPos + bytesWritten] = 0xff & revMethod;\n        bytesWritten++;\n\n        streamBuffer[streamBufferPos + bytesWritten] = 0xff & lowpass;\n        bytesWritten++;\n\n        createInteger(streamBuffer, streamBufferPos + bytesWritten,\n            peakSignalAmplitude);\n        bytesWritten += 4;\n\n        createShort(streamBuffer, streamBufferPos + bytesWritten,\n            radioReplayGain);\n        bytesWritten += 2;\n\n        createShort(streamBuffer, streamBufferPos + bytesWritten,\n            audiophileReplayGain);\n        bytesWritten += 2;\n\n        streamBuffer[streamBufferPos + bytesWritten] = 0xff & flags;\n        bytesWritten++;\n\n        if (abrBitrate >= 255)\n            streamBuffer[streamBufferPos + bytesWritten] = 0xFF;\n        else\n            streamBuffer[streamBufferPos + bytesWritten] = 0xff & abrBitrate;\n        bytesWritten++;\n\n        streamBuffer[streamBufferPos + bytesWritten] = 0xff & (encDelay >> 4);\n        streamBuffer[streamBufferPos + bytesWritten + 1] = 0xff & ((encDelay << 4) + (encPadding >> 8));\n        streamBuffer[streamBufferPos + bytesWritten + 2] = 0xff & encPadding;\n\n        bytesWritten += 3;\n\n        streamBuffer[streamBufferPos + bytesWritten] = 0xff & misc;\n        bytesWritten++;\n\n        // unused in rev0\n        streamBuffer[streamBufferPos + bytesWritten++] = 0;\n\n        createShort(streamBuffer, streamBufferPos + bytesWritten, gfp.preset);\n        bytesWritten += 2;\n\n        createInteger(streamBuffer, streamBufferPos + bytesWritten, musicLength);\n        bytesWritten += 4;\n\n        createShort(streamBuffer, streamBufferPos + bytesWritten, musicCRC);\n        bytesWritten += 2;\n\n        // Calculate tag CRC.... must be done here, since it includes previous\n        // information\n\n        for (var i = 0; i < bytesWritten; i++)\n            crc = crcUpdateLookup(streamBuffer[streamBufferPos + i], crc);\n\n        createShort(streamBuffer, streamBufferPos + bytesWritten, crc);\n        bytesWritten += 2;\n\n        return bytesWritten;\n    }\n\n    function skipId3v2(fpStream) {\n        // seek to the beginning of the stream\n        fpStream.seek(0);\n        // read 10 bytes in case there's an ID3 version 2 header here\n        var id3v2Header = new_byte(10);\n        fpStream.readFully(id3v2Header);\n        /* does the stream begin with the ID3 version 2 file identifier? */\n        var id3v2TagSize;\n        if (!new String(id3v2Header, \"ISO-8859-1\").startsWith(\"ID3\")) {\n            /*\n             * the tag size (minus the 10-byte header) is encoded into four\n             * bytes where the most significant bit is clear in each byte\n             */\n            id3v2TagSize = (((id3v2Header[6] & 0x7f) << 21)\n                | ((id3v2Header[7] & 0x7f) << 14)\n                | ((id3v2Header[8] & 0x7f) << 7) | (id3v2Header[9] & 0x7f))\n                + id3v2Header.length;\n        } else {\n            /* no ID3 version 2 tag in this stream */\n            id3v2TagSize = 0;\n        }\n        return id3v2TagSize;\n    }\n\n    this.getLameTagFrame = function (gfp, buffer) {\n        var gfc = gfp.internal_flags;\n\n        if (!gfp.bWriteVbrTag) {\n            return 0;\n        }\n        if (gfc.Class_ID != Lame.LAME_ID) {\n            return 0;\n        }\n        if (gfc.VBR_seek_table.pos <= 0) {\n            return 0;\n        }\n        if (buffer.length < gfc.VBR_seek_table.TotalFrameSize) {\n            return gfc.VBR_seek_table.TotalFrameSize;\n        }\n\n        Arrays.fill(buffer, 0, gfc.VBR_seek_table.TotalFrameSize, 0);\n\n        // 4 bytes frame header\n        setLameTagFrameHeader(gfp, buffer);\n\n        // Create TOC entries\n        var toc = new_byte(NUMTOCENTRIES);\n\n        if (gfp.free_format) {\n            for (var i = 1; i < NUMTOCENTRIES; ++i)\n                toc[i] = 0xff & (255 * i / 100);\n        } else {\n            xingSeekTable(gfc.VBR_seek_table, toc);\n        }\n\n        // Start writing the tag after the zero frame\n        var streamIndex = gfc.sideinfo_len;\n        /**\n         * Note: Xing header specifies that Xing data goes in the ancillary data\n         * with NO ERROR PROTECTION. If error protecton in enabled, the Xing\n         * data still starts at the same offset, and now it is in sideinfo data\n         * block, and thus will not decode correctly by non-Xing tag aware\n         * players\n         */\n        if (gfp.error_protection)\n            streamIndex -= 2;\n\n        // Put Vbr tag\n        if (gfp.VBR == VbrMode.vbr_off) {\n            buffer[streamIndex++] = 0xff & VBRTag1.charAt(0);\n            buffer[streamIndex++] = 0xff & VBRTag1.charAt(1);\n            buffer[streamIndex++] = 0xff & VBRTag1.charAt(2);\n            buffer[streamIndex++] = 0xff & VBRTag1.charAt(3);\n\n        } else {\n            buffer[streamIndex++] = 0xff & VBRTag0.charAt(0);\n            buffer[streamIndex++] = 0xff & VBRTag0.charAt(1);\n            buffer[streamIndex++] = 0xff & VBRTag0.charAt(2);\n            buffer[streamIndex++] = 0xff & VBRTag0.charAt(3);\n        }\n\n        // Put header flags\n        createInteger(buffer, streamIndex, FRAMES_FLAG + BYTES_FLAG + TOC_FLAG\n            + VBR_SCALE_FLAG);\n        streamIndex += 4;\n\n        // Put Total Number of frames\n        createInteger(buffer, streamIndex, gfc.VBR_seek_table.nVbrNumFrames);\n        streamIndex += 4;\n\n        // Put total audio stream size, including Xing/LAME Header\n        var streamSize = (gfc.VBR_seek_table.nBytesWritten + gfc.VBR_seek_table.TotalFrameSize);\n        createInteger(buffer, streamIndex, 0 | streamSize);\n        streamIndex += 4;\n\n        /* Put TOC */\n        System.arraycopy(toc, 0, buffer, streamIndex, toc.length);\n        streamIndex += toc.length;\n\n        if (gfp.error_protection) {\n            // (jo) error_protection: add crc16 information to header\n            bs.CRC_writeheader(gfc, buffer);\n        }\n\n        // work out CRC so far: initially crc = 0\n        var crc = 0x00;\n        for (var i = 0; i < streamIndex; i++)\n            crc = crcUpdateLookup(buffer[i], crc);\n        // Put LAME VBR info\n        streamIndex += putLameVBR(gfp, streamSize, buffer, streamIndex, crc);\n\n        return gfc.VBR_seek_table.TotalFrameSize;\n    }\n\n    /**\n     * Write final VBR tag to the file.\n     *\n     * @param gfp\n     *            global flags\n     * @param stream\n     *            stream to add the VBR tag to\n     * @return 0 (OK), -1 else\n     * @throws IOException\n     *             I/O error\n     */\n    this.putVbrTag = function (gfp, stream) {\n        var gfc = gfp.internal_flags;\n\n        if (gfc.VBR_seek_table.pos <= 0)\n            return -1;\n\n        // Seek to end of file\n        stream.seek(stream.length());\n\n        // Get file size, abort if file has zero length.\n        if (stream.length() == 0)\n            return -1;\n\n        // The VBR tag may NOT be located at the beginning of the stream. If an\n        // ID3 version 2 tag was added, then it must be skipped to write the VBR\n        // tag data.\n        var id3v2TagSize = skipId3v2(stream);\n\n        // Seek to the beginning of the stream\n        stream.seek(id3v2TagSize);\n\n        var buffer = new_byte(MAXFRAMESIZE);\n        var bytes = getLameTagFrame(gfp, buffer);\n        if (bytes > buffer.length) {\n            return -1;\n        }\n\n        if (bytes < 1) {\n            return 0;\n        }\n\n        // Put it all to disk again\n        stream.write(buffer, 0, bytes);\n        // success\n        return 0;\n    }\n\n}\n\nmodule.exports = VBRTag;\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./uploader.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"5b0bec03\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./uploader.vue\", function() {\n     var newContent = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!../../node_modules/sass-loader/lib/loader.js!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./uploader.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\\n.ar-icon {\\n  fill: #747474;\\n  border-radius: 50%;\\n  border: 1px solid #05CBCD;\\n  background-color: #FFFFFF;\\n  padding: 5px;\\n  cursor: pointer;\\n  transition: .2s;\\n}\\n.ar-icon--no-border {\\n    border: 0;\\n    border-radius: 0;\\n    padding: 0;\\n}\\n.ar-icon--rec {\\n    fill: white;\\n    background-color: #FF6B64;\\n    border-color: transparent;\\n}\\n.ar-icon--pulse {\\n    animation: ripple .5s linear infinite;\\n}\\n@keyframes ripple {\\n0% {\\n    box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.1), 0 0 0 1px rgba(255, 0, 0, 0.1), 0 0 0 5px rgba(255, 0, 0, 0.1);\\n}\\n100% {\\n    box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.1), 0 0 0 10px rgba(255, 0, 0, 0.1), 0 0 0 20px rgba(255, 0, 0, 0);\\n}\\n}\\n.ar-icon__xs {\\n    width: 18px;\\n    height: 18px;\\n    line-height: 18px;\\n}\\n.ar-icon__sm {\\n    width: 30px;\\n    height: 30px;\\n    line-height: 30px;\\n}\\n.ar-icon__lg {\\n    width: 45px;\\n    height: 45px;\\n    line-height: 45px;\\n    box-shadow: 0 2px 5px 1px rgba(158, 158, 158, 0.5);\\n}\\n\", \"\"]);\n\n// exports\n","var disposed = false\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./icon-button.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./icon-button.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-5c279e26\\\",\\\"hasScoped\\\":false,\\\"optionsId\\\":\\\"0\\\",\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./icon-button.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\nComponent.options.__file = \"src/components/icon-button.vue\"\n\n/* hot reload */\nif (module.hot) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-5c279e26\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-5c279e26\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nexport default Component.exports\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { domProps: { innerHTML: _vm._s(_vm.icons[_vm.name]) } })\n}\nvar staticRenderFns = []\nrender._withStripped = true\nexport { render, staticRenderFns }\nif (module.hot) {\n  module.hot.accept()\n  if (module.hot.data) {\n    require(\"vue-hot-reload-api\")      .rerender(\"data-v-5c279e26\", { render: render, staticRenderFns: staticRenderFns })\n  }\n}","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  scriptExports = scriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof scriptExports.default\n  if (type === 'object' || type === 'function') {\n    scriptExports = scriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n","export function calculateLineHeadPosition (ev, element) {\n  const progressWidth = element.getBoundingClientRect().width\n  const leftPosition = ev.target.getBoundingClientRect().left\n  let pos = (ev.clientX - leftPosition) / progressWidth\n\n  try {\n    if (!ev.target.className.match(/^ar\\-line\\-control/)) {\n      return\n    }\n  } catch (err) {\n    return\n  }\n\n  pos = pos < 0 ? 0 : pos\n  pos = pos > 1 ? 1 : pos\n\n  return pos\n}\n\nexport function convertTimeMMSS (seconds) {\n  return new Date(seconds * 1000).toISOString().substr(14, 5)\n}\n","var disposed = false\nfunction injectStyle (context) {\n  if (disposed) return\n  require(\"!!vue-style-loader!css-loader!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!sass-loader!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./line-control.vue\")\n}\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./line-control.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./line-control.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-ad219ad8\\\",\\\"hasScoped\\\":false,\\\"optionsId\\\":\\\"0\\\",\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./line-control.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\nComponent.options.__file = \"src/components/line-control.vue\"\n\n/* hot reload */\nif (module.hot) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-ad219ad8\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-ad219ad8\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nexport default Component.exports\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      ref: _vm.refId,\n      staticClass: \"ar-line-control\",\n      on: { mousedown: _vm.onMouseDown }\n    },\n    [\n      _c(\"div\", {\n        staticClass: \"ar-line-control__head\",\n        style: _vm.calculateSize\n      })\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\nexport { render, staticRenderFns }\nif (module.hot) {\n  module.hot.accept()\n  if (module.hot.data) {\n    require(\"vue-hot-reload-api\")      .rerender(\"data-v-ad219ad8\", { render: render, staticRenderFns: staticRenderFns })\n  }\n}","var disposed = false\nfunction injectStyle (context) {\n  if (disposed) return\n  require(\"!!vue-style-loader!css-loader!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!sass-loader!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./volume-control.vue\")\n}\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./volume-control.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./volume-control.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-060e62ba\\\",\\\"hasScoped\\\":false,\\\"optionsId\\\":\\\"0\\\",\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./volume-control.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\nComponent.options.__file = \"src/components/volume-control.vue\"\n\n/* hot reload */\nif (module.hot) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-060e62ba\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-060e62ba\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nexport default Component.exports\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"ar-volume\" },\n    [\n      _c(\"icon-button\", {\n        staticClass: \"ar-volume__icon\",\n        attrs: { name: \"volume\" }\n      }),\n      _vm._v(\" \"),\n      _c(\"line-control\", {\n        staticClass: \"ar-volume-bar\",\n        attrs: { \"ref-id\": \"volume\", percentage: _vm.volume },\n        on: { \"change-linehead\": _vm.onChangeLinehead }\n      })\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\nexport { render, staticRenderFns }\nif (module.hot) {\n  module.hot.accept()\n  if (module.hot.data) {\n    require(\"vue-hot-reload-api\")      .rerender(\"data-v-060e62ba\", { render: render, staticRenderFns: staticRenderFns })\n  }\n}","var disposed = false\nfunction injectStyle (context) {\n  if (disposed) return\n  require(\"!!vue-style-loader!css-loader!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!sass-loader!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./player.vue\")\n}\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./player.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./player.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-1bcde71e\\\",\\\"hasScoped\\\":false,\\\"optionsId\\\":\\\"0\\\",\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./player.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\nComponent.options.__file = \"src/components/player.vue\"\n\n/* hot reload */\nif (module.hot) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-1bcde71e\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-1bcde71e\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nexport default Component.exports\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"ar-player\" }, [\n    _c(\n      \"div\",\n      { staticClass: \"ar-player-actions\" },\n      [\n        _c(\"icon-button\", {\n          staticClass: \"ar-icon ar-icon__lg ar-player__play\",\n          class: { \"ar-player__play--active\": _vm.isPlaying },\n          attrs: { id: \"play\", name: _vm.playBtnIcon },\n          nativeOn: {\n            click: function($event) {\n              return _vm.playback($event)\n            }\n          }\n        })\n      ],\n      1\n    ),\n    _vm._v(\" \"),\n    _c(\n      \"div\",\n      { staticClass: \"ar-player-bar\" },\n      [\n        _c(\"div\", { staticClass: \"ar-player__time\" }, [\n          _vm._v(_vm._s(_vm.playedTime))\n        ]),\n        _vm._v(\" \"),\n        _c(\"line-control\", {\n          staticClass: \"ar-player__progress\",\n          attrs: { \"ref-id\": \"progress\", percentage: _vm.progress },\n          on: { \"change-linehead\": _vm._onUpdateProgress }\n        }),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"ar-player__time\" }, [\n          _vm._v(_vm._s(_vm.duration))\n        ]),\n        _vm._v(\" \"),\n        _c(\"volume-control\", { on: { \"change-volume\": _vm._onChangeVolume } })\n      ],\n      1\n    ),\n    _vm._v(\" \"),\n    _c(\"audio\", { attrs: { id: _vm.playerUniqId, src: _vm.audioSource } })\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\nexport { render, staticRenderFns }\nif (module.hot) {\n  module.hot.accept()\n  if (module.hot.data) {\n    require(\"vue-hot-reload-api\")      .rerender(\"data-v-1bcde71e\", { render: render, staticRenderFns: staticRenderFns })\n  }\n}","var disposed = false\nfunction injectStyle (context) {\n  if (disposed) return\n  require(\"!!vue-style-loader!css-loader!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!sass-loader!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./downloader.vue\")\n}\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./downloader.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./downloader.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-35e07ec5\\\",\\\"hasScoped\\\":false,\\\"optionsId\\\":\\\"0\\\",\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./downloader.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\nComponent.options.__file = \"src/components/downloader.vue\"\n\n/* hot reload */\nif (module.hot) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-35e07ec5\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-35e07ec5\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nexport default Component.exports\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"icon-button\", {\n    staticClass: \"ar-icon ar-icon__xs ar-icon--no-border\",\n    attrs: { id: \"download\", name: \"download\" },\n    nativeOn: {\n      click: function($event) {\n        return _vm.download($event)\n      }\n    }\n  })\n}\nvar staticRenderFns = []\nrender._withStripped = true\nexport { render, staticRenderFns }\nif (module.hot) {\n  module.hot.accept()\n  if (module.hot.data) {\n    require(\"vue-hot-reload-api\")      .rerender(\"data-v-35e07ec5\", { render: render, staticRenderFns: staticRenderFns })\n  }\n}","import { Mp3Encoder } from 'lamejs'\n\nexport default class {\n  constructor(config) {\n    this.bitRate    = config.bitRate || 128\n    this.sampleRate = config.sampleRate || 44100\n    this.dataBuffer = []\n    this.encoder    = new Mp3Encoder(1, this.sampleRate, this.bitRate)\n  }\n\n  encode(arrayBuffer) {\n    const maxSamples = 1152\n    const samples    = this._convertBuffer(arrayBuffer)\n    let remaining    = samples.length\n\n    for (let i = 0; remaining >= 0; i += maxSamples) {\n      const left = samples.subarray(i, i + maxSamples)\n      const buffer = this.encoder.encodeBuffer(left)\n      this.dataBuffer.push(new Int8Array(buffer))\n      remaining -= maxSamples\n    }\n  }\n\n  finish() {\n    this.dataBuffer.push(this.encoder.flush())\n    const blob = new Blob(this.dataBuffer, { type: 'audio/mp3' })\n    this.dataBuffer = []\n\n    return {\n      id    : Date.now(),\n      blob  : blob,\n      url   : URL.createObjectURL(blob)\n    }\n  }\n\n  _floatTo16BitPCM(input, output) {\n    for (let i = 0; i < input.length; i++) {\n      const s = Math.max(-1, Math.min(1, input[i]))\n      output[i] = (s < 0 ? s * 0x8000 : s * 0x7FFF)\n    }\n  }\n\n  _convertBuffer(arrayBuffer) {\n    const data = new Float32Array(arrayBuffer)\n    const out = new Int16Array(arrayBuffer.length)\n    this._floatTo16BitPCM(data, out)\n    return out\n  }\n}\n","import Encoder from './encoder'\nimport { convertTimeMMSS } from './utils'\n\nexport default class {\n  constructor (options = {}) {\n    this.beforeRecording = options.beforeRecording\n    this.pauseRecording  = options.pauseRecording\n    this.afterRecording  = options.afterRecording\n    this.micFailed       = options.micFailed\n\n    this.bufferSize = 4096\n    this.records    = []\n\n    this.isPause     = false\n    this.isRecording = false\n\n    this.duration = 0\n    this.volume   = 0\n\n    this._duration = 0\n  }\n\n  start () {\n    const constraints = {\n      video: false,\n      audio: {\n        channelCount: 1,\n        echoCancellation: false\n      }\n    }\n\n    this.beforeRecording && this.beforeRecording('start recording')\n\n    navigator.mediaDevices\n             .getUserMedia(constraints)\n             .then(this._micCaptured.bind(this))\n             .catch(this._micError.bind(this))\n    this.isPause = false\n    this.isRecording = true\n    this.lameEncoder = new Encoder({})\n  }\n\n  stop () {\n    this.stream.getTracks().forEach((track) => track.stop())\n    this.input.disconnect()\n    this.processor.disconnect()\n    this.context.close()\n\n    const record = this.lameEncoder.finish()\n    record.duration = convertTimeMMSS(this.duration)\n    this.records.push(record)\n\n    this._duration = 0\n    this.duration  = 0\n\n    this.isPause     = false\n    this.isRecording = false\n\n    this.afterRecording && this.afterRecording(record)\n  }\n\n  pause () {\n    this.stream.getTracks().forEach((track) => track.stop())\n    this.input.disconnect()\n    this.processor.disconnect()\n    this.context.close()\n\n    this._duration = this.duration\n    this.isPause = true\n\n    this.pauseRecording && this.pauseRecording('pause recording')\n  }\n\n  recordList () {\n    return this.records\n  }\n\n  lastRecord () {\n    return this.records.slice(-1)\n  }\n\n  _micCaptured (stream) {\n    this.context    = new(window.AudioContext || window.webkitAudioContext)()\n    this.duration   = this._duration\n    this.input      = this.context.createMediaStreamSource(stream)\n    this.processor  = this.context.createScriptProcessor(this.bufferSize, 1, 1)\n    this.stream     = stream\n\n    this.processor.onaudioprocess = (ev) => {\n      const sample = ev.inputBuffer.getChannelData(0)\n      let sum = 0.0\n\n      this.lameEncoder.encode(sample)\n\n      for (let i = 0; i < sample.length; ++i) {\n        sum += sample[i] * sample[i]\n      }\n\n      this.duration = parseFloat(this._duration) + parseFloat(this.context.currentTime.toFixed(2))\n      this.volume = Math.sqrt(sum / sample.length).toFixed(2)\n    }\n\n    this.input.connect(this.processor)\n    this.processor.connect(this.context.destination)\n  }\n\n  _micError (error) {\n    this.micFailed && this.micFailed(error)\n  }\n}\n","export default {\n  props: {\n    filename  : { type: String, default: 'record'   },\n    headers   : { type: Object, default: () => ({}) },\n    uploadUrl : { type: String                      }\n  }\n}\n","var disposed = false\nfunction injectStyle (context) {\n  if (disposed) return\n  require(\"!!vue-style-loader!css-loader!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!sass-loader!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./uploader.vue\")\n}\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./uploader.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./uploader.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-5016f904\\\",\\\"hasScoped\\\":false,\\\"optionsId\\\":\\\"0\\\",\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./uploader.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\nComponent.options.__file = \"src/components/uploader.vue\"\n\n/* hot reload */\nif (module.hot) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-5016f904\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-5016f904\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nexport default Component.exports\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"icon-button\", {\n    staticClass: \"ar-icon ar-icon__xs ar-icon--no-border\",\n    attrs: { name: \"save\" },\n    nativeOn: {\n      click: function($event) {\n        return _vm.upload($event)\n      }\n    }\n  })\n}\nvar staticRenderFns = []\nrender._withStripped = true\nexport { render, staticRenderFns }\nif (module.hot) {\n  module.hot.accept()\n  if (module.hot.data) {\n    require(\"vue-hot-reload-api\")      .rerender(\"data-v-5016f904\", { render: render, staticRenderFns: staticRenderFns })\n  }\n}","var disposed = false\nfunction injectStyle (context) {\n  if (disposed) return\n  require(\"!!vue-style-loader!css-loader!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":true}!sass-loader!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./recorder.vue\")\n}\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./recorder.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./recorder.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-ab2a3464\\\",\\\"hasScoped\\\":false,\\\"optionsId\\\":\\\"0\\\",\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./recorder.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\nComponent.options.__file = \"src/components/recorder.vue\"\n\n/* hot reload */\nif (module.hot) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-ab2a3464\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-ab2a3464\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nexport default Component.exports\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"ar\" }, [\n    _vm.isUploading ? _c(\"div\", { staticClass: \"ar__overlay\" }) : _vm._e(),\n    _vm._v(\" \"),\n    _vm.isUploading\n      ? _c(\"div\", { staticClass: \"ar-spinner\" }, [\n          _c(\"div\", { staticClass: \"ar-spinner__dot\" }),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"ar-spinner__dot\" }),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"ar-spinner__dot\" })\n        ])\n      : _vm._e(),\n    _vm._v(\" \"),\n    _c(\n      \"div\",\n      { staticClass: \"ar-content\", class: { ar__blur: _vm.isUploading } },\n      [\n        _c(\n          \"div\",\n          { staticClass: \"ar-recorder\" },\n          [\n            _c(\"icon-button\", {\n              staticClass: \"ar-icon ar-icon__lg\",\n              class: {\n                \"ar-icon--rec\": _vm.isRecording,\n                \"ar-icon--pulse\": _vm.isRecording && _vm.volume > 0.02\n              },\n              attrs: { name: _vm.iconButtonType },\n              nativeOn: {\n                click: function($event) {\n                  return _vm.toggleRecorder($event)\n                }\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"icon-button\", {\n              staticClass: \"ar-icon ar-icon__sm ar-recorder__stop\",\n              attrs: { name: \"stop\" },\n              nativeOn: {\n                click: function($event) {\n                  return _vm.stopRecorder($event)\n                }\n              }\n            })\n          ],\n          1\n        ),\n        _vm._v(\" \"),\n        _vm.attempts\n          ? _c(\"div\", { staticClass: \"ar-recorder__records-limit\" }, [\n              _vm._v(\n                \"Attempts: \" +\n                  _vm._s(_vm.attemptsLeft) +\n                  \"/\" +\n                  _vm._s(_vm.attempts)\n              )\n            ])\n          : _vm._e(),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"ar-recorder__duration\" }, [\n          _vm._v(_vm._s(_vm.recordedTime))\n        ]),\n        _vm._v(\" \"),\n        _vm.time\n          ? _c(\"div\", { staticClass: \"ar-recorder__time-limit\" }, [\n              _vm._v(\"Record duration is limited: \" + _vm._s(_vm.time) + \"m\")\n            ])\n          : _vm._e(),\n        _vm._v(\" \"),\n        _c(\n          \"div\",\n          { staticClass: \"ar-records\" },\n          _vm._l(_vm.recordList, function(record, idx) {\n            return _c(\n              \"div\",\n              {\n                key: record.id,\n                staticClass: \"ar-records__record\",\n                class: {\n                  \"ar-records__record--selected\": record.id === _vm.selected.id\n                },\n                on: {\n                  click: function($event) {\n                    _vm.choiceRecord(record)\n                  }\n                }\n              },\n              [\n                record.id === _vm.selected.id\n                  ? _c(\n                      \"div\",\n                      {\n                        staticClass: \"ar__rm\",\n                        on: {\n                          click: function($event) {\n                            _vm.removeRecord(idx)\n                          }\n                        }\n                      },\n                      [_vm._v(\"×\")]\n                    )\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _c(\"div\", { staticClass: \"ar__text\" }, [\n                  _vm._v(\"Record \" + _vm._s(idx + 1))\n                ]),\n                _vm._v(\" \"),\n                _c(\"div\", { staticClass: \"ar__text\" }, [\n                  _vm._v(_vm._s(record.duration))\n                ]),\n                _vm._v(\" \"),\n                record.id === _vm.selected.id && _vm.showDownloadButton\n                  ? _c(\"downloader\", {\n                      staticClass: \"ar__downloader\",\n                      attrs: { record: record, filename: _vm.filename }\n                    })\n                  : _vm._e(),\n                _vm._v(\" \"),\n                record.id === _vm.selected.id && _vm.showUploadButton\n                  ? _c(\"uploader\", {\n                      staticClass: \"ar__uploader\",\n                      attrs: {\n                        record: record,\n                        filename: _vm.filename,\n                        headers: _vm.headers,\n                        \"upload-url\": _vm.uploadUrl\n                      }\n                    })\n                  : _vm._e()\n              ],\n              1\n            )\n          })\n        ),\n        _vm._v(\" \"),\n        _c(\"audio-player\", { attrs: { record: _vm.selected } })\n      ],\n      1\n    )\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\nexport { render, staticRenderFns }\nif (module.hot) {\n  module.hot.accept()\n  if (module.hot.data) {\n    require(\"vue-hot-reload-api\")      .rerender(\"data-v-ab2a3464\", { render: render, staticRenderFns: staticRenderFns })\n  }\n}","import AudioPlayer   from '@/components/player.vue'\nimport AudioRecorder from '@/components/recorder.vue'\n\nconst components = {\n  AudioPlayer,\n  AudioRecorder,\n\n  install (Vue) {\n    if (this.installed) {\n      return\n    }\n\n    this.installed = true\n\n    Vue.prototype.$eventBus = Vue.prototype.$eventBus || new Vue\n\n    Vue.component('audio-player', AudioPlayer)\n    Vue.component('audio-recorder', AudioRecorder)\n  }\n}\n\nexport default components\n\nexport { AudioPlayer, AudioRecorder }\n"],"mappings":"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IAAA,GACA,YACA,YACA,YACA;MAGAC,IAAA,GACA,sBACA,mBACA,qBACA,uBACA,mBACA;MAGAC,IAAA,GACA,oBACA,mBACA,mBACA,uBACA,oBACA;MAGAC,IAAA,GACA,oBACA,kBACA,kBACA,oBACA,mBACA;MAGAC,KAAA,GACA,8BACA,4BACA,8BACA,+BACA,8BACA,8BACA,6BACA;MAGAC,KAAA,GACA,8BACA,6BACA,8BACA,+BACA,8BACA,+BACA,4BACA;MAGAC,KAAA,GACA,8BACA,4BACA,8BACA,+BACA,8BACA,8BACA,6BACA;MAGAC,KAAA,GACA,8DACA,8DACA,gEACA,gEACA,iEACA,gEACA,iEACA,gEACA,gEACA,gEACA,gEACA,8DACA,8DACA,6DACA,4DACA;MAGAC,KAAA,GACA,sEACA,+DACA,gEACA,gEACA,gEACA,gEACA,iEACA,kEACA,gEACA,iEACA,gEACA,gEACA,gEACA,6DACA,+DACA;MAGAC,KAAA,GACA,sEACA,iEACA,uEACA,wEACA,0EACA,2EACA,6EACA,0EACA,2EACA,6EACA,6EACA,8EACA,+EACA,gFACA,gFACA;MAGAC,KAAA,GACA,4EACA,0EACA,0EACA,2EACA,6EACA,8EACA,+EACA,+EACA,+EACA,+EACA,+EACA,8EACA,8EACA,8EACA,+EACA;MAGAC,KAAA,GACA,8BACA;MAGAC,KAAA,GACA,gCACA;MAGAC,GAAA,GACA,MACA;MAGAC,GAAA,GACA,SACA,SACA;MAGAC,GAAA,GACA,SACA,SACA;MAGAC,GAAA,GACA,YACA,YACA,aACA;MAGAC,GAAA,GACA,YACA,YACA,YACA;MAGAC,GAAA,GACA,mBACA,mBACA,qBACA,sBACA,sBACA;MAGAC,GAAA,GACA,mBACA,qBACA,qBACA,uBACA,sBACA;MAGAC,GAAA,GACA,mBACA,mBACA,mBACA,mBACA,oBACA;MAGAC,IAAA,GACA,4BACA,4BACA,6BACA,8BACA,+BACA,gCACA,+BACA;MAGAC,IAAA,GACA,0BACA,2BACA,4BACA,6BACA,+BACA,+BACA,6BACA;MAGAC,IAAA,GACA,2BACA,0BACA,0BACA,2BACA,4BACA,8BACA,6BACA;MAGAC,IAAA,GACA,2DACA,4DACA,6DACA,8DACA,8DACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA;MAGAC,IAAA,GACA,0DACA,0DACA,0DACA,2DACA,4DACA,6DACA,+DACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA;MAGAC,MAAA,GACA,4DACA,4DACA,6DACA,8DACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA;MAGAC,IAAA,GACA,4DACA,4DACA,6DACA,8DACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA;MAGAC,IAAA,GACA,2DACA,2DACA,0DACA,2DACA,4DACA,8DACA,+DACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA;MAGAC,IAAA,GACA,wBACA;MAGAC,IAAA,GACA,wBACA;IAAA;IAGA1Y,CAAA,CAAA2Y,EAAA,IAEA,IAAA5Y,CAAA,oBACA,IAAAA,CAAA,OAAAC,CAAA,CAAAwW,IAAA,EAAAxW,CAAA,CAAAyX,GAAA,GACA,IAAA1X,CAAA,OAAAC,CAAA,CAAAyW,IAAA,EAAAzW,CAAA,CAAA0X,GAAA,GACA,IAAA3X,CAAA,OAAAC,CAAA,CAAA0W,IAAA,EAAA1W,CAAA,CAAA2X,GAAA,GACA,IAAA5X,CAAA,oBACA,IAAAA,CAAA,OAAAC,CAAA,CAAA2W,IAAA,EAAA3W,CAAA,CAAA4X,GAAA,GACA,IAAA7X,CAAA,OAAAC,CAAA,CAAA4W,IAAA,EAAA5W,CAAA,CAAA6X,GAAA,GACA,IAAA9X,CAAA,OAAAC,CAAA,CAAA6W,IAAA,EAAA7W,CAAA,CAAA8X,GAAA,GACA,IAAA/X,CAAA,OAAAC,CAAA,CAAA8W,IAAA,EAAA9W,CAAA,CAAA+X,GAAA,GACA,IAAAhY,CAAA,OAAAC,CAAA,CAAA+W,IAAA,EAAA/W,CAAA,CAAAgY,GAAA,GACA,IAAAjY,CAAA,OAAAC,CAAA,CAAAgX,KAAA,EAAAhX,CAAA,CAAAiY,IAAA,GACA,IAAAlY,CAAA,OAAAC,CAAA,CAAAiX,KAAA,EAAAjX,CAAA,CAAAkY,IAAA,GACA,IAAAnY,CAAA,OAAAC,CAAA,CAAAkX,KAAA,EAAAlX,CAAA,CAAAmY,IAAA,GACA,IAAApY,CAAA,QAAAC,CAAA,CAAAmX,KAAA,EAAAnX,CAAA,CAAAoY,IAAA,GACA,IAAArY,CAAA,aAAAC,CAAA,CAAAsY,MAAA,GACA,IAAAvY,CAAA,QAAAC,CAAA,CAAAoX,KAAA,EAAApX,CAAA,CAAAqY,IAAA,GAEA,IAAAtY,CAAA,OAAAC,CAAA,CAAAqX,KAAA,EAAArX,CAAA,CAAAuY,IAAA,GACA,IAAAxY,CAAA,OAAAC,CAAA,CAAAqX,KAAA,EAAArX,CAAA,CAAAuY,IAAA,GACA,IAAAxY,CAAA,OAAAC,CAAA,CAAAqX,KAAA,EAAArX,CAAA,CAAAuY,IAAA,GACA,IAAAxY,CAAA,QAAAC,CAAA,CAAAqX,KAAA,EAAArX,CAAA,CAAAuY,IAAA,GACA,IAAAxY,CAAA,QAAAC,CAAA,CAAAqX,KAAA,EAAArX,CAAA,CAAAuY,IAAA,GACA,IAAAxY,CAAA,SAAAC,CAAA,CAAAqX,KAAA,EAAArX,CAAA,CAAAuY,IAAA,GACA,IAAAxY,CAAA,WAAAC,CAAA,CAAAqX,KAAA,EAAArX,CAAA,CAAAuY,IAAA,GACA,IAAAxY,CAAA,WAAAC,CAAA,CAAAqX,KAAA,EAAArX,CAAA,CAAAuY,IAAA,GAEA,IAAAxY,CAAA,QAAAC,CAAA,CAAAsX,KAAA,EAAAtX,CAAA,CAAAwY,IAAA,GACA,IAAAzY,CAAA,QAAAC,CAAA,CAAAsX,KAAA,EAAAtX,CAAA,CAAAwY,IAAA,GACA,IAAAzY,CAAA,QAAAC,CAAA,CAAAsX,KAAA,EAAAtX,CAAA,CAAAwY,IAAA,GACA,IAAAzY,CAAA,SAAAC,CAAA,CAAAsX,KAAA,EAAAtX,CAAA,CAAAwY,IAAA,GACA,IAAAzY,CAAA,SAAAC,CAAA,CAAAsX,KAAA,EAAAtX,CAAA,CAAAwY,IAAA,GACA,IAAAzY,CAAA,SAAAC,CAAA,CAAAsX,KAAA,EAAAtX,CAAA,CAAAwY,IAAA,GACA,IAAAzY,CAAA,WAAAC,CAAA,CAAAsX,KAAA,EAAAtX,CAAA,CAAAwY,IAAA,GACA,IAAAzY,CAAA,WAAAC,CAAA,CAAAsX,KAAA,EAAAtX,CAAA,CAAAwY,IAAA,GAEA,IAAAzY,CAAA,OAAAC,CAAA,CAAAuX,KAAA,EAAAvX,CAAA,CAAAyY,IAAA,GACA,IAAA1Y,CAAA,OAAAC,CAAA,CAAAwX,KAAA,EAAAxX,CAAA,CAAA0Y,IAAA,IAWA1Y,CAAA,CAAA4Y,QAAA,IACA,+DACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,iEACA,gEACA,iEACA,gEACA,kEACA,gEACA,mEACA,gEACA,kEACA,gEACA,sEACA,iEACA,sEACA,gEACA,sEACA,kEACA,uEACA,mEACA,uEACA,gEACA,iEAUA5Y,CAAA,CAAA6Y,OAAA,IACA,uBACA,wBACA,yBAWA7Y,CAAA,CAAA8Y,OAAA,IACA,+DACA,iEAGA9Y,CAAA,CAAA+Y,aAAA,IACA,oEACA,wEACA,iEAMA/Y,CAAA,CAAAgZ,gBAAA,IACA,yBACA,yBACA,yBAMAhZ,CAAA,CAAAiZ,UAAA,uBAEA1Z,CAAA,CAAAE,OAAA,GAAAO,CAAA;EAAA,aAAAT,CAAA,EAAAC,CAAA,EAAAO,CAAA;ICjgBA,IAAAE,CAAA,GAAcF,CAAA,CAAQ;MACtBC,CAAA,GAAaD,CAAA,CAAQ;MACrBwB,CAAA,GAAAvB,CAAA,CAAAkD,MAAA;MASAhD,CAAA,IARAF,CAAA,CAAAmD,OAAA,EACAnD,CAAA,CAAAoD,KAAA,EACApD,CAAA,CAAAqD,UAAA,EACArD,CAAA,CAAAsD,IAAA,EACAtD,CAAA,CAAAuD,MAAA,EACAvD,CAAA,CAAAwD,WAAA,EACAxD,CAAA,CAAA4D,QAAA,EACA5D,CAAA,CAAA8D,UAAA,EACA9D,CAAA,CAAAgE,SAAA;MACAxD,CAAA,GAAAR,CAAA,CAAAiE,WAAA;IACAjE,CAAA,CAAAkE,OAAA,EACAlE,CAAA,CAAAmE,SAAA,EACAnE,CAAA,CAAAsE,MAAA;IAiBA/E,CAAA,CAAAE,OAAA,GAfA;MACA,KAAAU,CAAA,GAAAD,CAAA,CAAAD,CAAA,CAAA2K,OAAA,GACA,KAAArJ,CAAA,GAAAf,CAAA,EAAAP,CAAA,CAAA4K,OAAA;MAEA,IAAA7K,CAAA;MACA,KAAAmW,MAAA,aAAA5W,CAAA;QACAgC,CAAA,CAAAO,SAAA,CAAAvC,CAAA,CAAAY,CAAA,KAAAH,CAAA,CAAAG,CAAA,KAAAF,CAAA,CAAA2K,OAAA;QACA,SAAApL,CAAA,MAAuBA,CAAA,GAAAS,CAAA,CAAA4K,OAAA,EAAqBrL,CAAA,IAC5C,SAAAO,CAAA,MAA2BA,CAAA,MAAOA,CAAA,IAClCC,CAAA,CAAAuB,CAAA,CAAA/B,CAAA,EAAAO,CAAA,IAAAR,CAAA,CAAAgC,CAAA,CAAA/B,CAAA,EAAAO,CAAA;MAAA;IAAA;EAAA,aAAAR,CAAA,EAAAC,CAAA;ICvBA,SAAAO,EAAAR,CAAA;MACA,IAAAC,CAAA,GAAAD,CAAA;MACA,KAAAyC,OAAA;QACA,OAAAxC,CAAA;MAAA;IAAA;IAIAO,CAAA,CAAAmZ,MAAA,OAAAnZ,CAAA,KACAA,CAAA,CAAA0H,YAAA,OAAA1H,CAAA,KACAA,CAAA,CAAAoZ,YAAA,OAAApZ,CAAA,KACAA,CAAA,CAAAqZ,IAAA,OAAArZ,CAAA,KACAA,CAAA,CAAAsZ,OAAA,OAAAtZ,CAAA,KAEAR,CAAA,CAAAE,OAAA,GAAAM,CAAA;EAAA,aAAAR,CAAA,EAAAC,CAAA,EAAAO,CAAA;ICPA,IAAAC,CAAA,GAAaD,CAAA,CAAQ;MACrBG,CAAA,GAAAF,CAAA,CAAAkD,MAAA;MAWA1C,CAAA,IAVAR,CAAA,CAAAmD,OAAA,EACAnD,CAAA,CAAAoD,KAAA,EACApD,CAAA,CAAAqD,UAAA,EACArD,CAAA,CAAAsD,IAAA,EACAtD,CAAA,CAAAuD,MAAA,EACAvD,CAAA,CAAAwD,WAAA,EACAxD,CAAA,CAAA4D,QAAA,EACA5D,CAAA,CAAA8D,UAAA,EACA9D,CAAA,CAAAgE,SAAA,EACAhE,CAAA,CAAAiE,WAAA,EACAjE,CAAA,CAAAkE,OAAA;MAIAnC,CAAA,IAHA/B,CAAA,CAAAmE,SAAA,EACAnE,CAAA,CAAAsE,MAAA,EAEcvE,CAAA,CAAQ;IA0BtBR,CAAA,CAAAE,OAAA,GAxBA,UAAAF,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA;MAEA,KAAAG,CAAA,GAAAK,CAAA,KAAAuB,CAAA,CAAA6I,OAAA,GACA,KAAArJ,CAAA,GAAAf,CAAA,KAAAuB,CAAA,CAAA8I,OAAA,GACA,KAAAyO,MAAA,GAAA9Y,CAAA,KAAAuB,CAAA,CAAA+I,MAAA,GACA,KAAAyO,MAAA,GAAA/Y,CAAA,KAAAuB,CAAA,CAAAgJ,MAAA;MACA,IAAA9K,CAAA,QAAAE,CAAA;QACAoB,CAAA,QAAAA,CAAA;MAEA,KAAAK,SAAA,CAAAC,MAAA,KAGA,KAAA2X,IAAA,GAZAja,CAAA,EAaA,KAAAka,IAAA,GAbAja,CAAA,EAcA,KAAAka,KAAA,GAdA3Z,CAAA,EAeA,KAAA4Z,KAAA,GAfA3Z,CAAA,EAiBAE,CAAA,CAAA4B,SAAA,MAAA0X,IAAA,KAAAvZ,CAAA,KAAAkC,IAAA,CAAAyX,GAAA,MAAAJ,IAAA,CAAA3X,MAAA,OAAA1B,CAAA,CAAA0B,MAAA,IACA3B,CAAA,CAAA4B,SAAA,MAAA2X,IAAA,KAAAlY,CAAA,KAAAY,IAAA,CAAAyX,GAAA,MAAAH,IAAA,CAAA5X,MAAA,OAAAN,CAAA,CAAAM,MAAA,IACA3B,CAAA,CAAA4B,SAAA,MAAA4X,KAAA,UAAAJ,MAAA,KAAAnX,IAAA,CAAAyX,GAAA,MAAAF,KAAA,CAAA7X,MAAA,OAAAyX,MAAA,CAAAzX,MAAA,IACA3B,CAAA,CAAA4B,SAAA,MAAA6X,KAAA,UAAAJ,MAAA,KAAApX,IAAA,CAAAyX,GAAA,MAAAD,KAAA,CAAA9X,MAAA,OAAA0X,MAAA,CAAA1X,MAAA;IAAA;EAAA,aAAAtC,CAAA,EAAAC,CAAA,EAAAO,CAAA;IC0CA,IAAAC,CAAA,GAAaD,CAAA,CAAQ;MACrB2H,CAAA,GAAA1H,CAAA,CAAAkD,MAAA;MAKA3B,CAAA,IAJAvB,CAAA,CAAAmD,OAAA,EACAnD,CAAA,CAAAoD,KAAA,EACApD,CAAA,CAAAqD,UAAA,EACArD,CAAA,CAAAsD,IAAA,EACAtD,CAAA,CAAAuD,MAAA;IACAvD,CAAA,CAAAwD,WAAA,EACAxD,CAAA,CAAA4D,QAAA,EACA5D,CAAA,CAAA8D,UAAA,EACA9D,CAAA,CAAAgE,SAAA,EACAhE,CAAA,CAAAiE,WAAA,EACAjE,CAAA,CAAAkE,OAAA,EACAlE,CAAA,CAAAmE,SAAA,EACAnE,CAAA,CAAAsE,MAAA;IAwBA,SAAAiE,EAAA;MAIA,IAWAvI,CAAA,GAAAuI,CAAA,CAAAsR,yBAAA;QAIA5Z,CAAA,GAAAsI,CAAA,CAAAuR,2BAAA;QAOAzZ,CAAA,IACA,qDACA,yDACA,sDACA,sDACA,qDACA,qDACA,oDACA,sDACA,wDACA,qDACA,sDACA,qDACA,sDACA,qDACA,uDACA,uDACA,sDACA,qDACA,oDACA,qDACA,oDACA,uDACA,oDACA,qDACA,qDACA,oDACA,kDACA,qDACA,sDACA,oDACA,qDACA,qDACA,mDACA,qDACA,mDACA,qDACA,oDACA,oDACA,oDACA,mDACA,qDACA,oDACA,uDACA,mDACA,oDACA,oDACA,mDACA,oDACA,oDACA,uDACA,qDACA,kDACA,qDACA,qDACA,oDACA,qDACA,sDACA,qDACA,qDACA,oDACA,sDACA,iDACA;QAEA2F,CAAA,IACA,wDACA,mCACA,wDACA,kCACA,wDACA,mCACA,wDACA,mCACA,wDACA,mCACA,wDACA,mCACA,wDACA,mCACA,uDACA,mCACA,wDACA;MASA,SAAAiB,EAAA1H,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA;QAEA,YAAAtB,CAAA,KAEAF,CAAA,CAAAC,CAAA,YAAAT,CAAA,CAAAC,CAAA,QAAA+B,CAAA,MACAxB,CAAA,CAAAC,CAAA,QAAAuB,CAAA,MAAAhC,CAAA,CAAAC,CAAA,QACA+B,CAAA,MAAAxB,CAAA,CAAAC,CAAA,QAAAuB,CAAA,MACAhC,CAAA,CAAAC,CAAA,QAAA+B,CAAA,MAAAxB,CAAA,CAAAC,CAAA,QACAuB,CAAA,MAAAhC,CAAA,CAAAC,CAAA,QAAA+B,CAAA,MACAxB,CAAA,CAAAC,CAAA,QAAAuB,CAAA,MAAAhC,CAAA,CAAAC,CAAA,QACA+B,CAAA,MAAAxB,CAAA,CAAAC,CAAA,QAAAuB,CAAA,MACAhC,CAAA,CAAAC,CAAA,QAAA+B,CAAA,OAAAxB,CAAA,CAAAC,CAAA,QACAuB,CAAA,OAAAhC,CAAA,CAAAC,CAAA,QAAA+B,CAAA,OACAxB,CAAA,CAAAC,CAAA,QAAAuB,CAAA,OAAAhC,CAAA,CAAAC,CAAA,QACA+B,CAAA,OAAAxB,CAAA,CAAAC,CAAA,QAAAuB,CAAA,OACAhC,CAAA,CAAAC,CAAA,QAAA+B,CAAA,OAAAxB,CAAA,CAAAC,CAAA,QACAuB,CAAA,OAAAhC,CAAA,CAAAC,CAAA,QAAA+B,CAAA,OACAxB,CAAA,CAAAC,CAAA,SAAAuB,CAAA,OACAhC,CAAA,CAAAC,CAAA,SAAA+B,CAAA,QACAvB,CAAA,IACAR,CAAA;MAAA;MAMA,SAAA0H,EAAA3H,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA;QAEA,YAAAtB,CAAA,KACAF,CAAA,CAAAC,CAAA,IAAAT,CAAA,CAAAC,CAAA,QAAA+B,CAAA,MACAxB,CAAA,CAAAC,CAAA,QAAAuB,CAAA,MAAAhC,CAAA,CAAAC,CAAA,QACA+B,CAAA,MAAAxB,CAAA,CAAAC,CAAA,QAAAuB,CAAA,MACAhC,CAAA,CAAAC,CAAA,QAAA+B,CAAA,OACAvB,CAAA,IACAR,CAAA;MAAA;MA6EA,SAAA2H,EAAA5H,CAAA;QACA,OAAAA,CAAA,GAAAA,CAAA;MAAA;MArBA,KAAAwa,gBAAA,aAAAxa,CAAA,EAAAC,CAAA;QACA,OAlDA,UAAAD,CAAA,EAAAC,CAAA;UAEA,SAAAO,CAAA,MAAuBA,CAAA,GAAAia,SAAA,EAAeja,CAAA,IACtCR,CAAA,CAAA0a,SAAA,CAAAla,CAAA,IAAAR,CAAA,CAAA2a,QAAA,CAAAna,CAAA,IAAAR,CAAA,CAAA4a,OAAA,CAAApa,CAAA,IAAAR,CAAA,CAAA6a,SAAA,CAAAra,CAAA,IAAAR,CAAA,CAAA8a,QAAA,CAAAta,CAAA,IAAAR,CAAA,CAAA+a,OAAA,CAAAva,CAAA;UAEA,YAAAP,CAAA;YACA;cACAD,CAAA,CAAAgb,QAAA;cACA;YACA;cACAhb,CAAA,CAAAgb,QAAA;cACA;YACA;cACAhb,CAAA,CAAAgb,QAAA;cACA;YACA;cACAhb,CAAA,CAAAgb,QAAA;cACA;YACA;cACAhb,CAAA,CAAAgb,QAAA;cACA;YACA;cACAhb,CAAA,CAAAgb,QAAA;cACA;YACA;cACAhb,CAAA,CAAAgb,QAAA;cACA;YACA;cACAhb,CAAA,CAAAgb,QAAA;cACA;YACA;cACAhb,CAAA,CAAAgb,QAAA;cACA;YACA;cACA,OAAAC,wBAAA;UAAA;UAYA,OATAjb,CAAA,CAAAkb,YAAA,QAAAjb,CAAA,GAAAQ,CAAA,GACAC,CAAA,QAAAA,CAAA,EAEAV,CAAA,CAAAmb,IAAA,MACAnb,CAAA,CAAAob,IAAA,MACApb,CAAA,CAAAqb,OAAA,MAEArZ,CAAA,CAAAsZ,GAAA,CAAAtb,CAAA,CAAAmJ,CAAA,MAEAoS,qBAAA;QAAA,CAIA,CAAAvb,CAAA,EAAAC,CAAA,KAAAsb,qBAAA,GACAN,wBAAA,IAGAjb,CAAA,CAAAwb,MAAA,GAAAf,SAAA,EACAza,CAAA,CAAAyb,MAAA,GAAAhB,SAAA,EACAza,CAAA,CAAA0b,KAAA,GAAAjB,SAAA,EACAza,CAAA,CAAA2b,KAAA,GAAAlB,SAAA,EACAza,CAAA,CAAA4b,IAAA,GAAAnB,SAAA,EACAza,CAAA,CAAA6b,IAAA,GAAApB,SAAA,EAEAzY,CAAA,CAAAI,IAAA,CAAApC,CAAA,CAAA6J,CAAA,MAEA0R,qBAAA;MAAA,GAUA,KAAAO,cAAA,aAAA9b,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA,EACArB,CAAA;QACA,IAAAM,CAAA,EACAuB,CAAA,EACA5B,CAAA,EACAuC,CAAA,EACApC,CAAA,EACAsF,CAAA,EACAC,CAAA;QAEA,SAAAtE,CAAA,EACA,OAAA+Z,gBAAA;QAKA,QAHAzV,CAAA,MACAvF,CAAA,GAAAiB,CAAA,EAEArB,CAAA;UACA;YACAF,CAAA,GAAAR,CAAA,EACAS,CAAA,GAAAF,CAAA;YACA;UACA;YACA;UACA;YACA,OAAAwb,mBAAA;QAAA;QAeA,KAZAha,CAAA,GAAAyY,SAAA,IACAtS,CAAA,CAAA5F,SAAA,CAAAtC,CAAA,EAAAO,CAAA,EAAAR,CAAA,CAAA0a,SAAA,EACAD,SAAA,EAAAzY,CAAA,GACAmG,CAAA,CAAA5F,SAAA,CAAA9B,CAAA,EAAAC,CAAA,EAAAV,CAAA,CAAA6a,SAAA,EACAJ,SAAA,EAAAzY,CAAA,MAEAmG,CAAA,CAAA5F,SAAA,CAAAtC,CAAA,EAAAO,CAAA,EAAAR,CAAA,CAAA0a,SAAA,EACAD,SAAA,EAAAA,SAAA,GACAtS,CAAA,CAAA5F,SAAA,CAAA9B,CAAA,EAAAC,CAAA,EAAAV,CAAA,CAAA6a,SAAA,EACAJ,SAAA,EAAAA,SAAA,IAGA,IAAA1Z,CAAA;UACAsF,CAAA,GAAAtF,CAAA,GAAAf,CAAA,CAAAkb,YAAA,GAAAlb,CAAA,CAAAqb,OAAA,GAAArb,CAAA,CAAAkb,YAAA,GACAlb,CAAA,CAAAqb,OAAA,GACAta,CAAA,EACAuF,CAAA,GAAAmU,SAAA,IACAxZ,CAAA,GAAAjB,CAAA,CAAAwb,MAAA,GAAAlV,CAAA,EACA9D,CAAA,GAAAxC,CAAA,CAAA0a,SAAA,EACA9Z,CAAA,GAAAZ,CAAA,CAAAyb,MAAA,GAAAnV,CAAA,EACAnD,CAAA,GAAAnD,CAAA,CAAA6a,SAAA,EACAxU,CAAA,GAAAoU,SAAA,GAAAnU,CAAA,KACAD,CAAA,GAAAoU,SAAA,GAAAnU,CAAA,MAEArF,CAAA,GAAAT,CAAA,GAAA8F,CAAA,EACA9D,CAAA,GAAAvC,CAAA,EACAW,CAAA,GAAAF,CAAA,GAAA4F,CAAA,EACAnD,CAAA,GAAA1C,CAAA,GAGAiH,CAAA,CAAAlF,CAAA,EAAAvB,CAAA,EAAAjB,CAAA,CAAA2a,QAAA,EAAA3a,CAAA,CAAA0b,KAAA,GACA1b,CAAA,CAAAqb,OAAA,EAAAhV,CAAA,EAAAvF,CAAA,CAAAd,CAAA,CAAAgb,QAAA,IACAtT,CAAA,CAAAvE,CAAA,EAAAvC,CAAA,EAAAZ,CAAA,CAAA8a,QAAA,EAAA9a,CAAA,CAAA2b,KAAA,GACA3b,CAAA,CAAAqb,OAAA,EAAAhV,CAAA,EAAAvF,CAAA,CAAAd,CAAA,CAAAgb,QAAA,IAEArT,CAAA,CAAA3H,CAAA,CAAA2a,QAAA,EAAA3a,CAAA,CAAA0b,KAAA,GAAA1b,CAAA,CAAAqb,OAAA,EACArb,CAAA,CAAA4a,OAAA,EAAA5a,CAAA,CAAA4b,IAAA,GAAA5b,CAAA,CAAAqb,OAAA,EAAAhV,CAAA,EACAI,CAAA,CAAAzG,CAAA,CAAAgb,QAAA,IACArT,CAAA,CAAA3H,CAAA,CAAA8a,QAAA,EAAA9a,CAAA,CAAA2b,KAAA,GAAA3b,CAAA,CAAAqb,OAAA,EACArb,CAAA,CAAA+a,OAAA,EAAA/a,CAAA,CAAA6b,IAAA,GAAA7b,CAAA,CAAAqb,OAAA,EAAAhV,CAAA,EACAI,CAAA,CAAAzG,CAAA,CAAAgb,QAAA,IAEA/Z,CAAA,GAAAjB,CAAA,CAAA4b,IAAA,GAAA5b,CAAA,CAAAqb,OAAA,EAEA7Y,CAAA,GAAAxC,CAAA,CAAA4a,OAAA,EACAha,CAAA,GAAAZ,CAAA,CAAA6b,IAAA,GAAA7b,CAAA,CAAAqb,OAAA,EACAlY,CAAA,GAAAnD,CAAA,CAAA+a,OAAA;UAGA,KADA,IAAAhZ,CAAA,GAAAsE,CAAA,MACA,KAAAtE,CAAA,KACA/B,CAAA,CAAAmb,IAAA,IAAAvT,CAAA,CAAApF,CAAA,CAAAvB,CAAA,MACAjB,CAAA,CAAAob,IAAA,IAAAxT,CAAA,CAAAzE,CAAA,CAAAvC,CAAA;UAGA,KADAmB,CAAA,GAAAsE,CAAA,MACA,KAAAtE,CAAA,KACA/B,CAAA,CAAAmb,IAAA,IAAAvT,CAAA,CAAApF,CAAA,CAAAvB,CAAA,SACA2G,CAAA,CAAApF,CAAA,CAAAvB,CAAA,SACA2G,CAAA,CAAApF,CAAA,CAAAvB,CAAA,SACA2G,CAAA,CAAApF,CAAA,CAAAvB,CAAA,SACA2G,CAAA,CAAApF,CAAA,CAAAvB,CAAA,SACA2G,CAAA,CAAApF,CAAA,CAAAvB,CAAA,SACA2G,CAAA,CAAApF,CAAA,CAAAvB,CAAA,SACA2G,CAAA,CAAApF,CAAA,CAAAvB,CAAA,QACAA,CAAA,OACAjB,CAAA,CAAAob,IAAA,IAAAxT,CAAA,CAAAzE,CAAA,CAAAvC,CAAA,SACAgH,CAAA,CAAAzE,CAAA,CAAAvC,CAAA,SACAgH,CAAA,CAAAzE,CAAA,CAAAvC,CAAA,SACAgH,CAAA,CAAAzE,CAAA,CAAAvC,CAAA,SACAgH,CAAA,CAAAzE,CAAA,CAAAvC,CAAA,SACAgH,CAAA,CAAAzE,CAAA,CAAAvC,CAAA,SACAgH,CAAA,CAAAzE,CAAA,CAAAvC,CAAA,SACAgH,CAAA,CAAAzE,CAAA,CAAAvC,CAAA,QACAA,CAAA;UAMA,IAHAG,CAAA,IAAAsF,CAAA,EACAC,CAAA,IAAAD,CAAA,EACArG,CAAA,CAAAqb,OAAA,IAAAhV,CAAA,EACArG,CAAA,CAAAqb,OAAA,IAAArb,CAAA,CAAAkb,YAAA;YAEA,IAAAla,CAAA,GACA,KADAgI,CAAA,CAAAiT,YAAA,GAEArZ,IAAA,CAAAC,KAAA,EAAA7C,CAAA,CAAAmb,IAAA,GAAAnb,CAAA,CAAAob,IAAA,IACApb,CAAA,CAAAqb,OAAA;cACA7U,CAAA,GAAAxF,CAAA,gBAAAA,CAAA;YACAwF,CAAA,IAAAxG,CAAA,CAAAmJ,CAAA,CAAA7G,MAAA,KACAkE,CAAA,GAAAxG,CAAA,CAAAmJ,CAAA,CAAA7G,MAAA,OACAtC,CAAA,CAAAmJ,CAAA,CAAA3C,CAAA,KACAxG,CAAA,CAAAmb,IAAA,GAAAnb,CAAA,CAAAob,IAAA,MAEAjT,CAAA,CAAA5F,SAAA,CAAAvC,CAAA,CAAA4a,OAAA,EAAA5a,CAAA,CAAAqb,OAAA,EACArb,CAAA,CAAA4a,OAAA,KAAAH,SAAA,GACAtS,CAAA,CAAA5F,SAAA,CAAAvC,CAAA,CAAA+a,OAAA,EAAA/a,CAAA,CAAAqb,OAAA,EACArb,CAAA,CAAA+a,OAAA,KAAAN,SAAA,GACAtS,CAAA,CAAA5F,SAAA,CAAAvC,CAAA,CAAA2a,QAAA,EAAA3a,CAAA,CAAAqb,OAAA,EACArb,CAAA,CAAA2a,QAAA,KAAAF,SAAA,GACAtS,CAAA,CAAA5F,SAAA,CAAAvC,CAAA,CAAA8a,QAAA,EAAA9a,CAAA,CAAAqb,OAAA,EACArb,CAAA,CAAA8a,QAAA,KAAAL,SAAA,GACAza,CAAA,CAAAqb,OAAA;UAAA;UAEA,IAAArb,CAAA,CAAAqb,OAAA,GAAArb,CAAA,CAAAkb,YAAA,EAKA,OAAAc,mBAAA;QAAA;QAmBA,OAhBAha,CAAA,GAAAyY,SAAA,IACAtS,CAAA,CAAA5F,SAAA,CAAAvC,CAAA,CAAA0a,SAAA,EAAA1Y,CAAA,EAAAhC,CAAA,CAAA0a,SAAA,EACA,GAAAD,SAAA,GAAAzY,CAAA,GACAmG,CAAA,CAAA5F,SAAA,CAAAvC,CAAA,CAAA6a,SAAA,EAAA7Y,CAAA,EAAAhC,CAAA,CAAA6a,SAAA,EACA,GAAAJ,SAAA,GAAAzY,CAAA,GACAmG,CAAA,CAAA5F,SAAA,CAAAtC,CAAA,EAAAO,CAAA,EAAAR,CAAA,CAAA0a,SAAA,EACAD,SAAA,GAAAzY,CAAA,EAAAA,CAAA,GACAmG,CAAA,CAAA5F,SAAA,CAAA9B,CAAA,EAAAC,CAAA,EAAAV,CAAA,CAAA6a,SAAA,EACAJ,SAAA,GAAAzY,CAAA,EAAAA,CAAA,MAEAmG,CAAA,CAAA5F,SAAA,CAAAtC,CAAA,EAAAO,CAAA,GAAAwB,CAAA,GACAyY,SAAA,EAAAza,CAAA,CAAA0a,SAAA,KAAAD,SAAA,GACAtS,CAAA,CAAA5F,SAAA,CAAA9B,CAAA,EAAAC,CAAA,GAAAsB,CAAA,GACAyY,SAAA,EAAAza,CAAA,CAAA6a,SAAA,KAAAJ,SAAA,IAGAsB,gBAAA;MAAA,GAsBA,KAAAG,YAAA,aAAAlc,CAAA;QAGA,KAFA,IAAAC,CAAA,GApBA,UAAAD,CAAA,EAAAC,CAAA;YACA,IAAAO,CAAA;cAEAC,CAAA;YACA,KAAAD,CAAA,MAAmBA,CAAA,GAAAP,CAAA,EAASO,CAAA,IAC5BC,CAAA,IAAAT,CAAA,CAAAQ,CAAA;YACA,SAAAC,CAAA,EACA,OAAA0b,uBAAA;YAEA,IAAAzb,CAAA,OAAAkC,IAAA,CAAAwZ,IAAA,CAAA3b,CAAA,QAlYA;YAmYA,KAAAD,CAAA,GAAAP,CAAA,EAAqB,IAAAO,CAAA,SACrBE,CAAA,IAAAV,CAAA,CAAAQ,CAAA;YAKA,OA/YA,QA+YAA,CAAA,GAAAwI,CAAA,CAAAiT,YAAA;UAAA,CAIA,CAAAjc,CAAA,CAAAmJ,CAAA,EAAAnJ,CAAA,CAAAmJ,CAAA,CAAA7G,MAAA,GAEA9B,CAAA,MAAuBA,CAAA,GAAAR,CAAA,CAAAmJ,CAAA,CAAA7G,MAAA,EAAqB9B,CAAA,IAC5CR,CAAA,CAAA6J,CAAA,CAAArJ,CAAA,KAAAR,CAAA,CAAAmJ,CAAA,CAAA3I,CAAA,GACAR,CAAA,CAAAmJ,CAAA,CAAA3I,CAAA;QAGA,KAAAA,CAAA,MAAuBA,CAAA,GAAAia,SAAA,EAAeja,CAAA,IACtCR,CAAA,CAAA0a,SAAA,CAAAla,CAAA,IAAAR,CAAA,CAAA2a,QAAA,CAAAna,CAAA,IAAAR,CAAA,CAAA4a,OAAA,CAAApa,CAAA,IAAAR,CAAA,CAAA6a,SAAA,CAAAra,CAAA,IAAAR,CAAA,CAAA8a,QAAA,CAAAta,CAAA,IAAAR,CAAA,CAAA+a,OAAA,CAAAva,CAAA;QAIA,OAFAR,CAAA,CAAAqb,OAAA,MACArb,CAAA,CAAAmb,IAAA,GAAAnb,CAAA,CAAAob,IAAA,MACAnb,CAAA;MAAA;IAAA;IAtbA+I,CAAA,CAAAiT,YAAA,QAIAjT,CAAA,CAAAqT,MAAA,QACArT,CAAA,CAAAmT,uBAAA,WACAnT,CAAA,CAAAgT,mBAAA,MACAhT,CAAA,CAAA+S,gBAAA,MACA/S,CAAA,CAAAiS,wBAAA,MACAjS,CAAA,CAAAuS,qBAAA,MAGAvS,CAAA,CAAAyR,SAAA,GADAzR,CAAA,CAAAsT,UAAA,OAMAtT,CAAA,CAAAuT,sBAAA,IAHAvT,CAAA,CAAAwT,aAAA,YACAxT,CAAA,CAAAsR,yBAAA,SACAtR,CAAA,CAAAuR,2BAAA,SACA,GA0aAva,CAAA,CAAAE,OAAA,GAAA8I,CAAA;EAAA,aAAAhJ,CAAA,EAAAC,CAAA;ICniBAD,CAAA,CAAAE,OAAA,GAJA,UAAAF,CAAA;MACA,KAAAyc,IAAA,GAAAzc,CAAA;IAAA;EAAA,aAAAA,CAAA,EAAAC,CAAA,EAAAO,CAAA;ICDA,IAAAC,CAAA,GAAaD,CAAA,CAAQ;MACrB0I,CAAA,GAAAzI,CAAA,CAAAkD,MAAA;MAKAwF,CAAA,IAJA1I,CAAA,CAAAmD,OAAA,EACAnD,CAAA,CAAAoD,KAAA,EACApD,CAAA,CAAAqD,UAAA,EACArD,CAAA,CAAAsD,IAAA,EACAtD,CAAA,CAAAuD,MAAA;MAEA6F,CAAA,IADApJ,CAAA,CAAAwD,WAAA,EACAxD,CAAA,CAAA4D,QAAA;MAGAyF,CAAA,IAFArJ,CAAA,CAAA8D,UAAA,EACA9D,CAAA,CAAAgE,SAAA,EACAhE,CAAA,CAAAiE,WAAA;MACA6F,CAAA,GAAA9J,CAAA,CAAAkE,OAAA;MAEAa,CAAA,IADA/E,CAAA,CAAAmE,SAAA,EACAnE,CAAA,CAAAsE,MAAA;MAEAU,CAAA,GAAejF,CAAA,CAAQ;MACvBmF,CAAA,GAAanF,CAAA,CAAQ;MACrBqF,CAAA,GAAcrF,CAAA,CAAQ;MACtBsF,CAAA,GAAwBtF,CAAA,CAAQ;IAYhC,SAAAE,EAAA;MACA,IAAA8B,CAAA;QAOA1B,CAAA;QAMAC,CAAA;QACAsF,CAAA;QACArE,CAAA;QACAsE,CAAA;MAKA,KAAAJ,UAAA,aAAAlG,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA;QACAM,CAAA,GAAAf,CAAA,EACAqG,CAAA,GAAApG,CAAA,EACA+B,CAAA,GAAAxB,CAAA,EACA8F,CAAA,GAAA7F,CAAA;MAAA;MAOA,IAAAsB,CAAA;QAIAnB,CAAA;QAIAI,CAAA;QAIAwF,CAAA;MAgCA,SAAAC,EAAAzG,CAAA,EAAAC,CAAA,EAAAO,CAAA;QAGA,KAFAgF,CAAA,CAAAhF,CAAA,GAAAM,CAAA,OAEA,IAAAN,CAAA;UACA,IAAAC,CAAA;UACA,KAAA+F,CAAA,KACAA,CAAA,MAEAhB,CAAA,GADAxE,CAAA,GACA0b,IAAA,CAAAC,iBAAA,GACAnX,CAAA,CAAAxF,CAAA,CAAAqR,MAAA,CAAArR,CAAA,CAAAwR,KAAA,EAAA5C,YAAA,IAAAhO,CAAA,GACAZ,CAAA,CAAAqR,MAAA,CAAArR,CAAA,CAAAwR,KAAA,EAAA5C,YAAA,IAAAhO,CAAA,KApBAF,CAAA,GAqBAV,CAAA,EApBAkJ,CAAA,CAAA3G,SAAA,CAAA7B,CAAA,CAAA2Q,MAAA,CAAA3Q,CAAA,CAAA8Q,KAAA,EAAA1C,GAAA,KAAA/M,CAAA,EAAAf,CAAA,EAAAN,CAAA,CAAAwQ,YAAA,GACAlQ,CAAA,IAAAN,CAAA,CAAAwQ,YAAA,EACAtQ,CAAA,QAAAF,CAAA,CAAAwQ,YAAA,EACAxQ,CAAA,CAAA8Q,KAAA,GAAA9Q,CAAA,CAAA8Q,KAAA,OAAA1L,CAAA,CAAAwL,cAAA,OAmBAvP,CAAA,CAAAf,CAAA,QAGAP,CAAA,GAAAmC,IAAA,CAAAyX,GAAA,CAAA7Z,CAAA,EAAAgG,CAAA,GAGAA,CAAA,IAAA/F,CAAA,EAEA+E,CAAA,EAJAhF,CAAA,IAAAC,CAAA,IAIAK,CAAA,GAEA0E,CAAA,CAAAgB,CAAA,GAAA1F,CAAA,GAEAiB,CAAA,CAAAf,CAAA,KAAAf,CAAA,IAAAO,CAAA,IAAAgG,CAAA,EACA5F,CAAA,IAAAH,CAAA;QAAA;QApCA,IAAAC,CAAA;MAAA;MA2CA,SAAAC,EAAAX,CAAA,EAAAC,CAAA,EAAAO,CAAA;QAGA,KAFAgF,CAAA,CAAAhF,CAAA,GAAAM,CAAA,OAEA,IAAAN,CAAA;UACA,IAAAC,CAAA;UACA,KAAA+F,CAAA,KACAA,CAAA,MAEAhB,CAAA,GADAxE,CAAA,GACA0b,IAAA,CAAAC,iBAAA,GACA5a,CAAA,CAAAf,CAAA,QAGAP,CAAA,GAAAmC,IAAA,CAAAyX,GAAA,CAAA7Z,CAAA,EAAAgG,CAAA,GAGAA,CAAA,IAAA/F,CAAA,EAEA+E,CAAA,EAJAhF,CAAA,IAAAC,CAAA,IAIAK,CAAA,GAEA0E,CAAA,CAAAgB,CAAA,GAAA1F,CAAA,GAEAiB,CAAA,CAAAf,CAAA,KAAAf,CAAA,IAAAO,CAAA,IAAAgG,CAAA,EACA5F,CAAA,IAAAH,CAAA;QAAA;MAAA;MAUA,SAAAQ,EAAAjB,CAAA,EAAAC,CAAA;QACA,IACAO,CAAA;UADAC,CAAA,GAAAT,CAAA,CAAAuG,cAAA;QAqBA,IAnBAf,CAAA,MAAAvF,CAAA,GAEA,KAAAA,CAAA,KACAwG,CAAA,CAAAhG,CAAA,UACAR,CAAA,QAEA,KAAAA,CAAA,KACAwG,CAAA,CAAAhG,CAAA,UACAR,CAAA,QAEA,KAAAA,CAAA,KACAwG,CAAA,CAAAhG,CAAA,UACAR,CAAA,QAEA,KAAAA,CAAA,KACAwG,CAAA,CAAAhG,CAAA,UACAR,CAAA,QAGA,MAAAA,CAAA;UACA,IAAAS,CAAA,GAAAsB,CAAA,CAAA4a,mBAAA;UACA,UAAA3c,CAAA,EACA,KAAAO,CAAA,MAA2BA,CAAA,GAAAE,CAAA,CAAA4B,MAAA,SAAArC,CAAA,IAA0CO,CAAA,EACrEP,CAAA,OACAwG,CAAA,CAAAhG,CAAA,EAAAC,CAAA,CAAAmc,MAAA,CAAArc,CAAA;QAAA;QAIA,OAAc,KAAAP,CAAA,EAAoBA,CAAA,OAClCwG,CAAA,CAAAhG,CAAA,EAAAA,CAAA,CAAAgR,cAAA,MACAhR,CAAA,CAAAgR,cAAA,IAAAzR,CAAA,CAAA8c,iBAAA;QAGAtX,CAAA,MAAAvF,CAAA;MAAA;MAOA,SAAAkD,EAAAnD,CAAA,EAAAC,CAAA,EAAAO,CAAA;QAGA,KAFA,IAAAC,CAAA,GAAAT,CAAA,CAAAqR,MAAA,CAAArR,CAAA,CAAAuR,KAAA,EAAA1C,GAAA,EAEA,IAAArO,CAAA;UACA,IAAAE,CAAA,GAAAkC,IAAA,CAAAyX,GAAA,CAAA7Z,CAAA,WAAAC,CAAA;UAEA+E,CAAA,EADAhF,CAAA,IAAAE,CAAA,IACAI,CAAA,GAGAd,CAAA,CAAAqR,MAAA,CAAArR,CAAA,CAAAuR,KAAA,EAAAzC,GAAA,CAAArO,CAAA,UAAAR,CAAA,IAAAO,CAAA,aAAAC,CAAA,IAAAC,CAAA,EACAD,CAAA,IAAAC,CAAA;QAAA;QAEAV,CAAA,CAAAqR,MAAA,CAAArR,CAAA,CAAAuR,KAAA,EAAA1C,GAAA,GAAApO,CAAA;MAAA;MAGA,SAAAC,EAAAV,CAAA,EAAAC,CAAA;QACAD,CAAA;QACA,SAAAQ,CAAA,MAAuBA,CAAA,MAAOA,CAAA,IAI9B,gBAFAP,CAAA,WADAD,CAAA,cAIAC,CAAA,IA7MA;QA+MA,OAAAA,CAAA;MAAA;MA0LA,SAAAyH,EAAA1H,CAAA,EAAAC,CAAA;QAEA,IACAO,CAAA;UADAC,CAAA,GAAAkF,CAAA,CAAAyT,EAAA,CAAAnZ,CAAA,CAAA8V,kBAAA;UACArV,CAAA;UAEAsB,CAAA,GAAA/B,CAAA,CAAAqV,UAAA;UACA3U,CAAA,GAAAV,CAAA,CAAAqV,UAAA;QAGA,KAFA9P,CAAA,CAAAvF,CAAA,CAAA8V,kBAAA,OAEAvV,CAAA,IAAAP,CAAA,CAAAsV,MAAA,GAAAtV,CAAA,CAAAqV,UAAA,OAAiD,IAAA9U,CAAA,IAAOA,CAAA;UACxD,IACAS,CAAA;YADAuB,CAAA;YACA5B,CAAA;UAGA,MADAK,CAAA,GAAAhB,CAAA,CAAAiV,MAAA,CAAAlT,CAAA,WAEApB,CAAA,OACAX,CAAA,CAAAyJ,EAAA,CAAA/I,CAAA,aACA6B,CAAA,IACAgD,CAAA,CAAAvE,CAAA,SAIA,MADAA,CAAA,GAAAhB,CAAA,CAAAiV,MAAA,CAAAlT,CAAA,WAEApB,CAAA,OACA4B,CAAA,OACAvC,CAAA,CAAAyJ,EAAA,CAAA/I,CAAA,aACA6B,CAAA,IACAgD,CAAA,CAAAvE,CAAA,SAIA,MADAA,CAAA,GAAAhB,CAAA,CAAAiV,MAAA,CAAAlT,CAAA,WAEApB,CAAA,OACA4B,CAAA,OACAvC,CAAA,CAAAyJ,EAAA,CAAA/I,CAAA,aACA6B,CAAA,IACAgD,CAAA,CAAAvE,CAAA,SAIA,MADAA,CAAA,GAAAhB,CAAA,CAAAiV,MAAA,CAAAlT,CAAA,WAEApB,CAAA,IACA4B,CAAA,OACAvC,CAAA,CAAAyJ,EAAA,CAAA/I,CAAA,aACA6B,CAAA,IACAgD,CAAA,CAAAvE,CAAA,SAGAe,CAAA,OACArB,CAAA,OACA8F,CAAA,CAAAzG,CAAA,EAAAwC,CAAA,GAAA/B,CAAA,CAAAsW,KAAA,CAAAnW,CAAA,GAAAH,CAAA,CAAAuW,IAAA,CAAApW,CAAA,IACAF,CAAA,IAAAD,CAAA,CAAAuW,IAAA,CAAApW,CAAA;QAAA;QAEA,OAAAF,CAAA;MAAA;MAMA,SAAAiH,EAAA3H,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA;QACA,IAAAsB,CAAA,GAAA2D,CAAA,CAAAyT,EAAA,CAAAnZ,CAAA;UACAU,CAAA;QAGA,IADA6E,CAAA,CAAAvF,CAAA,QACA,KAAAA,CAAA,EACA,OAAAU,CAAA;QAEA,SAAAM,CAAA,GAAAT,CAAA,EAA2BS,CAAA,GAAAR,CAAA,EAASQ,CAAA;UACpC,IAAAuB,CAAA;YACA5B,CAAA;YACAuC,CAAA,GAAAnB,CAAA,CAAA6U,IAAA;YACA9V,CAAA,GAAAiB,CAAA,CAAA6U,IAAA;YACAxQ,CAAA;YACAC,CAAA,GAAA5F,CAAA,CAAAwU,MAAA,CAAAjU,CAAA;YACAc,CAAA,GAAArB,CAAA,CAAAwU,MAAA,CAAAjU,CAAA;UAQA,IANA,KAAAqF,CAAA,KACA5F,CAAA,CAAAgJ,EAAA,CAAAzI,CAAA,SACAoF,CAAA,IACA7D,CAAA,KAGA,KAAAvC,CAAA;YAEA,SAAAqG,CAAA;cACA,IAAAtF,CAAA,GAAAsF,CAAA;cACAd,CAAA,CAAAxE,CAAA,IAAAgB,CAAA,CAAA8U,MAAA,GACAzQ,CAAA,IAAArF,CAAA,OACAJ,CAAA,GAAAuC,CAAA,EACAmD,CAAA;YAAA;YAGA,SAAAvE,CAAA;cACA,IAAAyE,CAAA,GAAAzE,CAAA;cACAyD,CAAA,CAAAgB,CAAA,IAAAxE,CAAA,CAAA8U,MAAA,GACAzQ,CAAA,KAAAlD,CAAA,EACAkD,CAAA,IAAAG,CAAA,EACA5F,CAAA,IAAAuC,CAAA,EACApB,CAAA;YAAA;YAEAhB,CAAA;UAAA;UAGA,KAAAgB,CAAA,KACAsE,CAAA,QACA3F,CAAA,CAAAgJ,EAAA,CAAAzI,CAAA,aACAoF,CAAA,IACA7D,CAAA,KAGAgD,CAAA,EAAAc,CAAA,GAAAvE,CAAA,SAEAuE,CAAA,GAAAA,CAAA,GAAAvF,CAAA,GAAAgB,CAAA,EACAnB,CAAA,IAAA4B,CAAA,EACAA,CAAA,IAAAR,CAAA,CAAAgV,IAAA,CAAA1Q,CAAA,GAEAd,CAAA,CAAAhD,CAAA,IAAA1B,CAAA,GACA0E,CAAA,CAAA5E,CAAA,IAAAE,CAAA,GAEA2F,CAAA,CAAAzG,CAAA,EAAAgC,CAAA,CAAA+U,KAAA,CAAAzQ,CAAA,GAAA9D,CAAA,GACAiE,CAAA,CAAAzG,CAAA,EAAAqG,CAAA,EAAAzF,CAAA,GACAD,CAAA,IAAA6B,CAAA,GAAA5B,CAAA;QAAA;QAEA,OAAAD,CAAA;MAAA;MAOA,SAAAiH,EAAA5H,CAAA,EAAAC,CAAA;QACA,IAAAO,CAAA,OAAAR,CAAA,CAAA4R,aAAA,CAAA5P,CAAA;QACAxB,CAAA,GAAAP,CAAA,CAAAqV,UAAA,KACA9U,CAAA,GAAAP,CAAA,CAAAqV,UAAA;QAGA,IAAA7U,CAAA,GAAAkH,CAAA,CAAA3H,CAAA,EAAAC,CAAA,CAAAyV,YAAA,QAAAlV,CAAA,EAAAP,CAAA;QAGA,OAFAQ,CAAA,IAAAkH,CAAA,CAAA3H,CAAA,EAAAC,CAAA,CAAAyV,YAAA,KAAAlV,CAAA,EACAP,CAAA,CAAAqV,UAAA,EAAArV,CAAA;MAAA;MAIA,SAAAkI,EAAAnI,CAAA,EAAAC,CAAA;QACA,IAAAO,CAAA,EAAAC,CAAA,EACAC,CAAA,EAAAsB,CAAA;QAEAxB,CAAA,GAAAP,CAAA,CAAAqV,UAAA,EACA9P,CAAA,MAAAhF,CAAA,IAAAA,CAAA;QAEA,IAAAG,CAAA,GAAAV,CAAA,CAAA0V,aAAA;QAoBA,OAnBAnQ,CAAA,MAAA7E,CAAA,GACA6E,CAAA,CAAA7E,CAAA,GAAAX,CAAA,CAAA4R,aAAA,CAAAhR,CAAA,CAAA0B,MAAA,GACA5B,CAAA,GAAAV,CAAA,CAAA4R,aAAA,CAAAhR,CAAA,CAAAD,CAAA,GACAA,CAAA,IAAAV,CAAA,CAAA2V,aAAA,MACApQ,CAAA,MAAA7E,CAAA,GACA6E,CAAA,CAAA7E,CAAA,GAAAX,CAAA,CAAA4R,aAAA,CAAAhR,CAAA,CAAA0B,MAAA,GAGA9B,CAAA,GAAAE,CAAA,KACAA,CAAA,GAAAF,CAAA,GAEAA,CAAA,IALAwB,CAAA,GAAAhC,CAAA,CAAA4R,aAAA,CAAAhR,CAAA,CAAAD,CAAA,OAMAqB,CAAA,GAAAxB,CAAA,GAEAC,CAAA,GAAAkH,CAAA,CAAA3H,CAAA,EAAAC,CAAA,CAAAyV,YAAA,QAAAhV,CAAA,EAAAT,CAAA,GACAQ,CAAA,IAAAkH,CAAA,CAAA3H,CAAA,EAAAC,CAAA,CAAAyV,YAAA,KAAAhV,CAAA,EACAsB,CAAA,EAAA/B,CAAA,GACAQ,CAAA,IAAAkH,CAAA,CAAA3H,CAAA,EAAAC,CAAA,CAAAyV,YAAA,KAAA1T,CAAA,EAAAxB,CAAA,EACAP,CAAA;MAAA;MAiGA,SAAA+I,EAAA;QACA,KAAA+T,KAAA;MAAA;MAgBA,SAAA9T,EAAAjJ,CAAA,EAAAC,CAAA;QACA,IACAO,CAAA;UAAAC,CAAA;UACAC,CAAA;UACAsB,CAAA;UAAArB,CAAA;UAHAM,CAAA,GAAAjB,CAAA,CAAAuG,cAAA;QA2CA,OAvCA5F,CAAA,GAAAM,CAAA,CAAAuQ,KAAA,GAIA,MAFAxP,CAAA,GAAAf,CAAA,CAAAsQ,KAAA,UAGAvP,CAAA,GAAA8D,CAAA,CAAAwL,cAAA,OAGA9Q,CAAA,GAAAS,CAAA,CAAAoQ,MAAA,CAAArP,CAAA,EAAA4M,YAAA,GAAAhO,CAAA,EAGA,MAFAX,CAAA,CAAA8c,KAAA,GAAAvc,CAAA,MAKAC,CAAA,OAAAuB,CAAA,GAAArB,CAAA,EACAqB,CAAA,GAAArB,CAAA,KACAF,CAAA,OAAAuB,CAAA,GAAArB,CAAA,GACAmF,CAAA,CAAAwL,cAAA,GACA9Q,CAAA,QAAAC,CAAA,GAAAQ,CAAA,CAAAiQ,YAAA,GASA1Q,CAAA,IADAE,CAAA,GAAA8B,CAAA,CAAAwa,YAAA,CAAAhd,CAAA,GAEAC,CAAA,CAAA8c,KAAA,IAAArc,CAAA,EAEAT,CAAA,CAAA8c,KAAA,YACA9c,CAAA,CAAA8c,KAAA,OAAA9c,CAAA,CAAA8c,KAAA,OAEA9c,CAAA,CAAA8c,KAAA,GAAA9c,CAAA,CAAA8c,KAAA,MACA9c,CAAA,CAAA8c,KAAA,IAAA/b,CAAA,MAEAR,CAAA,QACA0I,CAAA,CAAA+T,GAAA,CAAAC,OAAA,0CAEA1c,CAAA;MAAA;MA/pBA,KAAAwc,YAAA,aAAAhd,CAAA;QACA,IACAC,CAAA;UADAO,CAAA,GAAAR,CAAA,CAAAuG,cAAA;QAaA,OARAtG,CAAA,GADA,KAAAO,CAAA,CAAAkK,aAAA,GACA/E,CAAA,CAAA6T,aAAA,CAAAxZ,CAAA,CAAAmd,OAAA,EAAA3c,CAAA,CAAAkK,aAAA,IAEA1K,CAAA,CAAAod,KAAA,EACA5X,CAAA,MAAAvF,CAAA,IAAAA,CAAA,UAKA,KADA,YAAAD,CAAA,CAAAmd,OAAA,QAAAld,CAAA,GAAAD,CAAA,CAAAwH,cAAA,GAAAhH,CAAA,CAAA6G,OAAA;MAAA,GAqJA,KAAAgW,eAAA,aAAArd,CAAA,EAAAC,CAAA;QACA,IAAAO,CAAA;QAGAA,CAAA,GAAAE,CAAA,OAAAT,CAAA,KAAAO,CAAA,GACAA,CAAA,GAAAE,CAAA,OAAAT,CAAA,KAAAO,CAAA;QACA,SAAAC,CAAA,MAAuBA,CAAA,GAAAT,CAAA,CAAAkR,YAAA,EAAsBzQ,CAAA,IAC7CD,CAAA,GAAAE,CAAA,OAAAT,CAAA,CAAAQ,CAAA,GAAAD,CAAA;QAGAP,CAAA,MAAAqd,IAAA,CAAA9c,CAAA,QACAP,CAAA,MAAAqd,IAAA,OAAA9c,CAAA;MAAA,GAqfA,KAAA+c,eAAA,aAAAvd,CAAA;QACA,IACAC,CAAA;UACAO,CAAA;UAFAC,CAAA,GAAAT,CAAA,CAAAuG,cAAA;UAGA7F,CAAA,GAAAD,CAAA,CAAA8Q,KAAA;QAMA,KAJA,KAAA7Q,CAAA,KACAA,CAAA,GAAAoF,CAAA,CAAAwL,cAAA,OACArR,CAAA,GAAAQ,CAAA,CAAAoG,OAAA,KAEArG,CAAA,GAAAyI,CAAA,CAAAjJ,CAAA,MAAAgJ,CAAA;UAeA,IAbA/H,CAAA,CAAAjB,CAAA,EAAAQ,CAAA,GAGAgF,CAAA,CAAA/E,CAAA,CAAA4Q,MAAA,CAAA3Q,CAAA,EAAAkO,YAAA,QAAAoO,YAAA,CAAAhd,CAAA,KAAAY,CAAA,GAMAH,CAAA,CAAAiR,QAAA,MACAzR,CAAA,CAAAud,eAAA,MAGA/c,CAAA,CAAA2T,cAAA;YACA,IAAApS,CAAA,GAAAjB,CAAA,CAAAmb,YAAA,CAAAzb,CAAA,CAAAgU,MAAA;YACAjP,CAAA,CAAAiY,GAAA,CAAAzb,CAAA,EAAA0b,YAAA,CAAAvB,uBAAA,IACA1b,CAAA,CAAA8T,SAAA,OAAA3R,IAAA,CAAA+a,KAAA,MAAA3b,CAAA;UAAA;UAKAvB,CAAA,CAAA4T,cAAA,KACA5T,CAAA,CAAAiU,gBAAA,GACA,IADA9R,IAAA,CAAAwZ,IAAA,CACA,KADAxZ,IAAA,CACAC,KAAA,CAAApC,CAAA,CAAA6T,UAAA,iBAGA,IAAA7T,CAAA,CAAAiU,gBAAA,KAEAkJ,EAAA,CAAA5d,CAAA,CAAA6d,KAAA,QAAAD,EAAA,CAAA5d,CAAA,CAAA6d,KAAA,QACApd,CAAA,CAAAkU,WAAA,GAAA/R,IAAA,CACA+a,KAAA,SAAAld,CAAA,CAAA6T,UAAA,gBAcA7T,CAAA,CAAAkU,WAAA;QAAA;MAAA,GAIA,KAAAmJ,cAAA,aAAA9d,CAAA,EAAAC,CAAA,EAAAO,CAAA;QAIA,KAHA,IACAC,CAAA,EADAC,CAAA,GAAAV,CAAA,CAAAuG,cAAA,EAGA,IAAA/F,CAAA,KAGA,KAFAG,CAAA,IAAAV,CAAA,MAEAQ,CAAA,MAAuBA,CAAA,GAAAqF,CAAA,CAAAwL,cAAA,IAAsC7Q,CAAA,EAC7DC,CAAA,CAAA2Q,MAAA,CAAA5Q,CAAA,EAAAmO,YAAA;MAAA,GAWA,KAAAzE,gBAAA,aAAAnK,CAAA;QACA,IACAC,CAAA;UADAO,CAAA,GAAAR,CAAA,CAAAuG,cAAA;QAEAtG,CAAA,GAAAO,CAAA,CAAAqG,OAAA;QAEA,IAAApG,CAAA,QAAAuc,YAAA,CAAAhd,CAAA;QACAiB,CAAA,CAAAjB,CAAA,EAAAC,CAAA,CAAA8d,aAAA,GAvkBA,UAAA/d,CAAA,EAAAC,CAAA;UACA,IACAO,CAAA;YACAC,CAAA;YAAAC,CAAA;YAFAsB,CAAA,GAAAhC,CAAA,CAAAuG,cAAA;UA4BA,IAxBA/F,CAAA,GAAAwB,CAAA,CAAA6E,OAAA,EACA7E,CAAA,CAAAqP,MAAA,CAAArP,CAAA,CAAAuP,KAAA,EAAA1C,GAAA,MACA1F,CAAA,CAAA/G,IAAA,CAAAJ,CAAA,CAAAqP,MAAA,CAAArP,CAAA,CAAAuP,KAAA,EAAAzC,GAAA,KAAA9M,CAAA,CAAAkP,YAAA,MACAlR,CAAA,CAAAwH,cAAA,UACArE,CAAA,CAAAnB,CAAA,cAEAmB,CAAA,CAAAnB,CAAA,aACAmB,CAAA,CAAAnB,CAAA,EAAAhC,CAAA,CAAAmd,OAAA,MACAha,CAAA,CAAAnB,CAAA,SACAmB,CAAA,CAAAnB,CAAA,EAAAhC,CAAA,CAAAge,gBAAA,cACA7a,CAAA,CAAAnB,CAAA,EAAAA,CAAA,CAAA0I,aAAA,MACAvH,CAAA,CAAAnB,CAAA,EAAAA,CAAA,CAAAyN,gBAAA,MACAtM,CAAA,CAAAnB,CAAA,EAAAA,CAAA,CAAAqF,OAAA,MACAlE,CAAA,CAAAnB,CAAA,EAAAhC,CAAA,CAAAie,SAAA,MACA9a,CAAA,CAAAnB,CAAA,EAAAhC,CAAA,CAAAgI,IAAA,CAAAvF,OAAA,QACAU,CAAA,CAAAnB,CAAA,EAAAA,CAAA,CAAA6G,QAAA,MACA1F,CAAA,CAAAnB,CAAA,EAAAhC,CAAA,CAAAke,SAAA,MACA/a,CAAA,CAAAnB,CAAA,EAAAhC,CAAA,CAAAme,QAAA,MACAhb,CAAA,CAAAnB,CAAA,EAAAhC,CAAA,CAAAoe,QAAA,MACApe,CAAA,CAAAge,gBAAA,IACA7a,CAAA,CAAAnB,CAAA,UAIA,KAAAhC,CAAA,CAAAmd,OAAA;YAUA,KARA3X,CAAA,MAAAhF,CAAA,CAAAgd,eAAA,GACAra,CAAA,CAAAnB,CAAA,EAAAxB,CAAA,CAAAgd,eAAA,MAEA,KAAAxb,CAAA,CAAA4E,YAAA,GACAzD,CAAA,CAAAnB,CAAA,EAAAxB,CAAA,CAAA6d,YAAA,OAEAlb,CAAA,CAAAnB,CAAA,EAAAxB,CAAA,CAAA6d,YAAA,MAEA3d,CAAA,MAAwBA,CAAA,GAAAsB,CAAA,CAAA4E,YAAA,EAAuBlG,CAAA;cAC/C,IAAAC,CAAA;cACA,KAAAA,CAAA,MAA8BA,CAAA,MAAUA,CAAA,IACxCwC,CAAA,CAAAnB,CAAA,EAAAxB,CAAA,CAAA8d,KAAA,CAAA5d,CAAA,EAAAC,CAAA;YAAA;YAIA,KAAAF,CAAA,MAAwBA,CAAA,MAAQA,CAAA,IAChC,KAAAC,CAAA,MAA4BA,CAAA,GAAAsB,CAAA,CAAA4E,YAAA,EAAuBlG,CAAA,IAEnDyC,CAAA,CAAAnB,CAAA,GADAf,CAAA,GAAAT,CAAA,CAAAsG,EAAA,CAAArG,CAAA,EAAAC,CAAA,GACA2U,cAAA,GAAApU,CAAA,CAAA+U,YAAA,OACA7S,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAqU,UAAA,UACAnS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAuU,WAAA,MACArS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAwU,iBAAA,MAEAxU,CAAA,CAAA8F,UAAA,IAAAlB,CAAA,CAAAwC,SAAA,IACAlF,CAAA,CAAAnB,CAAA,SAEAmB,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAA8F,UAAA,MACA5D,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAmH,gBAAA,MAEA,MAAAnH,CAAA,CAAAyU,YAAA,QACAzU,CAAA,CAAAyU,YAAA,WACAvS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAyU,YAAA,SACA,MAAAzU,CAAA,CAAAyU,YAAA,QACAzU,CAAA,CAAAyU,YAAA,WACAvS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAyU,YAAA,SAEAvS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAiP,aAAA,SACA/M,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAiP,aAAA,SACA/M,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAiP,aAAA,YAEA/M,CAAA,CAAAnB,CAAA,SAEA,MAAAf,CAAA,CAAAyU,YAAA,QACAzU,CAAA,CAAAyU,YAAA,WACAvS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAyU,YAAA,SACA,MAAAzU,CAAA,CAAAyU,YAAA,QACAzU,CAAA,CAAAyU,YAAA,WACAvS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAyU,YAAA,SACA,MAAAzU,CAAA,CAAAyU,YAAA,QACAzU,CAAA,CAAAyU,YAAA,WACAvS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAyU,YAAA,SAEAlQ,CAAA,MAAAvE,CAAA,CAAA0U,aAAA,IAAA1U,CAAA,CAAA0U,aAAA,QACAnQ,CAAA,MAAAvE,CAAA,CAAA2U,aAAA,IAAA3U,CAAA,CAAA2U,aAAA,OACAzS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAA0U,aAAA,MACAxS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAA2U,aAAA,OAEAzS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAA4U,OAAA,MACA1S,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAA6U,cAAA,MACA3S,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAA8U,kBAAA;UAAA,OAUA,KALAvQ,CAAA,MAAAhF,CAAA,CAAAgd,eAAA,GACAra,CAAA,CAAAnB,CAAA,EAAAxB,CAAA,CAAAgd,eAAA,MACAra,CAAA,CAAAnB,CAAA,EAAAxB,CAAA,CAAA6d,YAAA,EAAArc,CAAA,CAAA4E,YAAA,GAGAlG,CAAA,GADAD,CAAA,MACwBC,CAAA,GAAAsB,CAAA,CAAA4E,YAAA,EAAuBlG,CAAA;YAC/C,IAAAO,CAAA;YACAkC,CAAA,CAAAnB,CAAA,GADAf,CAAA,GAAAT,CAAA,CAAAsG,EAAA,CAAArG,CAAA,EAAAC,CAAA,GACA2U,cAAA,GAAApU,CAAA,CAAA+U,YAAA,OACA7S,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAqU,UAAA,UACAnS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAuU,WAAA,MACArS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAwU,iBAAA,MAEAxU,CAAA,CAAA8F,UAAA,IAAAlB,CAAA,CAAAwC,SAAA,IACAlF,CAAA,CAAAnB,CAAA,SAEAmB,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAA8F,UAAA,MACA5D,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAmH,gBAAA,MAEA,MAAAnH,CAAA,CAAAyU,YAAA,QACAzU,CAAA,CAAAyU,YAAA,WACAvS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAyU,YAAA,SACA,MAAAzU,CAAA,CAAAyU,YAAA,QACAzU,CAAA,CAAAyU,YAAA,WACAvS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAyU,YAAA,SAEAvS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAiP,aAAA,SACA/M,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAiP,aAAA,SACA/M,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAiP,aAAA,YAEA/M,CAAA,CAAAnB,CAAA,SAEA,MAAAf,CAAA,CAAAyU,YAAA,QACAzU,CAAA,CAAAyU,YAAA,WACAvS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAyU,YAAA,SACA,MAAAzU,CAAA,CAAAyU,YAAA,QACAzU,CAAA,CAAAyU,YAAA,WACAvS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAyU,YAAA,SACA,MAAAzU,CAAA,CAAAyU,YAAA,QACAzU,CAAA,CAAAyU,YAAA,WACAvS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAAyU,YAAA,SAEAlQ,CAAA,MAAAvE,CAAA,CAAA0U,aAAA,IAAA1U,CAAA,CAAA0U,aAAA,QACAnQ,CAAA,MAAAvE,CAAA,CAAA2U,aAAA,IAAA3U,CAAA,CAAA2U,aAAA,OACAzS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAA0U,aAAA,MACAxS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAA2U,aAAA,OAGAzS,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAA6U,cAAA,MACA3S,CAAA,CAAAnB,CAAA,EAAAf,CAAA,CAAA8U,kBAAA;UAAA;UAIA/V,CAAA,CAAAge,gBAAA,IAEAX,eAAA,CAAArb,CAAA,EAAAA,CAAA,CAAAqP,MAAA,CAAArP,CAAA,CAAAuP,KAAA,EAAAzC,GAAA;UAIA,IAAAtM,CAAA,GAAAR,CAAA,CAAAuP,KAAA;UACA/L,CAAA,CAAAxD,CAAA,CAAAqP,MAAA,CAAA7O,CAAA,EAAAqM,GAAA,QAAA7M,CAAA,CAAAkP,YAAA,GAEAlP,CAAA,CAAAuP,KAAA,GAAA/O,CAAA,OAAAsD,CAAA,CAAAwL,cAAA,MACAtP,CAAA,CAAAqP,MAAA,CAAArP,CAAA,CAAAuP,KAAA,EAAA3C,YAAA,GAAA5M,CAAA,CAAAqP,MAAA,CAAA7O,CAAA,EAAAoM,YAAA,GACA3O,CAAA,EAEA+B,CAAA,CAAAuP,KAAA,IAAAvP,CAAA,CAAAwP,KAAA,IAEAtI,CAAA,CAAA+T,GAAA,CACAC,OAAA;QAAA,CAsaA,CAAAld,CAAA,EAAAS,CAAA;QACA,IAAAC,CAAA,OAAAF,CAAA,CAAA0Q,YAAA;QA4CA,IA3CAxQ,CAAA,IAtPA,UAAAV,CAAA;UACA,IAAAC,CAAA;YAAAO,CAAA;YAAAC,CAAA;YAAAC,CAAA;YAAAsB,CAAA;YACArB,CAAA,GAAAX,CAAA,CAAAuG,cAAA;YACAtF,CAAA,GAAAN,CAAA,CAAAkG,OAAA;UAEA,SAAA7G,CAAA,CAAAmd,OAAA,EAEA,KAAAld,CAAA,MAAwBA,CAAA,MAAQA,CAAA,IAChC,KAAAO,CAAA,MAA4BA,CAAA,GAAAG,CAAA,CAAAiG,YAAA,EAAuBpG,CAAA;YACnD,IAAAgC,CAAA,GAAAvB,CAAA,CAAA6F,EAAA,CAAA7G,CAAA,EAAAO,CAAA;cACAI,CAAA,GAAA6E,CAAA,CAAA8Y,SAAA,CAAA/b,CAAA,CAAAiT,iBAAA;cACAtS,CAAA,GAAAsC,CAAA,CAAA+Y,SAAA,CAAAhc,CAAA,CAAAiT,iBAAA;YAEA,KAAAhV,CAAA,GADAC,CAAA,MACiCD,CAAA,GAAA+B,CAAA,CAAA8T,SAAA,EAAoB7V,CAAA,KACrD,KAAA+B,CAAA,CAAA2S,QAAA,CAAA1U,CAAA,MAGAgG,CAAA,CAAA9F,CAAA,EAAA6B,CAAA,CAAA2S,QAAA,CAAA1U,CAAA,GAAAG,CAAA,GACAF,CAAA,IAAAE,CAAA;YAEA,OAA0BH,CAAA,GAAA+B,CAAA,CAAA4T,MAAA,EAAiB3V,CAAA,KAC3C,KAAA+B,CAAA,CAAA2S,QAAA,CAAA1U,CAAA,MAGAgG,CAAA,CAAA9F,CAAA,EAAA6B,CAAA,CAAA2S,QAAA,CAAA1U,CAAA,GAAA0C,CAAA,GACAzC,CAAA,IAAAyC,CAAA;YAEAqC,CAAA,CAAA9E,CAAA,IAAA8B,CAAA,CAAAwT,YAAA,GAEAxT,CAAA,CAAAuE,UAAA,IAAAlB,CAAA,CAAAmB,UAAA,GACAtG,CAAA,IAAAkH,CAAA,CAAAjH,CAAA,EAAA6B,CAAA,IAEA9B,CAAA,IAAAyH,CAAA,CAAAxH,CAAA,EAAA6B,CAAA,GAEA9B,CAAA,IAAAgH,CAAA,CAAA/G,CAAA,EAAA6B,CAAA,GAEAgD,CAAA,CAAA9E,CAAA,IAAA8B,CAAA,CAAA6S,cAAA,GAAA7S,CAAA,CAAAwT,YAAA,GACAhU,CAAA,IAAAtB,CAAA;UAAA,OAQA,KAAAF,CAAA,GADAP,CAAA,MACwBO,CAAA,GAAAG,CAAA,CAAAiG,YAAA,EAAuBpG,CAAA;YAC/CgC,CAAA,GAAAvB,CAAA,CAAA6F,EAAA,CAAA7G,CAAA,EAAAO,CAAA;YAAA,IACAO,CAAA;cAAAsF,CAAA;cAAAC,CAAA;YAMA,IALAd,CAAA,SAAAhD,CAAA,CAAAiU,mBAAA,GAGApQ,CAAA,GADA5F,CAAA,GADAC,CAAA,MAIA8B,CAAA,CAAAuE,UAAA,IAAAlB,CAAA,CAAAmB,UAAA;cACA,OAA0BX,CAAA,MAAmBA,CAAA;gBAC7C,IAAAtE,CAAA,GAAAS,CAAA,CAAAiU,mBAAA,CAAApQ,CAAA;kBACArF,CAAA,GAAAwB,CAAA,CAAAkU,IAAA,CAAArQ,CAAA;gBACA,KAAAtF,CAAA,MAAmCA,CAAA,GAAAgB,CAAA,EAAUhB,CAAA,IAAAN,CAAA,IAC7CgG,CAAA,CAAA9F,CAAA,EACAiC,IAAA,CAAA6F,GAAA,CAAAjG,CAAA,CAAA2S,QAAA,KAAA1U,CAAA,WAAAO,CAAA,GACAyF,CAAA,CAAA9F,CAAA,EACAiC,IAAA,CAAA6F,GAAA,CAAAjG,CAAA,CAAA2S,QAAA,KAAA1U,CAAA,WAAAO,CAAA,GACAyF,CAAA,CAAA9F,CAAA,EACAiC,IAAA,CAAA6F,GAAA,CAAAjG,CAAA,CAAA2S,QAAA,KAAA1U,CAAA,WAAAO,CAAA,GACAsF,CAAA,QAAAtF,CAAA;cAAA;cAGAN,CAAA,IAAAkH,CAAA,CAAAjH,CAAA,EAAA6B,CAAA;YAAA,OACiB;cACjB,OAA0B6D,CAAA,MAAmBA,CAAA,IAG7C,KAFAtE,CAAA,GAAAS,CAAA,CAAAiU,mBAAA,CAAApQ,CAAA,GACArF,CAAA,GAAAwB,CAAA,CAAAkU,IAAA,CAAArQ,CAAA,GACAtF,CAAA,MAAmCA,CAAA,GAAAgB,CAAA,EAAUhB,CAAA,IAAAN,CAAA,IAC7CgG,CAAA,CAAA9F,CAAA,EAAAiC,IAAA,CAAA6F,GAAA,CAAAjG,CAAA,CAAA2S,QAAA,CAAA1U,CAAA,OAAAO,CAAA,GACAsF,CAAA,IAAAtF,CAAA;cAGAN,CAAA,IAAAyH,CAAA,CAAAxH,CAAA,EAAA6B,CAAA;YAAA;YAEA9B,CAAA,IAAAgH,CAAA,CAAA/G,CAAA,EAAA6B,CAAA,GAEAgD,CAAA,CAAA9E,CAAA,IAAA8B,CAAA,CAAA6S,cAAA,GACA7P,CAAA,CAAAc,CAAA,IAAA9D,CAAA,CAAAwT,YAAA,GACAhU,CAAA,IAAAsE,CAAA,GAAA5F,CAAA;UAAA;UAKA,OAAAsB,CAAA;QAAA,CA8JA,CAAAhC,CAAA,GACAiB,CAAA,CAAAjB,CAAA,EAAAC,CAAA,CAAAwe,cAAA,GACA/d,CAAA,IAAAT,CAAA,CAAAwe,cAAA,EAEAxe,CAAA,CAAAud,eAAA,KAAA/c,CAAA,GAAAC,CAAA,OAMAuI,CAAA,CAAAjJ,CAAA,MAAAgJ,CAAA,OAAAxI,CAAA,CAAAkR,QAAA,IACAxI,CAAA,CAAA+T,GAAA,CAAAC,OAAA,0DAOA,IAAAjd,CAAA,CAAAud,eAAA,IAAAhd,CAAA,CAAAkR,QAAA,KACAxI,CAAA,CAAA+T,GAAA,CAAAyB,MAAA,mSASA,IAAAze,CAAA,CAAAud,eAAA,EAAAhd,CAAA,CAAAkR,QAAA,EACAzR,CAAA,CAAAwe,cAAA,EAAAxe,CAAA,CAAA8d,aAAA,EACA,IAAAvd,CAAA,CAAA0Q,YAAA,EAAAxQ,CAAA,GAAAT,CAAA,CAAAwe,cAAA,OACAje,CAAA,CAAA0Q,YAAA,EAAAxQ,CAAA,EAAAA,CAAA,MAAAD,CAAA,GAEAyI,CAAA,CAAA+T,GAAA,CAAAC,OAAA,6DACAhU,CAAA,CAAA+T,GAAA,CAAAC,OAAA,gFACAhU,CAAA,CAAA+T,GAAA,CAAAC,OAAA,sCACAhU,CAAA,CAAA+T,GAAA,CAAAC,OAAA,wCAEA1c,CAAA,CAAAkR,QAAA,OAAAzR,CAAA,CAAAud,eAAA,GAGAhY,CAAA,CAAA5E,CAAA,YAEA,MAAAA,CAAA;UAKA,IAAAoB,CAAA;UACA,KAAAA,CAAA,MAAuBA,CAAA,GAAA8D,CAAA,CAAAwL,cAAA,IAAsCtP,CAAA,EAC7DxB,CAAA,CAAA6Q,MAAA,CAAArP,CAAA,EAAA4M,YAAA,IAAAhO,CAAA;UACAA,CAAA;QAAA;QAGA;MAAA,GAYA,KAAAwJ,WAAA,aAAApK,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA;QACA,IAAAsB,CAAA,GAAAhB,CAAA;QACA,IAAAgB,CAAA,OACA;QACA,SAAAvB,CAAA,IAAAA,CAAA,GAAAuB,CAAA,EAEA;QAMA,IAJAkH,CAAA,CAAA3G,SAAA,CAAAR,CAAA,KAAA9B,CAAA,EAAAO,CAAA,EAAAwB,CAAA,GACAhB,CAAA,QACAwF,CAAA,SAEA9F,CAAA;UACA,IAAAC,CAAA,GAAA4J,CAAA;UAaA,IAZA5J,CAAA,MAAAX,CAAA,CAAAsQ,SAAA,EACAhK,CAAA,CAAAqY,cAAA,CAAAhe,CAAA,EAAAV,CAAA,EAAAO,CAAA,EAAAwB,CAAA,GACAhC,CAAA,CAAAsQ,SAAA,GAAA3P,CAAA,KAMA,IAAAqB,CAAA,KACAhC,CAAA,CAAA+T,cAAA,CAAA6K,aAAA,IAAA5c,CAAA,GAGAhC,CAAA,CAAAmU,iBAAA,EAOA,KANA,IAGAlT,CAAA,EAHAuB,CAAA,GAAAsH,CAAA,aACAlJ,CAAA,GAAAoB,CAAA,EACAmB,CAAA,OAIA,KAAAA,CAAA,GAwBA,IAtBAA,CAAA,GAAAkD,CAAA,CAAAwY,qBAAA,CAAA7e,CAAA,CAAA4U,GAAA,EAAA3U,CAAA,EACAO,CAAA,EAAAI,CAAA,EAAA4B,CAAA,KAAAA,CAAA,MAYA5B,CAAA,OAEA,KAAAuC,CAAA,KAKAA,CAAA,OAEA,IAAAA,CAAA;YASA,IAFAqC,CAAA,CAAArC,CAAA,WAEAnD,CAAA,CAAAqU,cAAA;cACA,KAAApT,CAAA,MAAuCA,CAAA,GAAAkC,CAAA,EAAiBlC,CAAA,IACxDuB,CAAA,IAAAvB,CAAA,IAAAjB,CAAA,CAAAsU,UAAA,GACAtU,CAAA,CAAAsU,UAAA,GAAA9R,CAAA,IAAAvB,CAAA,KACAuB,CAAA,IAAAvB,CAAA,IAAAjB,CAAA,CAAAsU,UAAA,KACAtU,CAAA,CAAAsU,UAAA,IAAA9R,CAAA,IAAAvB,CAAA;cAEA,QAAAjB,CAAA,CAAA4G,YAAA,EACA,KAAA3F,CAAA,MAA2CA,CAAA,GAAAkC,CAAA,EAAiBlC,CAAA,IAC5DuB,CAAA,IAAAvB,CAAA,IAAAjB,CAAA,CAAAsU,UAAA,GACAtU,CAAA,CAAAsU,UAAA,GAAA9R,CAAA,IAAAvB,CAAA,KACAuB,CAAA,IAAAvB,CAAA,IAAAjB,CAAA,CAAAsU,UAAA,KACAtU,CAAA,CAAAsU,UAAA,IAAA9R,CAAA,IAAAvB,CAAA;YAAA;YAIA,IAAAjB,CAAA,CAAAoU,cAAA,IACArT,CAAA,CAAA+a,cAAA,CAAA9b,CAAA,CAAAyU,MAAA,EAAAjS,CAAA,QACAA,CAAA,QAAAW,CAAA,EACAnD,CAAA,CAAA4G,YAAA,KAAA8W,YAAA,CAAA1B,mBAAA,EACA;UAAA;QAAA;QAWA,OAAAha,CAAA;MAAA,GAGA,KAAA8c,iBAAA,aAAA9e,CAAA;QACA+B,CAAA,GAAA8H,CAAA,CAAA6S,IAAA,CAAAC,iBAAA,GAEA3c,CAAA,CAAAuR,KAAA,GAAAvR,CAAA,CAAAwR,KAAA,MACAxR,CAAA,CAAAqR,MAAA,CAAArR,CAAA,CAAAuR,KAAA,EAAA3C,YAAA,MACA5N,CAAA,OAEAJ,CAAA,GADA4F,CAAA;MAAA;IAAA;IAn+BA9F,CAAA,CAAAkd,EAAA,aAAA5d,CAAA,EAAAC,CAAA;MACA,OAAA2C,IAAA,CAAAmc,GAAA,CAAA/e,CAAA,IAAA4C,IAAA,CAAAmc,GAAA,CAAA9e,CAAA,IAAA2C,IAAA,CAAAmc,GAAA,CAAA/e,CAAA,GAAAC,CAAA,KACA,OADA2C,IAAA,CACAmc,GAAA,CAAA/e,CAAA,IACA4C,IAAA,CAAAmc,GAAA,CAAA/e,CAAA,GAAAC,CAAA,YAAA2C,IAAA,CAAAmc,GAAA,CAAA9e,CAAA;IAAA,GAGAS,CAAA,CAAA+c,GAAA,aAAAzd,CAAA,EAAAC,CAAA;MACA,QAAAS,CAAA,CAAAkd,EAAA,CAAA5d,CAAA,EAAAC,CAAA;IAAA,GAq+BAD,CAAA,CAAAE,OAAA,GAAAQ,CAAA;EAAA,aAAAV,CAAA,EAAAC,CAAA,EAAAO,CAAA;ICt+BA,IAAAC,CAAA,GAAaD,CAAA,CAAQ;MACrByI,CAAA,GAAAxI,CAAA,CAAAkD,MAAA;MAKAuF,CAAA,IAJAzI,CAAA,CAAAmD,OAAA,EACAnD,CAAA,CAAAoD,KAAA,EACApD,CAAA,CAAAqD,UAAA,EACArD,CAAA,CAAAsD,IAAA,EACAtD,CAAA,CAAAuD,MAAA;MAMAmF,CAAA,IALA1I,CAAA,CAAAwD,WAAA,EACAxD,CAAA,CAAA4D,QAAA,EACA5D,CAAA,CAAA8D,UAAA,EACA9D,CAAA,CAAAgE,SAAA,EACAhE,CAAA,CAAAiE,WAAA,EACAjE,CAAA,CAAAkE,OAAA;MAEAkF,CAAA,IADApJ,CAAA,CAAAmE,SAAA,EACAnE,CAAA,CAAAsE,MAAA;MAEA+E,CAAA,GAActJ,CAAA,CAAQ;MACtB+J,CAAA,GAAa/J,CAAA,CAAQ;MACrBgF,CAAA,GAAahF,CAAA,CAAQ;MACrBiF,CAAA,GAAkBjF,CAAA,CAAQ;IAwmC1BR,CAAA,CAAAE,OAAA,GArmCA,SAAAF,EAAA;MAEA,IAAA4H,CAAA;MAQA,SAAA9G,EAAAd,CAAA;QACA,KAAAyc,IAAA,OAAAzc,CAAA;MAAA;MARA,KAAAgf,KAAA,SAEA,KAAA9Y,UAAA,aAAAlG,CAAA;QACA,KAAAgf,KAAA,GAAAhf,CAAA,EACA4H,CAAA,GAAA5H,CAAA;MAAA;MAOA,IAAAU,CAAA,YACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA;MAgBA,SAAAyH,EAAAnI,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA;QACA,IAAArB,CAAA,WAAAV,CAAA;QAIA,KAFA4J,CAAA,KAAA7J,CAAA,GACAA,CAAA,QACA,KAAAA,CAAA,KACAU,CAAA,CAAAsB,CAAA,MAAArB,CAAA,GAAAH,CAAA,CAAAC,CAAA,aACAC,CAAA,CAAAsB,CAAA,MAAArB,CAAA,GAAAH,CAAA,CAAAC,CAAA;MAAA;MAgBA,SAAAuI,EAAAhJ,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA;QACA6H,CAAA,KAAA7J,CAAA;QAGA,IAAAW,CAAA,IADAX,CAAA,UACA;QAEA,KADAA,CAAA,QACA,KAAAA,CAAA;UACA,IAAAiB,CAAA,EAAAuB,CAAA,EAAA5B,CAAA,EAAAuC,CAAA,EACApC,CAAA,EAAAsF,CAAA,EAAAC,CAAA,EAAAvE,CAAA;UAEAd,CAAA,GAAAT,CAAA,CAAAC,CAAA,MAAAR,CAAA,EACAuC,CAAA,GAAAhC,CAAA,CAAAC,CAAA,MAAAR,CAAA,EACAc,CAAA,OAAAE,CAAA,EACAL,CAAA,GAAAJ,CAAA,CAAAC,CAAA,MAAAR,CAAA,EACAoG,CAAA,OAAA7D,CAAA,EACAW,CAAA,GAAA3C,CAAA,CAAAC,CAAA,MAAAR,CAAA,EACAqG,CAAA,OAAA1F,CAAA,EACAK,CAAA,IAAA2G,CAAA,CAAAqX,KAAA,CAAAle,CAAA,GACAgB,CAAA,OAAAoB,CAAA,EACAX,CAAA,IAAAoF,CAAA,CAAAqX,KAAA,CAAA5Y,CAAA,GACA3F,CAAA,CAAAsB,CAAA,UAAAf,CAAA,EACAL,CAAA,IAAAgH,CAAA,CAAAqX,KAAA,CAAA3Y,CAAA,GACA5F,CAAA,CAAAsB,CAAA,UAAAQ,CAAA,EACAW,CAAA,IAAAyE,CAAA,CAAAqX,KAAA,CAAAld,CAAA,GACArB,CAAA,CAAAsB,CAAA,UAAApB,CAAA,EACAF,CAAA,CAAAsB,CAAA,UAAAmB,CAAA;QAAA;QAEA,KAAAxC,CAAA,KAMAI,CAAA,QAFAE,CAAA,GAAAT,CAAA,CAAAC,CAAA,MAAAR,CAAA,GAGAoG,CAAA,QAFA7D,CAAA,GAAAhC,CAAA,CAAAC,CAAA,MAAAR,CAAA,GAGAgB,CAAA,IAAA2G,CAAA,CAAAqX,KAAA,CAAAle,CAAA,GACAyB,CAAA,IAAAoF,CAAA,CAAAqX,KAAA,CAAA5Y,CAAA,GACA3F,CAAA,CAAAsB,CAAA,UAAAf,CAAA,EACAP,CAAA,CAAAsB,CAAA,UAAAQ,CAAA;MAAA;MAmSA,IAAAvB,CAAA,mCACA;MAUA,SAAAwF,EAAAzG,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA;QACA,IAAAC,CAAA,GAnJA,UAAAV,CAAA,EAAAC,CAAA,EAAAO,CAAA;UACA,IAAAC,CAAA;YAAAC,CAAA;UAEA;YACA,IAAAsB,CAAA,GAAAhC,CAAA,CAAAC,CAAA;cACAU,CAAA,GAAAX,CAAA,CAAAC,CAAA;YACAQ,CAAA,GAAAuB,CAAA,KACAvB,CAAA,GAAAuB,CAAA,GAEAtB,CAAA,GAAAC,CAAA,KACAD,CAAA,GAAAC,CAAA;UAAA,SACSV,CAAA,GAAAO,CAAA;UAGT,OAFAC,CAAA,GAAAC,CAAA,KACAD,CAAA,GAAAC,CAAA,GACAD,CAAA;QAAA,CAqIA,CAAAT,CAAA,EAAAC,CAAA,EAAAO,CAAA;QAEA,QAAAE,CAAA;UACA;YACA,OAAAA,CAAA;UAEA;YACA,OAjGA,UAAAV,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA;cAEA,IAAAC,CAAA;gBACAsB,CAAA,GAAAuI,CAAA,CAAA6O,EAAA,IAAApC,IAAA;cAEA;gBACA,IAAArW,CAAA,OAAAX,CAAA,CAAAC,CAAA,QAAAD,CAAA,CAAAC,CAAA;gBACAA,CAAA,OACAS,CAAA,IAAAsB,CAAA,CAAArB,CAAA;cAAA,SACSV,CAAA,GAAAO,CAAA;cAGT,OADAC,CAAA,CAAAgc,IAAA,IAAA/b,CAAA,EACA;YAAA,CAqFA,CAAAV,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA;UAEA;UACA;YACA,OAtFA,UAAAT,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA;cAEA,IAAAsB,CAAA;gBAEArB,CAAA;gBAFAM,CAAA;gBACAuB,CAAA,GAAA+H,CAAA,CAAA6O,EAAA,CAAA3Y,CAAA,EAAAoW,IAAA;cAGAlW,CAAA,GADA,KAAAF,CAAA,GACA8J,CAAA,CAAA+O,OAAA,GAEA/O,CAAA,CAAAgP,OAAA;cAEA;gBACA,IAAA3Y,CAAA,GAAAZ,CAAA,CAAAC,CAAA,QAAAuC,CAAA,GAAAxC,CAAA,CAAAC,CAAA;gBACAA,CAAA,OACAgB,CAAA,IAAAN,CAAA,CAAAC,CAAA;cAAA,SACSX,CAAA,GAAAO,CAAA;cAWT,QATAwB,CAAA,WAAAf,CAAA,KACAA,CAAA,aAGAA,CAAA,GAAAe,CAAA,EACAvB,CAAA,KAGAC,CAAA,CAAA+b,IAAA,IAAAxb,CAAA,EACAR,CAAA;YAAA,CA6DA,CAAAT,CAAA,EAAAC,CAAA,EAAAO,CAAA,EACAS,CAAA,CAAAP,CAAA,OAAAD,CAAA;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;YACA,OAzEA,UAAAT,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA;cAEA,IAAAsB,CAAA;gBACArB,CAAA;gBACAM,CAAA;gBACAuB,CAAA,GAAA+H,CAAA,CAAA6O,EAAA,CAAA3Y,CAAA,EAAAoW,IAAA;gBACAjW,CAAA,GAAA2J,CAAA,CAAA6O,EAAA,CAAA3Y,CAAA,EAAAuW,IAAA;gBACA7T,CAAA,GAAAoH,CAAA,CAAA6O,EAAA,CAAA3Y,CAAA,MAAAuW,IAAA;gBACAjW,CAAA,GAAAwJ,CAAA,CAAA6O,EAAA,CAAA3Y,CAAA,MAAAuW,IAAA;cAEA;gBACA,IAAA3Q,CAAA,GAAArG,CAAA,CAAAC,CAAA,QAAAuC,CAAA,GAAAxC,CAAA,CAAAC,CAAA;gBACAA,CAAA,OACA+B,CAAA,IAAApB,CAAA,CAAAyF,CAAA,GACA1F,CAAA,IAAAwC,CAAA,CAAAkD,CAAA,GACApF,CAAA,IAAAF,CAAA,CAAAsF,CAAA;cAAA,SACSpG,CAAA,GAAAO,CAAA;cACT,IAAA8F,CAAA,GAAA7F,CAAA;cAWA,OAVAE,CAAA,GAAAqB,CAAA,KACAA,CAAA,GAAArB,CAAA,EACA2F,CAAA,KAEArF,CAAA,GAAAe,CAAA,KACAA,CAAA,GAAAf,CAAA,EACAqF,CAAA,GAAA7F,CAAA,OAEAC,CAAA,CAAA+b,IAAA,IAAAza,CAAA,EAEAsE,CAAA;YAAA,CA6CA,CAAAtG,CAAA,EAAAC,CAAA,EAAAO,CAAA,EACAS,CAAA,CAAAP,CAAA,OAAAD,CAAA;UAEA;YAEA,IAAAC,CAAA,GAAA+E,CAAA,CAAAyZ,SAAA,EAEA,OADAze,CAAA,CAAAgc,IAAA,GAAAhX,CAAA,CAAA0Z,UAAA,GACA;YAGA,IAAAnd,CAAA,EAMArB,CAAA;YALA,KAFAD,CAAA,QAEAsB,CAAA,OAAkCA,CAAA,WAClCuI,CAAA,CAAA6O,EAAA,CAAApX,CAAA,EAAA8U,MAAA,IAAApW,CAAA,GADgDsB,CAAA;YAMhD,KAAArB,CAAA,GAAAqB,CAAA,MAA0CrB,CAAA,WAC1C4J,CAAA,CAAA6O,EAAA,CAAAzY,CAAA,EAAAmW,MAAA,IAAApW,CAAA,GADuDC,CAAA;YAKvD,OAlLA,UAAAX,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA;cAEA,IACArB,CAAA;gBADAM,CAAA,WAAAsJ,CAAA,CAAA6O,EAAA,CAAA3Y,CAAA,EAAAoW,IAAA,GAAAtM,CAAA,CAAA6O,EAAA,CAAA1Y,CAAA,EAAAmW,IAAA;gBACArU,CAAA;cAEA;gBACA,IAAA5B,CAAA,GAAAZ,CAAA,CAAAC,CAAA;kBACAkD,CAAA,GAAAnD,CAAA,CAAAC,CAAA;gBAEA,KAAAW,CAAA,KACA,KAAAA,CAAA,KACAA,CAAA,OACA4B,CAAA,IAAAvB,CAAA,GAEAL,CAAA,SAGA,KAAAuC,CAAA,KACA,KAAAA,CAAA,KACAA,CAAA,OACAX,CAAA,IAAAvB,CAAA,GAEAL,CAAA,IAAAuC,CAAA,GAGAX,CAAA,IAAA+H,CAAA,CAAA8O,QAAA,CAAAzY,CAAA;cAAA,SACSX,CAAA,GAAAO,CAAA;cAWT,QATAG,CAAA,WAAA6B,CAAA,KACAA,CAAA,aAGAA,CAAA,GAAA7B,CAAA,EACAF,CAAA,GAAAC,CAAA,GAGAsB,CAAA,CAAAya,IAAA,IAAAja,CAAA,EACA/B,CAAA;YAAA,CA6IA,CAAAT,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAG,CAAA,EAAAqB,CAAA,EAAAvB,CAAA;QAAA;MAAA;MA0LA,SAAA6F,EAAAtG,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA,EAAArB,CAAA,EAAAM,CAAA;QAGA,KAFA,IAAAuB,CAAA,GAAAvC,CAAA,CAAAqV,UAAA,EAEA1U,CAAA,MAAwBA,CAAA,GAAAkJ,CAAA,CAAAuB,OAAA,MAA0BzK,CAAA;UAClD,IAAAuC,CAAA,GAAAnD,CAAA,CAAA4R,aAAA,CAAAhR,CAAA,CAAAA,CAAA;UACA,IAAA4B,CAAA,IAAAW,CAAA,EACA;UACA,IAAApC,CAAA,GAAAL,CAAA,CAAAE,CAAA,QAAAX,CAAA,CAAAuW,UAAA;UACA,IAAAhW,CAAA,CAAA6U,cAAA,IAAAtU,CAAA,EACA;UAEA,IAAAsF,CAAA,OAAAvF,CAAA,CAAAC,CAAA;YACAuF,CAAA,GAAAG,CAAA,CAAAhG,CAAA,EAAA0C,CAAA,EAAAX,CAAA,EAAA6D,CAAA;UACAtF,CAAA,GAAAsF,CAAA,CAAAoW,IAAA,EACAjc,CAAA,CAAA6U,cAAA,IAAAtU,CAAA,KAGAP,CAAA,CAAAoW,MAAA,CAAA3W,CAAA,GACAO,CAAA,CAAA6U,cAAA,GAAAtU,CAAA,EACAP,CAAA,CAAAmV,aAAA,GAAA3T,CAAA,CAAApB,CAAA,OACAJ,CAAA,CAAAoV,aAAA,GAAAhV,CAAA,OAAAoB,CAAA,CAAApB,CAAA,OACAJ,CAAA,CAAAkV,YAAA,MAAA/U,CAAA,CAAAC,CAAA,OACAJ,CAAA,CAAAkV,YAAA,MAAAzU,CAAA,CAAAL,CAAA,OACAJ,CAAA,CAAAkV,YAAA,MAAApP,CAAA;QAAA;MAAA;MA1MA,KAAA8Y,kBAAA,aAAApf,CAAA,EAAAC,CAAA,EAAAO,CAAA;QACA,IAAAC,CAAA,GAAAR,CAAA,CAAAiV,MAAA;UACAxU,CAAA,GAAAkC,IAAA,CAAAyX,GAAA,MAAApa,CAAA,CAAA0W,iBAAA;QAMA,KAJA,QAAAnW,CAAA,KACAA,CAAA,CAAA6e,UAAA,OAGc,IAAA3e,CAAA,IACd,MAAAD,CAAA,CAAAC,CAAA,QAAAD,CAAA,CAAAC,CAAA,QADqBA,CAAA;QAGrBT,CAAA,CAAAsV,MAAA,GAAA7U,CAAA;QAKA,KAFA,IAAAsB,CAAA,MACArB,CAAA,MACc,IAAAD,CAAA,EAAOA,CAAA;UACrB,IAAAO,CAAA;UAIA,uBAAAR,CAAA,CAAAC,CAAA,QAAAD,CAAA,CAAAC,CAAA,QAAAD,CAAA,CAAAC,CAAA,QAAAD,CAAA,CAAAC,CAAA,SACA;UAEAO,CAAA,iBAAAR,CAAA,CAAAC,CAAA,QAAAD,CAAA,CAAAC,CAAA,SAAAD,CAAA,CAAAC,CAAA,SAAAD,CAAA,CAAAC,CAAA,OACAsB,CAAA,IAAAuI,CAAA,CAAA2O,IAAA,CAAAjY,CAAA,GACAN,CAAA,IAAA4J,CAAA,CAAA4O,IAAA,CAAAlY,CAAA;QAAA;QAEA,IAAAuB,CAAA,GAAAR,CAAA;QASA,IARA/B,CAAA,CAAA8V,kBAAA,MACApV,CAAA,GAAAqB,CAAA,KACAQ,CAAA,GAAA7B,CAAA,EACAV,CAAA,CAAA8V,kBAAA,OAGA9V,CAAA,CAAAuW,UAAA,GAAAhU,CAAA,EAEA,MADAvC,CAAA,CAAAqV,UAAA,GAAA5U,CAAA,GAEA,OAAA8B,CAAA;QAEA,IAAAvC,CAAA,CAAA8G,UAAA,IAAA+C,CAAA,CAAA9C,UAAA,GACAhF,CAAA,OAAAhC,CAAA,CAAA4R,aAAA,CAAA5P,CAAA,OACA/B,CAAA,CAAAqV,UAAA,KACAtT,CAAA,GAAA/B,CAAA,CAAAqV,UAAA,GACA3U,CAAA,GAAAV,CAAA,CAAAqV,UAAA,MAES,IAAArV,CAAA,CAAA8G,UAAA,IAAA+C,CAAA,CAAAzB,SAAA;UAST,IARAwB,CAAA,CAAAnJ,CAAA,UAEAsB,CAAA,GAAA/B,CAAA,CAAA0V,aAAA,GAAA3V,CAAA,CAAA0Q,MAAA,CAAAhQ,CAAA,OACAC,CAAA,GAAAV,CAAA,CAAA2V,aAAA,GAAA5V,CAAA,CAAA0Q,MAAA,CAAAhQ,CAAA,OAEAmJ,CAAA,CAAA7H,CAAA,GAAArB,CAAA,OAAAmJ,CAAA,CAAAqB,OAAA,GACAxK,CAAA,GAAAX,CAAA,CAAA4R,aAAA,CAAAhR,CAAA,CAAAoB,CAAA,GAAArB,CAAA,OACAqB,CAAA,GAAAhC,CAAA,CAAA4R,aAAA,CAAAhR,CAAA,CAAAoB,CAAA,OACArB,CAAA,GAAAD,CAAA;YACA,IAAAE,CAAA,OAAAE,CAAA,CAAA0B,CAAA;YACAvC,CAAA,CAAAyV,YAAA,MAAAjP,CAAA,CAAAhG,CAAA,EAAAE,CAAA,EAAAD,CAAA,EAAAE,CAAA,GACA4B,CAAA,GAAA5B,CAAA,CAAA6b,IAAA;UAAA;QAAA,OAGAxc,CAAA,CAAA0V,aAAA,MAEA1V,CAAA,CAAA2V,aAAA,GAAA9L,CAAA,CAAAuB,OAAA,eAEA1K,CAAA,GAAAD,CAAA,KADAsB,CAAA,GAAAhC,CAAA,CAAA4R,aAAA,CAAAhR,CAAA,SAGAoB,CAAA,GAAArB,CAAA;QA6BA,IAvBAqB,CAAA,GAAAY,IAAA,CAAAyX,GAAA,CAAArY,CAAA,EAAAtB,CAAA,GACAC,CAAA,GAAAiC,IAAA,CAAAyX,GAAA,CAAA1Z,CAAA,EAAAD,CAAA,GAEAmJ,CAAA,MAAA7H,CAAA,GACA6H,CAAA,MAAAlJ,CAAA,GAGA,IAAAqB,CAAA,KACApB,CAAA,OAAAE,CAAA,CAAA0B,CAAA,GACAvC,CAAA,CAAAyV,YAAA,MAAAjP,CAAA,CAAAhG,CAAA,KAAAuB,CAAA,EAAApB,CAAA,GACA4B,CAAA,GAAA5B,CAAA,CAAA6b,IAAA,GAEAza,CAAA,GAAArB,CAAA,KACAC,CAAA,OAAAE,CAAA,CAAA0B,CAAA,GACAvC,CAAA,CAAAyV,YAAA,MAAAjP,CAAA,CAAAhG,CAAA,EAAAuB,CAAA,EAAArB,CAAA,EAAAC,CAAA,GACA4B,CAAA,GAAA5B,CAAA,CAAA6b,IAAA,GAEA,KAAAzc,CAAA,CAAAmQ,gBAAA,KACAlQ,CAAA,CAAAoV,cAAA,GAAA7S,CAAA,EACA8c,mBAAA,CAAAtf,CAAA,EAAAC,CAAA,GACAuC,CAAA,GAAAvC,CAAA,CAAAoV,cAAA,GAGA,QAAA7U,CAAA,IACAP,CAAA,CAAA8G,UAAA,IAAA+C,CAAA,CAAAzB,SAAA;UAEA,KADA,IAAAlF,CAAA,MACAnD,CAAA,CAAA4R,aAAA,CAAAhR,CAAA,CAAAuC,CAAA,IAAAlD,CAAA,CAAAqV,UAAA,GACAnS,CAAA;UAEA3C,CAAA,CAAA6e,UAAA,GAAAlc,CAAA;QAAA;QAIA,OAAAX,CAAA;MAAA,GAGA,KAAA+c,UAAA,aAAAvf,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA;QACA,IAAAC,CAAA,GAAAF,CAAA,CAAA0U,MAAA;UAGAlT,CAAA,GAAAyD,CAAA,CAAAyZ,SAAA,GAAAtX,CAAA,CAAA4X,MAAA,CAAAhf,CAAA,CAAAgV,WAAA;QAEA,IAAAhV,CAAA,CAAA4U,SAAA,GAAApT,CAAA,EACA,OAAAyD,CAAA,CAAA0Z,UAAA;QAIA,IAtdA,UAAAnf,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA;UAEA,IAAAsB,CAAA;YACArB,CAAA;YAEAM,CAAA;YADAuB,CAAA;YAEA5B,CAAA;YACAuC,CAAA;YACApC,CAAA;YACAsF,CAAA,GAAApG,CAAA;YACAqG,CAAA;YACAvE,CAAA,GAAAsE,CAAA;YACArF,CAAA;YACAwF,CAAA,GAAAxG,CAAA;YACAc,CAAA;UAeA,KAPAG,CAAA,WAAAP,CAAA,IAAAD,CAAA,CAAA+U,WAAA,IAAA9U,CAAA,CAAA8U,WAAA,EAGA7U,CAAA,GADAF,CAAA,CAAAsG,UAAA,IAAA+C,CAAA,CAAA9C,UAAA,GACA,KAEA,IAEAhF,CAAA,MAAqBA,CAAA,IAAArB,CAAA,EAAeqB,CAAA;YACpC,IAAAyE,CAAA;YASA,KAPAxF,CAAA,IAAAR,CAAA,CAAAsG,UAAA,IAAA+C,CAAA,CAAAzB,SAAA,MACA5B,CAAA,GAAAhG,CAAA,CAAA+U,WAAA,IACA/U,CAAA,CAAA0U,QAAA,CAAAnT,CAAA,UAAAvB,CAAA,CAAAoV,OAAA,GAAAjO,CAAA,CAAA6X,MAAA,CAAAzd,CAAA,IACA,MAAAvB,CAAA,CAAAqV,cAAA,QACA,IAAArV,CAAA,CAAAyP,aAAA,CAAAzP,CAAA,CAAAF,MAAA,CAAAyB,CAAA,KAEA6H,CAAA,MAAApJ,CAAA,CAAA8V,KAAA,CAAAvU,CAAA,IACAf,CAAA,IAAAP,CAAA,CAAAgf,IAAA,CAAA1d,CAAA,KAAAyE,CAAA,EAIA,KAAA7F,CAAA,KACAoI,CAAA,CAAApI,CAAA,EAAAJ,CAAA,EAAAgG,CAAA,EAAA1F,CAAA,EACAiB,CAAA,EAAAf,CAAA,GACAJ,CAAA,OAEA,KAAAuC,CAAA,KACAgF,CAAA,CAAAhF,CAAA,EAAA3C,CAAA,EAAAgG,CAAA,EACA1F,CAAA,EAAAiB,CAAA,EAAAf,CAAA,GACAmC,CAAA,WAEa;cACb,IAIAuE,CAAA;gBAJAC,CAAA,GAAAlH,CAAA,CAAA8V,KAAA,CAAAvU,CAAA;cAoDA,IAlDAQ,CAAA,GAAA/B,CAAA,CAAA8V,KAAA,CAAAvU,CAAA,IAAAvB,CAAA,CAAAkW,iBAAA,KAGAjP,CAAA,GAAAjH,CAAA,CAAAkW,iBAAA,GAAAnU,CAAA,MACA0G,CAAA,CAAA9G,IAAA,CAAAnC,CAAA,EAAAQ,CAAA,CAAAkW,iBAAA,YACAhP,CAAA,GAAAD,CAAA,IAEA,MACAC,CAAA,OAIA3F,CAAA,GAAArB,CAAA,OAIA,KAAAC,CAAA,SAAAuC,CAAA,KACApB,CAAA,GAAAsE,CAAA,EACArF,CAAA,GAAAsF,CAAA,EACAE,CAAA,GAAAxG,CAAA,EACAc,CAAA,GAAAC,CAAA,GAEA,QAAAL,CAAA,QAAAA,CAAA,CAAA2e,UAAA,IACArd,CAAA,IAAAtB,CAAA,CAAA2e,UAAA,IACA,IAAA3e,CAAA,CAAAgf,IAAA,CAAA1d,CAAA,KACAyE,CAAA,IAAA/F,CAAA,CAAAgf,IAAA,CAAA1d,CAAA,KAEA,KAAApB,CAAA,KACAoI,CAAA,CAAApI,CAAA,EAAAJ,CAAA,EAAAgG,CAAA,EACA1F,CAAA,EAAAiB,CAAA,EAAAf,CAAA,GACAJ,CAAA,MACAmB,CAAA,GAAAsE,CAAA,EACArF,CAAA,GAAAsF,CAAA,EACAE,CAAA,GAAAxG,CAAA,EACAc,CAAA,GAAAC,CAAA,GAEAoC,CAAA,IAAAwE,CAAA,KAEA,KAAAxE,CAAA,KACAgF,CAAA,CAAAhF,CAAA,EAAA3C,CAAA,EAAAgG,CAAA,EACA1F,CAAA,EAAAiB,CAAA,EAAAf,CAAA,GACAmC,CAAA,MACApB,CAAA,GAAAsE,CAAA,EACArF,CAAA,GAAAsF,CAAA,EACAE,CAAA,GAAAxG,CAAA,EACAc,CAAA,GAAAC,CAAA,GAEAH,CAAA,IAAA+G,CAAA,GAGAA,CAAA;gBAKA,KAAAxE,CAAA,KACAgF,CAAA,CAAAhF,CAAA,EAAA3C,CAAA,EAAAgG,CAAA,EACA1F,CAAA,EAAAiB,CAAA,EAAAf,CAAA,GACAmC,CAAA,OAEA,KAAAvC,CAAA,KACAoI,CAAA,CAAApI,CAAA,EAAAJ,CAAA,EAAAgG,CAAA,EACA1F,CAAA,EAAAiB,CAAA,EAAAf,CAAA,GACAJ,CAAA;gBAGA;cAAA;YAAA;YAIAoB,CAAA,IAAArB,CAAA,KACA2F,CAAA,IAAA7F,CAAA,CAAA8V,KAAA,CAAAvU,CAAA,GACAjB,CAAA,IAAAN,CAAA,CAAA8V,KAAA,CAAAvU,CAAA,GACAQ,CAAA,IAAA/B,CAAA,CAAA8V,KAAA,CAAAvU,CAAA;UAAA;UAGA,KAAApB,CAAA,KACAoI,CAAA,CAAApI,CAAA,EAAAJ,CAAA,EAAAgG,CAAA,EAAA1F,CAAA,EACAiB,CAAA,EAAAf,CAAA,GACAJ,CAAA,OAEA,KAAAuC,CAAA,KACAgF,CAAA,CAAAhF,CAAA,EAAA3C,CAAA,EAAAgG,CAAA,EAAA1F,CAAA,EACAiB,CAAA,EAAAf,CAAA,GACAmC,CAAA;QAAA,CAwUA,CAAAlD,CAAA,EAAAS,CAAA,EAAAkH,CAAA,CAAA4X,MAAA,CAAAhf,CAAA,CAAAgV,WAAA,GAAAhV,CAAA,EAAAC,CAAA,GAEA,UAAAT,CAAA,CAAAgQ,eAAA,GAKA,KAJA,IAAArP,CAAA,MAEAM,CAAA,GAAAT,CAAA,CAAAgV,WAAA,GAAAhV,CAAA,CAAAsV,cAAA,EACAtT,CAAA,sBAAAoF,CAAA,CAAA4X,MAAA,CAAAve,CAAA,GACAL,CAAA,MAA6BA,CAAA,GAAAJ,CAAA,CAAA4V,MAAA,EAAiBxV,CAAA;UAC9C,IAKAuC,CAAA;YALApC,CAAA,GAAAP,CAAA,CAAA+V,KAAA,CAAA3V,CAAA;UAEA,IADAiJ,CAAA,MAAA9I,CAAA,GACA,KAAAf,CAAA,CAAA2Q,UAAA,CAAA/P,CAAA,GACAD,CAAA,IAAAI,CAAA,MAGA,KAAAoC,CAAA,GAAAxC,CAAA,EAAAA,CAAA,IAAAI,CAAA,EAA2CoC,CAAA,GAAAxC,CAAA,IAAOwC,CAAA,EAClDzC,CAAA,CAAAyC,CAAA,IAAAlD,CAAA,CAAAkD,CAAA,KAAAX,CAAA,GAAA9B,CAAA,CAAAyC,CAAA;QAAA;QAKA,YAAAic,kBAAA,CAAApf,CAAA,EAAAQ,CAAA,EAAAC,CAAA;MAAA,GAoEA,KAAA6e,mBAAA,aAAAtf,CAAA,EAAAC,CAAA;QACA,IAAAO,CAAA,OAAAgF,CAAA;UACA/E,CAAA,GAAAR,CAAA,CAAAiV,MAAA;UACAxU,CAAA,GAAAyI,CAAA;UACAnH,CAAA,GAAAmH,CAAA;UACAxI,CAAA,GAAAwI,CAAA;UACAlI,CAAA,GAAAkI,CAAA;QAGA,IAAAlJ,CAAA,CAAA8G,UAAA,IAAA+C,CAAA,CAAA9C,UAAA,SAAAhH,CAAA,CAAA2G,OAAA;UAGAnG,CAAA,CAAAoW,MAAA,CAAA3W,CAAA,GACAA,CAAA,CAAA8G,UAAA,IAAA+C,CAAA,CAAAzB,SAAA,KA1EA,UAAArI,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA,EAAArB,CAAA;YAGA,KAFA,IAAAM,CAAA,GAAAhB,CAAA,CAAAqV,UAAA,EAEA9S,CAAA,MAAwBA,CAAA,QAAcA,CAAA,IACtC/B,CAAA,CAAA+B,CAAA,IAAAiD,CAAA,CAAA0Z,UAAA;YAGA,KAAA3c,CAAA,MAAwBA,CAAA,OAASA,CAAA;cACjC,IAAA5B,CAAA,GAAAZ,CAAA,CAAA4R,aAAA,CAAAhR,CAAA,CAAA4B,CAAA;cACA,IAAAvB,CAAA,IAAAL,CAAA,EACA;cACA,IAAAuC,CAAA;gBACApC,CAAA,OAAAD,CAAA,CAAAqC,CAAA;gBACAkD,CAAA,GAAAI,CAAA,CAAAjG,CAAA,KAAAI,CAAA,EAAAG,CAAA;cACAoC,CAAA,GAAApC,CAAA,CAAA0b,IAAA;cAEA,SAAAnW,CAAA,MAA4BA,CAAA,MAAQA,CAAA;gBACpC,IAAAvE,CAAA,GAAA/B,CAAA,CAAA4R,aAAA,CAAAhR,CAAA,CAAA4B,CAAA,GAAA8D,CAAA;gBACA,IAAArF,CAAA,IAAAc,CAAA,EACA;gBACA,IAAAf,CAAA,GAAAmC,CAAA;kBAEAqD,CAAA,GAAAC,CAAA,CAAAjG,CAAA,EAAAI,CAAA,EAAAmB,CAAA,EADAhB,CAAA,OAAAD,CAAA,CAAAE,CAAA;gBAEAA,CAAA,GAAAD,CAAA,CAAA0b,IAAA,EACAhc,CAAA,CAAA+B,CAAA,GAAA8D,CAAA,IAAAtF,CAAA,KACAP,CAAA,CAAA+B,CAAA,GAAA8D,CAAA,IAAAtF,CAAA,EAEAgB,CAAA,EADAtB,CAAA,CAAA8B,CAAA,GAAA8D,CAAA,IAAA9D,CAAA,IACA8D,CAAA,IAAAD,CAAA,EACA1F,CAAA,CAAA6B,CAAA,GAAA8D,CAAA,IAAAE,CAAA;cAAA;YAAA;UAAA,CA+CA,CAAAxG,CAAA,EAAAC,CAAA,EAAAQ,CAAA,EAAAC,CAAA,EAAAsB,CAAA,EAAArB,CAAA,EAAAM,CAAA,GACAqF,CAAA,CAAAtG,CAAA,EAAAQ,CAAA,EAAAP,CAAA,EAAAQ,CAAA,EAAAC,CAAA,EAAAsB,CAAA,EACArB,CAAA,EAAAM,CAAA;UAEA,IAAAuB,CAAA,GAAAhC,CAAA,CAAA8U,UAAA;UACA,WAAA9S,CAAA,SAAA/B,CAAA,CAAA+B,CAAA,QAAA/B,CAAA,CAAA+B,CAAA,UAIA,OADAA,CAAA,GAAAvC,CAAA,CAAAsV,MAAA,QACA;YAIA/U,CAAA,CAAAoW,MAAA,CAAA3W,CAAA,GACAO,CAAA,CAAA+U,MAAA,GAAA/S,CAAA;YACA,IAAA5B,CAAA;cACAuC,CAAA;YAIA,KAFA0G,CAAA,CAAArH,CAAA,UAEcA,CAAA,GAAAhC,CAAA,CAAA8U,UAAA,EAA0B9S,CAAA;cACxC,IAAAzB,CAAA,iBAAAN,CAAA,CAAA+B,CAAA,QAAA/B,CAAA,CAAA+B,CAAA,SAAA/B,CAAA,CAAA+B,CAAA,SACA/B,CAAA,CAAA+B,CAAA;cACA5B,CAAA,IAAA2J,CAAA,CAAA2O,IAAA,CAAAnY,CAAA,GACAoC,CAAA,IAAAoH,CAAA,CAAA4O,IAAA,CAAApY,CAAA;YAAA;YAYA,IAVAP,CAAA,CAAA8U,UAAA,GAAA9S,CAAA,EAEAhC,CAAA,CAAAuV,kBAAA,MACA5S,CAAA,GAAAvC,CAAA,KACAA,CAAA,GAAAuC,CAAA,EACA3C,CAAA,CAAAuV,kBAAA,OAGAvV,CAAA,CAAAgW,UAAA,GAAA5V,CAAA,EAEAJ,CAAA,CAAAuG,UAAA,IAAA+C,CAAA,CAAAzB,SAAA,EACA/B,CAAA,CAAAtG,CAAA,EAAAQ,CAAA,EAAAP,CAAA,EAAAQ,CAAA,EAAAC,CAAA,EAAAsB,CAAA,EACArB,CAAA,EAAAM,CAAA,OACA;cAOA,IALAT,CAAA,CAAA6U,cAAA,GAAAzU,CAAA,EAEA4B,CAAA,IADA5B,CAAA,GAAAZ,CAAA,CAAA4R,aAAA,CAAAhR,CAAA,SAEAA,CAAA,GAAA4B,CAAA,GAEA,IAAA5B,CAAA;gBACA,IAAAyF,CAAA,OAAAvF,CAAA,CAAAN,CAAA,CAAA6U,cAAA;gBACA7U,CAAA,CAAAkV,YAAA,MAAAjP,CAAA,CAAAhG,CAAA,KAAAG,CAAA,EAAAyF,CAAA,GACA7F,CAAA,CAAA6U,cAAA,GAAAhP,CAAA,CAAAoW,IAAA;cAAA;cAEA7b,CAAA,GAAA4B,CAAA,KACA6D,CAAA,OAAAvF,CAAA,CAAAN,CAAA,CAAA6U,cAAA,GACA7U,CAAA,CAAAkV,YAAA,MAAAjP,CAAA,CAAAhG,CAAA,EAAAG,CAAA,EAAA4B,CAAA,EAAA6D,CAAA,GACA7F,CAAA,CAAA6U,cAAA,GAAAhP,CAAA,CAAAoW,IAAA,GAEAxc,CAAA,CAAAoV,cAAA,GAAA7U,CAAA,CAAA6U,cAAA,IACApV,CAAA,CAAA2W,MAAA,CAAApW,CAAA;YAAA;UAAA;QAAA;MAAA;MAIA,IAAA6F,CAAA;QACAtE,CAAA;QACAf,CAAA;QACAwF,CAAA;MACAxG,CAAA,CAAAue,SAAA,GAAAvd,CAAA,EACAhB,CAAA,CAAAwe,SAAA,GAAAhY,CAAA,EAuDA,KAAAmZ,mBAAA,aAAA3f,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA;QAEA,IACAC,CAAA;UAAAsB,CAAA;UAAArB,CAAA;UAAAM,CAAA;UADAuB,CAAA,GAAA/B,CAAA,CAAAqG,EAAA,CAAA7G,CAAA,EAAAO,CAAA;UAEAI,CAAA;QAQA,KAAAF,CAAA,GADAC,CAAA,MACqBD,CAAA,GAAA8B,CAAA,CAAA4T,MAAA,EAAiB1V,CAAA;UACtC,IAAAyC,CAAA,GAAAX,CAAA,CAAA+T,KAAA,CAAA7V,CAAA;UAGA,KAFAmJ,CAAA,MAAA1G,CAAA,GACAxC,CAAA,IAAAwC,CAAA,EACAlC,CAAA,IAAAkC,CAAA,EAA4BlC,CAAA,QAC5B,KAAAuB,CAAA,CAAA0S,MAAA,CAAAjU,CAAA,GAAAN,CAAA,GADmCM,CAAA;UAInC,KAAAA,CAAA,KACAuB,CAAA,CAAA2S,QAAA,CAAAzU,CAAA,IAAAE,CAAA;QAAA;QAQA,SAAA4B,CAAA,CAAAsT,cAAA,SAAAtT,CAAA,CAAAqT,OAAA;UACA,IAAA9U,CAAA;UACA,KAAAL,CAAA,MAAyBA,CAAA,GAAA8B,CAAA,CAAA4T,MAAA,EAAiB1V,CAAA,IAC1C,IAAA8B,CAAA,CAAA2S,QAAA,CAAAzU,CAAA,MACAK,CAAA,IAAAyB,CAAA,CAAA2S,QAAA,CAAAzU,CAAA;UAEA,cAAAK,CAAA,UAAAA,CAAA;YACA,KAAAL,CAAA,MAA6BA,CAAA,GAAA8B,CAAA,CAAA4T,MAAA,EAAiB1V,CAAA,IAC9C,IAAA8B,CAAA,CAAA2S,QAAA,CAAAzU,CAAA,MACA8B,CAAA,CAAA2S,QAAA,CAAAzU,CAAA;YAEA8B,CAAA,CAAAsT,cAAA,GAAAlV,CAAA;UAAA;QAAA;QAIA,SAAA4B,CAAA,CAAAqT,OAAA,IAAArT,CAAA,CAAAuE,UAAA,IAAA+C,CAAA,CAAA9C,UAAA,IACA,KAAAhH,CAAA,CAAA2G,OAAA;UACA,KAAAjG,CAAA,OAA0BA,CAAA,GAAAoJ,CAAA,CAAAqB,OAAA,MAC1B3I,CAAA,CAAA2S,QAAA,CAAAzU,CAAA,IAAAkH,CAAA,CAAA6X,MAAA,CAAA/e,CAAA,MACA,KAAA8B,CAAA,CAAA2S,QAAA,CAAAzU,CAAA,IAFiDA,CAAA;UAIjD,IAAAA,CAAA,IAAAoJ,CAAA,CAAAqB,OAAA;YACA,KAAAzK,CAAA,OAA8BA,CAAA,GAAAoJ,CAAA,CAAAqB,OAAA,EAAuBzK,CAAA,IACrD,IAAA8B,CAAA,CAAA2S,QAAA,CAAAzU,CAAA,MACA8B,CAAA,CAAA2S,QAAA,CAAAzU,CAAA,KAAAkH,CAAA,CAAA6X,MAAA,CAAA/e,CAAA;YAEA8B,CAAA,CAAAqT,OAAA,GAAAjV,CAAA;UAAA;QAAA;QAIA,KAAAoB,CAAA,MAAmBA,CAAA,MAAOA,CAAA,IAC1BvB,CAAA,CAAA6d,KAAA,CAAA9d,CAAA,EAAAwB,CAAA;QAQA,KANA,KAAAhC,CAAA,CAAA2G,OAAA,SAAA1G,CAAA,IACAQ,CAAA,CAAAqG,EAAA,IAAAtG,CAAA,EAAAuG,UAAA,IAAA+C,CAAA,CAAA9C,UAAA,IACAvG,CAAA,CAAAqG,EAAA,IAAAtG,CAAA,EAAAuG,UAAA,IAAA+C,CAAA,CAAA9C,UAAA,KArHA,UAAAhH,CAAA,EAAAC,CAAA;UAKA,KAJA,IAAAO,CAAA,EACAC,CAAA,GAAAR,CAAA,CAAA6G,EAAA,IAAA9G,CAAA,GACAU,CAAA,GAAAT,CAAA,CAAA6G,EAAA,IAAA9G,CAAA,GAEAgC,CAAA,MAAuBA,CAAA,GAAAuI,CAAA,CAAAmP,UAAA,CAAApX,MAAA,MAAkCN,CAAA;YACzD,KAAAxB,CAAA,GAAA+J,CAAA,CAAAmP,UAAA,CAAA1X,CAAA,GAA4CxB,CAAA,GAAA+J,CAAA,CAAAmP,UAAA,CAAA1X,CAAA,WAC5CtB,CAAA,CAAAyU,QAAA,CAAA3U,CAAA,KAAAC,CAAA,CAAA0U,QAAA,CAAA3U,CAAA,KACA,KAAAC,CAAA,CAAA0U,QAAA,CAAA3U,CAAA,IAF4EA,CAAA;YAK5E,IAAAA,CAAA,IAAA+J,CAAA,CAAAmP,UAAA,CAAA1X,CAAA;cACA,KAAAxB,CAAA,GAAA+J,CAAA,CAAAmP,UAAA,CAAA1X,CAAA,GAAgDxB,CAAA,GAAA+J,CAAA,CAAAmP,UAAA,CAAA1X,CAAA,OAAgCxB,CAAA,IAChFC,CAAA,CAAA0U,QAAA,CAAA3U,CAAA;cAEAP,CAAA,CAAAqe,KAAA,CAAAte,CAAA,EAAAgC,CAAA;YAAA;UAAA;UAGA,IAAArB,CAAA;YACAM,CAAA;UACA,KAAAT,CAAA,MAAqBA,CAAA,OAAUA,CAAA,KAC/B,KAAAC,CAAA,CAAA0U,QAAA,CAAA3U,CAAA,MAEAS,CAAA,IACAN,CAAA,GAAAF,CAAA,CAAA0U,QAAA,CAAA3U,CAAA,MACAG,CAAA,GAAAF,CAAA,CAAA0U,QAAA,CAAA3U,CAAA;UAIA,KAFA,IAAAgC,CAAA,MACA5B,CAAA,MACcJ,CAAA,GAAAsJ,CAAA,CAAAqB,OAAA,EAAuB3K,CAAA,KACrC,KAAAC,CAAA,CAAA0U,QAAA,CAAA3U,CAAA,MAEAI,CAAA,IACA4B,CAAA,GAAA/B,CAAA,CAAA0U,QAAA,CAAA3U,CAAA,MACAgC,CAAA,GAAA/B,CAAA,CAAA0U,QAAA,CAAA3U,CAAA;UAGA,KAAAwB,CAAA,MAAuBA,CAAA,OAAQA,CAAA,IAC/B,IAAArB,CAAA,GAAA0F,CAAA,CAAArE,CAAA,KAAAQ,CAAA,GAAAT,CAAA,CAAAC,CAAA;YACA,IAAAmB,CAAA,GAAAnC,CAAA,CAAAgB,CAAA,IAAAf,CAAA,GAAAuF,CAAA,CAAAxE,CAAA,IAAApB,CAAA;YACAH,CAAA,CAAAuV,YAAA,GAAA7S,CAAA,KACA1C,CAAA,CAAAuV,YAAA,GAAA7S,CAAA,EACA1C,CAAA,CAAAgV,iBAAA,GAAAzT,CAAA;UAAA;QAAA,CA4EA,CAAAxB,CAAA,EAAAC,CAAA,GACAG,CAAA,OAEAF,CAAA,MAAqBA,CAAA,GAAA8B,CAAA,CAAA4T,MAAA,EAAiB1V,CAAA,KACtC,KAAA8B,CAAA,CAAA2S,QAAA,CAAAzU,CAAA,MACA8B,CAAA,CAAA2S,QAAA,CAAAzU,CAAA;QAIA,KAAAE,CAAA,KACA,KAAAZ,CAAA,CAAA2G,OAAA,GACA,KAAAiZ,cAAA,CAAApd,CAAA,IAEA,KAAAqd,kBAAA,CAAA7f,CAAA,EAAAwC,CAAA;MAAA;MAkBA,IAAAA,CAAA,mCACA;QAOA5B,CAAA,mCACA;QAOAuC,CAAA,2CACA;MAKA,KAAAyc,cAAA,aAAA5f,CAAA;QACA,IAAAC,CAAA;UAAAO,CAAA;UAGAC,CAAA;UAHAC,CAAA;UAAAsB,CAAA;UAIArB,CAAA,GAAAX,CAAA,CAAAmV,QAAA;QAIA,IAFAtL,CAAA,CA1CA,UAAA7J,CAAA,EAAAC,CAAA;UACA,SAAAO,CAAA,MAAuBA,CAAA,GAAAP,CAAA,IAAOO,CAAA,EAC9B,IAAAR,CAAA,CAAAQ,CAAA,OACA;UAEA;QAAA,CAqCA,CAAAG,CAAA,EAAAX,CAAA,CAAAoW,MAAA,IAEApW,CAAA,CAAA+G,UAAA,IAAA+C,CAAA,CAAA9C,UAAA,EACAvG,CAAA,GAAA+B,CAAA,EACA,KAAAxC,CAAA,CAAAoI,gBAAA,KACA3H,CAAA,GAAAG,CAAA,OAGA,IADAH,CAAA,GAAA0C,CAAA,EACA,KAAAnD,CAAA,CAAA6V,OAAA;UACA,KAAArV,CAAA,OAA8BA,CAAA,GAAAsJ,CAAA,CAAAqB,OAAA,MAC9BxK,CAAA,CAAAH,CAAA,IAAAoH,CAAA,CAAA6X,MAAA,CAAAjf,CAAA,IADqDA,CAAA;UAIrD,IAAAA,CAAA,IAAAsJ,CAAA,CAAAqB,OAAA,EAEA,KADAnL,CAAA,CAAA6V,OAAA,MACArV,CAAA,OAAkCA,CAAA,GAAAsJ,CAAA,CAAAqB,OAAA,EAAuB3K,CAAA,IACzDG,CAAA,CAAAH,CAAA,KAAAoH,CAAA,CAAA6X,MAAA,CAAAjf,CAAA;QAAA;QAKA,KAAAA,CAAA,MAAqBA,CAAA,GAAAR,CAAA,CAAAsW,SAAA,EAA0B9V,CAAA,IAC/CE,CAAA,GAAAC,CAAA,CAAAH,CAAA,MACAE,CAAA,GAAAC,CAAA,CAAAH,CAAA;QAEA,OAAcA,CAAA,GAAAR,CAAA,CAAAoW,MAAA,EAAuB5V,CAAA,IACrCwB,CAAA,GAAArB,CAAA,CAAAH,CAAA,MACAwB,CAAA,GAAArB,CAAA,CAAAH,CAAA;QAQA,KADAR,CAAA,CAAAgW,YAAA,GAAAvQ,CAAA,CAAA0Z,UAAA,EACAlf,CAAA,MAAmBA,CAAA,OAAQA,CAAA,IAC3BS,CAAA,GAAA2F,CAAA,CAAApG,CAAA,KAAA+B,CAAA,GAAAD,CAAA,CAAA9B,CAAA,KACAD,CAAA,CAAAgW,YAAA,GAAAvV,CAAA,CAAAR,CAAA,MACAD,CAAA,CAAAgW,YAAA,GAAAvV,CAAA,CAAAR,CAAA,GACAD,CAAA,CAAAyV,iBAAA,GAAAxV,CAAA;QAGA,OAAAD,CAAA,CAAAgW,YAAA,IAAAvQ,CAAA,CAAA0Z,UAAA;MAAA;MAMA,IAAAzX,CAAA,oBACA,+CACA;MASA,KAAAmY,kBAAA,aAAA7f,CAAA,EAAAC,CAAA;QACA,IAAAO,CAAA;UAAAC,CAAA;UAAAC,CAAA;UAAAsB,CAAA;UAAArB,CAAA;UACAM,CAAA;UACAuB,CAAA;UAAA5B,CAAA;UACAuC,CAAA,GAAAgG,CAAA;UAEApI,CAAA,GAAAd,CAAA,CAAAkV,QAAA;QAWA,KAJA3U,CAAA,GADA,KAAAP,CAAA,CAAA4V,OAAA,GACA,IAEA,GAEArT,CAAA,MAAmBA,CAAA,MAAOA,CAAA,IAC1BW,CAAA,CAAAX,CAAA;QAEA,IAAAvC,CAAA,CAAA8G,UAAA,IAAA+C,CAAA,CAAA9C,UAAA;UACAvG,CAAA;UACA,IAAA4F,CAAA,GAAAuB,CAAA,CAAAkY,eAAA,CAAAtf,CAAA,EAAAC,CAAA;UACA,KAAAC,CAAA,GAAAE,CAAA,MAAwCF,CAAA,MAAeA,CAAA,IAEvD,KADAsB,CAAA,GAAAqE,CAAA,CAAA3F,CAAA,OACA8B,CAAA,MAA2BA,CAAA,GAAAR,CAAA,EAAYQ,CAAA,IAAA5B,CAAA,IACvC,KAAAD,CAAA,MAAoCA,CAAA,MAAYA,CAAA,IAChDI,CAAA,KAAAH,CAAA,GAAAD,CAAA,IAAAwC,CAAA,CAAAzC,CAAA,MACAyC,CAAA,CAAAzC,CAAA,IAAAK,CAAA,KAAAH,CAAA,GAAAD,CAAA;QAAA,OAKA,KAFAF,CAAA,MACA4F,CAAA,GAAAuB,CAAA,CAAAkY,eAAA,CAAAtf,CAAA,EAAAC,CAAA,GACAC,CAAA,GAAAE,CAAA,MAAwCF,CAAA,MAAeA,CAAA,IAEvD,KADAsB,CAAA,GAAAqE,CAAA,CAAA3F,CAAA,GACA8B,CAAA,MAA2BA,CAAA,GAAAR,CAAA,EAAYQ,CAAA,IAAA5B,CAAA,IACvCG,CAAA,CAAAH,CAAA,IAAAuC,CAAA,CAAAzC,CAAA,MACAyC,CAAA,CAAAzC,CAAA,IAAAK,CAAA,CAAAH,CAAA;QAIA,KAAAK,CAAA,OAAAP,CAAA,MAAyCA,CAAA,MAAeA,CAAA,IACxDyC,CAAA,CAAAzC,CAAA,IAAAgH,CAAA,CAAAlH,CAAA,EAAAE,CAAA,MACAO,CAAA;QAEA,KAAAA,CAAA;UACA,IAAAqF,CAAA,EAAAvE,CAAA,EAAAf,CAAA,EAAAwF,CAAA;UAGA,KADAvG,CAAA,CAAAwW,mBAAA,GAAA7O,CAAA,CAAAkY,eAAA,CAAAtf,CAAA,EAAAC,CAAA,GACAC,CAAA,MAA+BA,CAAA,MAAeA,CAAA,IAC9CT,CAAA,CAAAyW,IAAA,CAAAhW,CAAA,IAAAiH,CAAA,CAAAxE,CAAA,CAAAzC,CAAA;UAQA,QALA4F,CAAA,GAAArG,CAAA,CAAAyW,IAAA,KACA3U,CAAA,GAAA9B,CAAA,CAAAyW,IAAA,KACA1V,CAAA,GAAAf,CAAA,CAAAyW,IAAA,KACAlQ,CAAA,GAAAvG,CAAA,CAAAyW,IAAA,KAEAlW,CAAA;YACA;cACAP,CAAA,CAAAwV,iBAAA,QAAAnP,CAAA,GAAAvE,CAAA,UACAf,CAAA,SAAAwF,CAAA;cACA;YAEA;cACAvG,CAAA,CAAAwV,iBAAA,cAAAnP,CAAA,GAAAvE,CAAA,SACAf,CAAA;cACA;YAEA;cACAf,CAAA,CAAAwV,iBAAA,aAAAnP,CAAA,GAAAvE,CAAA;cACA;YAEA;cACAkH,CAAA,CAAAgU,GAAA,CAAAyB,MAAA;UAAA;QAAA;QAIA,KAAAzd,CAAA,EAGA,KAFA4I,CAAA,SAAA5J,CAAA,CAAAwW,mBAAA,GAEA/V,CAAA,GADAT,CAAA,CAAA+V,YAAA,MAC+BtV,CAAA,MAAeA,CAAA,IAC9CT,CAAA,CAAA+V,YAAA,IAAA/V,CAAA,CAAAyW,IAAA,CAAAhW,CAAA,IACAT,CAAA,CAAAwW,mBAAA,CAAA/V,CAAA;QAEA,OAAAO,CAAA;MAAA;MAOA,IAAA0G,CAAA,wCACA;MAEA,KAAAoY,YAAA,aAAA/f,CAAA;QACA,SAAAC,CAAA,MAAuBA,CAAA,SAAUA,CAAA;UAEjC,KADA,IAAAO,CAAA,EAAAC,CAAA,MACAT,CAAA,CAAA4R,aAAA,CAAAhR,CAAA,GAAAH,CAAA,IAAAR,CAAA;UAIA,KADAO,CAAA,GAAAE,CAAA,CAAAD,CAAA,MACAT,CAAA,CAAA4R,aAAA,CAAAhR,CAAA,CAAAJ,CAAA,QAAAP,CAAA,GACAO,CAAA;UAcA,KAZAA,CAAA,SAMAA,CAAA,GAAAE,CAAA,CAAAD,CAAA,OAGAT,CAAA,CAAA0Q,MAAA,CAAAzQ,CAAA,QAAAO,CAAA,EAEAA,CAAA,GAAAE,CAAA,CAAAD,CAAA,MACAT,CAAA,CAAA4R,aAAA,CAAAhR,CAAA,CAAAJ,CAAA,GAAAR,CAAA,CAAA0Q,MAAA,CAAAzQ,CAAA,aAAAA,CAAA,GACAO,CAAA;UAEAA,CAAA,SACAA,CAAA,GAAAE,CAAA,CAAAD,CAAA,OAGAT,CAAA,CAAA0Q,MAAA,CAAAzQ,CAAA,QAAAO,CAAA;QAAA;MAAA;IAAA;EAAA,aAAAR,CAAA,EAAAC,CAAA,EAAAO,CAAA;ICxnCA,IAAAwB,CAAA,GAAexB,CAAA,CAAQ;MACvBC,CAAA,GAAaD,CAAA,CAAQ;MAErB+J,CAAA,IADA9J,CAAA,CAAAkD,MAAA,EACAlD,CAAA,CAAAmD,OAAA;MACA6C,CAAA,GAAAhG,CAAA,CAAAoD,KAAA;MAEAsF,CAAA,IADA1I,CAAA,CAAAqD,UAAA,EACArD,CAAA,CAAAsD,IAAA;MAKA6D,CAAA,IAJAnH,CAAA,CAAAuD,MAAA,EACAvD,CAAA,CAAAwD,WAAA,EACAxD,CAAA,CAAA4D,QAAA,EACA5D,CAAA,CAAA8D,UAAA,EACA9D,CAAA,CAAAgE,SAAA;MAEAiD,CAAA,IADAjH,CAAA,CAAAiE,WAAA,EACAjE,CAAA,CAAAkE,OAAA;MAEAkF,CAAA,IADApJ,CAAA,CAAAmE,SAAA,EACAnE,CAAA,CAAAsE,MAAA;MAEAS,CAAA,GAAchF,CAAA,CAAQ;MACtBmH,CAAA,GAAenH,CAAA,CAAQ;MACvB2H,CAAA,GAAwB3H,CAAA,CAAQ;IAOhC,SAAAiF,EAAA;MAEA,IAAA7E,CAAA;QACAI,CAAA;QACAP,CAAA;MAEA,KAAAyF,UAAA,aAAAlG,CAAA,EAAAC,CAAA,EAAAO,CAAA;QACAI,CAAA,GAAAZ,CAAA,EACAgB,CAAA,GAAAf,CAAA,EACAQ,CAAA,GAAAD,CAAA;MAAA,GAQA,KAAAgf,MAAA,aAAAxf,CAAA;QAEA,OADA6J,CAAA,MAAA7J,CAAA,IAAAA,CAAA,GAAAyF,CAAA,CAAAua,KAAA,GACA1Z,CAAA,CAAAtG,CAAA;MAAA;MAMA,IAAA8J,CAAA;QAOA3G,CAAA,GAFAsC,CAAA,CAAAyZ,SAAA,GAEA;QAEAne,CAAA,GAAA0E,CAAA,CAAAua,KAAA;QAaA3Z,CAAA,GAAAZ,CAAA,CAAAwa,MAAA;QAQAvf,CAAA;MASA,KAAAof,eAAA,IACA,4CACA,8CACA,kDACA,iDACA,8CACA;MAKA,IAAA9W,CAAA,iDACA;MACA,KAAAyW,MAAA,GAAAzW,CAAA,EAQA,KAAAkX,WAAA,IAEA,IAAAle,CAAA,6FACA,WACA,2DACA,uBACA,wBAGA,IAAAA,CAAA,6FACA,WACA,2DACA,uBACA,wBAGA,IAAAA,CAAA,6FACA,WACA,2DACA,uBACA,wBAGA,IAAAA,CAAA,+FACA,MACA,0DACA,uBACA,wBAGA,IAAAA,CAAA,+FACA,MACA,0DACA,uBACA,wBAGA,IAAAA,CAAA,gGACA,MACA,2DACA,uBACA,wBAGA,IAAAA,CAAA,6FACA,WACA,2CACA,gBACA,uBACA,wBAGA,IAAAA,CAAA,6FACA,WACA,2CACA,gBACA,uBACA,wBAGA,IAAAA,CAAA,6FACA,gBACA,8CACA,gBACA,uBACA;MAIA,IAAAiH,CAAA,GAAArB,CAAA,CAAA7G,CAAA,GAAAsF,CAAA;QACAC,CAAA,GAAAsB,CAAA,CAAA7G,CAAA;QACAgB,CAAA,GAAA6F,CAAA,CAAAzE,CAAA;QAEAqD,CAAA,GAAAoB,CAAA,CAAAzE,CAAA;MA2BA,SAAArC,EAAAd,CAAA,EAAAC,CAAA;QACA,IAAAO,CAAA,GAAAC,CAAA,CAAA0f,UAAA,CAAAlgB,CAAA,EAAAD,CAAA;QAMA,OAJAQ,CAAA,IAAAE,CAAA,EAGAF,CAAA,GAAAoC,IAAA,CAAAwd,GAAA,KAAA5f,CAAA,QAAAR,CAAA,CAAAqgB,QAAA;MAAA;MA8dA,SAAAnX,EAAAlJ,CAAA;QACA,KAAAgC,CAAA,GAAAhC,CAAA;MAAA;MA/fA,KAAAif,KAAA,GAAAzY,CAAA,EA0HA,KAAA8Z,cAAA,aAAAtgB,CAAA;QACA,IAEAC,CAAA;UAFAO,CAAA,GAAAR,CAAA,CAAAuG,cAAA;UACA9F,CAAA,GAAAD,CAAA,CAAAqG,OAAA;QAGA,SAAArG,CAAA,CAAAwO,mBAAA;UAOA,KANAxO,CAAA,CAAAwO,mBAAA,MAEAvO,CAAA,CAAA+c,eAAA,MA9FA,UAAAxd,CAAA;YAQA,KAPA,IAAAC,CAAA,GAAAD,CAAA,CAAAuG,cAAA,CAAA+B,GAAA,CAAA1H,CAAA,EACAJ,CAAA,GAAAR,CAAA,CAAAuG,cAAA,CAAA+B,GAAA,CAAAyR,MAAA,EACAtZ,CAAA,GAAAT,CAAA,CAAAuG,cAAA,CAAA+B,GAAA,CAAAtG,CAAA,EACAtB,CAAA,GAAAV,CAAA,CAAAuG,cAAA,CAAA+B,GAAA,CAAA0R,MAAA,EACAhY,CAAA,GAAAhC,CAAA,CAAAuG,cAAA,EACA5F,CAAA,GAAAX,CAAA,CAAAwH,cAAA,EAEAvG,CAAA,MAAyBA,CAAA,GAAAuE,CAAA,CAAA6F,OAAA,EAAuBpK,CAAA;cAChD,IAAAuB,CAAA,GAAAR,CAAA,CAAA4P,aAAA,CAAAhR,CAAA,CAAAK,CAAA;gBACAL,CAAA,GAAAoB,CAAA,CAAA4P,aAAA,CAAAhR,CAAA,CAAAK,CAAA;cACAhB,CAAA,CAAAgB,CAAA,IAAAwF,CAAA,CAAArD,SAAA;cACA,SAAAD,CAAA,GAAAX,CAAA,EAA+BW,CAAA,GAAAvC,CAAA,EAASuC,CAAA;gBACxC,IACApC,CAAA,GAAAD,CAAA,CAAAd,CAAA,EADAmD,CAAA,GAAAxC,CAAA;gBAGAV,CAAA,CAAAgB,CAAA,IAAA2B,IAAA,CAAAyX,GAAA,CAAApa,CAAA,CAAAgB,CAAA,GAAAF,CAAA;cAAA;YAAA;YAIA,KAAAE,CAAA,MAAyBA,CAAA,GAAAuE,CAAA,CAAA+F,MAAA,EAAsBtK,CAAA,IAI/C,KAHAuB,CAAA,GAAAR,CAAA,CAAA4P,aAAA,CAAAmI,MAAA,CAAA9Y,CAAA,GACAL,CAAA,GAAAoB,CAAA,CAAA4P,aAAA,CAAAmI,MAAA,CAAA9Y,CAAA,OACAT,CAAA,CAAAS,CAAA,IAAAwF,CAAA,CAAArD,SAAA,EACAD,CAAA,GAAAX,CAAA,EAA+BW,CAAA,GAAAvC,CAAA,EAASuC,CAAA,IAExCpC,CAAA,GAAAD,CAAA,CAAAd,CAAA,EADAmD,CAAA,GAAAxC,CAAA,UAGAH,CAAA,CAAAS,CAAA,IAAA2B,IAAA,CAAAyX,GAAA,CAAA7Z,CAAA,CAAAS,CAAA,GAAAF,CAAA;YAIA,KAAAE,CAAA,MAAyBA,CAAA,GAAAuE,CAAA,CAAA8F,OAAA,EAAuBrK,CAAA;cAIhD,KAHAuB,CAAA,GAAAR,CAAA,CAAA4P,aAAA,CAAA5P,CAAA,CAAAf,CAAA,GACAL,CAAA,GAAAoB,CAAA,CAAA4P,aAAA,CAAA5P,CAAA,CAAAf,CAAA,OACAR,CAAA,CAAAQ,CAAA,IAAAwF,CAAA,CAAArD,SAAA,EACAD,CAAA,GAAAX,CAAA,EAA+BW,CAAA,GAAAvC,CAAA,EAASuC,CAAA,IAExCpC,CAAA,GAAAD,CAAA,CAAAd,CAAA,EADAmD,CAAA,GAAAxC,CAAA,SAGAF,CAAA,CAAAQ,CAAA,IAAA2B,IAAA,CAAAyX,GAAA,CAAA5Z,CAAA,CAAAQ,CAAA,GAAAF,CAAA;cAEAN,CAAA,CAAAQ,CAAA,KAAAe,CAAA,CAAA4P,aAAA,CAAA5P,CAAA,CAAAf,CAAA,QAAAe,CAAA,CAAA4P,aAAA,CAAA5P,CAAA,CAAAf,CAAA;YAAA;YAGA,KAAAA,CAAA,MAAyBA,CAAA,GAAAuE,CAAA,CAAAgG,MAAA,EAAsBvK,CAAA;cAI/C,KAHAuB,CAAA,GAAAR,CAAA,CAAA4P,aAAA,CAAAoI,MAAA,CAAA/Y,CAAA,GACAL,CAAA,GAAAoB,CAAA,CAAA4P,aAAA,CAAAoI,MAAA,CAAA/Y,CAAA,OACAP,CAAA,CAAAO,CAAA,IAAAwF,CAAA,CAAArD,SAAA,EACAD,CAAA,GAAAX,CAAA,EAA+BW,CAAA,GAAAvC,CAAA,EAASuC,CAAA,IAExCpC,CAAA,GAAAD,CAAA,CAAAd,CAAA,EADAmD,CAAA,GAAAxC,CAAA,SAGAD,CAAA,CAAAO,CAAA,IAAA2B,IAAA,CAAAyX,GAAA,CAAA3Z,CAAA,CAAAO,CAAA,GAAAF,CAAA;cAGAL,CAAA,CAAAO,CAAA,KAAAe,CAAA,CAAA4P,aAAA,CAAA5P,CAAA,OAAAA,CAAA,CAAA4P,aAAA,CAAA5P,CAAA;YAAA;YAMA,IAAAhC,CAAA,CAAAugB,KAAA;cACA,KAAAtf,CAAA,MAA6BA,CAAA,GAAAuE,CAAA,CAAA6F,OAAA,EAAuBpK,CAAA,IACpDhB,CAAA,CAAAgB,CAAA;cAEA,KAAAA,CAAA,MAA6BA,CAAA,GAAAuE,CAAA,CAAA+F,MAAA,EAAsBtK,CAAA,IACnDT,CAAA,CAAAS,CAAA;cAEA,KAAAA,CAAA,MAA6BA,CAAA,GAAAuE,CAAA,CAAA8F,OAAA,EAAuBrK,CAAA,IACpDR,CAAA,CAAAQ,CAAA;cAEA,KAAAA,CAAA,MAA6BA,CAAA,GAAAuE,CAAA,CAAAgG,MAAA,EAAsBvK,CAAA,IACnDP,CAAA,CAAAO,CAAA;YAAA;YAOAe,CAAA,CAAAsG,GAAA,CAAAqV,KAAA,QAAA/a,IAAA,CAAAC,KAAA,CAAA/B,CAAA,CAAAd,CAAA;UAAA,CAeA,CAAAA,CAAA,GAEA+B,CAAA,SACA9B,CAAA,MAAuBA,CAAA,GAAAkD,CAAA,EAAkBlD,CAAA,IACzC8B,CAAA,CAAA9B,CAAA,IAAA2C,IAAA,CAAAwd,GAAA,CAAAngB,CAAA;UAEA,KAAAA,CAAA,MAAuBA,CAAA,GAAAkD,CAAA,MAAsBlD,CAAA,IAC7CuG,CAAA,CAAAvG,CAAA,IAAAA,CAAA,OAAA2C,IAAA,CAAAwd,GAAA,CACA,MAAAre,CAAA,CAAA9B,CAAA,IAAA8B,CAAA,CAAA9B,CAAA;UAGA,KAFAuG,CAAA,CAAAvG,CAAA,QAEAA,CAAA,MAAuBA,CAAA,GAAAc,CAAA,EAAWd,CAAA,IAClCqG,CAAA,CAAArG,CAAA,IAAA2C,IAAA,CAAAwd,GAAA,cAAAngB,CAAA;UACA,KAAAA,CAAA,MAAuBA,CAAA,IAAAc,CAAA,GAAAsF,CAAA,EAAqBpG,CAAA,IAC5CgJ,CAAA,CAAAhJ,CAAA,IAAA2C,IAAA,CAAAwd,GAAA,WAAAngB,CAAA,SAAAoG,CAAA;UAKA,IAAA3F,CAAA,EAAAsB,CAAA,EAAArB,CAAA,EAAAM,CAAA;UAyBA,KA5BAL,CAAA,CAAAmf,YAAA,CAAAvf,CAAA,GAMA,OADAP,CAAA,GAAAD,CAAA,CAAAwgB,aAAA,gBAEAvgB,CAAA,SACAS,CAAA,GAAAkC,IAAA,CAAAwd,GAAA,KAAAngB,CAAA,YAGA,OADAA,CAAA,GAAAD,CAAA,CAAAwgB,aAAA,gBAEAvgB,CAAA,SACA+B,CAAA,GAAAY,IAAA,CAAAwd,GAAA,KAAAngB,CAAA,YAGA,OADAA,CAAA,GAAAD,CAAA,CAAAwgB,aAAA,iBAEAvgB,CAAA,SACAU,CAAA,GAAAiC,IAAA,CAAAwd,GAAA,KAAAngB,CAAA,YAOA,OADAA,CAAA,GAAAD,CAAA,CAAAwgB,aAAA,iBAEAvgB,CAAA,SACAgB,CAAA,GAAAN,CAAA,GAAAiC,IAAA,CAAAwd,GAAA,KAAAngB,CAAA,YACAA,CAAA,MAA2BA,CAAA,GAAAuF,CAAA,CAAA6F,OAAA,EAAqBpL,CAAA;YAGhDuC,CAAA,GADAvC,CAAA,QACAS,CAAA,GACAT,CAAA,SACA+B,CAAA,GACA/B,CAAA,SACAU,CAAA,GAEAM,CAAA,EAEAT,CAAA,CAAAuJ,KAAA,CAAA0W,QAAA,CAAAxgB,CAAA,IAAAuC,CAAA;UAAA;UAEA,KAAAvC,CAAA,MAA2BA,CAAA,GAAAuF,CAAA,CAAA8F,OAAA,EAAqBrL,CAAA;YAChD,IAAAuC,CAAA;YAEAA,CAAA,GADAvC,CAAA,QACAS,CAAA,GACAT,CAAA,SACA+B,CAAA,GACA/B,CAAA,SACAU,CAAA,GAEAM,CAAA,EAEAT,CAAA,CAAAuJ,KAAA,CAAA2W,SAAA,CAAAzgB,CAAA,IAAAuC,CAAA;UAAA;QAAA;MAAA,GAWA,KAAAme,KAAA,aAAA3gB,CAAA,EAAAC,CAAA,EACAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA;QACA,IACArB,CAAA;UAEAM,CAAA;UAHAuB,CAAA,GAAAxC,CAAA,CAAAuG,cAAA;UACA3F,CAAA;UACAuC,CAAA,GAAAuE,CAAA;UAIA3G,CAAA,OAAA4G,CAAA,CAAA/G,CAAA;UACAyF,CAAA,GAAArF,CAAA,CAAA4f,WAAA,CAAA5gB,CAAA,EAAAS,CAAA,EAAAM,CAAA,EAAAiB,CAAA;UAGAsE,CAAA,IAFA1F,CAAA,GAAAG,CAAA,CAAA0b,IAAA,IAEApW,CAAA;QAKA,KAJAC,CAAA,GAAA6B,CAAA,CAAA8M,oBAAA,KAEA3O,CAAA,GAAA6B,CAAA,CAAA8M,oBAAA,GAEAhU,CAAA,GAAAN,CAAA,MAA8BM,CAAA,GAAAuB,CAAA,CAAAoE,YAAA,IAAuB3F,CAAA,EAIrDT,CAAA,CAAAS,CAAA,IAAA2B,IAAA,CAAAyX,GAAA,CAAAlS,CAAA,CAAA6M,oBAAA,EACApU,CAAA,GAAA4B,CAAA,CAAAoE,YAAA,GAEAzD,CAAA,CAAAlC,CAAA,QAAAT,CAAA,CAAAS,CAAA,IAAAhB,CAAA,CAAAS,CAAA,EAAAO,CAAA,UAAAT,CAAA,CAAAS,CAAA,GAGAkC,CAAA,CAAAlC,CAAA,QAAAR,CAAA,SACA0C,CAAA,CAAAlC,CAAA,QAAAR,CAAA,OACA0C,CAAA,CAAAlC,CAAA,UACAkC,CAAA,CAAAlC,CAAA,QAEAkC,CAAA,CAAAlC,CAAA,IAAAT,CAAA,CAAAS,CAAA,IAAAkH,CAAA,CAAA6M,oBAAA,KACA7R,CAAA,CAAAlC,CAAA,IAAA2B,IAAA,CAAA6F,GAAA,IACAN,CAAA,CAAA6M,oBAAA,GAAAxU,CAAA,CAAAS,CAAA,KAEAN,CAAA,IAAAwC,CAAA,CAAAlC,CAAA;QAEA,IAAAoF,CAAA,GAAA1F,CAAA,EACA,KAAAM,CAAA,MAAwBA,CAAA,GAAAuB,CAAA,CAAAoE,YAAA,IAAuB3F,CAAA,EAC/CkC,CAAA,CAAAlC,CAAA,IAAAoF,CAAA,GAAAlD,CAAA,CAAAlC,CAAA,IAAAN,CAAA;QAIA,KAAAM,CAAA,MAAoBA,CAAA,GAAAuB,CAAA,CAAAoE,YAAA,IAAuB3F,CAAA,EAC3CT,CAAA,CAAAS,CAAA,KAAAkC,CAAA,CAAAlC,CAAA,GACAoF,CAAA,IAAAlD,CAAA,CAAAlC,CAAA;QAGA,KAAAA,CAAA,GAAAN,CAAA,MAA8BM,CAAA,GAAAuB,CAAA,CAAAoE,YAAA,IAAuB3F,CAAA,EACrDN,CAAA,IAAAH,CAAA,CAAAS,CAAA;QAEA,IAAAN,CAAA,GAAAwH,CAAA,CAAA8M,oBAAA;UACA,IAAAlT,CAAA;UACA,KAAAd,CAAA,MAAwBA,CAAA,GAAAuB,CAAA,CAAAoE,YAAA,IAAuB3F,CAAA,EAC/CT,CAAA,CAAAS,CAAA,KAAAkH,CAAA,CAAA8M,oBAAA,EACAzU,CAAA,CAAAS,CAAA,KAAAN,CAAA,EACAoB,CAAA,IAAAvB,CAAA,CAAAS,CAAA;UAEA4I,CAAA,CAAA9H,CAAA,IAAAoG,CAAA,CAAA8M,oBAAA;QAAA;QAGA,OAAA3O,CAAA;MAAA,GAGA,KAAAua,WAAA,aAAA7gB,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA;QACAoJ,CAAA,CAAApJ,CAAA,IAAA0H,CAAA,CAAA8M,oBAAA,GACApL,CAAA,CAAA7J,CAAA,MAAAA,CAAA,OAAAmI,CAAA,CAAA8M,oBAAA;QAOA,IAAAvU,CAAA,eAAAT,CAAA;QACAS,CAAA,SACAA,CAAA,OACA,KAAAA,CAAA,KACAA,CAAA;QAIA,IAAAsB,CAAA,YAAAtB,CAAA,IAAAV,CAAA,MAAAA,CAAA;QAEAgC,CAAA,GAAAmG,CAAA,CAAA6M,oBAAA,GAAAhV,CAAA,QACAgC,CAAA,GAAAmG,CAAA,CAAA6M,oBAAA,GAAAhV,CAAA,MAEAgC,CAAA,SACAA,CAAA,OAEA,OAAAhC,CAAA,QAEA,MAAAA,CAAA,MAAAgC,CAAA,IAIAhC,CAAA,MAAAQ,CAAA,KACAR,CAAA,OAAAgC,CAAA,GACAhC,CAAA,OAAAgC,CAAA,KAEAhC,CAAA,OAAAA,CAAA,WACAA,CAAA,aAKAS,CAAA,IADAuB,CAAA,GAAAhC,CAAA,MAAAA,CAAA,SAEAA,CAAA,MAAAS,CAAA,GAAAT,CAAA,MAAAgC,CAAA,EACAhC,CAAA,MAAAS,CAAA,GAAAT,CAAA,MAAAgC,CAAA,GAEA6H,CAAA,CAAA7J,CAAA,OAAAmI,CAAA,CAAA6M,oBAAA,GACAnL,CAAA,CAAA7J,CAAA,OAAAmI,CAAA,CAAA6M,oBAAA,GACAnL,CAAA,CAAA7J,CAAA,MAAAA,CAAA,OAAAmI,CAAA,CAAA8M,oBAAA;MAAA,GAQA,KAAA6L,SAAA,aAAA9gB,CAAA,EAAAC,CAAA,EAAAO,CAAA;QAIA,IAAAC,CAAA;UAEAC,CAAA,GAAAyI,CAAA,CAAArG,YAAA,CAAA7C,CAAA;UACA+B,CAAA,GAAAhC,CAAA,GAAAA,CAAA;UACAW,CAAA;QAWA,OAVAD,CAAA,IAAAF,CAAA,EAEA,QAAAwB,CAAA,KACArB,CAAA,OAAAwI,CAAA,CAAArG,YAAA,CAAAd,CAAA,OAAAvB,CAAA,IACAE,CAAA,SACAA,CAAA,OACAD,CAAA,IAAAC,CAAA,EACAD,CAAA,IAAAF,CAAA,GAAAC,CAAA,GAXA,aAcAmC,IAAA,CAAAwd,GAAA,UAAA1f,CAAA;MAAA,GASA,KAAAqgB,SAAA,aAAA/gB,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA;QACA,IAEAC,CAAA;UAFAsB,CAAA;UACArB,CAAA,GAAAX,CAAA,CAAAuG,cAAA;UACAtF,CAAA;UAAAuB,CAAA;UACA5B,CAAA,GAAAD,CAAA,CAAA2H,GAAA;UACAnF,CAAA,GAAA3C,CAAA,CAAAkJ,EAAA;UACA3I,CAAA,GAAAf,CAAA,CAAA6H,GAAA,IAAA0C,CAAA,CAAA9G,QAAA;UACA4C,CAAA,GAAA1F,CAAA,CAAA8P,aAAA;QAOA,KALAzQ,CAAA,CAAA6H,GAAA,IAAA0C,CAAA,CAAA9G,QAAA,IAAAzD,CAAA,CAAA6H,GAAA,IAAA0C,CAAA,CAAAjH,MAAA,KAEA+C,CAAA,OAGA3F,CAAA,MAAsBA,CAAA,GAAAF,CAAA,CAAA2V,QAAA,EAA0BzV,CAAA;UAWhDiH,CAAA,IALAD,CAAA,GADA1H,CAAA,CAAA6H,GAAA,IAAA0C,CAAA,CAAAhH,MAAA,IAAAvD,CAAA,CAAA6H,GAAA,IAAA0C,CAAA,CAAA9G,QAAA,GACAqd,SAAA,CAAAlgB,CAAA,CAAA+H,MAAA,EAAA/H,CAAA,CAAAA,CAAA,CAAAF,CAAA,GAAAE,CAAA,CAAA+c,KAAA,IAEA/c,CAAA,CAAA+H,MAAA,GAAA/H,CAAA,CAAAA,CAAA,CAAAF,CAAA,MAEA8F,CAAA,GAAAhG,CAAA,CAAA+V,KAAA,CAAA7V,CAAA,IAEAkH,CAAA,GAAAkC,CAAA,EACAZ,CAAA,GAAA1C,CAAA,OACAyC,CAAA;UACA;YAGAA,CAAA,IADAE,CAAA,GAAAhG,CAAA,CAAAlC,CAAA,IAAAkC,CAAA,CAAAlC,CAAA,GAEA2G,CAAA,IAAAuB,CAAA,GAAAxB,CAAA,GAAAwB,CAAA,GAAAxB,CAAA,EAGAsB,CAAA,IADAY,CAAA,GAAA1G,CAAA,GADAlC,CAAA,IACAkC,CAAA,CAAAlC,CAAA,GAEA2G,CAAA,IAAAiC,CAAA,GAAAlC,CAAA,GAAAkC,CAAA,GAAAlC,CAAA,EACA1G,CAAA;UAAA,SACa,MAAAiI,CAAA;UAIb,IAHAxB,CAAA,GAAAuB,CAAA,IACAzG,CAAA,IAEA9B,CAAA,IAAA8E,CAAA,CAAA2F,OAAA,EAEAvD,CAAA,IADAoB,CAAA,GAAAtB,CAAA,GAAA/G,CAAA,CAAAoJ,KAAA,CAAA0W,QAAA,CAAA/f,CAAA,OAEAkH,CAAA,GAAAoB,CAAA;UAMA,IAHA,KAAAjI,CAAA,KACA2G,CAAA,GAAAE,CAAA,IAEA5H,CAAA,CAAAghB,OAAA,EAEA,SADA7Y,CAAA,GAAAlI,CAAA,CAAAsS,EAAA,CAAA3R,CAAA,CAAAF,CAAA,IAGAsI,CAAA,GAAAC,CAAA,GAAAhJ,CAAA,CAAAqS,GAAA,CAAA1R,CAAA,CAAAF,CAAA,IAAA2F,CAAA,GAAA8B,CAAA,EACA,KAAApH,CAAA,KACAiI,CAAA,IAAArI,CAAA,CAAAoJ,KAAA,CAAA0W,QAAA,CAAA/f,CAAA,IACAgH,CAAA,GAAAsB,CAAA,KACAtB,CAAA,GAAAsB,CAAA;UAIAvI,CAAA,CAAAuB,CAAA,MADA,KAAAjB,CAAA,GACA2G,CAAA,GAEAA,CAAA,GAAA/G,CAAA,CAAAoJ,KAAA,CAAA0W,QAAA,CAAA/f,CAAA;QAAA;QAKA,IAAA4F,CAAA;QACA,IAAA9F,CAAA,CAAAuG,UAAA,IAAAvB,CAAA,CAAAwB,UAAA,EAGA,KADA,IAAAjF,CAAA,QACA,KAAAA,CAAA,MAAAkf,SAAA,CAAArD,EAAA,CAAAza,CAAA,CAAApB,CAAA,QACAuE,CAAA,GAAAvE,CAAA;QAGAvB,CAAA,CAAAmW,iBAAA,GAAArQ,CAAA;QAEA,SAAAtF,CAAA,GAAAR,CAAA,CAAA0V,QAAA,EAAyCxV,CAAA,GAAAF,CAAA,CAAA6V,MAAA,EAAwBrV,CAAA,IAAAN,CAAA;UACjE,IAAA8F,CAAA,EAAA1F,CAAA,EACA2F,CAAA;UAOA,KALAA,CAAA,GADAzG,CAAA,CAAA6H,GAAA,IAAA0C,CAAA,CAAAhH,MAAA,IAAAvD,CAAA,CAAA6H,GAAA,IAAA0C,CAAA,CAAA9G,QAAA,GACAqd,SAAA,CAAAlgB,CAAA,CAAA+H,MAAA,EAAA/H,CAAA,CAAAoB,CAAA,CAAAhB,CAAA,GAAAJ,CAAA,CAAA+c,KAAA,IAEA/c,CAAA,CAAA+H,MAAA,GAAA/H,CAAA,CAAAoB,CAAA,CAAAhB,CAAA,GAEAwF,CAAA,GAAAhG,CAAA,CAAA+V,KAAA,CAAA7V,CAAA,GACAI,CAAA,MAAuBA,CAAA,MAAOA,CAAA;YAC9B,IAAA4G,CAAA;cACAC,CAAA;cAAAC,CAAA;cA8BAO,CAAA;cAEAa,CAAA;cAjCAC,CAAA;cAEAC,CAAA,GAAA1C,CAAA;YAEAmB,CAAA,GAAAlB,CAAA,GAAAD,CAAA,EACAoB,CAAA,GAAAkC,CAAA;YACA;cACA,IAAAX,CAAA,EAAAU,CAAA;cAEAZ,CAAA,IADAE,CAAA,GAAAhG,CAAA,CAAAlC,CAAA,IAAAkC,CAAA,CAAAlC,CAAA,GAEA2G,CAAA,IAAAuB,CAAA,GAAAxB,CAAA,GAAAwB,CAAA,GAAAxB,CAAA,EAGAsB,CAAA,IADAY,CAAA,GAAA1G,CAAA,GADAlC,CAAA,IACAkC,CAAA,CAAAlC,CAAA,GAEA2G,CAAA,IAAAiC,CAAA,GAAAlC,CAAA,GAAAkC,CAAA,GAAAlC,CAAA,EACA1G,CAAA;YAAA,SACiB,MAAAiI,CAAA;YAGjB,IAFAzC,CAAA,GAAAwC,CAAA,IACAzG,CAAA,IACAxB,CAAA,IAAAwE,CAAA,CAAA4F,OAAA,EAEAxD,CAAA,IADAoB,CAAA,GAAAvC,CAAA,GAAA9F,CAAA,CAAAoJ,KAAA,CAAA2W,SAAA,CAAA1f,CAAA,OAEA4G,CAAA,GAAAoB,CAAA;YAQA,IAJAtB,CAAA,GADA,KAAA3G,CAAA,GACA6G,CAAA,GAEAnB,CAAA,GAEAzG,CAAA,CAAAghB,OAAA,KAAAhhB,CAAA,CAAAkhB,QAAA,EAEA,SADA/Y,CAAA,GAAAlI,CAAA,CAAAsS,EAAA,CAAAvQ,CAAA,CAAAhB,CAAA,EAAAF,CAAA,IAGAkI,CAAA,GAAAC,CAAA,GAAAhJ,CAAA,CAAAqS,GAAA,CAAAtQ,CAAA,CAAAhB,CAAA,EAAAF,CAAA,IAAAuF,CAAA,GAAA8B,CAAA,EACA,KAAApH,CAAA,KACAiI,CAAA,IAAArI,CAAA,CAAAoJ,KAAA,CAAA2W,SAAA,CAAA1f,CAAA,IACA0G,CAAA,GAAAsB,CAAA,KACAtB,CAAA,GAAAsB,CAAA;YAIAvI,CAAA,CAAAuB,CAAA,MADA,KAAAjB,CAAA,GACA2G,CAAA,GAEAA,CAAA,GAAA/G,CAAA,CAAAoJ,KAAA,CAAA2W,SAAA,CAAA1f,CAAA;UAAA;UAGAhB,CAAA,CAAAmhB,WAAA,KACA1gB,CAAA,CAAAuB,CAAA,QAAAvB,CAAA,CAAAuB,CAAA,cACAvB,CAAA,CAAAuB,CAAA,cAAAvB,CAAA,CAAAuB,CAAA,QAAAvB,CAAA,CAAAuB,CAAA,aACArB,CAAA,CAAA0R,KAAA,GACA5R,CAAA,CAAAuB,CAAA,YAAAvB,CAAA,CAAAuB,CAAA,cACAvB,CAAA,CAAAuB,CAAA,cAAAvB,CAAA,CAAAuB,CAAA,YAAAvB,CAAA,CAAAuB,CAAA,aACArB,CAAA,CAAA0R,KAAA;QAAA;QAKA,OAAA7P,CAAA;MAAA,GAOA,KAAA4e,eAAA,aAAAphB,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA;QACA,IAAAC,CAAA;UACAsB,CAAA,GAAA/B,CAAA,CAAA+B,CAAA;UACArB,CAAA,GAAAX,CAAA,CAAAkV,MAAA;QAEA,IAAAlT,CAAA,GAAAhC,CAAA,CAAAuV,MAAA,EACA,YAAA/U,CAAA;UAEAgC,CAAA,GAAAxC,CAAA,CAAA0J,EAAA,CAAA1H,CAAA,GACAA,CAAA,IACAtB,CAAA,IAAA8B,CAAA,GAAAA,CAAA,EACAA,CAAA,GAAAxC,CAAA,CAAA0J,EAAA,CAAA1H,CAAA,GACAA,CAAA,IACAtB,CAAA,IAAA8B,CAAA,GAAAA,CAAA;QAAA,OAES,IAAAR,CAAA,GAAAhC,CAAA,CAAAsV,UAAA;UACT,IAAArU,CAAA,GAAA2G,CAAA;UAGA,KAFA3G,CAAA,SACAA,CAAA,MAAAR,CAAA,EACA,KAAAD,CAAA;YAEAgC,CAAA,GAAAI,IAAA,CAAAmc,GAAA,CAAA/e,CAAA,CAAA0J,EAAA,CAAA1H,CAAA,KAAAf,CAAA,CAAAN,CAAA,CAAAqB,CAAA,IACAA,CAAA,IACAtB,CAAA,IAAA8B,CAAA,GAAAA,CAAA,EACAA,CAAA,GAAAI,IAAA,CAAAmc,GAAA,CAAA/e,CAAA,CAAA0J,EAAA,CAAA1H,CAAA,KAAAf,CAAA,CAAAN,CAAA,CAAAqB,CAAA,IACAA,CAAA,IACAtB,CAAA,IAAA8B,CAAA,GAAAA,CAAA;UAAA;QAAA,OAGA,YAAAhC,CAAA;UACA,IAAAgC,CAAA;UACAA,CAAA,GAAAI,IAAA,CAAAmc,GAAA,CAAA/e,CAAA,CAAA0J,EAAA,CAAA1H,CAAA,KAAAD,CAAA,CAAApB,CAAA,CAAAqB,CAAA,KAAAvB,CAAA,EACAuB,CAAA,IACAtB,CAAA,IAAA8B,CAAA,GAAAA,CAAA,EACAA,CAAA,GAAAI,IAAA,CAAAmc,GAAA,CAAA/e,CAAA,CAAA0J,EAAA,CAAA1H,CAAA,KAAAD,CAAA,CAAApB,CAAA,CAAAqB,CAAA,KAAAvB,CAAA,EACAuB,CAAA,IACAtB,CAAA,IAAA8B,CAAA,GAAAA,CAAA;QAAA;QAKA,OADAvC,CAAA,CAAA+B,CAAA,GAAAA,CAAA,EACAtB,CAAA;MAAA,GAkBA,KAAA2gB,UAAA,aAAArhB,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA;QACA,IAEAsB,CAAA;UAAArB,CAAA;UAntBAM,CAAA;UAitBAuB,CAAA;UACA5B,CAAA;UACAuC,CAAA;UACApC,CAAA;UAEAsF,CAAA;UAEAC,CAAA;UACAvE,CAAA;UACAf,CAAA,GAAAhB,CAAA,CAAAmV,QAAA;UACA3O,CAAA;QAIA,KAAAxE,CAAA,GAFAvB,CAAA,CAAA6gB,QAAA,MAEqBtf,CAAA,GAAAhC,CAAA,CAAAqW,MAAA,EAAuBrU,CAAA;UAC5C,IA0DAlB,CAAA;YA1DA2F,CAAA,GAAAzG,CAAA,CAAAwV,WAAA,IACAxU,CAAA,CAAAwF,CAAA,YAAAxG,CAAA,CAAA6V,OAAA,GAAA7M,CAAA,CAAAhH,CAAA,IACA,MAAAhC,CAAA,CAAA8V,cAAA,QACA,IAAA9V,CAAA,CAAAkQ,aAAA,CAAAlQ,CAAA,CAAAO,MAAA,CAAAyB,CAAA;YACA0F,CAAA;UAEA,YAAAhH,CAAA,IAAAA,CAAA,CAAAgf,IAAA,CAAA1d,CAAA,KAAAyE,CAAA,EAGAiB,CAAA,GAAAhH,CAAA,CAAA6gB,KAAA,CAAAvf,CAAA,GACAD,CAAA,IAAA/B,CAAA,CAAAuW,KAAA,CAAAvU,CAAA,GACAxB,CAAA,CAAAgC,CAAA,MAAAkF,CAAA,GAAAzH,CAAA,CAAAW,CAAA,KAEA8G,CAAA,GAAAhH,CAAA,CAAA8gB,SAAA,CAAAxf,CAAA,OAEa;YACb,IAIA2F,CAAA;cAJAC,CAAA,IA/uBAiC,CAAA,OADA5I,CAAA,GAgvBAwF,CAAA,IA/uBAhB,CAAA,CAAAwa,MAAA,IAAAhf,CAAA,GAAAwE,CAAA,CAAAua,KAAA,GACA/W,CAAA,CAAAhI,CAAA,GAAAwE,CAAA,CAAAwa,MAAA;YAivBA,IAFAtf,CAAA,GAAAX,CAAA,CAAAuW,KAAA,CAAAvU,CAAA,QAEAD,CAAA,GAAA/B,CAAA,CAAAuW,KAAA,CAAAvU,CAAA,IAAAhC,CAAA,CAAA2W,iBAAA,EAKAhW,CAAA,GADA,KAFAgH,CAAA,GAAA3H,CAAA,CAAA2W,iBAAA,GAAA5U,CAAA,QAGA4F,CAAA,QAEA;YAGA,IAAAQ,CAAA,OAAAe,CAAA,CAAAnH,CAAA;YACA2F,CAAA,QAAA0Z,eAAA,CAAAphB,CAAA,EAAAmI,CAAA,EAAAxH,CAAA,EAAAiH,CAAA,GACA7F,CAAA,GAAAoG,CAAA,CAAAnG,CAAA,EAEA,QAAAtB,CAAA,KAEAA,CAAA,CAAAgf,IAAA,CAAA1d,CAAA,IAAAyE,CAAA,EACA/F,CAAA,CAAA6gB,KAAA,CAAAvf,CAAA,IAAA0F,CAAA,GAGAA,CAAA,GAAAlH,CAAA,CAAAgC,CAAA,MAAAkF,CAAA,GAAAzH,CAAA,CAAAW,CAAA,KAGA8G,CAAA,GAAAyB,CAAA,CAAAxG,UAAA,CAAAC,IAAA,CAAA6F,GAAA,CAAAf,CAAA,WAEA,QAAAhH,CAAA,KAEAA,CAAA,CAAA8gB,SAAA,CAAAxf,CAAA,IAAA0F,CAAA;UAAA;UAWA,IAPA,QAAAhH,CAAA,KAEAA,CAAA,CAAA8U,WAAA,GAAAxV,CAAA,CAAAwV,WAAA,GAGAnP,CAAA,IAAAqB,CAAA,EAEA,IAAAA,CAAA,EAGA5G,CAAA,GAAA8B,IAAA,CAAA6F,GAAA,UAAAf,CAAA,WACAjH,CAAA,CAAA6gB,QAAA,IAAAxgB,CAAA,GAAAA,CAAA,EAEAqC,CAAA,IAGApC,CAAA,IAAA2G,CAAA;UAEApB,CAAA,GAAA1D,IAAA,CAAA6F,GAAA,CAAAnC,CAAA,EAAAoB,CAAA;QAAA;QASA,OALAjH,CAAA,CAAAghB,UAAA,GAAAte,CAAA,EACA1C,CAAA,CAAAihB,SAAA,GAAArb,CAAA,EACA5F,CAAA,CAAAkhB,UAAA,GAAA5gB,CAAA,EACAN,CAAA,CAAAmhB,SAAA,GAAAtb,CAAA,EAEAnD,CAAA;MAAA,GAUA,KAAA0e,SAAA,aAAA7hB,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA;QACA,IACAsB,CAAA;UAAArB,CAAA;UACAM,CAAA;UACAuB,CAAA;UAAA5B,CAAA;UAHAuC,CAAA,GAAAnD,CAAA,CAAAuG,cAAA;UAIAxF,CAAA,QAAAd,CAAA,CAAA6V,cAAA;UACAzP,CAAA,GAAApG,CAAA,CAAAkV,QAAA;UAEA7O,CAAA,GAAAsB,CAAA,CAAAka,MAAA,CAAAlR,MAAA;UACA7O,CAAA,GAAA6F,CAAA,CAAAka,MAAA,CAAAlR,MAAA;UACA5P,CAAA,OAAA+gB,eAAA;QAEAhB,SAAA,CAAA/gB,CAAA,EAAAQ,CAAA,EAAAP,CAAA,EAAAqG,CAAA,GACA+a,UAAA,CAAAphB,CAAA,EAAAqG,CAAA,EAAAvE,CAAA,EAAAf,CAAA;QAEA,IAAAwF,CAAA;QAKA,KAJA7F,CAAA,GAAAV,CAAA,CAAAgW,QAAA,EACAhW,CAAA,CAAA8G,UAAA,IAAAvB,CAAA,CAAAwB,UAAA,IACA,KAAA/G,CAAA,CAAAmI,gBAAA,KACAzH,CAAA,QACAqB,CAAA,MAAqBA,CAAA,GAAArB,CAAA,EAAYqB,CAAA;UACjC,IAAAlB,CAAA,GAAAqC,CAAA,CAAAyO,aAAA,CAAAhR,CAAA,CAAAoB,CAAA;YAEAyE,CAAA,IADAiB,CAAA,GAAAvE,CAAA,CAAAyO,aAAA,CAAAhR,CAAA,CAAAoB,CAAA,SACAlB,CAAA;UACA,KAAA0B,CAAA,MAA2BgE,CAAA,GAAAkB,CAAA,EAASlB,CAAA,IACpChE,CAAA,IAAAvC,CAAA,CAAAyJ,EAAA,CAAAlD,CAAA,IAAAvG,CAAA,CAAAyJ,EAAA,CAAAlD,CAAA;UACAhE,CAAA,IAAAiE,CAAA,EAGA7F,CAAA,SACAuC,CAAA,CAAAkG,KAAA,CAAAkJ,EAAA,CAAA9R,CAAA,EAAAC,CAAA,EAAAsB,CAAA,IAAApB,CAAA,GAAA4B,CAAA,EACAW,CAAA,CAAAkG,KAAA,CAAA2Y,IAAA,CAAAvhB,CAAA,EAAAC,CAAA,EAAAsB,CAAA,IAAApB,CAAA,GAAA0F,CAAA,CAAAtE,CAAA,IAAAD,CAAA,CAAAC,CAAA,IAAAyE,CAAA,EAEA,IAAAjG,CAAA,CAAA+R,EAAA,CAAA3R,CAAA,CAAAoB,CAAA,MAAAhC,CAAA,CAAAghB,OAAA,GACAxe,CAAA,IAAAhC,CAAA,CAAA+R,EAAA,CAAA3R,CAAA,CAAAoB,CAAA,IAEAQ,CAAA,MAEAW,CAAA,CAAAkG,KAAA,CAAA4Y,GAAA,CAAAxhB,CAAA,EAAAC,CAAA,EAAAsB,CAAA,IAAApB,CAAA,GACAgC,IAAA,CAAA6F,GAAA,CAAAjG,CAAA,GAAAhC,CAAA,CAAA8R,GAAA,CAAA1R,CAAA,CAAAoB,CAAA,GAAAmB,CAAA,CAAAmF,GAAA,CAAA1H,CAAA,CAAAoB,CAAA,KAGAmB,CAAA,CAAAkG,KAAA,CAAA6Y,OAAA,CAAAzhB,CAAA,EAAAC,CAAA,EAAAsB,CAAA,UACA/B,CAAA,CAAA4V,OAAA,UAAA7T,CAAA,KACAmB,CAAA,CAAAkG,KAAA,CAAA6Y,OAAA,CAAAzhB,CAAA,EAAAC,CAAA,EAAAsB,CAAA,KAAAjB,CAAA,GAAAiI,CAAA,CAAAhH,CAAA,IAEAA,CAAA,GAAAwD,CAAA,CAAA2F,OAAA,KAEAtB,CAAA,MAAAxD,CAAA,CAAArE,CAAA,IACAmB,CAAA,CAAAkG,KAAA,CAAA6Y,OAAA,CAAAzhB,CAAA,EAAAC,CAAA,EAAAsB,CAAA,KAAAjB,CAAA,GAAAsF,CAAA,CAAArE,CAAA;QAAA;QAKA,IAAA/B,CAAA,CAAA8G,UAAA,IAAAvB,CAAA,CAAAwB,UAAA,EAEA,KADArG,CAAA,GAAAqB,CAAA,EACAA,CAAA,GAAA/B,CAAA,CAAAiW,QAAA,EAAyClU,CAAA,GAAAwD,CAAA,CAAA8F,OAAA,EAAuBtJ,CAAA,IAChE;UAAAlB,CAAA,GAAAqC,CAAA,CAAAyO,aAAA,CAAA5P,CAAA,CAAAA,CAAA,GAEAyE,CAAA,IADAiB,CAAA,GAAAvE,CAAA,CAAAyO,aAAA,CAAA5P,CAAA,CAAAA,CAAA,SACAlB,CAAA;UACA,KAHA,IACA4G,CAAA,EAEAC,CAAA,MAA+BA,CAAA,MAAOA,CAAA;YACtC,KAAAnF,CAAA,MAAAvB,CAAA,GAAAH,CAAA,EAA8CG,CAAA,GAAAyG,CAAA,EAASzG,CAAA,IACvDuB,CAAA,IAAAvC,CAAA,CAAAyJ,EAAA,CAAAlD,CAAA,IAAAvG,CAAA,CAAAyJ,EAAA,CAAAlD,CAAA,GACAA,CAAA;YAEAhE,CAAA,GAAAI,IAAA,CAAA6F,GAAA,CAAAjG,CAAA,GAAAiE,CAAA,UAGA7F,CAAA,SAEAuC,CAAA,CAAAkG,KAAA,CAAA8Y,IAAA,CAAA1hB,CAAA,EAAAC,CAAA,MAAAsB,CAAA,GAAA2F,CAAA,IAAA/G,CAAA,GAAA4B,CAAA,EACAW,CAAA,CAAAkG,KAAA,CAAA+Y,MAAA,CAAA3hB,CAAA,EAAAC,CAAA,MAAAsB,CAAA,GAAA2F,CAAA,IAAA/G,CAAA,GAAA0F,CAAA,CAAA3F,CAAA,IACAoB,CAAA,CAAApB,CAAA,IAAA8F,CAAA,EACA,IAAAjG,CAAA,CAAA+R,EAAA,CAAAvQ,CAAA,CAAAA,CAAA,EAAA2F,CAAA,IACAnF,CAAA,IAAAhC,CAAA,CAAA+R,EAAA,CAAAvQ,CAAA,CAAAA,CAAA,EAAA2F,CAAA,IAEAnF,CAAA,OACAxC,CAAA,CAAAghB,OAAA,IAAAhhB,CAAA,CAAAkhB,QAAA,MACA1e,CAAA,OAEAW,CAAA,CAAAkG,KAAA,CAAAgZ,KAAA,CAAA5hB,CAAA,EAAAC,CAAA,MAAAsB,CAAA,GAAA2F,CAAA,IAAA/G,CAAA,GACAgC,IAAA,CAAA6F,GAAA,CAAAjG,CAAA,GAAAhC,CAAA,CAAA8R,GAAA,CAAAtQ,CAAA,CAAAA,CAAA,EAAA2F,CAAA,GACAxE,CAAA,CAAAmF,GAAA,CAAAtG,CAAA,CAAAA,CAAA,IAGAmB,CAAA,CAAAkG,KAAA,CAAAiZ,SAAA,CAAA7hB,CAAA,EAAAC,CAAA,MAAAsB,CAAA,GAAA2F,CAAA,SACA1H,CAAA,CAAAiQ,aAAA,CAAAvI,CAAA,GACA3F,CAAA,GAAAwD,CAAA,CAAA4F,OAAA,KACAjI,CAAA,CAAAkG,KAAA,CAAAiZ,SAAA,CAAA7hB,CAAA,EAAAC,CAAA,MAAAsB,CAAA,GAAA2F,CAAA,KAAA5G,CAAA,GACAsF,CAAA,CAAA1F,CAAA,IAEAA,CAAA;UAAA;QAAA;QAKAwC,CAAA,CAAAkG,KAAA,CAAAkZ,OAAA,CAAA9hB,CAAA,EAAAC,CAAA,IAAAT,CAAA,CAAAuV,WAAA,EACArS,CAAA,CAAAkG,KAAA,CAAAmZ,YAAA,CAAA/hB,CAAA,EAAAC,CAAA,IAAAT,CAAA,CAAAoV,cAAA,GACApV,CAAA,CAAA+V,YAAA,EACA7S,CAAA,CAAAkG,KAAA,CAAAoZ,UAAA,CAAAhiB,CAAA,EAAAC,CAAA,IAAAT,CAAA,CAAA+V,YAAA,EAEA7S,CAAA,CAAAkG,KAAA,CAAAqZ,IAAA,CAAAjiB,CAAA,EAAAC,CAAA,IAAAM,CAAA,CAAAygB,UAAA,EACAte,CAAA,CAAAkG,KAAA,CAAAuY,SAAA,CAAAnhB,CAAA,EAAAC,CAAA,SAAAM,CAAA,CAAA4gB,SAAA,EACAze,CAAA,CAAAkG,KAAA,CAAAsY,UAAA,CAAAlhB,CAAA,EAAAC,CAAA,SAAAM,CAAA,CAAA2gB,UAAA,EACAxe,CAAA,CAAAkG,KAAA,CAAAqY,SAAA,CAAAjhB,CAAA,EAAAC,CAAA,SAAAM,CAAA,CAAA0gB,SAAA,EACAve,CAAA,CAAAkG,KAAA,CAAAiY,QAAA,CAAA7gB,CAAA,EAAAC,CAAA,IAAAM,CAAA,CAAAsgB,QAAA;MAAA;IAAA;IAj7BA7b,CAAA,CAAAua,KAAA,QACAva,CAAA,CAAAwa,MAAA,QACAxa,CAAA,CAAA0Z,UAAA,QACA1Z,CAAA,CAAAyZ,SAAA,SA29BAlf,CAAA,CAAAE,OAAA,GAAAuF,CAAA;EAAA,aAAAzF,CAAA,EAAAC,CAAA,EAAAO,CAAA;IC5gCA,IAAAC,CAAA,GAAaD,CAAA,CAAQ;MAQrB2H,CAAA,IAPA1H,CAAA,CAAAkD,MAAA,EACAlD,CAAA,CAAAmD,OAAA,EACAnD,CAAA,CAAAoD,KAAA,EACApD,CAAA,CAAAqD,UAAA,EACArD,CAAA,CAAAsD,IAAA,EACAtD,CAAA,CAAAuD,MAAA,EACAvD,CAAA,CAAAwD,WAAA,EACAxD,CAAA,CAAA4D,QAAA;MAMA2E,CAAA,IALAvI,CAAA,CAAA8D,UAAA,EACA9D,CAAA,CAAAgE,SAAA,EACAhE,CAAA,CAAAiE,WAAA,EACAjE,CAAA,CAAAkE,OAAA,EACAlE,CAAA,CAAAmE,SAAA,EACAnE,CAAA,CAAAsE,MAAA;IAEA2X,IAAA,GAAOlc,CAAA,CAAQ,KACfmiB,OAAA,GAAUniB,CAAA,CAAQ,KAClBkd,YAAA,GAAeld,CAAA,CAAQ,KACvBoiB,WAAA,GAAcpiB,CAAA,CAAQ,KACtBqiB,QAAA,GAAWriB,CAAA,CAAQ,KACnBsiB,QAAA,GAAWtiB,CAAA,CAAQ,KACnBuiB,SAAA,GAAYviB,CAAA,CAAQ,KACpByH,QAAA,GAAWzH,CAAA,CAAQ,IACnBygB,SAAA,GAAYzgB,CAAA,CAAQ;IACNA,CAAA,CAAQ;IAAtB,IACAyI,CAAA,GAAczI,CAAA,CAAQ;MACtB0I,CAAA,GAAa1I,CAAA,CAAQ;IAErB,SAAA2I,EAAA;MAIA,KAAAjD,UAAA,aAAAlG,CAAA,EAAAC,CAAA;QACAD,CAAA,EACAC,CAAA;MAAA;IAAA;IAKA,SAAA4J,EAAA;MAKA,KAAA3D,UAAA,aAAAlG,CAAA,EAAAC,CAAA,EAAAO,CAAA;QACAR,CAAA,EACAC,CAAA,EACAO,CAAA;MAAA;IAAA;IAIA,SAAAsJ,EAAA;IAGA,SAAAS,EAAA;MAIA,KAAArE,UAAA,aAAAlG,CAAA,EAAAC,CAAA;QACAD,CAAA,EACAC,CAAA;MAAA;IAAA;IA4EA,SAAAgB,EAAA;MACA,KAAA+hB,UAAA,MACA,KAAAC,OAAA,MACA,KAAAC,QAAA,MACA,KAAAC,UAAA;IAAA;IAGA,SAAAziB,EAAAV,CAAA;MACA,OAAAA,CAAA,CAAAojB,UAAA,YAAApjB,CAAA,CAAAojB,UAAA,YAAApjB,CAAA,CAAAojB,UAAA,WAAApjB,CAAA,CAAAojB,UAAA;IAAA;IAGAniB,CAAA,CAAAoiB,IAAA,GAAA3iB,CAAA,UACAO,CAAA,CAAAqiB,IAAA,GAAA5iB,CAAA,UACAO,CAAA,CAAAsiB,IAAA,GAAA7iB,CAAA,UACAO,CAAA,CAAAuiB,IAAA,GAAA9iB,CAAA,UAEAO,CAAA,CAAAwiB,UAAA,aAAAzjB,CAAA;MACA,IAAAC,CAAA,OAAAgB,CAAA;QAEAT,CAAA,GAAAR,CAAA,CAAA0jB,SAAA;MACA,IAAAziB,CAAA,CAAAoiB,IAAA,IAAA7iB,CAAA;QAGAR,CAAA,CAAA0jB,SAAA;QACA,IAAAziB,CAAA,CAAAqiB,IAAA,IAAAtjB,CAAA,CAAA0jB,SAAA,WAGAziB,CAAA,CAAAsiB,IAAA,IAAAvjB,CAAA,CAAA0jB,SAAA;UAGA,IAAAjjB,CAAA,GAAAT,CAAA,CAAA0jB,SAAA;YACAhjB,CAAA;UACA,QAAAD,CAAA;YACA;YACA;cACAR,CAAA,CAAAijB,QAAA,GAAAljB,CAAA,CAAA2jB,SAAA,CAAAjjB,CAAA,WACAT,CAAA,CAAAkjB,UAAA,GAAAnjB,CAAA,CAAA0jB,SAAA,CAAAhjB,CAAA;cACA;YACA;cACA;UAAA;UAEAA,CAAA,IAAAD,CAAA;UAGA,KAFA,IAAAuB,CAAA,GAAAf,CAAA,CAAAuiB,IAAA,EACA7iB,CAAA,MACAqB,CAAA,IAAAxB,CAAA,KACAA,CAAA,GAAAR,CAAA,CAAA0jB,SAAA,CAAAhjB,CAAA,OACAC,CAAA,GAAAX,CAAA,CAAA0jB,SAAA,CAAAhjB,CAAA,WACAsB,CAAA,IAAAxB,CAAA,IAGAE,CAAA,IAAAC,CAAA;UAIA,OAFAV,CAAA,CAAAgjB,OAAA,GAAAtiB,CAAA,EACAV,CAAA,CAAA+iB,UAAA,GAAAtiB,CAAA,MACAT,CAAA;QAAA;MAAA;IAAA,GAGAD,CAAA,CAAAE,OAAA,CAAA0jB,UAAA,GAjIA,UAAAnjB,CAAA,EAAAT,CAAA,EAAAC,CAAA;MACA,KAAAoC,SAAA,CAAAC,MAAA,KACAuhB,OAAA,CAAAC,KAAA,gEACArjB,CAAA,MACAT,CAAA,UACAC,CAAA;MAEA,IAAAS,CAAA,OAAAgc,IAAA;QACAlc,CAAA,OAAA2I,CAAA;QACAnH,CAAA,OAAA0b,YAAA;QACA/c,CAAA,OAAAsgB,SAAA;QACAhgB,CAAA,OAAA0hB,OAAA;QACAngB,CAAA,OAAAogB,WAAA;QACAhiB,CAAA,OAAAiiB,QAAA;QACA1f,CAAA,OAAA+F,CAAA;QACAnI,CAAA,OAAAkI,CAAA;QACA5C,CAAA,OAAAkE,CAAA;QACAjE,CAAA,OAAAyc,SAAA;QACAhhB,CAAA,OAAA+gB,QAAA;QACA9hB,CAAA,OAAA6I,CAAA;QACArD,CAAA,OAAAsD,CAAA;MAEApJ,CAAA,CAAAwF,UAAA,CAAAlE,CAAA,EAAArB,CAAA,EAAAM,CAAA,EAAAuB,CAAA,EAAA5B,CAAA,EAAAuC,CAAA,EAAApC,CAAA,EAAAsF,CAAA,EAAAG,CAAA,GACA7F,CAAA,CAAAuF,UAAA,CAAAlE,CAAA,EAAAwE,CAAA,EAAAzF,CAAA,EAAAoC,CAAA,GACAkD,CAAA,CAAAH,UAAA,CAAAvF,CAAA,EAAAI,CAAA,GACAE,CAAA,CAAAiF,UAAA,CAAAxF,CAAA,GACAE,CAAA,CAAAsF,UAAA,CAAAvF,CAAA,EAAA2F,CAAA,EAAA9D,CAAA,EAAAT,CAAA,GACAS,CAAA,CAAA0D,UAAA,CAAAnE,CAAA,EAAAuE,CAAA,EAAA5F,CAAA,CAAAqjB,GAAA,CAAAhe,GAAA,GACAO,CAAA,CAAAJ,UAAA,CAAAvF,CAAA,GACAoB,CAAA,CAAAmE,UAAA,CAAA1D,CAAA,GACAW,CAAA,CAAA+C,UAAA,CAAAxF,CAAA,EAAAC,CAAA,EAAAI,CAAA,GACAP,CAAA,CAAA0F,UAAA,CAAAlF,CAAA,EAAAwF,CAAA,GACAxF,CAAA,CAAAkF,UAAA,CAAAnF,CAAA,EAAAsF,CAAA,EAAApF,CAAA;MAEA,IAAAH,CAAA,GAAAJ,CAAA,CAAAsjB,SAAA;MAEAljB,CAAA,CAAAmjB,YAAA,GAAAxjB,CAAA,EACAK,CAAA,CAAAojB,aAAA,GAAAlkB,CAAA,EACAc,CAAA,CAAAsc,KAAA,GAAAnd,CAAA,EACAa,CAAA,CAAAkH,IAAA,GAAAC,QAAA,CAAA0R,MAAA,EACA7Y,CAAA,CAAAqjB,OAAA,MACArjB,CAAA,CAAAuJ,YAAA,OACAvJ,CAAA,CAAAgc,iBAAA,OACAhc,CAAA,CAAAsjB,sBAAA;MAEA,IAAA3d,CAAA,GAAA/F,CAAA,CAAA2jB,gBAAA,CAAAvjB,CAAA;MACAkI,CAAA,MAAAvC,CAAA;MACA,IAAAiB,CAAA;QACAC,CAAA,cAAAD,CAAA;QACAE,CAAA,GAAAO,CAAA,CAAAR,CAAA;MAEA,KAAA2c,YAAA,aAAAtkB,CAAA,EAAAC,CAAA;QACA,KAAAQ,CAAA,KACAR,CAAA,GAAAD,CAAA,GAEAgJ,CAAA,CAAAhJ,CAAA,CAAAsC,MAAA,IAAArC,CAAA,CAAAqC,MAAA,GACAtC,CAAA,CAAAsC,MAAA,GAAAoF,CAAA,KACAA,CAAA,GAAA1H,CAAA,CAAAsC,MAAA,EAEAsF,CAAA,GAAAO,CAAA,CADAR,CAAA,cAAAD,CAAA;QAIA,IAAAlH,CAAA,GAAAE,CAAA,CAAA6jB,kBAAA,CAAAzjB,CAAA,EAAAd,CAAA,EAAAC,CAAA,EAAAD,CAAA,CAAAsC,MAAA,EAAAsF,CAAA,KAAAD,CAAA;QACA,WAAArD,SAAA,CAAAsD,CAAA,CAAA4c,QAAA,IAAAhkB,CAAA;MAAA,GAGA,KAAAikB,KAAA;QACA,IAAAzkB,CAAA,GAAAU,CAAA,CAAAgkB,iBAAA,CAAA5jB,CAAA,EAAA8G,CAAA,KAAAD,CAAA;QACA,WAAArD,SAAA,CAAAsD,CAAA,CAAA4c,QAAA,IAAAxkB,CAAA;MAAA;IAAA,GA8DAA,CAAA,CAAAE,OAAA,CAAAykB,SAAA,GAAA1jB,CAAA;EAAA,aAAAjB,CAAA,EAAAC,CAAA,EAAAO,CAAA;IChMA,IAAAC,CAAA,GAAcD,CAAA,CAAQ;IACtB,mBAAAC,CAAA,KAAAA,CAAA,KAA4CT,CAAA,CAAAW,CAAA,EAASF,CAAA,SACrDA,CAAA,CAAAmkB,MAAA,KAAA5kB,CAAA,CAAAE,OAAA,GAAAO,CAAA,CAAAmkB,MAAA;IAAA,CAGA,GADUpkB,CAAA,CAAQ,GAA6DoB,OAAA,EAC/E,YAAAnB,CAAA;EAAA,aAAAT,CAAA,EAAAC,CAAA,EAAAO,CAAA;IAAA,CCRAR,CAAA,CAAAE,OAAA,GAA2BM,CAAA,CAAQ,EAAR,EAAuD,IAKlF4D,IAAA,EAAcpE,CAAA,CAAAW,CAAA,EAAS,sjEAAmjE;EAAA,aAAAX,CAAA,EAAAC,CAAA,EAAAO,CAAA;ICF1kE,IAAAC,CAAA,GAAcD,CAAA,CAAQ;IACtB,mBAAAC,CAAA,KAAAA,CAAA,KAA4CT,CAAA,CAAAW,CAAA,EAASF,CAAA,SACrDA,CAAA,CAAAmkB,MAAA,KAAA5kB,CAAA,CAAAE,OAAA,GAAAO,CAAA,CAAAmkB,MAAA;IAAA,CAGA,GADUpkB,CAAA,CAAQ,GAA6DoB,OAAA,EAC/E,YAAAnB,CAAA;EAAA,aAAAT,CAAA,EAAAC,CAAA,EAAAO,CAAA;IAAA,CCRAR,CAAA,CAAAE,OAAA,GAA2BM,CAAA,CAAQ,EAAR,EAAuD,IAKlF4D,IAAA,EAAcpE,CAAA,CAAAW,CAAA,EAAS,kQAA+P;EAAA,aAAAX,CAAA,EAAAC,CAAA,EAAAO,CAAA;ICFtR,IAAAC,CAAA,GAAcD,CAAA,CAAQ;IACtB,mBAAAC,CAAA,KAAAA,CAAA,KAA4CT,CAAA,CAAAW,CAAA,EAASF,CAAA,SACrDA,CAAA,CAAAmkB,MAAA,KAAA5kB,CAAA,CAAAE,OAAA,GAAAO,CAAA,CAAAmkB,MAAA;IAAA,CAGA,GADUpkB,CAAA,CAAQ,GAA6DoB,OAAA,EAC/E,YAAAnB,CAAA;EAAA,aAAAT,CAAA,EAAAC,CAAA,EAAAO,CAAA;IAAA,CCRAR,CAAA,CAAAE,OAAA,GAA2BM,CAAA,CAAQ,EAAR,EAAuD,IAKlF4D,IAAA,EAAcpE,CAAA,CAAAW,CAAA,EAAS,0ZAAuZ;EAAA,aAAAX,CAAA,EAAAC,CAAA,EAAAO,CAAA;ICF9a,IAAAC,CAAA,GAAcD,CAAA,CAAQ;IACtB,mBAAAC,CAAA,KAAAA,CAAA,KAA4CT,CAAA,CAAAW,CAAA,EAASF,CAAA,SACrDA,CAAA,CAAAmkB,MAAA,KAAA5kB,CAAA,CAAAE,OAAA,GAAAO,CAAA,CAAAmkB,MAAA;IAAA,CAGA,GADUpkB,CAAA,CAAQ,GAA6DoB,OAAA,EAC/E,YAAAnB,CAAA;EAAA,aAAAT,CAAA,EAAAC,CAAA,EAAAO,CAAA;IAAA,CCRAR,CAAA,CAAAE,OAAA,GAA2BM,CAAA,CAAQ,EAAR,EAAuD,IAKlF4D,IAAA,EAAcpE,CAAA,CAAAW,CAAA,EAAS,6jIAA0jI;EAAA,aAAAX,CAAA,EAAAC,CAAA,EAAAO,CAAA;ICFjlI,IAAAC,CAAA,GAAcD,CAAA,CAAQ;IACtB,mBAAAC,CAAA,KAAAA,CAAA,KAA4CT,CAAA,CAAAW,CAAA,EAASF,CAAA,SACrDA,CAAA,CAAAmkB,MAAA,KAAA5kB,CAAA,CAAAE,OAAA,GAAAO,CAAA,CAAAmkB,MAAA;IAAA,CAGA,GADUpkB,CAAA,CAAQ,GAA6DoB,OAAA,EAC/E,YAAAnB,CAAA;EAAA,aAAAT,CAAA,EAAAC,CAAA,EAAAO,CAAA;IAAA,CCRAR,CAAA,CAAAE,OAAA,GAA2BM,CAAA,CAAQ,EAAR,EAAuD,IAKlF4D,IAAA,EAAcpE,CAAA,CAAAW,CAAA,EAAS,g+BAA69B;EAAA,aAAAX,CAAA,EAAAC,CAAA,EAAAO,CAAA;ICLp/B,IAAAC,CAAA,GAAaD,CAAA,CAAQ;MACrB2E,CAAA,GAAA1E,CAAA,CAAAkD,MAAA;MACAyB,CAAA,GAAA3E,CAAA,CAAAmD,OAAA;MAEAyB,CAAA,IADA5E,CAAA,CAAAoD,KAAA,EACApD,CAAA,CAAAqD,UAAA;MAMAwB,CAAA,IALA7E,CAAA,CAAAsD,IAAA,EACAtD,CAAA,CAAAuD,MAAA,EACAvD,CAAA,CAAAwD,WAAA,EACAxD,CAAA,CAAA4D,QAAA,EACA5D,CAAA,CAAA8D,UAAA,EACA9D,CAAA,CAAAgE,SAAA;MAGAc,CAAA,IAFA9E,CAAA,CAAAiE,WAAA,EACAjE,CAAA,CAAAkE,OAAA,EACAlE,CAAA,CAAAmE,SAAA;MACA5D,CAAA,GAAAP,CAAA,CAAAqE,WAAA;MACA+f,CAAA,GAAApkB,CAAA,CAAAsE,MAAA;MAEA+f,CAAA,GAAetkB,CAAA,CAAQ;MACvBwB,CAAA,GAAsBxB,CAAA,CAAQ;MAC9BukB,CAAA,GAAwBvkB,CAAA,CAAQ;MAChCwkB,CAAA,GAAUxkB,CAAA,CAAQ;MAClBykB,CAAA,GAAiBzkB,CAAA,CAAQ;MACzB0kB,CAAA,GAA0B1kB,CAAA,CAAQ;MAClC2kB,CAAA,GAAgB3kB,CAAA,CAAQ;MACxB4kB,CAAA,GAAa5kB,CAAA,CAAQ;MACrB6kB,EAAA,GAAc7kB,CAAA,CAAQ;IAkzDtBR,CAAA,CAAAE,OAAA,GAhzDA,SAAAF,EAAA;MACA,IAAAuK,CAAA;MAGAvK,CAAA,CAAAslB,EAAA,QACAtlB,CAAA,CAAAulB,EAAA,QACAvlB,CAAA,CAAAwlB,EAAA,QACAxlB,CAAA,CAAAylB,EAAA,QACAzlB,CAAA,CAAA0lB,EAAA,QACA1lB,CAAA,CAAA2lB,EAAA,QACA3lB,CAAA,CAAA4lB,EAAA,QACA5lB,CAAA,CAAA6lB,EAAA,QACA7lB,CAAA,CAAA8lB,EAAA,QACA9lB,CAAA,CAAA+lB,EAAA,QAIA/lB,CAAA,CAAAgmB,KAAA,QACAhmB,CAAA,CAAAimB,QAAA,SACAjmB,CAAA,CAAAkmB,OAAA,SACAlmB,CAAA,CAAAmmB,MAAA,SACAnmB,CAAA,CAAAomB,aAAA,SACApmB,CAAA,CAAAqmB,YAAA,SACArmB,CAAA,CAAAsmB,MAAA,SACAtmB,CAAA,CAAAumB,WAAA;MAOA,IAGA/gB,CAAA,EACAC,CAAA,EACAiC,CAAA,EACAC,CAAA,EACAC,CAAA;MANA5H,CAAA,CAAA2c,iBAAA,GADA;MAQA,IACAxU,CAAA;QAEAa,CAAA;QACAC,CAAA;QAJAC,CAAA,OAAA4b,CAAA;MAuBA,SAAA3b,EAAA;QAIA,KAAAqd,WAAA,MAIA,KAAAC,iBAAA,MAKA,KAAAC,WAAA,GAAAphB,CAAA,CAAA+f,EAAA,CAAAha,OAAA,GAIA,KAAAsb,WAAA,GAAArhB,CAAA,CAAA+f,EAAA,CAAA/Z,OAAA;MAAA;MAGA,SAAAzB,EAAA;QACA,KAAA+c,UAAA;MAAA;MAGA,SAAAlmB,EAAAV,CAAA,EAAAC,CAAA;QACA,KAAA4mB,OAAA,GAAA5mB,CAAA;MAAA;MA3CA,KAAA8jB,GAAA,OAAAsB,EAAA,IAEA,KAAAnf,UAAA,aAAAlG,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA,EAAArB,CAAA,EAAAM,CAAA,EAAAuB,CAAA;QACAgD,CAAA,GAAAxF,CAAA,EACAyF,CAAA,GAAAxF,CAAA,EACAyH,CAAA,GAAAlH,CAAA,EACAmH,CAAA,GAAAlH,CAAA,EACAmH,CAAA,GAAAlH,CAAA,EACAyH,CAAA,GAAAnG,CAAA,EAEAgH,CAAA,GAAA/H,CAAA,EACAgI,CAAA,GAAAzG,CAAA,EACA,KAAAuhB,GAAA,CAAA7d,UAAA,CAAAT,CAAA,EAAAyD,CAAA,EAAAvB,CAAA,EAAAQ,CAAA;MAAA;MAkCA,IAAAxC,CAAA;MAwHA,SAAAmE,EAAA9J,CAAA;QACA,WAAAA,CAAA,GACA,IACAA,CAAA,QACA,IAEA4C,IAAA,CAAAkkB,GAAA,CAAAlkB,IAAA,CAAAmkB,EAAA,OAAA/mB,CAAA;MAAA;MA4HA,SAAA6F,EAAA7F,CAAA,EAAAC,CAAA;QACA,QAAAD,CAAA;UACA;YAEA,OADAC,CAAA,CAAAkd,OAAA,MACA;UACA;YAEA,OADAld,CAAA,CAAAkd,OAAA;UAEA;YAEA,OADAld,CAAA,CAAAkd,OAAA,MACA;UACA;YAEA,OADAld,CAAA,CAAAkd,OAAA;UAEA;YAEA,OADAld,CAAA,CAAAkd,OAAA,MACA;UACA;YAEA,OADAld,CAAA,CAAAkd,OAAA,MACA;UACA;YAEA,OADAld,CAAA,CAAAkd,OAAA;UAEA;YAEA,OADAld,CAAA,CAAAkd,OAAA,MACA;UACA;YAEA,OADAld,CAAA,CAAAkd,OAAA,MACA;UACA;YAEA,OADAld,CAAA,CAAAkd,OAAA,OACA;QAAA;MAAA;MAQA,SAAArX,EAAA9F,CAAA,EAAAC,CAAA,EAAAO,CAAA;QAEAA,CAAA,YACAP,CAAA;QAIA,KAFA,IAAAQ,CAAA,GAAA2kB,CAAA,CAAA5L,aAAA,CAAAvZ,CAAA,MAEAS,CAAA,MAAuBA,CAAA,QAASA,CAAA,IAChC,IAAA0kB,CAAA,CAAA5L,aAAA,CAAAvZ,CAAA,EAAAS,CAAA,KACAkC,IAAA,CAAAmc,GAAA,CAAAqG,CAAA,CAAA5L,aAAA,CAAAvZ,CAAA,EAAAS,CAAA,IAAAV,CAAA,IAAA4C,IAAA,CACAmc,GAAA,CAAAte,CAAA,GAAAT,CAAA,MACAS,CAAA,GAAA2kB,CAAA,CAAA5L,aAAA,CAAAvZ,CAAA,EAAAS,CAAA;QAGA,OAAAD,CAAA;MAAA;MASA,SAAAuF,EAAAhG,CAAA,EAAAC,CAAA,EAAAO,CAAA;QAEAA,CAAA,YACAP,CAAA;QACA,SAAAQ,CAAA,MAAuBA,CAAA,QAASA,CAAA,IAChC,QAAA2kB,CAAA,CAAA5L,aAAA,CAAAvZ,CAAA,EAAAQ,CAAA,KACA2kB,CAAA,CAAA5L,aAAA,CAAAvZ,CAAA,EAAAQ,CAAA,KAAAT,CAAA,EACA,OAAAS,CAAA;QAIA;MAAA;MAGA,SAAAwF,EAAAjG,CAAA,EAAAC,CAAA;QAWA,IAAAO,CAAA,QAAAE,CAAA,UACA,IAAAA,CAAA,gBAAAA,CAAA,YACA,IAAAA,CAAA,gBAAAA,CAAA,WACA,IAAAA,CAAA,gBAAAA,CAAA,WACA,IAAAA,CAAA,gBAAAA,CAAA,aACA,IAAAA,CAAA,iBAAAA,CAAA,cACA,IAAAA,CAAA,iBAAAA,CAAA,cACA,IAAAA,CAAA,kBAAAA,CAAA,cACA,IAAAA,CAAA,kBAAAA,CAAA;UAEAD,CAAA,GAAA8J,CAAA,CAAAyc,uBAAA,CAAA/mB,CAAA;QACAD,CAAA,CAAA4mB,UAAA,GAAApmB,CAAA,CAAAC,CAAA,EAAAomB,OAAA;MAAA;MAyhCA,SAAA1gB,EAAAnG,CAAA;QACA,IAAAC,CAAA,GAAAolB,EAAA,CAAAle,OAAA,GAAAnH,CAAA,CAAAoH,SAAA,GAAAie,EAAA,CAAA3f,SAAA;QAOA,OAHAzF,CAAA,GAAA2C,IAAA,CAAA6F,GAAA,CAAAxI,CAAA,QAAAD,CAAA,CAAAoH,SAAA,QACAyd,CAAA,CAAAE,CAAA,CAAA5V,MAAA,IAAAlP,CAAA,GAEAA,CAAA;MAAA;MAwJA,SAAA+E,EAAA;QACA,KAAAiiB,IAAA,MACA,KAAAC,KAAA;MAAA;MAIA,SAAA/jB,EAAA;QACA,KAAAgkB,QAAA;MAAA;MAeA,SAAAliB,EAAAjF,CAAA,EAAAC,CAAA,EAAAO,CAAA;QAKA,IAAAC,CAAA,GAAAmC,IAAA,CAAAmkB,EAAA,GAAA9mB,CAAA;QAAA,CAEAD,CAAA,IAAAQ,CAAA,IACA,MACAR,CAAA,OACA,IAAAA,CAAA,KACAA,CAAA;QACA,IAAAU,CAAA,GAAAV,CAAA;UAEAgC,CAAA,cAAAY,IAAA,CAAAkkB,GAAA,KAAA9mB,CAAA,GAAA4C,IAAA,CAAAmkB,EAAA,UAAAnkB,IAAA,CAAAkkB,GAAA,KAAA9mB,CAAA,GAAA4C,IAAA,CAAAmkB,EAAA;QACA,OAAAnkB,IAAA,CAAAmc,GAAA,CAAAre,CAAA,WACAD,CAAA,GAAAmC,IAAA,CAAAmkB,EAAA,GAEA/kB,CAAA,GAAAY,IAAA,CAAAwkB,GAAA,CAAA5mB,CAAA,GAAAC,CAAA,GAAAC,CAAA,KAAAkC,IAAA,CAAAmkB,EAAA,GAAAvmB,CAAA,GAAAE,CAAA;MAAA;MAGA,SAAAK,EAAAf,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA,EAAArB,CAAA,EAAAM,CAAA,EAAAuB,CAAA;QACA,IACA5B,CAAA;UAAAuC,CAAA;UADApC,CAAA,GAAAf,CAAA,CAAAuG,cAAA;UACAF,CAAA;UAEAC,CAAA,GAAAtG,CAAA,CAAAwH,cAAA,GAhCA,SAAAxH,EAAAC,CAAA,EAAAO,CAAA;YACA,YAAAA,CAAA,GAAAR,CAAA,CAAAQ,CAAA,EAAAP,CAAA,GAAAO,CAAA,IAAAP,CAAA;UAAA,CAgCA,CAAAD,CAAA,CAAAwH,cAAA,EAAAxH,CAAA,CAAAkkB,aAAA;QACA5d,CAAA,GAAAye,CAAA,CAAA/T,GAAA,KACA1K,CAAA,GAAAye,CAAA,CAAA/T,GAAA;QAEA,IAAAjP,CAAA,GAAAa,IAAA,CAAAmc,GAAA,CAAAhe,CAAA,CAAAsO,cAAA,GACAzM,IAAA,CAAA+a,KAAA,MAAA5c,CAAA,CAAAsO,cAAA;UACArO,CAAA,OAAAD,CAAA,CAAAsO,cAAA;QACA,IAAArO,CAAA,KACAA,CAAA;QACA,IAAAwF,CAAA;QACA,KAAAA,CAAA,UACAA,CAAA;QAKA,IAAA1F,CAAA,IAHA0F,CAAA,IAAAzE,CAAA,IAGA;QAGA,SAAAhB,CAAA,CAAAkO,yBAAA;UAGA,KAFAlO,CAAA,CAAA+P,SAAA,MAAAxL,CAAA,CAAAxE,CAAA,GACAC,CAAA,CAAA+P,SAAA,MAAAxL,CAAA,CAAAxE,CAAA,GACAF,CAAA,MAAuBA,CAAA,QAAA0F,CAAA,IAAc1F,CAAA,EACrCG,CAAA,CAAAgQ,SAAA,CAAAnQ,CAAA,IAAA0E,CAAA,CAAAxE,CAAA;UAMA,KAJAC,CAAA,CAAAkQ,KAAA,SAIA5K,CAAA,GAHAtF,CAAA,CAAAkQ,KAAA,SAGuB5K,CAAA,QAAAC,CAAA,EAAcD,CAAA;YACrC,IAAAI,CAAA;cACAiB,CAAA,IAAArB,CAAA,GAAAC,CAAA,SAAAA,CAAA;YACA,KAAA1F,CAAA,MAA2BA,CAAA,IAAA4F,CAAA,EAAe5F,CAAA,IAC1C6F,CAAA,IAAA1F,CAAA,CAAAgQ,SAAA,CAAA1K,CAAA,EAAAzF,CAAA,IAAAqE,CAAA,CAAArE,CAAA,GAAA8G,CAAA,EAAA1G,CAAA,EACAwF,CAAA;YACA,KAAA5F,CAAA,MAA2BA,CAAA,IAAA4F,CAAA,EAAe5F,CAAA,IAC1CG,CAAA,CAAAgQ,SAAA,CAAA1K,CAAA,EAAAzF,CAAA,KAAA6F,CAAA;UAAA;UAEA1F,CAAA,CAAAkO,yBAAA;QAAA;QAGA,IAAAtH,CAAA,GAAA5G,CAAA,CAAA+P,SAAA,CAAAtO,CAAA;QAIA,KAAAW,CAAA,MAAmBA,CAAA,GAAA1C,CAAA,EAAiB0C,CAAA;UACpC,IAAAyE,CAAA,EACAO,CAAA;UAOA,IALAP,CAAA,GAAAzE,CAAA,GAAApC,CAAA,CAAAsO,cAAA,EAKA1O,CAAA,IAAA6F,CAAA,IAHAH,CAAA,OAAAzD,IAAA,CAAA+a,KAAA,CAAA/V,CAAA,GAAA7G,CAAA,CAAAkQ,KAAA,CAAAzO,CAAA,MAGAgE,CAAA,MACA;UAIAkB,CAAA,GAAAE,CAAA,GAAA7G,CAAA,CAAAkQ,KAAA,CAAAzO,CAAA,KAAA6D,CAAA,GAAAG,CAAA,YACAqe,CAAA,CAAAjiB,IAAA,CAAAmc,GAAA,CAAArX,CAAA,YAGAS,CAAA,OAAAvF,IAAA,CAAA+a,KAAA,KAAAjW,CAAA,GAAApB,CAAA,GAAAA,CAAA;UACA,IAAA0C,CAAA;UACA,KAAApI,CAAA,MAAuBA,CAAA,IAAA4F,CAAA,IAAe5F,CAAA;YACtC,IAAAqI,CAAA,GAAArI,CAAA,GAAAyF,CAAA,GAAAG,CAAA;YAEAqe,CAAA,CAAA5b,CAAA,GAAAtI,CAAA,GACAkkB,CAAA,MAAA5b,CAAA,GAAAnI,CAAA,GAGAkI,CAAA,KAFAC,CAAA,OAAAtB,CAAA,CAAA7G,CAAA,GAAAmI,CAAA,IAAAvI,CAAA,CAAAsB,CAAA,GACAiH,CAAA,KACAlI,CAAA,CAAAgQ,SAAA,CAAA5I,CAAA,EAAAvH,CAAA;UAAA;UAEAX,CAAA,CAAAO,CAAA,GAAA2C,CAAA,IAAA6F,CAAA;QAAA;QAiBA,IAVA/H,CAAA,CAAAkmB,QAAA,GAAAvkB,IAAA,CAAAyX,GAAA,CAAA1Z,CAAA,EAAA6F,CAAA,GAAAH,CAAA,GAAAG,CAAA,OAOAzF,CAAA,CAAAkQ,KAAA,CAAAzO,CAAA,KAAAvB,CAAA,CAAAkmB,QAAA,GAAAhkB,CAAA,GAAApC,CAAA,CAAAsO,cAAA,EAGApO,CAAA,CAAAkmB,QAAA,IAAArmB,CAAA,EACA,KAAAF,CAAA,MAAuBA,CAAA,GAAAE,CAAA,EAAeF,CAAA,IACtC+G,CAAA,CAAA/G,CAAA,IAAAF,CAAA,CAAAsB,CAAA,GAAAf,CAAA,CAAAkmB,QAAA,GAAAvmB,CAAA,GACAE,CAAA,OACS;UAET,IAAAoI,CAAA,GAAApI,CAAA,GAAAG,CAAA,CAAAkmB,QAAA;UAUA,KAAAvmB,CAAA,MAAuBA,CAAA,GAAAsI,CAAA,IAAatI,CAAA,EACpC+G,CAAA,CAAA/G,CAAA,IAAA+G,CAAA,CAAA/G,CAAA,GAAAK,CAAA,CAAAkmB,QAAA;UAGA,KAAA9gB,CAAA,MAAuBzF,CAAA,GAAAE,CAAA,IAAeF,CAAA,IAAAyF,CAAA,EACtCsB,CAAA,CAAA/G,CAAA,IAAAF,CAAA,CAAAsB,CAAA,GAAAqE,CAAA;UAEAwe,CAAA,CAAAxe,CAAA,IAAApF,CAAA,CAAAkmB,QAAA;QAAA;QAEA,OAAAhkB,CAAA;MAAA;MAIA,SAAA+B,EAAAlF,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA;QACA,IAAArB,CAAA,GAAAX,CAAA,CAAAuG,cAAA;QAGA,IAAA5F,CAAA,CAAA0O,cAAA,qBAAA1O,CAAA,CAAA0O,cAAA,EACA,SAAApO,CAAA,MAA4BA,CAAA,GAAAN,CAAA,CAAAiG,YAAA,EAAuB3F,CAAA;UACnD,IAAAuB,CAAA,OAAAW,CAAA;UACAnB,CAAA,CAAAklB,KAAA,GAAAnmB,CAAA,CAAAf,CAAA,EAAAC,CAAA,CAAAgB,CAAA,GAAAN,CAAA,CAAAuG,OAAA,EACAlH,CAAA,CAAAoH,SAAA,EAAA5G,CAAA,CAAAS,CAAA,GAAAR,CAAA,EAAAC,CAAA,EACA8B,CAAA,EAAAvB,CAAA,GACAe,CAAA,CAAAilB,IAAA,GAAAzkB,CAAA,CAAA2kB,QAAA;QAAA,OAES;UACTnlB,CAAA,CAAAklB,KAAA,GAAAtkB,IAAA,CAAAyX,GAAA,CAAAra,CAAA,CAAAoH,SAAA,EAAA1G,CAAA,GACAsB,CAAA,CAAAilB,IAAA,GAAAjlB,CAAA,CAAAklB,KAAA;UACA,SAAAtmB,CAAA,MAA2BA,CAAA,GAAAoB,CAAA,CAAAklB,KAAA,IAActmB,CAAA,EACzCX,CAAA,IAAAU,CAAA,CAAAuG,OAAA,GAAAtG,CAAA,IAAAJ,CAAA,IAAAC,CAAA,GAAAG,CAAA,GACA,KAAAD,CAAA,CAAAiG,YAAA,KACA3G,CAAA,IAAAU,CAAA,CAAAuG,OAAA,GAAAtG,CAAA,IAAAJ,CAAA,IAAAC,CAAA,GAAAG,CAAA;QAAA;MAAA;MAnmDA,KAAAojB,SAAA;QACA,IA3GAhkB,CAAA;UACAC,CAAA;UA0GAO,CAAA,OAAAwB,CAAA;QAGA,cA9GAhC,CAAA,GA6GAQ,CAAA,EA1GA6mB,QAAA,GAAA1hB,CAAA,EAEA1F,CAAA,GAAAD,CAAA,CAAAuG,cAAA,OAAAwe,CAAA,IAUA/kB,CAAA,CAAAgI,IAAA,GAAAC,QAAA,CAAA6R,OAAA,EACA9Z,CAAA,CAAAme,QAAA,MACAne,CAAA,CAAAkkB,aAAA,UACAlkB,CAAA,CAAAikB,YAAA,MACAjkB,CAAA,CAAAsnB,WAAA,OAEAtnB,CAAA,CAAAqK,YAAA,OACArK,CAAA,CAAAmkB,OAAA,OACAnkB,CAAA,CAAAunB,YAAA,SACAtnB,CAAA,CAAAiQ,aAAA,OAEAlQ,CAAA,CAAAwnB,WAAA,MACAxnB,CAAA,CAAAynB,YAAA,MACAznB,CAAA,CAAA0nB,YAAA,OACA1nB,CAAA,CAAA2nB,aAAA,OAEA3nB,CAAA,CAAA6H,GAAA,GAAAzC,CAAA,CAAA/B,OAAA,EACArD,CAAA,CAAA4nB,KAAA,MACA5nB,CAAA,CAAA6nB,QAAA,OACA7nB,CAAA,CAAA8nB,qBAAA,QACA9nB,CAAA,CAAA+nB,oBAAA,MACA/nB,CAAA,CAAAgoB,oBAAA,MACAhoB,CAAA,CAAAioB,YAAA,MACAhoB,CAAA,CAAAsP,eAAA,MAEAtP,CAAA,CAAAuP,eAAA,OAGAxP,CAAA,CAAAkoB,UAAA,OACAloB,CAAA,CAAAmoB,gBAAA,OAEAnoB,CAAA,CAAAooB,KAAA,OAEAnoB,CAAA,CAAAoP,cAAA,MAEApP,CAAA,CAAAsQ,QAAA,WACAtQ,CAAA,CAAAsQ,QAAA,WACAtQ,CAAA,CAAAuQ,WAAA,SACAvQ,CAAA,CAAAuQ,WAAA,SACAvQ,CAAA,CAAAwQ,aAAA,MACAxQ,CAAA,CAAA8J,KAAA,CAAAse,UAAA,OACApoB,CAAA,CAAA8J,KAAA,CAAAue,YAAA,OAEAtoB,CAAA,CAAA6d,KAAA,OAEA7d,CAAA,CAAAuoB,UAAA,OACAvoB,CAAA,CAAAwoB,OAAA,OAEAxoB,CAAA,CAAAyoB,gBAAA,OAGAzoB,CAAA,CAAA0oB,iBAAA,MAEA1oB,CAAA,CAAAmhB,WAAA,SACAnhB,CAAA,CAAA2oB,YAAA,OAYA1oB,CAAA,CAAAqP,oBAAA,GAAA+V,EAAA,CAAAxa,QAAA,GAAAwa,EAAA,CAAAva,SAAA,EACA9K,CAAA,CAAA4oB,eAAA,MACA3oB,CAAA,CAAAiH,OAAA,GAAAme,EAAA,CAAAxa,QAAA,GAAAwa,EAAA,CAAAta,SAAA,EAKA/K,CAAA,CAAAoU,cAAA,OACApU,CAAA,CAAAmU,iBAAA,OAEAlU,CAAA,CAAAkU,iBAAA,OACAlU,CAAA,CAAAmU,cAAA,OACAnU,CAAA,CAAAoU,cAAA,OAEApU,CAAA,CAAAsU,SAAA,MACAtU,CAAA,CAAAuU,cAAA,MACAvU,CAAA,CAAAyU,gBAAA,MACAzU,CAAA,CAAA0U,WAAA,OAEA3U,CAAA,CAAA6oB,MAAA,MAEA7oB,CAAA,CAAAokB,sBAAA,OACA,KAQA,QAGA5jB,CAAA,CAAAsoB,kBAAA,MACAtoB,CAAA;MAAA,GAYA,KAAAwmB,uBAAA,aAAAhnB,CAAA;QAGA,IAAAC,CAAA,uCACA;UAEAO,CAAA;UAAAC,CAAA;UAAAC,CAAA;UAAAsB,CAAA;QAGAA,CAAA,GAAA/B,CAAA,MAEAQ,CAAA,GAAAR,CAAA,CADAS,CAAA,QAEAF,CAAA;QAOA,SAAAG,CAAA,MAAuBA,CAAA,OAAQA,CAAA,IAC/B,IAAAiC,IAAA,CAAA6F,GAAA,CAAAzI,CAAA,EAAAC,CAAA,CAAAU,CAAA,UAAAX,CAAA;UACAgC,CAAA,GAAA/B,CAAA,CAAAU,CAAA,OACAD,CAAA,GAAAC,CAAA,MACAF,CAAA,GAAAR,CAAA,CAAAU,CAAA,GACAH,CAAA,GAAAG,CAAA;UACA;QAAA;QAMA,OAAAX,CAAA,GAAAS,CAAA,GAAAuB,CAAA,GAAAhC,CAAA,GACAQ,CAAA,GAEAE,CAAA;MAAA,GAidA,KAAA2jB,gBAAA,aAAArkB,CAAA;QACA,IA/cAC,CAAA;UAAAO,CAAA;UAMAC,CAAA;UAycAC,CAAA,GAAAV,CAAA,CAAAuG,cAAA;QA0FA,IAxFA7F,CAAA,CAAAqO,QAAA,MACA,QAAArO,CAAA,CAAA4H,GAAA,KACA5H,CAAA,CAAA4H,GAAA,OAAA0c,CAAA,KACA,QAAAtkB,CAAA,CAAAsT,GAAA,KACAtT,CAAA,CAAAsT,GAAA,OAAA7K,CAAA,KACA,QAAAzI,CAAA,CAAA+T,MAAA,KACA/T,CAAA,CAAA+T,MAAA,OAAAwQ,CAAA,KAEAvkB,CAAA,CAAA0O,WAAA,GAAApP,CAAA,CAAAikB,YAAA,EACA,KAAAvjB,CAAA,CAAA0O,WAAA,KACApP,CAAA,CAAAgI,IAAA,GAAAC,QAAA,CAAA4R,IAAA,GACAnZ,CAAA,CAAAkG,YAAA,GAAA5G,CAAA,CAAAgI,IAAA,IAAAC,QAAA,CAAA4R,IAAA,UACAnZ,CAAA,CAAAmI,QAAA,GAAAwc,EAAA,CAAAzf,YAAA,EACA5F,CAAA,CAAAgI,IAAA,IAAAC,QAAA,CAAA4R,IAAA,KACA7Z,CAAA,CAAA+I,QAAA,QAKA/I,CAAA,CAAA6H,GAAA,IAAAzC,CAAA,CAAA/B,OAAA,WAAArD,CAAA,CAAA8nB,qBAAA,IACA,KAAA9nB,CAAA,CAAAod,KAAA,KACApd,CAAA,CAAAod,KAAA,GAAApd,CAAA,CAAA8nB,qBAAA,GAEA9nB,CAAA,CAAA6H,GAAA,IAAAzC,CAAA,CAAA/B,OAAA,IAAArD,CAAA,CAAA6H,GAAA,IAAAzC,CAAA,CAAA3B,QAAA,IACAzD,CAAA,CAAA6H,GAAA,IAAAzC,CAAA,CAAA9B,MAAA,KAGAtD,CAAA,CAAA+oB,WAAA,QAIA/oB,CAAA,CAAA6H,GAAA,IAAAzC,CAAA,CAAA/B,OAAA,SAAArD,CAAA,CAAAod,KAAA,IAEA+H,CAAA,CAAAvH,EAAA,CAAA5d,CAAA,CAAAgpB,iBAAA,SACAhpB,CAAA,CAAAgpB,iBAAA,YAOAhpB,CAAA,CAAA6H,GAAA,IAAAzC,CAAA,CAAA/B,OAAA,QAAArD,CAAA,CAAAgpB,iBAAA,KAEA,KAAAhpB,CAAA,CAAAwH,cAAA,KACAxH,CAAA,CAAAwH,cAAA,GAAAyhB,gBAAA,CAAAC,GAAA,OAAAlpB,CAAA,CAAAkkB,aAAA,KASAlkB,CAAA,CAAAod,KAAA,YAAApd,CAAA,CAAAwH,cAAA,GAAA9G,CAAA,CAAAkG,YAAA,UAAA5G,CAAA,CAAAgpB,iBAAA,GAGAtoB,CAAA,CAAA+O,gBAAA,GAAA5J,CAAA,CAAA7F,CAAA,CAAAwH,cAAA,EAAAxH,CAAA,GAEAA,CAAA,CAAA+oB,WAAA,KAIA/oB,CAAA,CAAAod,KAAA,GAAAtX,CAAA,CAAA9F,CAAA,CAAAod,KAAA,EAAApd,CAAA,CAAAmd,OAAA,EACAnd,CAAA,CAAAwH,cAAA,KAGA,KAAAxH,CAAA,CAAAwH,cAAA,KACAxH,CAAA,CAAAwH,cAAA,WACAxH,CAAA,CAAA8nB,qBAAA,GAAAllB,IAAA,CAAA6F,GAAA,CAAAzI,CAAA,CAAA8nB,qBAAA,EACA,IACA9nB,CAAA,CAAA8nB,qBAAA,GAAAllB,IAAA,CAAAyX,GAAA,CAAAra,CAAA,CAAA8nB,qBAAA,EACA,OACa9nB,CAAA,CAAAwH,cAAA,WACbxH,CAAA,CAAA8nB,qBAAA,GAAAllB,IAAA,CAAA6F,GAAA,CAAAzI,CAAA,CAAA8nB,qBAAA,EACA,IACA9nB,CAAA,CAAA8nB,qBAAA,GAAAllB,IAAA,CAAAyX,GAAA,CAAAra,CAAA,CAAA8nB,qBAAA,EACA,SAEA9nB,CAAA,CAAA8nB,qBAAA,GAAAllB,IAAA,CAAA6F,GAAA,CAAAzI,CAAA,CAAA8nB,qBAAA,EACA,KACA9nB,CAAA,CAAA8nB,qBAAA,GAAAllB,IAAA,CAAAyX,GAAA,CAAAra,CAAA,CAAA8nB,qBAAA,EACA,QAOA,KAAA9nB,CAAA,CAAAwnB,WAAA;UACA,IAAAxlB,CAAA;UAEA,QAAAhC,CAAA,CAAA6H,GAAA;YACA,KAAAzC,CAAA,CAAA/B,OAAA;cAGA4C,CAAA,CADAtF,CAAA,OAAAkJ,CAAA,IACA7J,CAAA,CAAAod,KAAA,GACApb,CAAA,GAAArB,CAAA,CAAAimB,UAAA;cACA;YAEA,KAAAxhB,CAAA,CAAA5B,OAAA;cAEA,IAAA7C,CAAA;cACAsF,CAAA,CADAtF,CAAA,OAAAkJ,CAAA,IACA7J,CAAA,CAAA8nB,qBAAA,GACA9lB,CAAA,GAAArB,CAAA,CAAAimB,UAAA;cACA;YAEA,KAAAxhB,CAAA,CAAA7B,MAAA;cAEA,IAAAtC,CAAA,2CACA;cACA,SAAAjB,CAAA,CAAA4nB,KAAA,IAAA5nB,CAAA,CAAA4nB,KAAA;gBACA,IAAAplB,CAAA,GAAAvB,CAAA,CAAAjB,CAAA,CAAA4nB,KAAA;kBAAAhnB,CAAA,GAAAK,CAAA,CAAAjB,CAAA,CAAA4nB,KAAA;kBAAAzkB,CAAA,GAAAnD,CAAA,CAAAmpB,UAAA;gBACAnnB,CAAA,GAAAonB,UAAA,CAAA5mB,CAAA,EAAA5B,CAAA,EAAAuC,CAAA;cAAA,OAEAnB,CAAA;cAEA;YAEA;cAEAf,CAAA,4CACA,kCAGAe,CAAA,GAFA,KAAAhC,CAAA,CAAA4nB,KAAA,IAAA5nB,CAAA,CAAA4nB,KAAA,SACAplB,CAAA,GAAAvB,CAAA,CAAAjB,CAAA,CAAA4nB,KAAA,GAAAhnB,CAAA,GAAAK,CAAA,CAAAjB,CAAA,CAAA4nB,KAAA,OAAAzkB,CAAA,GAAAnD,CAAA,CAAAmpB,UAAA,EACAC,UAAA,CAAA5mB,CAAA,EAAA5B,CAAA,EAAAuC,CAAA,KAEA;UAAA;UAIAnD,CAAA,CAAAgI,IAAA,IAAAC,QAAA,CAAA4R,IAAA,IACA7Z,CAAA,CAAA6H,GAAA,IAAAzC,CAAA,CAAA/B,OAAA,IAAArD,CAAA,CAAA6H,GAAA,IAAAzC,CAAA,CAAA5B,OAAA,KACAxB,CAAA,UAEAhC,CAAA,CAAAwnB,WAAA,OAAAxlB,CAAA;QAAA;QAsCA,IAnCA,KAAAhC,CAAA,CAAAwH,cAAA,KACA,IAAAxH,CAAA,CAAAwnB,WAAA,GAAAxnB,CAAA,CAAAkkB,aAAA,KACAlkB,CAAA,CAAAwnB,WAAA,GAAAxnB,CAAA,CAAAkkB,aAAA,OAEAlkB,CAAA,CAAAwH,cAAA,IA9lBAvH,CAAA,GA8lBA,IAAAD,CAAA,CAAAwnB,WAAA,EA9lBAhnB,CAAA,GA+lBAR,CAAA,CAAAkkB,aAAA,EAzlBAzjB,CAAA,UAEA,QAAAD,CAAA,GACAC,CAAA,UACA,SAAAD,CAAA,GACAC,CAAA,WACA,QAAAD,CAAA,GACAC,CAAA,UACA,QAAAD,CAAA,GACAC,CAAA,UACA,SAAAD,CAAA,GACAC,CAAA,WACA,QAAAD,CAAA,GACAC,CAAA,UACA,QAAAD,CAAA,GACAC,CAAA,UACA,SAAAD,CAAA,GACAC,CAAA,WACA,OAAAD,CAAA,KACAC,CAAA,UAEA,KAAAR,CAAA,GACAQ,CAAA,IAEAR,CAAA,cACAQ,CAAA,WACAR,CAAA,cACAQ,CAAA,UACAR,CAAA,cACAQ,CAAA,UACAR,CAAA,aACAQ,CAAA,WACAR,CAAA,aACAQ,CAAA,UACAR,CAAA,aACAQ,CAAA,UACAR,CAAA,aACAQ,CAAA,WACAR,CAAA,aACAQ,CAAA,SAEAD,CAAA,GAAAC,CAAA,GAKA,QAAAD,CAAA,GACA,OAEA,OAAAA,CAAA,GACA,QAEA,OAAAA,CAAA,GACA,OAEA,QAAAA,CAAA,GACA,OAEA,OAAAA,CAAA,GACA,QAEA,OAAAA,CAAA,GACA,OAEA,QAAAA,CAAA,GACA,OAEA,MAAAA,CAAA,GACA,QAEA,MAEAC,CAAA,KAohBAT,CAAA,CAAAwnB,WAAA,GAAA5kB,IAAA,CAAAyX,GAAA,QAAAra,CAAA,CAAAwnB,WAAA,GACAxnB,CAAA,CAAAwnB,WAAA,GAAA5kB,IAAA,CAAAyX,GAAA,CAAAra,CAAA,CAAAwH,cAAA,MAAAxH,CAAA,CAAAwnB,WAAA,GAEAxnB,CAAA,CAAA6H,GAAA,IAAAzC,CAAA,CAAA/B,OAAA,KACArD,CAAA,CAAAgpB,iBAAA,QAAAhpB,CAAA,CAAAwH,cAAA,GAAA9G,CAAA,CAAAkG,YAAA,IACA,MAAA5G,CAAA,CAAAod,KAAA,IAEApd,CAAA,CAAA6H,GAAA,IAAAzC,CAAA,CAAA5B,OAAA,KACAxD,CAAA,CAAAgpB,iBAAA,QAAAhpB,CAAA,CAAAwH,cAAA,GAAA9G,CAAA,CAAAkG,YAAA,IACA,MAAA5G,CAAA,CAAA8nB,qBAAA,IAOA9nB,CAAA,CAAAqK,YAAA,KACArK,CAAA,CAAAoU,cAAA,OACApU,CAAA,CAAAmU,iBAAA,OACAzT,CAAA,CAAA2T,cAAA,QAEA3T,CAAA,CAAA0T,cAAA,GAAApU,CAAA,CAAAoU,cAAA,EACA1T,CAAA,CAAAyT,iBAAA,GAAAnU,CAAA,CAAAmU,iBAAA,EAEAzT,CAAA,CAAAyT,iBAAA,KACAzT,CAAA,CAAA2T,cAAA,QAEA3T,CAAA,CAAA0T,cAAA,IACA5O,CAAA,CAAAgV,gBAAA,CAAA9Z,CAAA,CAAA+T,MAAA,EAAAzU,CAAA,CAAAwH,cAAA,KAAAkW,YAAA,CAAAzC,wBAAA,EAEA,OADAjb,CAAA,CAAAuG,cAAA,UACA;QAkDA,QA9CA7F,CAAA,CAAAyT,iBAAA,KAAAnU,CAAA,CAAAqpB,WAAA,KACA,QAAA3oB,CAAA,CAAAkU,GAAA,IACA3L,CAAA,CAAAqgB,eAAA,CAAA5oB,CAAA,CAAAkU,GAAA,GAEAlU,CAAA,CAAAkU,GAAA,GAAA3L,CAAA,CAAAsgB,eAAA,KAGA7oB,CAAA,CAAAiG,OAAA,GAAA3G,CAAA,CAAAwH,cAAA,kBAIAxH,CAAA,CAAAoH,SAAA,SAAA1G,CAAA,CAAAiG,OAAA,EACA3G,CAAA,CAAAwpB,aAAA,GAAAnE,EAAA,CAAAxa,QAAA,EAEAnK,CAAA,CAAA2O,cAAA,GAAArP,CAAA,CAAAkkB,aAAA,GAAAlkB,CAAA,CAAAwH,cAAA,EAgCAxH,CAAA,CAAA6H,GAAA;UACA,KAAAzC,CAAA,CAAA9B,MAAA;UACA,KAAA8B,CAAA,CAAA7B,MAAA;UACA,KAAA6B,CAAA,CAAA3B,QAAA;YAKAzD,CAAA,CAAAgpB,iBAAA,GAFA,uCACA,UACAhpB,CAAA,CAAA4nB,KAAA;YAEA;UACA,KAAAxiB,CAAA,CAAA5B,OAAA;YACAxD,CAAA,CAAAgpB,iBAAA,QAAAhpB,CAAA,CAAAwH,cAAA,GAAA9G,CAAA,CAAAkG,YAAA,IACA,MAAA5G,CAAA,CAAA8nB,qBAAA;YACA;UACA;YACA9nB,CAAA,CAAAgpB,iBAAA,QAAAhpB,CAAA,CAAAwH,cAAA,GAAA9G,CAAA,CAAAkG,YAAA,IACA,MAAA5G,CAAA,CAAAod,KAAA;QAAA;QAqDA,IA7CApd,CAAA,CAAAgI,IAAA,IAAAC,QAAA,CAAA6R,OAAA,KACA9Z,CAAA,CAAAgI,IAAA,GAAAC,QAAA,CAAAC,YAAA,GAIA,IAAAlI,CAAA,CAAAynB,YAAA,IACA/mB,CAAA,CAAAkP,SAAA,OAAA5P,CAAA,CAAAynB,YAAA,EAEA,KAAAznB,CAAA,CAAA2nB,aAAA,GACAjnB,CAAA,CAAAmP,SAAA,QAAA7P,CAAA,CAAAynB,YAAA,GAAAznB,CAAA,CAAA2nB,aAAA,IAGAjnB,CAAA,CAAAmP,SAAA,OAAA7P,CAAA,CAAAynB,YAAA,EAEA/mB,CAAA,CAAAkP,SAAA,IAAA5P,CAAA,CAAAwH,cAAA,EACA9G,CAAA,CAAAmP,SAAA,IAAA7P,CAAA,CAAAwH,cAAA,KAEA9G,CAAA,CAAAkP,SAAA,MACAlP,CAAA,CAAAmP,SAAA,OAGA,IAAA7P,CAAA,CAAAwnB,WAAA,IACA9mB,CAAA,CAAAiP,QAAA,OAAA3P,CAAA,CAAAwnB,WAAA,EACA,KAAAxnB,CAAA,CAAA0nB,YAAA,IACAhnB,CAAA,CAAAgP,QAAA,QAAA1P,CAAA,CAAAwnB,WAAA,GAAAxnB,CAAA,CAAA0nB,YAAA,GACAhnB,CAAA,CAAAgP,QAAA,SACAhP,CAAA,CAAAgP,QAAA,SAEAhP,CAAA,CAAAgP,QAAA,OAAA1P,CAAA,CAAAwnB,WAAA,EAEA9mB,CAAA,CAAAgP,QAAA,IAAA1P,CAAA,CAAAwH,cAAA,EACA9G,CAAA,CAAAiP,QAAA,IAAA3P,CAAA,CAAAwH,cAAA,KAEA9G,CAAA,CAAAgP,QAAA,MACAhP,CAAA,CAAAiP,QAAA,OApjBA,UAAA3P,CAAA;UACA,IAAAC,CAAA,GAAAD,CAAA,CAAAuG,cAAA;YAKA/F,CAAA;YACAC,CAAA;UAEA,QAAAR,CAAA,CAAAyP,QAAA;YAEA,KADA,IAAAhP,CAAA,QACAsB,CAAA,MAA8BA,CAAA,QAAYA,CAAA,KAC1CpB,CAAA,GAAAoB,CAAA,UAEA/B,CAAA,CAAA0P,QAAA,KACAnP,CAAA,GAAAoC,IAAA,CAAAyX,GAAA,CAAA7Z,CAAA,EAAAwB,CAAA,IAEA/B,CAAA,CAAAyP,QAAA,GAAA9O,CAAA,IAAAA,CAAA,GAAAX,CAAA,CAAA0P,QAAA,KACAjP,CAAA,GAAAkC,IAAA,CAAAyX,GAAA,CAAA3Z,CAAA,EAAAsB,CAAA;YASA/B,CAAA,CAAAyP,QAAA,GADA,OAAAhP,CAAA,IACAF,CAAA,gBAEAE,CAAA,cAEAT,CAAA,CAAA0P,QAAA,GAAAnP,CAAA;UAAA;UAgBA,IATA,IAAAP,CAAA,CAAA4P,SAAA,IACA5P,CAAA,CAAA4P,SAAA,qBACA5P,CAAA,CAAA2P,SAAA,MACA3P,CAAA,CAAA4P,SAAA,MACA1K,CAAA,CAAA8X,GAAA,CAAAC,OAAA,yEAKA,IAAAjd,CAAA,CAAA4P,SAAA;YACA,IAAAlP,CAAA;YACA,KAAAqB,CAAA,MAA8BA,CAAA,QAAYA,CAAA,KAC1CpB,CAAA,GAAAoB,CAAA,UAEA/B,CAAA,CAAA2P,SAAA,KACAnP,CAAA,GAAAmC,IAAA,CAAA6F,GAAA,CAAAhI,CAAA,EAAAuB,CAAA,IAEA/B,CAAA,CAAA2P,SAAA,GAAAhP,CAAA,IAAAA,CAAA,GAAAX,CAAA,CAAA4P,SAAA,KACAlP,CAAA,GAAAiC,IAAA,CAAA6F,GAAA,CAAA9H,CAAA,EAAAqB,CAAA;YAOA/B,CAAA,CAAA2P,SAAA,GAAAnP,CAAA,OAEAR,CAAA,CAAA4P,SAAA,IADA,KAAAlP,CAAA,IACAF,CAAA,gBAEAE,CAAA;UAAA;UAIA,KAAAqB,CAAA,MAA0BA,CAAA,OAAWA,CAAA;YACrC,IAAAf,CAAA;cAAAuB,CAAA;cACA5B,CAAA,GAAAoB,CAAA;YAEAf,CAAA,GADAhB,CAAA,CAAA4P,SAAA,GAAA5P,CAAA,CAAA2P,SAAA,GACA9F,CAAA,EAAA7J,CAAA,CAAA4P,SAAA,GAAAjP,CAAA,KACAX,CAAA,CAAA4P,SAAA,GAAA5P,CAAA,CAAA2P,SAAA,aAEA,GAGApN,CAAA,GADAvC,CAAA,CAAA0P,QAAA,GAAA1P,CAAA,CAAAyP,QAAA,GACA5F,CAAA,EAAAlJ,CAAA,GAAAX,CAAA,CAAAyP,QAAA,KACAzP,CAAA,CAAA0P,QAAA,GAAA1P,CAAA,CAAAyP,QAAA,aAEA,GAEAzP,CAAA,CAAAmR,UAAA,CAAApP,CAAA,IAAAf,CAAA,GAAAuB,CAAA;UAAA;QAAA,CAoeA,CAAAxC,CAAA,GAIAU,CAAA,CAAA+O,gBAAA,GAAA5J,CAAA,CAAA7F,CAAA,CAAAwH,cAAA,EAAAxH,CAAA,GACAU,CAAA,CAAA+O,gBAAA,MAEA,OADAzP,CAAA,CAAAuG,cAAA,UACA;QAGA,IAAAvG,CAAA,CAAA6H,GAAA,IAAAzC,CAAA,CAAA/B,OAAA;UACA,IAAArD,CAAA,CAAA+oB,WAAA,EACAroB,CAAA,CAAAgK,aAAA,UAMA,IAJA1K,CAAA,CAAAod,KAAA,GAAAtX,CAAA,CAAA9F,CAAA,CAAAod,KAAA,EAAApd,CAAA,CAAAmd,OAAA,EACAnd,CAAA,CAAAwH,cAAA,GACA9G,CAAA,CAAAgK,aAAA,GAAA1E,CAAA,CAAAhG,CAAA,CAAAod,KAAA,EAAApd,CAAA,CAAAmd,OAAA,EACAnd,CAAA,CAAAwH,cAAA,GACA9G,CAAA,CAAAgK,aAAA,OAEA,OADA1K,CAAA,CAAAuG,cAAA,UACA;QAAA,OAIA7F,CAAA,CAAAgK,aAAA;QAKA1K,CAAA,CAAAoJ,QAAA,KACApJ,CAAA,CAAAqK,YAAA,QAGA,QAAA3J,CAAA,CAAA2I,KAAA,KACArJ,CAAA,CAAAqK,YAAA,QAGA5E,CAAA,CAAAqZ,iBAAA,CAAApe,CAAA;QAIA,KAFA,IAnYAK,CAAA,EACAsF,CAAA,EAwaAC,CAAA,EAtCAvE,CAAA,GAAArB,CAAA,CAAA+O,gBAAA,OAAAzP,CAAA,CAAAmd,OAAA,QACAnd,CAAA,CAAAwH,cAAA,kBACAxG,CAAA,MAAuBA,CAAA,GAAAqkB,EAAA,CAAAha,OAAA,MAAyBrK,CAAA,IAChDN,CAAA,CAAAkR,aAAA,CAAAhR,CAAA,CAAAI,CAAA,IAAA2G,CAAA,CAAAuY,WAAA,CAAAne,CAAA,EAAAnB,CAAA,CAAAI,CAAA;QAEA,KAAAA,CAAA,MAAuBA,CAAA,GAAAqkB,EAAA,CAAA9Z,MAAA,MAAwBvK,CAAA;UAC/C,IAAAwF,CAAA,IAAA9F,CAAA,CAAAkR,aAAA,CAAAhR,CAAA,OAAAF,CAAA,CAAAkR,aAAA,CAAAhR,CAAA,QACAykB,EAAA,CAAA9Z,MAAA;YACAzK,CAAA,GAAAJ,CAAA,CAAAkR,aAAA,CAAAhR,CAAA,OAAAI,CAAA,GAAAwF,CAAA;UACA9F,CAAA,CAAAkR,aAAA,CAAAmI,MAAA,CAAA/Y,CAAA,IAAAF,CAAA;QAAA;QAIA,KAFAJ,CAAA,CAAAkR,aAAA,CAAAmI,MAAA,CAAAsL,EAAA,CAAA9Z,MAAA,SAEAvK,CAAA,MAAuBA,CAAA,GAAAqkB,EAAA,CAAA/Z,OAAA,MAAyBtK,CAAA,IAChDN,CAAA,CAAAkR,aAAA,CAAA5P,CAAA,CAAAhB,CAAA,IAAA2G,CAAA,CAAAuY,WAAA,CAAAne,CAAA,EAAAC,CAAA,CAAAhB,CAAA;QAEA,KAAAA,CAAA,MAAuBA,CAAA,GAAAqkB,EAAA,CAAA7Z,MAAA,MAAwBxK,CAAA,IAC/CwF,CAAA,IAAA9F,CAAA,CAAAkR,aAAA,CAAA5P,CAAA,OAAAtB,CAAA,CAAAkR,aAAA,CAAA5P,CAAA,QACAqjB,EAAA,CAAA7Z,MAAA,EACA1K,CAAA,GAAAJ,CAAA,CAAAkR,aAAA,CAAA5P,CAAA,OAAAhB,CAAA,GAAAwF,CAAA,EACA9F,CAAA,CAAAkR,aAAA,CAAAoI,MAAA,CAAAhZ,CAAA,IAAAF,CAAA;QAoBA,KAlBAJ,CAAA,CAAAkR,aAAA,CAAAoI,MAAA,CAAAqL,EAAA,CAAA7Z,MAAA,SAEA,KAAAxL,CAAA,CAAAmd,OAAA,GACAzc,CAAA,CAAAwQ,YAAA,QAAAxQ,CAAA,CAAAkG,YAAA,aAGAlG,CAAA,CAAAwQ,YAAA,QAAAxQ,CAAA,CAAAkG,YAAA,YAEA5G,CAAA,CAAAge,gBAAA,KACAtd,CAAA,CAAAwQ,YAAA,QAjaA7K,CAAA,IADAtF,CAAA,GAoaAf,CAAA,EAnaAuG,cAAA,EACAxF,CAAA,CAAA0oB,QAAA,MAEA1oB,CAAA,CAAAqjB,sBAAA,IACApb,CAAA,CAAA0gB,eAAA,CAAA3oB,CAAA,GAIAsF,CAAA,CAAAsE,uBAAA,GAAApF,CAAA,WACAc,CAAA,CAAAuE,sBAAA,GAAArF,CAAA,WAEAc,CAAA,CAAAiO,UAAA,MAGAvT,CAAA,CAAAsJ,YAAA,IACAlC,CAAA,CAAAwhB,UAAA,CAAA5oB,CAAA,GAsZAL,CAAA,CAAAqO,QAAA,GAAApJ,CAAA,EAKAW,CAAA,MAAuBA,CAAA,OAAQA,CAAA,IAC/B5F,CAAA,CAAAqJ,KAAA,CAAAC,QAAA,CAAA1D,CAAA,UAAA5F,CAAA,CAAAiG,OAAA,GAAAjG,CAAA,CAAAkG,YAAA;QAQA,SANA,KAAA5G,CAAA,CAAAwoB,OAAA,KACAxoB,CAAA,CAAAwoB,OAAA,OAEA3D,CAAA,CAAA7kB,CAAA,CAAA4nB,KAAA,QACA/C,CAAA,MAAA7kB,CAAA,CAAA4nB,KAAA,GAEA5nB,CAAA,CAAA6H,GAAA;UAEA,KAAAzC,CAAA,CAAA9B,MAAA;YACAtD,CAAA,CAAA6H,GAAA,GAAAzC,CAAA,CAAA3B,QAAA;UAEA,KAAA2B,CAAA,CAAA3B,QAAA;YAEA,QAAAzD,CAAA,CAAAmhB,WAAA,KACAnhB,CAAA,CAAAmhB,WAAA,QAIAzZ,CAAA,CAAAkiB,YAAA,CAAA5pB,CAAA,aAAAA,CAAA,CAAA4nB,KAAA,MASA5nB,CAAA,CAAAmkB,OAAA,SACAnkB,CAAA,CAAAmkB,OAAA,GAAA0F,oBAAA,GACA7pB,CAAA,CAAAmkB,OAAA,SACAnkB,CAAA,CAAAmkB,OAAA,OACA,IAAAnkB,CAAA,CAAAmkB,OAAA,KACAnkB,CAAA,CAAAmkB,OAAA,OAEAzjB,CAAA,CAAAsT,GAAA,CAAAwS,WAAA,GAAAxmB,CAAA,CAAA8pB,aAAA,EACAppB,CAAA,CAAAsT,GAAA,CAAAyS,iBAAA,GAAAzmB,CAAA,CAAA+pB,mBAAA,EAKA/pB,CAAA,CAAAgqB,aAAA,GACAtpB,CAAA,CAAAmQ,WAAA,QAEAnQ,CAAA,CAAAmQ,WAAA,UAAA7Q,CAAA,CAAAwH,cAAA,EAEA9G,CAAA,CAAAwJ,cAAA,OAAA+f,mBAAA,CAAAriB,CAAA;YACA;UAGA,KAAAxC,CAAA,CAAA7B,MAAA;YAGAmE,CAAA,CAAAkiB,YAAA,CAAA5pB,CAAA,aAAAA,CAAA,CAAA4nB,KAAA,MAEAlnB,CAAA,CAAAsT,GAAA,CAAAwS,WAAA,GAAAxmB,CAAA,CAAA8pB,aAAA,EACAppB,CAAA,CAAAsT,GAAA,CAAAyS,iBAAA,GAAAzmB,CAAA,CAAA+pB,mBAAA,EAKA/pB,CAAA,CAAAgqB,aAAA,GACAtpB,CAAA,CAAAmQ,WAAA,QAEAnQ,CAAA,CAAAmQ,WAAA,UAAA7Q,CAAA,CAAAwH,cAAA,EAOA,IAAAxH,CAAA,CAAAmkB,OAAA,KACAnkB,CAAA,CAAAmkB,OAAA,OAEAnkB,CAAA,CAAAmkB,OAAA,SACAnkB,CAAA,CAAAmkB,OAAA,GAAA0F,oBAAA,GAEAnpB,CAAA,CAAAwJ,cAAA,OAAAggB,mBAAA,CAAAtiB,CAAA;YACA;UAGA;YAEA,IAAAnB,CAAA;YAKA/F,CAAA,CAAAmQ,WAAA,OAEA7Q,CAAA,CAAAmkB,OAAA,SACAnkB,CAAA,CAAAmkB,OAAA,GAAA0F,oBAAA,IAEApjB,CAAA,GAAAzG,CAAA,CAAA6H,GAAA,KACAzC,CAAA,CAAA/B,OAAA,KACArD,CAAA,CAAA8nB,qBAAA,GAAA9nB,CAAA,CAAAod,KAAA,GAEA1V,CAAA,CAAAkiB,YAAA,CAAA5pB,CAAA,EAAAA,CAAA,CAAA8nB,qBAAA,MACA9nB,CAAA,CAAA6H,GAAA,GAAApB,CAAA,EAEA/F,CAAA,CAAAsT,GAAA,CAAAwS,WAAA,GAAAxmB,CAAA,CAAA8pB,aAAA,EACAppB,CAAA,CAAAsT,GAAA,CAAAyS,iBAAA,GAAAzmB,CAAA,CAAA+pB,mBAAA,EAEAtjB,CAAA,IAAArB,CAAA,CAAA/B,OAAA,GACA3C,CAAA,CAAAwJ,cAAA,OAAAgb,CAAA,CAAAtd,CAAA,IAEAlH,CAAA,CAAAwJ,cAAA,OAAAigB,gBAAA,CAAAviB,CAAA;QAAA;QAQA,IAHAid,CAAA,MAAA7kB,CAAA,CAAA6d,KAAA,GAGA7d,CAAA,CAAA6H,GAAA,IAAAzC,CAAA,CAAA/B,OAAA;UAaA,IAXA3C,CAAA,CAAA6O,eAAA,MAIA7O,CAAA,CAAA8O,eAAA,OAIAxP,CAAA,CAAAwH,cAAA,YACA9G,CAAA,CAAA8O,eAAA,OAEA,KAAAxP,CAAA,CAAA+nB,oBAAA,KACA/nB,CAAA,CAAA+nB,oBAAA,GAAAjiB,CAAA,CACA9F,CAAA,CAAA+nB,oBAAA,EAAA/nB,CAAA,CAAAmd,OAAA,EACAnd,CAAA,CAAAwH,cAAA,GACA9G,CAAA,CAAA6O,eAAA,GAAAvJ,CAAA,CAAAhG,CAAA,CAAA+nB,oBAAA,EACA/nB,CAAA,CAAAmd,OAAA,EAAAnd,CAAA,CAAAwH,cAAA,GACA9G,CAAA,CAAA6O,eAAA,OACA;UAEA,SAAAvP,CAAA,CAAAgoB,oBAAA,KACAhoB,CAAA,CAAAgoB,oBAAA,GAAAliB,CAAA,CACA9F,CAAA,CAAAgoB,oBAAA,EAAAhoB,CAAA,CAAAmd,OAAA,EACAnd,CAAA,CAAAwH,cAAA,GACA9G,CAAA,CAAA8O,eAAA,GAAAxJ,CAAA,CAAAhG,CAAA,CAAAgoB,oBAAA,EACAhoB,CAAA,CAAAmd,OAAA,EAAAnd,CAAA,CAAAwH,cAAA,GACA9G,CAAA,CAAA8O,eAAA,OACA;UAEAxP,CAAA,CAAA+nB,oBAAA,GAAA3C,CAAA,CAAA5L,aAAA,CAAAxZ,CAAA,CAAAmd,OAAA,EAAAzc,CAAA,CAAA6O,eAAA,GACAvP,CAAA,CAAAgoB,oBAAA,GAAA5C,CAAA,CAAA5L,aAAA,CAAAxZ,CAAA,CAAAmd,OAAA,EAAAzc,CAAA,CAAA8O,eAAA,GACAxP,CAAA,CAAA8nB,qBAAA,GAAAllB,IAAA,CAAAyX,GAAA,CACA+K,CAAA,CAAA5L,aAAA,CAAAxZ,CAAA,CAAAmd,OAAA,EAAAzc,CAAA,CAAA8O,eAAA,GACAxP,CAAA,CAAA8nB,qBAAA,GACA9nB,CAAA,CAAA8nB,qBAAA,GAAAllB,IAAA,CAAA6F,GAAA,CACA2c,CAAA,CAAA5L,aAAA,CAAAxZ,CAAA,CAAAmd,OAAA,EAAAzc,CAAA,CAAA6O,eAAA,GACAvP,CAAA,CAAA8nB,qBAAA;QAAA;QAiGA,OA7FA9nB,CAAA,CAAAoqB,IAAA,KACA1pB,CAAA,CAAAsT,GAAA,CAAAwS,WAAA,IAAAxmB,CAAA,CAAAqqB,YAAA,EACA3pB,CAAA,CAAAsT,GAAA,CAAAyS,iBAAA,IAAAzmB,CAAA,CAAAqqB,YAAA,GA/sBA,UAAArqB,CAAA;UACA,IAAAC,CAAA,GAAAD,CAAA,CAAAuG,cAAA;UAEA,QAAAvG,CAAA,CAAAmkB,OAAA;YACA;YACA;cACAlkB,CAAA,CAAAwH,QAAA,MACAxH,CAAA,CAAA6P,aAAA,MACA7P,CAAA,CAAA8P,iBAAA,MACA9P,CAAA,CAAAgQ,kBAAA,MACAhQ,CAAA,CAAAkQ,gBAAA,MACAlQ,CAAA,CAAAmQ,eAAA;cACA;YAEA;cACApQ,CAAA,CAAAmkB,OAAA;YAEA;cAKAlkB,CAAA,CAAAwH,QAAA,MACAxH,CAAA,CAAA6P,aAAA,MACA7P,CAAA,CAAA8P,iBAAA,MACA9P,CAAA,CAAAgQ,kBAAA,MACAhQ,CAAA,CAAAkQ,gBAAA,MACAlQ,CAAA,CAAAmQ,eAAA;cACA;YAEA;YAYA;cACAnQ,CAAA,CAAAwH,QAAA,MACA,KAAAxH,CAAA,CAAA6P,aAAA,KACA7P,CAAA,CAAA6P,aAAA,OACA7P,CAAA,CAAA8P,iBAAA,MACA9P,CAAA,CAAAgQ,kBAAA,OACA,KAAAhQ,CAAA,CAAAiQ,aAAA,KACAjQ,CAAA,CAAAiQ,aAAA,OACAjQ,CAAA,CAAAkQ,gBAAA,MACAlQ,CAAA,CAAAmQ,eAAA;cACA;YAEA;cACAnQ,CAAA,CAAAwH,QAAA,MACA,KAAAxH,CAAA,CAAA6P,aAAA,KACA7P,CAAA,CAAA6P,aAAA,OACA7P,CAAA,CAAA8P,iBAAA,MACA9P,CAAA,CAAAgQ,kBAAA,OACA,KAAAhQ,CAAA,CAAAiQ,aAAA,KACAjQ,CAAA,CAAAiQ,aAAA,OACAjQ,CAAA,CAAAkQ,gBAAA,MACAlQ,CAAA,CAAAmQ,eAAA;cACA;YAEA;cACAnQ,CAAA,CAAAwH,QAAA,MACA,KAAAxH,CAAA,CAAA6P,aAAA,KACA7P,CAAA,CAAA6P,aAAA,OACA7P,CAAA,CAAA8P,iBAAA,QACA9P,CAAA,CAAAgQ,kBAAA,SACAhQ,CAAA,CAAAiQ,aAAA,KACAjQ,CAAA,CAAAiQ,aAAA,OACAjQ,CAAA,CAAAkQ,gBAAA,MACAlQ,CAAA,CAAAmQ,eAAA;cACA;YAEA;cACAnQ,CAAA,CAAAwH,QAAA,MACA,KAAAxH,CAAA,CAAA6P,aAAA,KACA7P,CAAA,CAAA6P,aAAA,OACA,KAAA7P,CAAA,CAAA+P,eAAA,KACA/P,CAAA,CAAA+P,eAAA,OACA/P,CAAA,CAAA8P,iBAAA,QACA9P,CAAA,CAAAgQ,kBAAA,SACAhQ,CAAA,CAAAiQ,aAAA,KACAjQ,CAAA,CAAAiQ,aAAA,OACAjQ,CAAA,CAAAkQ,gBAAA,MAEAlQ,CAAA,CAAAmQ,eAAA;cACA;YAEA;YAcA;cACAnQ,CAAA,CAAAwH,QAAA,MACA,KAAAxH,CAAA,CAAA6P,aAAA,KACA7P,CAAA,CAAA6P,aAAA,OACA,KAAA7P,CAAA,CAAA+P,eAAA,KACA/P,CAAA,CAAA+P,eAAA,OACA/P,CAAA,CAAA8P,iBAAA,QACA9P,CAAA,CAAAgQ,kBAAA,SACAhQ,CAAA,CAAAiQ,aAAA,KACAjQ,CAAA,CAAAiQ,aAAA,OACAjQ,CAAA,CAAAkQ,gBAAA,MAKAlQ,CAAA,CAAAmQ,eAAA;UAAA;QAAA,CAylBA,CAAApQ,CAAA,GACA6kB,CAAA,MAAA7kB,CAAA,CAAA6d,KAAA,GAIA7d,CAAA,CAAAuoB,UAAA,OACA7nB,CAAA,CAAA4H,GAAA,CAAAC,SAAA,OAEA7H,CAAA,CAAA4H,GAAA,CAAAC,SAAA,GAAAvI,CAAA,CAAAuoB,UAAA,EAGA7nB,CAAA,CAAA4H,GAAA,CAAAI,cAAA,GAAA9F,IAAA,CAAAwd,GAAA,KAAApgB,CAAA,CAAA0oB,iBAAA,IACA,KAEA,QAAA1oB,CAAA,CAAAunB,YAAA,KACAvnB,CAAA,CAAAunB,YAAA,GAAAliB,CAAA,CAAAtC,mBAAA,GAcA/C,CAAA,CAAAunB,YAAA,IAAAliB,CAAA,CAAAtC,mBAAA,IACA/C,CAAA,CAAAgI,IAAA,IAAAC,QAAA,CAAAC,YAAA,IAAAlI,CAAA,CAAAgI,IAAA,IAAAC,QAAA,CAAA0R,MAAA,KACA3Z,CAAA,CAAAunB,YAAA,GAAAliB,CAAA,CAAArC,mBAAA,GAGAhD,CAAA,CAAAkoB,UAAA,SACAloB,CAAA,CAAAkoB,UAAA,OACAloB,CAAA,CAAAmoB,gBAAA,SACAnoB,CAAA,CAAAmoB,gBAAA,OAEAnoB,CAAA,CAAAooB,KAAA,SACApoB,CAAA,CAAAooB,KAAA,OAGApoB,CAAA,CAAAwgB,aAAA,OAAAxgB,CAAA,CAAAwgB,aAAA,EAEAxgB,CAAA,CAAAuG,cAAA,CAAAwD,KAAA,CAAAse,UAAA,SACAroB,CAAA,CAAAuG,cAAA,CAAAwD,KAAA,CAAAse,UAAA,GAAAvD,CAAA,CAAAwF,YAAA,GACAtqB,CAAA,CAAAuG,cAAA,CAAAwD,KAAA,CAAAue,YAAA,SACAtoB,CAAA,CAAAuG,cAAA,CAAAwD,KAAA,CAAAue,YAAA,GAAAxD,CAAA,CAAAyF,cAAA,GAEA1F,CAAA,MAAA7kB,CAAA,CAAA6d,KAAA,GAEA7d,CAAA,CAAA6d,KAAA,SACA7d,CAAA,CAAA6d,KAAA,OAEA7d,CAAA,CAAAwoB,OAAA,SACAxoB,CAAA,CAAAwoB,OAAA,OAEAxoB,CAAA,CAAA6nB,QAAA,SACA7nB,CAAA,CAAA6nB,QAAA,OAEA7nB,CAAA,CAAAyoB,gBAAA,SACAzoB,CAAA,CAAAyoB,gBAAA,OAEAzoB,CAAA,CAAA2oB,YAAA,SACA3oB,CAAA,CAAA2oB,YAAA,OAEA,QAAA3oB,CAAA,CAAAmhB,WAAA,KACAnhB,CAAA,CAAAmhB,WAAA,QAYAzgB,CAAA,CAAA4G,QAAA,GAAA5G,CAAA,CAAA6G,QAAA,MACAvH,CAAA,CAAA6H,GAAA,IAAAzC,CAAA,CAAA/B,OAAA,KACA3C,CAAA,CAAA4G,QAAA,GAAA5G,CAAA,CAAA6G,QAAA,WAAAvH,CAAA,CAAAmd,OAAA,QAAAnd,CAAA,CAAAod,KAAA,GAAApd,CAAA,CAAAwH,cAAA,OAEAG,CAAA,CAAA2Y,cAAA,CAAAtgB,CAAA,GACAkJ,CAAA,CAAAshB,aAAA,CAAAxqB,CAAA,GACA6kB,CAAA,MAAA7kB,CAAA,CAAA6d,KAAA,GACA;MAAA,GAWA,KAAA6G,iBAAA,aAAA1kB,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA;QACA,IAEAC,CAAA;UAAAsB,CAAA;UAOArB,CAAA;UACAM,CAAA;UAVAuB,CAAA,GAAAxC,CAAA,CAAAuG,cAAA;UACA3F,CAAA,GAAAI,CAAA;UACAmC,CAAA;UASApC,CAAA,GAAAyB,CAAA,CAAA8M,oBAAA,GAAA+V,EAAA,CAAAva,SAAA;UACAzE,CAAA,GAAAF,CAAA,CAAAnG,CAAA;QAGA,IAAAwC,CAAA,CAAA8M,oBAAA,MACA;QAsBA,KApBA5O,CAAA,MAEAV,CAAA,CAAAkkB,aAAA,IAAAlkB,CAAA,CAAAwH,cAAA,KAKAzG,CAAA,SAAAf,CAAA,CAAAwH,cAAA,GAAAxH,CAAA,CAAAkkB,aAAA,IAEAvjB,CAAA,GAAAX,CAAA,CAAAoH,SAAA,GAAArG,CAAA,GAAAf,CAAA,CAAAoH,SAAA,IACA,QACAzG,CAAA,IAAAX,CAAA,CAAAoH,SAAA,GAGAnG,CAAA,IAAAF,CAAA,IAFAf,CAAA,CAAA4oB,eAAA,GAAAjoB,CAAA,KAEAX,CAAA,CAAAoH,SAAA,EAMA,IAAAnG,CAAA,SAAAkC,CAAA;UACA,IAAAmD,CAAA,GAAAD,CAAA,GAAA7D,CAAA,CAAA0E,OAAA;YACAnF,CAAA,GAAA/B,CAAA,CAAAypB,QAAA;UAEAnjB,CAAA,IAAAtG,CAAA,CAAAkkB,aAAA,EAEA,QADA5d,CAAA,IAAAtG,CAAA,CAAAwH,cAAA,MAEAlB,CAAA,UACAA,CAAA,SACAA,CAAA,OAEAtE,CAAA,GAAAvB,CAAA,GAAAC,CAAA,EAGA,KAAAD,CAAA,KACAuB,CAAA,OAKAxB,CAAA,IAHA2C,CAAA,QAAAohB,kBAAA,CAAAvkB,CAAA,EAAAY,CAAA,KAAAA,CAAA,KAAA0F,CAAA,EACArG,CAAA,EAAAO,CAAA,EAAAwB,CAAA,GAGAtB,CAAA,IAAAyC,CAAA,EACAlC,CAAA,IAAAc,CAAA,IAAA/B,CAAA,CAAAypB,QAAA;QAAA;QAQA,IAAAtmB,CAAA,IAFAX,CAAA,CAAA8M,oBAAA,OAIA,OAAAnM,CAAA;QAYA,IATAnB,CAAA,GAAAvB,CAAA,GAAAC,CAAA,EAEA,KAAAD,CAAA,KACAuB,CAAA,OAGAyD,CAAA,CAAA8X,eAAA,CAAAvd,CAAA,IACAmD,CAAA,GAAAsC,CAAA,CAAA2E,WAAA,CAAA5H,CAAA,EAAAvC,CAAA,EAAAO,CAAA,EACAwB,CAAA,QACA,GAEA,OAAAmB,CAAA;QASA,IAPA3C,CAAA,IAAA2C,CAAA,EAEAnB,CAAA,GAAAvB,CAAA,IADAC,CAAA,IAAAyC,CAAA,GAGA,KAAA1C,CAAA,KACAuB,CAAA,OAEAhC,CAAA,CAAAokB,sBAAA;UAOA,IALApb,CAAA,CAAAyhB,eAAA,CAAAzqB,CAAA,IAEAmD,CAAA,GAAAsC,CAAA,CAAA2E,WAAA,CAAA5H,CAAA,EAAAvC,CAAA,EAAAO,CAAA,EACAwB,CAAA,QAEA,GACA,OAAAmB,CAAA;UAEAzC,CAAA,IAAAyC,CAAA;QAAA;QAEA,OAAAzC,CAAA;MAAA,GAGA,KAAA6jB,kBAAA,aAAAvkB,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA,EAAArB,CAAA;QACA,IAtHAM,CAAA;UAAAuB,CAAA;UAsHA5B,CAAA,GAAAZ,CAAA,CAAAuG,cAAA;UACApD,CAAA;QAEA,IAAAvC,CAAA,CAAAmO,QAAA,IAAApJ,CAAA,EACA;QAEA,SAAAlF,CAAA,EACA;QA7HA+B,CAAA,GA+HA/B,CAAA,GA9HA,SADAQ,CAAA,GA+HAL,CAAA,EA9HAkU,WAAA,IAAA7T,CAAA,CAAA4T,kBAAA,GAAArS,CAAA,MACAvB,CAAA,CAAA6T,WAAA,GAAAxP,CAAA,CAAA9C,CAAA,GACAvB,CAAA,CAAA8T,WAAA,GAAAzP,CAAA,CAAA9C,CAAA,GACAvB,CAAA,CAAA4T,kBAAA,GAAArS,CAAA,GA6HAW,CAAA,MAAAvC,CAAA,CAAAkU,WAAA,EACA3R,CAAA,MAAAvC,CAAA,CAAAmU,WAAA;QAGA,SAAAhU,CAAA,MAAuBA,CAAA,GAAAN,CAAA,EAAcM,CAAA,IACrCoC,CAAA,IAAApC,CAAA,IAAAd,CAAA,CAAAc,CAAA,GACA,IAAAH,CAAA,CAAAwO,WAAA,KACAjM,CAAA,IAAApC,CAAA,IAAAP,CAAA,CAAAO,CAAA;QAGA,OAeA,UAAAf,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA,EAAArB,CAAA;UACA,IACAM,CAAA;YAAAuB,CAAA;YAAA5B,CAAA;YAAAuC,CAAA;YACApC,CAAA;YAFAsF,CAAA,GAAArG,CAAA,CAAAuG,cAAA;YACAD,CAAA;YAEAvE,CAAA;YACAf,CAAA;UAEA,IAAAqF,CAAA,CAAA0I,QAAA,IAAApJ,CAAA,EACA;UAEA,SAAAlF,CAAA,EACA;UAIA,KADAM,CAAA,GAAA0E,CAAA,CAAA2E,WAAA,CAAA/D,CAAA,EAAA3F,CAAA,EAAAsB,CAAA,EAAArB,CAAA,QACA,GACA,OAAAI,CAAA;UAWA,IATAiB,CAAA,IAAAjB,CAAA,EACAuF,CAAA,IAAAvF,CAAA,EAEAC,CAAA,MAAAf,CAAA,EACAe,CAAA,MAAAR,CAAA,EAKA2kB,CAAA,CAAA1H,GAAA,CAAAzd,CAAA,CAAA6d,KAAA,QAAAsH,CAAA,CAAA1H,GAAA,CAAAzd,CAAA,CAAA6d,KAAA,MACA,KAAArb,CAAA,MAAuBA,CAAA,GAAA/B,CAAA,IAAc+B,CAAA,EACrCxB,CAAA,IAAAwB,CAAA,KAAAxC,CAAA,CAAA6d,KAAA,EACA,KAAAxX,CAAA,CAAAO,YAAA,KACA5F,CAAA,IAAAwB,CAAA,KAAAxC,CAAA,CAAA6d,KAAA;UAKA,IAAAsH,CAAA,CAAA1H,GAAA,CAAAzd,CAAA,CAAA0qB,UAAA,QACAvF,CAAA,CAAA1H,GAAA,CAAAzd,CAAA,CAAA0qB,UAAA,MACA,KAAAloB,CAAA,MAAuBA,CAAA,GAAA/B,CAAA,IAAc+B,CAAA,EACrCxB,CAAA,IAAAwB,CAAA,KAAAxC,CAAA,CAAA0qB,UAAA;UAKA,IAAAvF,CAAA,CAAA1H,GAAA,CAAAzd,CAAA,CAAA2qB,WAAA,QACAxF,CAAA,CAAA1H,GAAA,CAAAzd,CAAA,CAAA2qB,WAAA,MACA,KAAAnoB,CAAA,MAAuBA,CAAA,GAAA/B,CAAA,IAAc+B,CAAA,EACrCxB,CAAA,IAAAwB,CAAA,KAAAxC,CAAA,CAAA2qB,WAAA;UAKA,SAAA3qB,CAAA,CAAAikB,YAAA,SAAA5d,CAAA,CAAAO,YAAA,EACA,KAAApE,CAAA,MAAuBA,CAAA,GAAA/B,CAAA,IAAc+B,CAAA,EACrCxB,CAAA,IAAAwB,CAAA,UAAAxB,CAAA,IAAAwB,CAAA,IAAAxB,CAAA,IAAAwB,CAAA,IACAxB,CAAA,IAAAwB,CAAA;UAIAW,CAAA,GAAAgD,CAAA,CAAAnG,CAAA,GAEA+B,CAAA,MAAAsE,CAAA,CAAA6I,KAAA,KACAnN,CAAA,MAAAsE,CAAA,CAAA6I,KAAA;UAGA,KADA,IA8EA1I,CAAA,EAAA1F,CAAA,EAAA2F,CAAA,EAAAiB,CAAA,EAAAC,CAAA,EAAAC,CAAA,EACAO,CAAA,EA/EAa,CAAA,MACA,IAAAvI,CAAA;YACA,IAAAwI,CAAA;cACAC,CAAA;cAEAC,CAAA;YAIAF,CAAA,MAAAjI,CAAA,KACAiI,CAAA,MAAAjI,CAAA;YAEA,IAAA6I,CAAA,OAAA7E,CAAA;YAOA,IANAE,CAAA,CAAAlF,CAAA,EAAA+B,CAAA,EAAAkH,CAAA,EAAAD,CAAA,EAAAvI,CAAA,EACAoJ,CAAA,GACAX,CAAA,GAAAW,CAAA,CAAAod,IAAA,EACA9d,CAAA,GAAAU,CAAA,CAAAqd,KAAA,EAGA7gB,CAAA,CAAA+N,cAAA,KAAA/N,CAAA,CAAA8N,iBAAA,IACA3O,CAAA,CAAAsW,cAAA,CAAAzV,CAAA,CAAAoO,MAAA,EAAA1S,CAAA,KAAAsE,CAAA,CAAAa,OAAA,EACAnF,CAAA,KAAAsE,CAAA,CAAAa,OAAA,EAAAiC,CAAA,EAAA9C,CAAA,CAAAO,YAAA,KAAA8W,YAAA,CAAA1B,mBAAA,EACA;YAqBA,IAlBAvb,CAAA,IAAAyI,CAAA,EACAF,CAAA,IAAAE,CAAA,EACA7C,CAAA,CAAAO,YAAA,EAIAP,CAAA,CAAAa,OAAA,IAAAiC,CAAA,EACA0b,CAAA,CAAAxe,CAAA,CAAAa,OAAA,IAAA6d,CAAA,CAAA5V,MAAA,GAMA9I,CAAA,CAAAiJ,oBAAA,SACAjJ,CAAA,CAAAiJ,oBAAA,GAAA+V,EAAA,CAAAxa,QAAA,GAAAwa,EAAA,CAAAva,SAAA,GAEAzE,CAAA,CAAAiJ,oBAAA,IAAAnG,CAAA,EAEA9C,CAAA,CAAAa,OAAA,IAAA/D,CAAA;cAUA,IAAA2G,CAAA,GAAAnJ,CAAA,GAAA2F,CAAA;cAOA,IANA,KAAA3F,CAAA,KACAmJ,CAAA,OAuBAtD,CAAA,GArBAxG,CAAA,EAqBAc,CAAA,GArBAiB,CAAA,KAqBA0E,CAAA,GArBA1E,CAAA,KAqBA2F,CAAA,GArBAhH,CAAA,EAqBAiH,CAAA,GApBA3F,CAAA,EAoBA4F,CAAA,GApBAkC,CAAA,OAqBA,GAAA3B,CAAA,GAAAoC,CAAA,CAAAwZ,GAAA,CAAA3d,qBAAA,CAAAI,CAAA,EAAA1F,CAAA,EAAA2F,CAAA,EAAAiB,CAAA,EACAC,CAAA,EAAAC,CAAA,GACApB,CAAA,CAAAijB,QAAA,KAxBAxoB,CAAA,GAyBAkH,CAAA,IAtBA,GACA,OAAAlH,CAAA;cAOA,KANAe,CAAA,IAAAf,CAAA,EACAqF,CAAA,IAAArF,CAAA,EAGAoF,CAAA,CAAAa,OAAA,IAAAlH,CAAA,CAAAoH,SAAA,EACAf,CAAA,CAAAiJ,oBAAA,IAAAtP,CAAA,CAAAoH,SAAA,EACAxG,CAAA,MAA4BA,CAAA,GAAAyF,CAAA,CAAAO,YAAA,EAAuBhG,CAAA,IACnD,KAAA4B,CAAA,MAA+BA,CAAA,GAAA6D,CAAA,CAAAa,OAAA,EAAiB1E,CAAA,IAChDT,CAAA,CAAAnB,CAAA,EAAA4B,CAAA,IAAAT,CAAA,CAAAnB,CAAA,EAAA4B,CAAA,GAAAxC,CAAA,CAAAoH,SAAA;YAAA;UAAA;UAKA,OAFAyd,CAAA,MAAApkB,CAAA,GAEA6F,CAAA;QAAA,CA1JA,CAAAtG,CAAA,EAAAmD,CAAA,KAAAA,CAAA,KACA1C,CAAA,EAAAC,CAAA,EAAAsB,CAAA,EAAArB,CAAA;MAAA;IAAA;EAAA,aAAAX,CAAA,EAAAC,CAAA,EAAAO,CAAA;IC11CA,IAAAC,CAAA,GAAaD,CAAA,CAAQ;MAErBoqB,EAAA,IADAnqB,CAAA,CAAAkD,MAAA,EACAlD,CAAA,CAAAmD,OAAA;MACAkhB,CAAA,GAAArkB,CAAA,CAAAoD,KAAA;MACAgnB,EAAA,GAAApqB,CAAA,CAAAqD,UAAA;MACAihB,CAAA,GAAAtkB,CAAA,CAAAsD,IAAA;MACA+mB,EAAA,GAAArqB,CAAA,CAAAuD,MAAA;MAIA+mB,EAAA,IAHAtqB,CAAA,CAAAwD,WAAA,EACAxD,CAAA,CAAA4D,QAAA,EACA5D,CAAA,CAAA8D,UAAA,EACA9D,CAAA,CAAAgE,SAAA;MACAumB,EAAA,GAAAvqB,CAAA,CAAAiE,WAAA;MACAumB,EAAA,GAAAxqB,CAAA,CAAAkE,OAAA;MAEAumB,EAAA,IADAzqB,CAAA,CAAAmE,SAAA,EACAnE,CAAA,CAAAsE,MAAA;MAEApE,CAAA,GAAUH,CAAA,CAAQ;MAClB2qB,EAAA,GAAc3qB,CAAA,CAAQ;IAmrFtBR,CAAA,CAAAE,OAAA,GAjrFA;MAEA,IAAAgJ,CAAA,OAAAvI,CAAA;QAEAwI,CAAA;QAEAiiB,EAAA;QACAC,EAAA;QACA5kB,CAAA;QACAiB,CAAA;QAGAlC,CAAA;QAGA9E,CAAA,oBAAAyqB,EAAA,CAAAhkB,OAAA;QAMAmkB,EAAA;QAOAC,EAAA;QAGA5jB,CAAA;MAEA,SAAAC,EAAA5H,CAAA;QACA,OAAAA,CAAA;MAAA;MA8CA,SAAAgF,EAAAhF,CAAA,EAAAC,CAAA;QAGA,KAFA,IAAAO,CAAA,MAEAC,CAAA,MAAuBA,CAAA,GAAA0qB,EAAA,CAAAhkB,OAAA,QAAyB1G,CAAA,EAChDD,CAAA,IAAAR,CAAA,CAAAS,CAAA,IAAAR,CAAA,CAAAqI,GAAA,CAAAkjB,KAAA,CAAA/qB,CAAA;QAGA,OAFAD,CAAA,IAAAE,CAAA;MAAA;MAKA,SAAA+qB,GAAAzrB,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA,EAAArB,CAAA,EAAAM,CAAA,EAAAuB,CAAA,EAAA5B,CAAA,EAAAuC,CAAA;QACA,IAAApC,CAAA,GAAAf,CAAA,CAAAuG,cAAA;QACA,IAAA/D,CAAA,MACA0G,CAAA,CAAAwiB,QAAA,CAAA3qB,CAAA,EAAAN,CAAA,CAAAC,CAAA,GAAA8B,CAAA,EAAA5B,CAAA,EAAAuC,CAAA,GACA+F,CAAA,CAAAyiB,SAAA,CAAA5qB,CAAA,EAAAiB,CAAA,CAAArB,CAAA,GAAA6B,CAAA,EAAA5B,CAAA,EAAAuC,CAAA,OAGA,SAAAX,CAAA;UACA,SAAA6D,CAAA,GAAA8kB,EAAA,CAAAhkB,OAAA,MAA6C,KAAAd,CAAA,IAAQA,CAAA;YACrD,IAAAC,CAAA,GAAA7F,CAAA,CAAAC,CAAA,MAAA2F,CAAA;cACAtE,CAAA,GAAAtB,CAAA,CAAAC,CAAA,MAAA2F,CAAA;YACA5F,CAAA,CAAAC,CAAA,MAAA2F,CAAA,KAAAC,CAAA,GAAAvE,CAAA,IAAAgjB,CAAA,CAAAriB,KAAA,OACAjC,CAAA,CAAAC,CAAA,MAAA2F,CAAA,KAAAC,CAAA,GAAAvE,CAAA,IAAAgjB,CAAA,CAAAriB,KAAA;UAAA;UAEA,SAAA1B,CAAA,MAA2B,KAAAA,CAAA,IAAQA,CAAA,EACnC,KAAAqF,CAAA,GAAA8kB,EAAA,CAAAxf,SAAA,MAAmD,KAAAtF,CAAA,IAAQA,CAAA,EAC3DC,CAAA,GAAAtE,CAAA,CAAArB,CAAA,MAAAK,CAAA,EAAAqF,CAAA,GACAtE,CAAA,GAAAC,CAAA,CAAArB,CAAA,MAAAK,CAAA,EAAAqF,CAAA,GACArE,CAAA,CAAArB,CAAA,MAAAK,CAAA,EAAAqF,CAAA,KAAAC,CAAA,GAAAvE,CAAA,IAAAgjB,CAAA,CAAAriB,KAAA,OACAV,CAAA,CAAArB,CAAA,MAAAK,CAAA,EAAAqF,CAAA,KAAAC,CAAA,GAAAvE,CAAA,IAAAgjB,CAAA,CAAAriB,KAAA;QAAA;QAWA,KAHAzC,CAAA,MAAA2H,CAAA,CAAAnH,CAAA,CAAAC,CAAA,WACAT,CAAA,OAAAA,CAAA,KAEAoG,CAAA,GAAA8kB,EAAA,CAAAhkB,OAAA,UAA6C,KAAAd,CAAA,IAAQA,CAAA;UACrD,IAAAG,CAAA,GAAA/F,CAAA,CAAAC,CAAA,MAAAyqB,EAAA,CAAAhkB,OAAA,OAAAd,CAAA;YACAvF,CAAA,GAAAL,CAAA,CAAAC,CAAA,MAAAyqB,EAAA,CAAAhkB,OAAA,OAAAd,CAAA;UACApG,CAAA,CAAAkrB,EAAA,CAAAhkB,OAAA,OAAAd,CAAA,IAAAuB,CAAA,CACA,MADApB,CAAA,GACAA,CAAA,GAAA1F,CAAA,GAAAA,CAAA;QAAA;QAEA,KAAAE,CAAA,MAAuB,KAAAA,CAAA,IAAQA,CAAA,EAG/B,KAFAR,CAAA,CAAAQ,CAAA,OAAAgB,CAAA,CAAArB,CAAA,MAAAK,CAAA,MACAR,CAAA,CAAAQ,CAAA,QAAAR,CAAA,CAAAQ,CAAA,MACAqF,CAAA,GAAA8kB,EAAA,CAAAxf,SAAA,UAAmD,KAAAtF,CAAA,IAAQA,CAAA,EAC3DG,CAAA,GAAAxE,CAAA,CAAArB,CAAA,MAAAK,CAAA,EAAAmqB,EAAA,CAAAxf,SAAA,GACA,IAAAtF,CAAA,GACAvF,CAAA,GAAAkB,CAAA,CAAArB,CAAA,MAAAK,CAAA,EAAAmqB,EAAA,CAAAxf,SAAA,GACA,IAAAtF,CAAA,GACA7F,CAAA,CAAAQ,CAAA,EAAAmqB,EAAA,CAAAxf,SAAA,OAAAtF,CAAA,IAAAuB,CAAA,CACA,MADApB,CAAA,GACAA,CAAA,GAAA1F,CAAA,GAAAA,CAAA;QAKA,IAAA2F,CAAA;QACA,KAAAJ,CAAA,OAA4BA,CAAA,GAAA8kB,EAAA,CAAA1f,QAAA,EAAsBpF,CAAA,IAClDI,CAAA,IAAAxG,CAAA,CAAAoG,CAAA;QAKA,IAHAtF,CAAA,CAAAyR,QAAA,CAAAhQ,CAAA,IAAAiE,CAAA,EAGAzG,CAAA,CAAAoJ,QAAA;UACA,KAAA/C,CAAA,MAA2BA,CAAA,GAAA8kB,EAAA,CAAA1f,QAAA,EAAsBpF,CAAA,IACjDtF,CAAA,CAAAsI,KAAA,CAAAO,MAAA,CAAA3I,CAAA,EAAAuB,CAAA,EAAA6D,CAAA,IAAAtF,CAAA,CAAAsI,KAAA,CAAAuiB,WAAA,CAAAppB,CAAA,EAAA6D,CAAA,GACAtF,CAAA,CAAAsI,KAAA,CAAAuiB,WAAA,CAAAppB,CAAA,EAAA6D,CAAA,IAAApG,CAAA,CAAAoG,CAAA;UAEAtF,CAAA,CAAAsI,KAAA,CAAAI,EAAA,CAAAxI,CAAA,EAAAuB,CAAA,IAAAzB,CAAA,CAAA0I,EAAA,CAAAjH,CAAA;QAAA;QAMA,KAAAxC,CAAA,CAAAyoB,gBAAA,IAAAjmB,CAAA,SAEAzB,CAAA,CAAAyH,WAAA,CAAAvH,CAAA,EAAAuB,CAAA,IAAAzB,CAAA,CAAA0R,gBAAA,CAAAjQ,CAAA,GACAzB,CAAA,CAAA0R,gBAAA,CAAAjQ,CAAA,IAAAwC,CAAA,CAAA/E,CAAA,EAAAc,CAAA;MAAA;MAyBA,IAUA8I,CAAA;QACAC,CAAA;QACAS,CAAA;QAZA9E,CAAA;QAIAE,CAAA;QAIAE,CAAA;QAcAgmB,EAAA,+BACA;QAQA1oB,CAAA,qBACA,+CACA,+CACA,gDACA,oDACA,oDACA,+CACA,kDACA;QAEApC,CAAA,kBACA,yDACA,kDACA;QAEAsF,CAAA,kBACA,oDACA,yDACA,oDACA,oDACA;MAKA,SAAAoD,GAAAzJ,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA;QACA,IAAArB,CAAA,EAmDAM,CAAA,EAAAuB,CAAA;QAjDA,IAAAxC,CAAA,GAAAC,CAAA;UACA,MAAAA,CAAA,GAAAD,CAAA,GAAA8J,CAAA,GAGA,OAAA9J,CAAA,GAAAC,CAAA;UAFAU,CAAA,GAAAV,CAAA,GAAAD,CAAA;QAAA,OAGS;UACT,IAAAC,CAAA,GAAA6J,CAAA,IAAA9J,CAAA,EACA,OAAAA,CAAA,GAAAC,CAAA;UACAU,CAAA,GAAAX,CAAA,GAAAC,CAAA;QAAA;QASA,IALAirB,EAAA,MAAAlrB,CAAA,GACAkrB,EAAA,MAAAjrB,CAAA,GAEAD,CAAA,IAAAC,CAAA,EAEAQ,CAAA;UAIA,IAAAoJ,CAAA,IAAAlJ,CAAA,EAEA,OAAAX,CAAA;UAIA,IAAAY,CAAA,OAAAmkB,CAAA,CAAAjiB,YAAA,CAAAnC,CAAA;UACA,OAAAX,CAAA,GAAAe,CAAA,CAAAH,CAAA;QAAA;QAiBA,OAPAA,CAAA,OAAAmkB,CAAA,CAAAjiB,YAAA,CAAAnC,CAAA,OAEAV,CAAA,GADA,KAAA+B,CAAA,GACAtB,CAAA,CAAA4H,GAAA,CAAAwjB,IAAA,CAAAtrB,CAAA,IAAAE,CAAA,CAAA4H,GAAA,CAAAK,MAAA,GAEAjI,CAAA,CAAA4H,GAAA,CAAAyjB,IAAA,CAAAvrB,CAAA,IAAAE,CAAA,CAAA4H,GAAA,CAAAK,MAAA,EAEAuiB,EAAA,MAAAjrB,CAAA,GACAD,CAAA,GAAAuK,CAAA,GAAAtK,CAAA,GAGAA,CAAA,GAAAD,CAAA,IAGAiB,CAAA,MACAL,CAAA,WACAK,CAAA,GAAAoF,CAAA,CAAAzF,CAAA,IAEA4B,CAAA,GAAAuiB,CAAA,CAAAjiB,YAAA,CAAA9C,CAAA,GAAAC,CAAA,YACAD,CAAA,KAAAmD,CAAA,CAAAvC,CAAA,IAAAK,CAAA,IAAAuB,CAAA,GAAAvB,CAAA,KAGA,KAAAL,CAAA,GACAZ,CAAA,GAEAA,CAAA,GAAAqG,CAAA,CAAAzF,CAAA,IAIAZ,CAAA,GAAAmD,CAAA,CAAAvC,CAAA;MAAA;MAGA,IAAAoB,CAAA,kBACA,yDACA,kDACA;MAKA,SAAAiH,EAAAjJ,CAAA,EAAAC,CAAA,EAAAO,CAAA;QACA,IAAAC,CAAA;QAQA,IANAT,CAAA,SACAA,CAAA,OAEAC,CAAA,SACAA,CAAA,OAEAD,CAAA,OACA,OAAAC,CAAA;QAEA,IAAAA,CAAA,OACA,OAAAD,CAAA;QAOA,IAJAS,CAAA,GADAT,CAAA,GAAAC,CAAA,GACAA,CAAA,GAAAD,CAAA,GAEAA,CAAA,GAAAC,CAAA,GAEA,KAAAO,CAAA,IAAAA,CAAA;UAGA,IAAAqJ,CAAA,IAAApJ,CAAA,EACA,OAAAT,CAAA,GAAAC,CAAA;UAEA,IAAAS,CAAA,OAAAqkB,CAAA,CAAAjiB,YAAA,CAAArC,CAAA;UACA,QAAAT,CAAA,GAAAC,CAAA,IAAA+B,CAAA,CAAAtB,CAAA;QAAA;QAGA,OAAAD,CAAA,GAAAqJ,CAAA,GACA9J,CAAA,GAAAC,CAAA,IAEAD,CAAA,GAAAC,CAAA,KACAD,CAAA,GAAAC,CAAA,GAEAD,CAAA;MAAA;MA6HA,SAAAgsB,GAAAhsB,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA;QACA,IAAAsB,CAAA;UAAArB,CAAA;UACAM,CAAA;UACAuB,CAAA;QACA,KAAAR,CAAA,GAAArB,CAAA,MAAwBqB,CAAA,GAAAmpB,EAAA,CAAA7f,OAAA,IAAsB3K,CAAA,IAAAqB,CAAA;UAI9C,KAHA,IAAApB,CAAA,GAAAZ,CAAA,CAAA+S,IAAA,CAAA/Q,CAAA,GACAmB,CAAA,GAAAnD,CAAA,CAAAiT,OAAA,EACAlS,CAAA,GAAAH,CAAA,GAAAuC,CAAA,GAAAvC,CAAA,GAAAuC,CAAA,EACAxC,CAAA,GAAAI,CAAA,GACAmqB,EAAA,MAAAjrB,CAAA,CAAAU,CAAA,IAEAuqB,EAAA,MAAA1qB,CAAA,CAAAG,CAAA,IACAM,CAAA,IAAAhB,CAAA,CAAAU,CAAA,GACA6B,CAAA,IAAAhC,CAAA,CAAAG,CAAA,GACAA,CAAA;UAKA,IAHAX,CAAA,CAAAuS,EAAA,CAAA9R,CAAA,EAAAuB,CAAA,CAAAA,CAAA,EAAAtB,CAAA,IAAAO,CAAA,EACAjB,CAAA,CAAAsS,GAAA,CAAA7R,CAAA,EAAAuB,CAAA,CAAAA,CAAA,EAAAtB,CAAA,IAAA8B,CAAA,EAEAW,CAAA,IAAAxC,CAAA;YAAA,EACAqB,CAAA;YACA;UAAA;UAEAkpB,EAAA,MAAAjrB,CAAA,CAAAU,CAAA,IAEAuqB,EAAA,MAAA1qB,CAAA,CAAAG,CAAA;UAGA,IAAA0F,CAAA,GAAArG,CAAA,CAAAgU,GAAA,CAAA2S,WAAA,CAAA3kB,CAAA;YACAsE,CAAA,OAAAD,CAAA;UACApF,CAAA,GAAAoF,CAAA,GAAApG,CAAA,CAAAU,CAAA,GACA6B,CAAA,GAAA6D,CAAA,GAAA7F,CAAA,CAAAG,CAAA,GACAX,CAAA,CAAAuS,EAAA,CAAA9R,CAAA,EAAAuB,CAAA,CAAAA,CAAA,EAAAtB,CAAA,KAAAO,CAAA,EACAjB,CAAA,CAAAsS,GAAA,CAAA7R,CAAA,EAAAuB,CAAA,CAAAA,CAAA,EAAAtB,CAAA,KAAA8B,CAAA,EACAvB,CAAA,GAAAqF,CAAA,GAAArG,CAAA,CAAAU,CAAA,GACA6B,CAAA,GAAA8D,CAAA,GAAA9F,CAAA,CAAAG,CAAA;QAAA;QAIA,OAAcqB,CAAA,GAAAmpB,EAAA,CAAA7f,OAAA,IAAsBtJ,CAAA,EACpChC,CAAA,CAAAuS,EAAA,CAAA9R,CAAA,EAAAuB,CAAA,CAAAA,CAAA,EAAAtB,CAAA,OACAV,CAAA,CAAAsS,GAAA,CAAA7R,CAAA,EAAAuB,CAAA,CAAAA,CAAA,EAAAtB,CAAA;MAAA;MAOA,SAAAurB,GAAAjsB,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA;QACA,IAAAC,CAAA;UAAAsB,CAAA;UACArB,CAAA;UACAM,CAAA;QACA,KAAAP,CAAA,GAAAsB,CAAA,MAAwBtB,CAAA,GAAAyqB,EAAA,CAAA9f,OAAA,IAAsBrJ,CAAA,IAAAtB,CAAA;UAI9C,KAHA,IAAA8B,CAAA,GAAAxC,CAAA,CAAA6S,IAAA,CAAAnS,CAAA,GACAE,CAAA,GAAAZ,CAAA,CAAAgT,OAAA,EACA7P,CAAA,GAAAX,CAAA,GAAA5B,CAAA,GAAA4B,CAAA,GAAA5B,CAAA,EACAoB,CAAA,GAAAmB,CAAA,GACA+nB,EAAA,MAAAjrB,CAAA,CAAA+B,CAAA,IAEAkpB,EAAA,MAAA1qB,CAAA,CAAAwB,CAAA,IACArB,CAAA,IAAAV,CAAA,CAAA+B,CAAA,GACAf,CAAA,IAAAT,CAAA,CAAAwB,CAAA,GACAA,CAAA;UAKA,IAHAhC,CAAA,CAAAuS,EAAA,CAAA9R,CAAA,EAAAG,CAAA,CAAAF,CAAA,IAAAC,CAAA,EACAX,CAAA,CAAAsS,GAAA,CAAA7R,CAAA,EAAAG,CAAA,CAAAF,CAAA,IAAAO,CAAA,EAEAL,CAAA,IAAAoB,CAAA;YAAA,EACAtB,CAAA;YACA;UAAA;UAEAwqB,EAAA,MAAAjrB,CAAA,CAAA+B,CAAA,IACAkpB,EAAA,MAAA1qB,CAAA,CAAAwB,CAAA;UAGA,IAAAjB,CAAA,GAAAf,CAAA,CAAAgU,GAAA,CAAA0S,WAAA,CAAAhmB,CAAA;YACA2F,CAAA,OAAAtF,CAAA;UACAJ,CAAA,GAAAI,CAAA,GAAAd,CAAA,CAAA+B,CAAA,GACAf,CAAA,GAAAF,CAAA,GAAAP,CAAA,CAAAwB,CAAA,GACAhC,CAAA,CAAAuS,EAAA,CAAA9R,CAAA,EAAAG,CAAA,CAAAF,CAAA,KAAAC,CAAA,EACAX,CAAA,CAAAsS,GAAA,CAAA7R,CAAA,EAAAG,CAAA,CAAAF,CAAA,KAAAO,CAAA,EACAN,CAAA,GAAA0F,CAAA,GAAApG,CAAA,CAAA+B,CAAA,GACAf,CAAA,GAAAoF,CAAA,GAAA7F,CAAA,CAAAwB,CAAA;QAAA;QAIA,OAActB,CAAA,GAAAyqB,EAAA,CAAA9f,OAAA,IAAsB3K,CAAA,EACpCV,CAAA,CAAAuS,EAAA,CAAA9R,CAAA,EAAAG,CAAA,CAAAF,CAAA,OACAV,CAAA,CAAAsS,GAAA,CAAA7R,CAAA,EAAAG,CAAA,CAAAF,CAAA;MAAA;MAIA,SAAAwrB,GAAAlsB,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA;QACA,IACArB,CAAA;UAAAM,CAAA;UADAuB,CAAA,GAAAxC,CAAA,CAAAuG,cAAA;QAGA,KAAAtF,CAAA,GAAAN,CAAA,MAAuBM,CAAA,GAAAuB,CAAA,CAAAyQ,OAAA,IAAiBhS,CAAA;UAGxC,KAFA,IAAAL,CAAA,MAAAuC,CAAA,MACApC,CAAA,GAAAyB,CAAA,CAAA4Q,UAAA,CAAAnS,CAAA,GACAoF,CAAA,MAA2BA,CAAA,GAAAtF,CAAA,IAAOsF,CAAA,IAAA1F,CAAA;YAClC,IAAA2F,CAAA,GAAArG,CAAA,CAAA+B,CAAA,EAAArB,CAAA;YACAC,CAAA,IAAA0F,CAAA,EACAnD,CAAA,GAAAmD,CAAA,KACAnD,CAAA,GAAAmD,CAAA;UAAA;UAEA9F,CAAA,CAAAS,CAAA,IAAAL,CAAA;QAAA;QAIA,KAFAsqB,EAAA,CAAAjqB,CAAA,IAAAuB,CAAA,CAAAyQ,OAAA,GACAiY,EAAA,QAAAvqB,CAAA,GACAA,CAAA,GAAAM,CAAA,MAAuBA,CAAA,GAAAuB,CAAA,CAAAyQ,OAAA,EAAiBhS,CAAA;UACxC,IAAAc,CAAA,GAAAS,CAAA,CAAA2Q,OAAA,CAAAlS,CAAA;YACAD,CAAA,GAAAwB,CAAA,CAAA2P,KAAA,CAAAxR,CAAA,MAAAH,CAAA,CAAAuB,CAAA;UAEA,OADAA,CAAA,EACAA,CAAA,IAAAS,CAAA,CAAA2Q,OAAA,CAAAlS,CAAA,OACAD,CAAA,IAAAwB,CAAA,CAAA2P,KAAA,CAAAxR,CAAA,IAAAH,CAAA,CAAAuB,CAAA,KACApB,CAAA,IACAoB,CAAA;UAIA,IAAAyE,CAAA,GAAAC,CAAA,GAAAjE,CAAA,CAAAyP,KAAA,CAAAvR,CAAA,EAAAO,CAAA;UAGA,IAFAR,CAAA,CAAAQ,CAAA,IAAA2B,IAAA,CAAAyX,GAAA,CAAArZ,CAAA,EAAAwF,CAAA,GAEAhE,CAAA,CAAAsR,aAAA,KAAApT,CAAA,KAAAyqB,EAAA,CAAAnkB,UAAA;YAEAR,CAAA,GAAAkB,CAAA,GAAAlF,CAAA,CAAA0P,KAAA,CAAAxR,CAAA,EAAAO,CAAA;YAAA,IACAH,CAAA,GAAAL,CAAA,CAAAQ,CAAA;YACAR,CAAA,CAAAQ,CAAA,IAAA2B,IAAA,CAAAyX,GAAA,CAAA7T,CAAA,EAAA1F,CAAA;UAAA;UAGA0B,CAAA,CAAA0P,KAAA,CAAAxR,CAAA,EAAAO,CAAA,IAAAuB,CAAA,CAAAyP,KAAA,CAAAvR,CAAA,EAAAO,CAAA,GACAuB,CAAA,CAAAyP,KAAA,CAAAvR,CAAA,EAAAO,CAAA,IAAAD,CAAA,EACAkqB,EAAA,MAAAzqB,CAAA,CAAAQ,CAAA;QAAA;QAEA,OAAcA,CAAA,IAAAkqB,EAAA,CAAAjgB,MAAA,IAAqBjK,CAAA,EACnCT,CAAA,CAAAS,CAAA,OACAR,CAAA,CAAAQ,CAAA;MAAA;MAgDA,SAAAkrB,GAAAnsB,CAAA,EAAAC,CAAA,EAAAO,CAAA;QAEA,YAAAA,CAAA,GAEAR,CAAA,GAEAQ,CAAA,QACAP,CAAA,GACA,IAAAA,CAAA,GAEA2C,IAAA,CAAAwd,GAAA,CAAApgB,CAAA,GAAAC,CAAA,EAAAO,CAAA,IAAAP,CAAA,GAGA;MAAA;MAMA,IAAAuC,CAAA,gCACA;MAIA,SAAA4pB,GAAApsB,CAAA,EAAAC,CAAA;QAEA,KADA,IAAAO,CAAA,WACAC,CAAA,MAAwBA,CAAA,GAAA0qB,EAAA,CAAA7f,OAAA,MAA0B7K,CAAA,IAClD,SAAAC,CAAA,MAAgCA,CAAA,MAAYA,CAAA;UAC5C,IAAAsB,CAAA,GAAAhC,CAAA,CAAAsS,GAAA,CAAAtQ,CAAA,CAAAvB,CAAA,EAAAC,CAAA;UAEA,IADAwqB,EAAA,CAAAzqB,CAAA,GAAA+B,CAAA,CAAAF,MAAA,GACA,IAAAN,CAAA;YACA,IAAArB,CAAA,GAAAqB,CAAA,GAAA/B,CAAA;cACAgB,CAAA,GAAAjB,CAAA,CAAAuS,EAAA,CAAAvQ,CAAA,CAAAvB,CAAA,EAAAC,CAAA;YACAC,CAAA,GAAAM,CAAA,KACA,OAAAN,CAAA,GAAAM,CAAA,GACAT,CAAA,IAAAgC,CAAA,CAAA/B,CAAA,UAAA0I,CAAA,KAEA+hB,EAAA,KAAAvqB,CAAA,GACAH,CAAA,IAAAgC,CAAA,CAAA/B,CAAA,IAAAskB,CAAA,CAAApiB,UAAA,CAAA1B,CAAA,GAAAN,CAAA;UAAA;QAAA;QAOA,OAAAH,CAAA;MAAA;MAMA,IAAAS,CAAA,kCACA,0DACA;MAIA,SAAAorB,GAAArsB,CAAA,EAAAC,CAAA;QAEA,KADA,IAAAO,CAAA,aACAC,CAAA,MAAwBA,CAAA,GAAA0qB,EAAA,CAAA9f,OAAA,MAA0B5K,CAAA;UAClD,IAAAC,CAAA,GAAAV,CAAA,CAAAsS,GAAA,CAAA1R,CAAA,CAAAH,CAAA;UAEA,IADAyqB,EAAA,CAAAzqB,CAAA,GAAAQ,CAAA,CAAAqB,MAAA,GACA,IAAA5B,CAAA;YACA,IAAAsB,CAAA,GAAAtB,CAAA,GAAAT,CAAA;cACAU,CAAA,GAAAX,CAAA,CAAAuS,EAAA,CAAA3R,CAAA,CAAAH,CAAA;YACAuB,CAAA,GAAArB,CAAA,KACA,OAAAqB,CAAA,GAAArB,CAAA,GACAH,CAAA,IAAAS,CAAA,CAAAR,CAAA,UAAA0I,CAAA,KAEA+hB,EAAA,KAAAlpB,CAAA,GACAxB,CAAA,IAAAS,CAAA,CAAAR,CAAA,IAAAskB,CAAA,CAAApiB,UAAA,CAAAhC,CAAA,GAAAqB,CAAA;UAAA;QAAA;QAKA,OAAAxB,CAAA;MAAA;MAGA,SAAA8rB,GAAAtsB,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA;QACA,IAAAsB,CAAA,EAAArB,CAAA;QAEA,KAAAqB,CAAA,GAAArB,CAAA,MAAuBqB,CAAA,GAAAhC,CAAA,CAAAgT,OAAA,IAAiBhR,CAAA;UACxC,IACAf,CAAA;YADAuB,CAAA;YAAA5B,CAAA;UAEA,KAAAK,CAAA,MAAuBA,CAAA,GAAAjB,CAAA,CAAAqT,UAAA,CAAArR,CAAA,KAAuBf,CAAA,IAAAN,CAAA;YAC9C,IAAAwC,CAAA,GAAAlD,CAAA,CAAAU,CAAA;YACAuqB,EAAA,MAAA/nB,CAAA,GACAX,CAAA,IAAAW,CAAA,EACAvC,CAAA,GAAAuC,CAAA,KACAvC,CAAA,GAAAuC,CAAA;UAAA;UAEA3C,CAAA,CAAAwB,CAAA,IAAAQ,CAAA,EACA/B,CAAA,CAAAuB,CAAA,IAAApB,CAAA,EACAF,CAAA,CAAAsB,CAAA,IAAAQ,CAAA,GAAAxC,CAAA,CAAAsT,WAAA,CAAAtR,CAAA,GACAkpB,EAAA,MAAAlrB,CAAA,CAAAsT,WAAA,CAAAtR,CAAA,IACAkpB,EAAA,MAAA1oB,CAAA,GACA0oB,EAAA,MAAA1qB,CAAA,CAAAwB,CAAA,IACAkpB,EAAA,MAAAzqB,CAAA,CAAAuB,CAAA,IACAkpB,EAAA,MAAAxqB,CAAA,CAAAsB,CAAA;QAAA;MAAA;MAIA,SAAAuqB,GAAAvsB,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA;QACA,IAAAC,CAAA,GAAAmrB,EAAA,CAAAvpB,MAAA;UACAN,CAAA;UACArB,CAAA,GAAAH,CAAA,CAAAwB,CAAA,IAAAxB,CAAA,CAAAwB,CAAA;QAiBA,KAhBAkpB,EAAA,MAAAvqB,CAAA,GAWAF,CAAA,CAAAuB,CAAA,IAVA,IAAArB,CAAA,KACAM,CAAA,GAAAhB,CAAA,CAAA+B,CAAA,KACA/B,CAAA,CAAA+B,CAAA,UACAf,CAAA,GAAAhB,CAAA,CAAA+B,CAAA,QACAkpB,EAAA,KAAAlrB,CAAA,CAAAqT,UAAA,CAAArR,CAAA,IAAAhC,CAAA,CAAAqT,UAAA,CAAArR,CAAA,YAIAtB,CAAA,IADA8B,CAAA,QAFA7B,CAAA,aAAAM,CAAA,GAAAN,CAAA,KACAA,CAAA,IAAAX,CAAA,CAAAqT,UAAA,CAAArR,CAAA,IAAAhC,CAAA,CAAAqT,UAAA,CAAArR,CAAA,kBAGAQ,CAAA,GAAA9B,CAAA,GACA8B,CAAA,IAEA,GAGAR,CAAA,MAAmBA,CAAA,GAAAhC,CAAA,CAAAgT,OAAA,MAAqBhR,CAAA;UAIxC,IAAAf,CAAA,EAUAuB,CAAA;UAbA7B,CAAA,GAAAH,CAAA,CAAAwB,CAAA,QAAAxB,CAAA,CAAAwB,CAAA,IAAAxB,CAAA,CAAAwB,CAAA,OACAkpB,EAAA,MAAAvqB,CAAA,GAeAF,CAAA,CAAAuB,CAAA,IAdA,IAAArB,CAAA,KACAM,CAAA,GAAAhB,CAAA,CAAA+B,CAAA,SACA/B,CAAA,CAAA+B,CAAA,MACAf,CAAA,GAAAhB,CAAA,CAAA+B,CAAA,IACAf,CAAA,GAAAhB,CAAA,CAAA+B,CAAA,UACAf,CAAA,GAAAhB,CAAA,CAAA+B,CAAA,QACAkpB,EAAA,KAAAlrB,CAAA,CAAAqT,UAAA,CAAArR,CAAA,QAAAhC,CAAA,CAAAqT,UAAA,CAAArR,CAAA,IAAAhC,CAAA,CAAAqT,UAAA,CAAArR,CAAA,YAMAtB,CAAA,IADA8B,CAAA,QAJA7B,CAAA,SACA,IAAAM,CAAA,GAAAN,CAAA,KACAA,CAAA,IAAAX,CAAA,CAAAqT,UAAA,CAAArR,CAAA,QAAAhC,CAAA,CAAAqT,UAAA,CAAArR,CAAA,IACAhC,CAAA,CAAAqT,UAAA,CAAArR,CAAA,kBAGAQ,CAAA,GAAA9B,CAAA,GACA8B,CAAA,IAEA;QAAA;QAGA0oB,EAAA,KAAAlpB,CAAA,GACAkpB,EAAA,CAAAlpB,CAAA,IAAAhC,CAAA,CAAAgT,OAAA,OAEArS,CAAA,GAAAH,CAAA,CAAAwB,CAAA,QAAAxB,CAAA,CAAAwB,CAAA,GACAkpB,EAAA,MAAAvqB,CAAA,GAWAF,CAAA,CAAAuB,CAAA,IAVA,IAAArB,CAAA,KACAM,CAAA,GAAAhB,CAAA,CAAA+B,CAAA,SACA/B,CAAA,CAAA+B,CAAA,MACAf,CAAA,GAAAhB,CAAA,CAAA+B,CAAA,IACAkpB,EAAA,KAAAlrB,CAAA,CAAAqT,UAAA,CAAArR,CAAA,QAAAhC,CAAA,CAAAqT,UAAA,CAAArR,CAAA,QAIAtB,CAAA,IADA8B,CAAA,QAFA7B,CAAA,aAAAM,CAAA,GAAAN,CAAA,KACAA,CAAA,IAAAX,CAAA,CAAAqT,UAAA,CAAArR,CAAA,QAAAhC,CAAA,CAAAqT,UAAA,CAAArR,CAAA,cAGAQ,CAAA,GAAA9B,CAAA,GACA8B,CAAA,IAEA,GAEA0oB,EAAA,CAAAlpB,CAAA,IAAAhC,CAAA,CAAAgT,OAAA;MAAA;MAGA,IAAAwZ,EAAA,KACA,kDACA,8CACA;MAoYA,SAAAvnB,EAAAjF,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA,EAAArB,CAAA,EAAAM,CAAA;QACA,IAAAuB,CAAA,GAAAxC,CAAA,CAAAuG,cAAA;QACA,IAAA9F,CAAA,MACAyI,CAAA,CAAAwiB,QAAA,CAAAlpB,CAAA,EAAA7B,CAAA,CAAAM,CAAA,GAAAR,CAAA,EAAAR,CAAA,EAAAO,CAAA,OACS,SAAAC,CAAA,EAET,SAAAG,CAAA,GAAAuqB,EAAA,CAAAhkB,OAAA,MAA6C,KAAAvG,CAAA,IAAQA,CAAA;UACrD,IAAAuC,CAAA,GAAAxC,CAAA,CAAAM,CAAA,MAAAL,CAAA;YACAG,CAAA,GAAAJ,CAAA,CAAAM,CAAA,MAAAL,CAAA;UACAD,CAAA,CAAAM,CAAA,MAAAL,CAAA,KAAAuC,CAAA,GAAApC,CAAA,IAAAgkB,CAAA,CAAAriB,KAAA,OACA/B,CAAA,CAAAM,CAAA,MAAAL,CAAA,KAAAuC,CAAA,GAAApC,CAAA,IAAAgkB,CAAA,CAAAriB,KAAA;QAAA;QAUA,KAHAV,CAAA,MAAA4F,CAAA,CAAAjH,CAAA,CAAAM,CAAA,WACAe,CAAA,OAAAA,CAAA,KAEApB,CAAA,GAAAuqB,EAAA,CAAAhkB,OAAA,UAA6C,KAAAvG,CAAA,IAAQA,CAAA;UACrD,IAAAyF,CAAA,GAAA1F,CAAA,CAAAM,CAAA,MAAAkqB,EAAA,CAAAhkB,OAAA,OAAAvG,CAAA;YACA0F,CAAA,GAAA3F,CAAA,CAAAM,CAAA,MAAAkqB,EAAA,CAAAhkB,OAAA,OAAAvG,CAAA;UACAoB,CAAA,CAAAmpB,EAAA,CAAAhkB,OAAA,OAAAvG,CAAA,IAAAgH,CAAA,CACA,MADAvB,CAAA,GACAA,CAAA,GAAAC,CAAA,GAAAA,CAAA;QAAA;QAIA,IAAAvE,CAAA;QACA,KAAAnB,CAAA,OAA4BA,CAAA,GAAAuqB,EAAA,CAAA1f,QAAA,EAAsB7K,CAAA,IAClDmB,CAAA,IAAAC,CAAA,CAAApB,CAAA;QAKA,IAHA4B,CAAA,CAAAgQ,QAAA,CAAA/R,CAAA,IAAAsB,CAAA,EAGA/B,CAAA,CAAAoJ,QAAA;UACA,KAAAxI,CAAA,MAA2BA,CAAA,GAAAuqB,EAAA,CAAA1f,QAAA,EAAsB7K,CAAA,IACjD4B,CAAA,CAAA6G,KAAA,CAAAO,MAAA,CAAAlJ,CAAA,EAAAD,CAAA,EAAAG,CAAA,IAAA4B,CAAA,CAAA6G,KAAA,CAAAuiB,WAAA,CAAAnrB,CAAA,EAAAG,CAAA,GACA4B,CAAA,CAAA6G,KAAA,CAAAuiB,WAAA,CAAAnrB,CAAA,EAAAG,CAAA,IAAAoB,CAAA,CAAApB,CAAA;UAEA4B,CAAA,CAAA6G,KAAA,CAAAI,EAAA,CAAA/I,CAAA,EAAAD,CAAA,IAAA+B,CAAA,CAAAiH,EAAA,CAAAhJ,CAAA;QAAA;MAAA;MAIA,SAAAyE,EAAAlF,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA,EAAArB,CAAA,EAAAM,CAAA;QACA,IAAAuB,CAAA,GAAAxC,CAAA,CAAAuG,cAAA;QAKA,IAHA,KAAA7F,CAAA,IAAAD,CAAA,QACAyI,CAAA,CAAAyiB,SAAA,CAAAnpB,CAAA,EAAA7B,CAAA,CAAAM,CAAA,GAAAR,CAAA,EAAAR,CAAA,EAAAO,CAAA,GAEA,KAAAC,CAAA,EAEA,SAAAG,CAAA,GAAAuqB,EAAA,CAAAxf,SAAA,MAA+C,KAAA/K,CAAA,IAAQA,CAAA;UACvD,IAAAuC,CAAA,GAAAxC,CAAA,CAAAM,CAAA,MAAAP,CAAA,EAAAE,CAAA;YACAG,CAAA,GAAAJ,CAAA,CAAAM,CAAA,MAAAP,CAAA,EAAAE,CAAA;UACAD,CAAA,CAAAM,CAAA,MAAAP,CAAA,EAAAE,CAAA,KAAAuC,CAAA,GAAApC,CAAA,IAAAgkB,CAAA,CAAAriB,KAAA,OACA/B,CAAA,CAAAM,CAAA,MAAAP,CAAA,EAAAE,CAAA,KAAAuC,CAAA,GAAApC,CAAA,IAAAgkB,CAAA,CAAAriB,KAAA;QAAA;QASA,KAFAV,CAAA,CAAAtB,CAAA,OAAAC,CAAA,CAAAM,CAAA,MAAAP,CAAA,MACAsB,CAAA,CAAAtB,CAAA,QAAAsB,CAAA,CAAAtB,CAAA,MACAE,CAAA,GAAAuqB,EAAA,CAAAxf,SAAA,UAA+C,KAAA/K,CAAA,IAAQA,CAAA;UACvD,IAAAyF,CAAA,GAAA1F,CAAA,CAAAM,CAAA,MAAAP,CAAA,EAAAyqB,EAAA,CAAAxf,SAAA,OAAA/K,CAAA;YACA0F,CAAA,GAAA3F,CAAA,CAAAM,CAAA,MAAAP,CAAA,EAAAyqB,EAAA,CAAAxf,SAAA,OAAA/K,CAAA;UACAoB,CAAA,CAAAtB,CAAA,EAAAyqB,EAAA,CAAAxf,SAAA,OAAA/K,CAAA,IAAAgH,CAAA,CACA,MADAvB,CAAA,GACAA,CAAA,GAAAC,CAAA,GAAAA,CAAA;QAAA;MAAA;MAtcA,KAAAyB,gBAAA,aAAA/H,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA,EAAArB,CAAA,EAAAM,CAAA,EAAAuB,CAAA,EAAA5B,CAAA;QAKA,IAeAuC,CAAA;UAAApC,CAAA;UACAsF,CAAA;UAAAC,CAAA;UAAAvE,CAAA;UAAAf,CAAA;UACAwF,CAAA;UAAA1F,CAAA;UAIA2F,CAAA;UAuTAiB,CAAA;UA5UAC,CAAA,GAAA3H,CAAA,CAAAuG,cAAA;UAGAqB,CAAA,GAAAojB,EAAA,KAAAG,EAAA,CAAAhkB,OAAA;UACAgB,CAAA,GAAA6iB,EAAA,QAAAG,EAAA,CAAAxf,SAAA;UAGA3C,CAAA,GAAA+hB,EAAA,CAAAI,EAAA,CAAAjgB,MAAA;UACAjC,CAAA,GAAA8hB,EAAA,CAAAI,EAAA,CAAAjgB,MAAA;UACAhC,CAAA,GAAA6hB,EAAA,CAAAI,EAAA,CAAAjgB,MAAA;UAGA/B,CAAA,GAAA8hB,EAAA;UAAAphB,CAAA,GAAAohB,EAAA;UAQAnhB,CAAA,GAAAkhB,EAAA;UAEAzgB,CAAA,GAAA0gB,EAAA,CAAAE,EAAA,CAAAjgB,MAAA;UAAA1F,CAAA,GAAAylB,EAAA,CAAAE,EAAA,CAAAjgB,MAAA;QAwBA,KAtBA4f,EAAA,CAAA1oB,IAAA,CAAAoD,CAAA,MAEArC,CAAA,GAAAwE,CAAA,CAAAf,YAAA,EAEA5G,CAAA,CAAAgI,IAAA,IAAAC,QAAA,CAAAC,YAAA,KACA/E,CAAA,OAGAsD,CAAA,GADAzG,CAAA,CAAA6H,GAAA,IAAA+iB,EAAA,CAAAvnB,OAAA,GACA,KAAAsE,CAAA,CAAAgK,OAAA,OAAAhK,CAAA,CAAA+J,QAAA,GACA/J,CAAA,CAAAgK,OAAA,QACA3R,CAAA,CAAA6H,GAAA,IAAA+iB,EAAA,CAAArnB,MAAA,IAAAvD,CAAA,CAAA6H,GAAA,IAAA+iB,EAAA,CAAAnnB,QAAA,IACAzD,CAAA,CAAA6H,GAAA,IAAA+iB,EAAA,CAAAtnB,MAAA,GACA,KAEA,GAQAvC,CAAA,MAAqBA,CAAA,GAAA4G,CAAA,CAAAf,YAAA,EAAwB7F,CAAA;UAE7C,IAAA0E,CAAA,GAAAxF,CAAA,CAAAc,CAAA;YACA4E,CAAA,GAAAnF,CAAA,eAAA+qB,EAAA;UAEA,KADAL,EAAA,CAAAsB,EAAA,CAAAlqB,MAAA,KAAAipB,EAAA,YACAjlB,CAAA,MAAuBA,CAAA,QAASA,CAAA;YAChC,IAAAT,CAAA,EAAAC,CAAA;YAGA,KAFAD,CAAA,GAAAJ,CAAA,CAAAE,CAAA,GAAAW,CAAA,QAEAvE,CAAA,GADA+D,CAAA,MAC2B/D,CAAA,IAAAwpB,EAAA,eAA8BxpB,CAAA,OACzD8D,CAAA,IAAA2mB,EAAA,CAAAzqB,CAAA,KACA0D,CAAA,CAAAE,CAAA,GAAAW,CAAA,GAAAvE,CAAA,IAAA0D,CAAA,CAAAE,CAAA,GAAAW,CAAA,GACAilB,EAAA,GAAAxpB,CAAA,IACA+D,CAAA,IAAA0mB,EAAA,CAAAzqB,CAAA,SACA0D,CAAA,CAAAE,CAAA,GAAAW,CAAA,GAAAvE,CAAA,QAAA0D,CAAA,CAAAE,CAAA,GACAW,CAAA,GAAAilB,EAAA,GAAAxpB,CAAA;YAEA+H,CAAA,CAAA/I,CAAA,EAAAuF,CAAA,IAAAT,CAAA,GAAAC,CAAA;UAAA;UAEApF,CAAA,CAAAD,CAAA,EAAAM,CAAA,EAAAwR,EAAA,CAAAqE,MAAA,CAAAjP,CAAA,CAAA4K,EAAA,CAAAxR,CAAA,IACAL,CAAA,CAAAD,CAAA,EAAAM,CAAA,EAAAuR,GAAA,CAAAsE,MAAA,CAAAjP,CAAA,CAAA2K,GAAA,CAAAvR,CAAA,IACA,IAAAoC,CAAA,KAGAnB,CAAA,CAAAvB,CAAA,EAAAM,CAAA,EAAAwR,EAAA,CAAAqE,MAAA,CAAAjP,CAAA,CAAA4K,EAAA,CAAAxR,CAAA,QACAiB,CAAA,CAAAvB,CAAA,EAAAM,CAAA,EAAAuR,GAAA,CAAAsE,MAAA,CAAAjP,CAAA,CAAA2K,GAAA,CAAAvR,CAAA;QAAA;QAIA,KAAAA,CAAA,MAAqBA,CAAA,GAAAoC,CAAA,EAAcpC,CAAA;UACnC,IAMAiF,CAAA;YAJAC,CAAA,GAAA8kB,EAAA;YACA5kB,CAAA;YACAnB,CAAA,GAAA+lB,EAAA;YACA9lB,CAAA;YAEAC,CAAA,GAAA6lB,EAAA,CAAAI,EAAA,CAAAjgB,MAAA;YAAA/F,CAAA,GAAA4lB,EAAA,CAAAI,EAAA,CAAAjgB,MAAA;YACA9F,CAAA;YACAC,CAAA,GAAA0lB,EAAA,CAAAI,EAAA,CAAA1f,QAAA;YACAnG,CAAA,GAAA0lB,EAAA,KAAAG,EAAA,CAAAzf,UAAA;UAcA,KAPAwf,EAAA,CAAAvjB,CAAA,CAAAsL,OAAA,IAAAkY,EAAA,CAAAjgB,MAAA,GACAggB,EAAA,CAAAvjB,CAAA,CAAAqL,OAAA,IAAAmY,EAAA,CAAAjgB,MAAA,GAMA5E,CAAA,MAAuBA,CAAA,MAAOA,CAAA,IAC9BL,CAAA,CAAAK,CAAA,IAAAqB,CAAA,CAAAoC,KAAA,CAAA0iB,gBAAA,CAAA1rB,CAAA,EAAAuF,CAAA,OACA4kB,EAAA,KAAAvjB,CAAA,CAAAoC,KAAA,CAAA0iB,gBAAA,CAAA1rB,CAAA,EAAAuF,CAAA,QACAtB,CAAA,CAAAsB,CAAA,IAAAL,CAAA,CAAAK,CAAA,IACAqB,CAAA,CAAAoC,KAAA,CAAA0iB,gBAAA,CAAA1rB,CAAA,EAAAuF,CAAA,OACAH,CAAA,OAAAF,CAAA,CAAAK,CAAA;UAGA,SAAAvF,CAAA,EACA,KAAAuF,CAAA,MAA2BA,CAAA,QAASA,CAAA;YACpC,IAAAf,CAAA,EAAAsf,CAAA;YACAtf,CAAA,GAAAuE,CAAA,IAAAxD,CAAA,GACAue,CAAA,GAAA/a,CAAA,IAAAxD,CAAA,GACAwD,CAAA,IAAAxD,CAAA,IAAAf,CAAA,GAAAsf,CAAA,EACA/a,CAAA,IAAAxD,CAAA,IAAAf,CAAA,GAAAsf,CAAA;UAAA;UAIA,IAAAC,CAAA,GAAAhb,CAAA,KAAA/I,CAAA;YACAgkB,CAAA;UACA,KAAAze,CAAA,MAA2BA,CAAA,MAAOA,CAAA;YAGlC,KAFA,IAAA0e,CAAA,GAAAD,CAAA,OACAE,CAAA,MAC0BF,CAAA,GAAAC,CAAA,EAAaD,CAAA,IACvCE,CAAA,GAAAriB,IAAA,CAAAmc,GAAA,CAAA+F,CAAA,CAAAC,CAAA,OACAE,CAAA,GAAAriB,IAAA,CAAAmc,GAAA,CAAA+F,CAAA,CAAAC,CAAA;YAEApd,CAAA,CAAAoC,KAAA,CAAA0iB,gBAAA,CAAA1rB,CAAA,EAAAuF,CAAA,IAAAL,CAAA,CAAAK,CAAA,QAAA2e,CAAA,EACA9e,CAAA,KAAAG,CAAA,SAAA2e,CAAA,EACAA,CAAA,GAAAhf,CAAA,CAAAK,CAAA,aACA4kB,EAAA,KAAAjlB,CAAA,CAAAK,CAAA,YACA2e,CAAA,IAAAhf,CAAA,CAAAK,CAAA,aAGA2e,CAAA,GAFqBhf,CAAA,CAAAK,CAAA,iBAAA2e,CAAA,IACrBiG,EAAA,KAAAjG,CAAA,GACAhf,CAAA,CAAAK,CAAA,kBAAA2e,CAAA,KAEA,GACAjgB,CAAA,CAAAsB,CAAA,QAAA2e,CAAA;UAAA;UAIA,IAAAjlB,CAAA,CAAAoJ,QAAA;YACA,IAAA8b,CAAA,GAAAlgB,CAAA;YACA,KAAAsB,CAAA,MAA2BA,CAAA,OAAQA,CAAA,IACnC4e,CAAA,GAAAlgB,CAAA,CAAAsB,CAAA,MACA4e,CAAA,GAAAlgB,CAAA,CAAAsB,CAAA;YACAqB,CAAA,CAAA0B,KAAA,CAAAM,GAAA,CAAAlJ,CAAA,EAAAM,CAAA,IAAA4G,CAAA,CAAA0B,KAAA,CAAAqjB,QAAA,CAAA3rB,CAAA,GACA4G,CAAA,CAAA0B,KAAA,CAAAqjB,QAAA,CAAA3rB,CAAA,IAAAmkB,CAAA;UAAA;UAMA,KAFAlf,CAAA,QAAAjF,CAAA,GAAA4G,CAAA,CAAAoC,KAAA,CAAAue,YAAA,GACA3gB,CAAA,CAAAoC,KAAA,CAAAse,UAAA,EACA/hB,CAAA,MAAuBA,CAAA,OAAQA,CAAA,IAC/B,KAAAlB,CAAA,CAAAkB,CAAA,SACAtB,CAAA,CAAAsB,CAAA,IAAAN,CAAA,KACAZ,CAAA,CAAAkB,CAAA,QAAAA,CAAA;UAMA,KAAAA,CAAA,MAAuBA,CAAA,MAAOA,CAAA,KAE9BH,CAAA,CAAAG,CAAA,QAAAH,CAAA,CAAAG,CAAA,KACA4kB,EAAA,KAAA/kB,CAAA,CAAAG,CAAA,IACAH,CAAA,CAAAG,CAAA,QAAAH,CAAA,CAAAG,CAAA,MAEA4kB,EAAA,KAAA/kB,CAAA,CAAAG,CAAA,QACAH,CAAA,CAAAG,CAAA,IAAAH,CAAA,CAAAG,CAAA,UAEA,QACAlB,CAAA,CAAAkB,CAAA,OACA,KAAAA,CAAA,KACAlB,CAAA;UA+CA,KA3CA,KAAAA,CAAA,YAAAuC,CAAA,CAAAoC,KAAA,CAAA4iB,WAAA,CAAA5rB,CAAA,MACAqE,CAAA,UAEA,KAAAuC,CAAA,CAAAoC,KAAA,CAAA4iB,WAAA,CAAA5rB,CAAA,KACAqE,CAAA,MAAAA,CAAA,MAAAA,CAAA,MAAAA,CAAA,cACAH,CAAA,SAEAG,CAAA,YAAAA,CAAA,QACAA,CAAA,UACA,KAAAA,CAAA,YAAAA,CAAA,QACAA,CAAA,UACA,KAAAA,CAAA,YAAAA,CAAA,QACAA,CAAA,WAGArE,CAAA,OACA8I,CAAA,CAAA9I,CAAA,IAAAkE,CAAA,GAEA,KAAAA,CAAA,KACA4E,CAAA,MAAAA,CAAA,UAQArH,CAAA,CAAAzB,CAAA,IAAA4G,CAAA,CAAA6K,QAAA,CAAAzR,CAAA,GAOA0qB,EAAA,CAAAzrB,CAAA,EAAAqF,CAAA,EAAAC,CAAA,EADAsC,CAAA,EACA,IAAA7G,CAAA,EAFAoH,CAAA,EAGA,IAAApH,CAAA,EAAAN,CAAA,EAAAM,CAAA,EAAAd,CAAA,EAAAO,CAAA,GAKA8rB,EAAA,CAAA3kB,CAAA,EAAAtC,CAAA,EAAA2D,CAAA,EAAA9D,CAAA,EAAAC,CAAA,GACAonB,EAAA,CAAA5kB,CAAA,EAAAzC,CAAA,EAAAC,CAAA,EAAAoF,CAAA,GAEAzJ,CAAA,MAA4BA,CAAA,MAAYA,CAAA;YACxC,IAAAqkB,CAAA,EAAAC,CAAA;YAIA,KAHA8G,EAAA,CAAAlsB,CAAA,EAAAsF,CAAA,EAAA2D,CAAA,EAAAC,CAAA,EAAAnI,CAAA,EAAAD,CAAA,GACAkrB,EAAA,CAAArkB,CAAA,EAAAsB,CAAA,EAAAC,CAAA,EAAAnI,CAAA,EAAAD,CAAA,GAEA0F,CAAA,MAA4BA,CAAA,GAAA2kB,EAAA,CAAA7f,OAAA,EAAsB9E,CAAA;cAIlD,IAHA4e,CAAA,GAAAzd,CAAA,CAAA2K,GAAA,CAAAvR,CAAA,EAAAiB,CAAA,CAAAwE,CAAA,EAAA1F,CAAA,GAEAskB,CAAA,IA9hCA,IA+hCA,KAAAhgB,CAAA,CAAAtE,CAAA,UAAAsE,CAAA,CAAAtE,CAAA;gBACA,IAAAukB,EAAA,QAAAvkB,CAAA,GAAAA,CAAA;gBACAmkB,CAAA,GAAAkH,EAAA,CAAAxkB,CAAA,CAAA2K,GAAA,CAAAvR,CAAA,EAAAiB,CAAA,CAAAwE,CAAA,EAAA6e,EAAA,GAAAD,CAAA,EAhiCA,KAiiCA3e,CAAA,GACA2e,CAAA,GAAAxiB,IAAA,CAAAyX,GAAA,CAAA+K,CAAA,EAAAH,CAAA;cAAA;cAGA,KAAA7f,CAAA,CAAAtE,CAAA,KACAukB,EAAA,QAAAvkB,CAAA,GAAAA,CAAA,UACAmkB,CAAA,GAAAkH,EAAA,CAAAxkB,CAAA,CAAA2K,GAAA,CAAAvR,CAAA,EAAAiB,CAAA,CAAAwE,CAAA,EAAA6e,EAAA,GAAAD,CAAA,EACAkG,EAAA,GAAA7kB,CAAA,GACA2e,CAAA,GAAAxiB,IAAA,CAAAyX,GAAA,CAAA+K,CAAA,EAAAH,CAAA,MACqB,KAAAnkB,CAAA,SAAAsE,CAAA,CAAAtE,CAAA,SACrB,KAAAA,CAAA,SAAA6G,CAAA,CAAAoC,KAAA,CAAA4iB,WAAA,CAAA5rB,CAAA,OACAskB,EAAA,QAAAvkB,CAAA,GAAAA,CAAA,UACAmkB,CAAA,GAAAkH,EAAA,CAAAxkB,CAAA,CAAA2K,GAAA,CAAAvR,CAAA,EAAAiB,CAAA,CAAAwE,CAAA,EAAA6e,EAAA,GAAAD,CAAA,EACAkG,EAAA,GAAA7kB,CAAA,GACA2e,CAAA,GAAAxiB,IAAA,CAAAyX,GAAA,CAAA+K,CAAA,EAAAH,CAAA,IAIAE,CAAA,GAAAlf,CAAA,KAAAnF,CAAA,QACAmF,CAAA,KAAAnF,CAAA,QACAmF,CAAA,KAAAnF,CAAA,OACA,IAAAmF,CAAA,KAAAnF,CAAA,QAAAqkB,CAAA,KACAC,CAAA,QACA,IAAAnf,CAAA,KAAAnF,CAAA,QAAAqkB,CAAA,KACAC,CAAA,UAGAzd,CAAA,CAAA2K,GAAA,CAAAvR,CAAA,EAAAiB,CAAA,CAAAwE,CAAA,EAAA1F,CAAA,IAAAskB,CAAA;YAAA;UAAA;UAWA,KARAzd,CAAA,CAAAoC,KAAA,CAAA4iB,WAAA,CAAA5rB,CAAA,IAAAqE,CAAA,KAQAiB,CAAA,GAFArF,CAAA,MAE2BqF,CAAA,GAAAsB,CAAA,CAAAqL,OAAA,EAAiB3M,CAAA;YAQ5C,KAHA,IAAAumB,EAAA,GAAAjlB,CAAA,CAAAuL,KAAA,CAAA7M,CAAA,MACAwmB,EAAA,GAAA7jB,CAAA,CAAA4jB,EAAA,IAAAf,EAAA,CAAAthB,CAAA,CAAAqiB,EAAA,IACAE,EAAA,GAAAnlB,CAAA,CAAAyK,KAAA,CAAApR,CAAA,MAAA6rB,EAAA,IACAD,EAAA,IAAAjlB,CAAA,CAAAuL,KAAA,CAAA7M,CAAA,OACAwmB,EAAA,GAAA7jB,CAAA,CAAA4jB,EAAA,IAAAf,EAAA,CAAAthB,CAAA,CAAAqiB,EAAA,IACAE,EAAA,GAAArjB,EAAA,CAAAqjB,EAAA,EAAAnlB,CAAA,CAAAyK,KAAA,CAAApR,CAAA,MAAA6rB,EAAA,EAAAD,EAAA,EAAAA,EAAA,GAAAvmB,CAAA,EACAsB,CAAA;YAEAmlB,EAAA,sBAoBAnlB,CAAA,CAAAmM,aAAA,KAAA/S,CAAA,KAAAoqB,EAAA,CAAAnkB,UAAA,GACAkC,CAAA,CAAA7C,CAAA,IAAAymB,EAAA,GAEA5jB,CAAA,CAAA7C,CAAA,IAAA8lB,EAAA,CACAvpB,IAAA,CAAAyX,GAAA,CAAAyS,EAAA,EAAAlqB,IAAA,CAAAyX,GAAA,CAAA+Q,EAAA,GACAzjB,CAAA,CAAAoK,IAAA,CAAAhR,CAAA,EAAAsF,CAAA,GAAAglB,EAAA,GACA1jB,CAAA,CAAAqK,IAAA,CAAAjR,CAAA,EAAAsF,CAAA,KAAAymB,EAAA,EAAArmB,CAAA,GAEAkB,CAAA,CAAAqK,IAAA,CAAAjR,CAAA,EAAAsF,CAAA,IAAAsB,CAAA,CAAAoK,IAAA,CAAAhR,CAAA,EAAAsF,CAAA,GACAsB,CAAA,CAAAoK,IAAA,CAAAhR,CAAA,EAAAsF,CAAA,IAAAymB,EAAA;UAAA;UAGA,OAAkBzmB,CAAA,IAAA8kB,EAAA,CAAAjgB,MAAA,IAAqB7E,CAAA,EACvC2C,CAAA,CAAA3C,CAAA,OACA6C,CAAA,CAAA7C,CAAA;UAGA4lB,EAAA,CAAAtkB,CAAA,EAAAqB,CAAA,EAAAE,CAAA,EAAAnI,CAAA;QAAA;QA0BA,KAtBAf,CAAA,CAAAgI,IAAA,IAAAC,QAAA,CAAA0R,MAAA,IAAA3Z,CAAA,CAAAgI,IAAA,IAAAC,QAAA,CAAAC,YAAA,IACA,IAAAlI,CAAA,CAAA2oB,YAAA,IAtyBA,UAAA3oB,CAAA,EAAAC,CAAA;UACA,IAAAO,CAAA,GAAAR,CAAA,CAAAuG,cAAA;UACA,QAAA/F,CAAA,CAAAoG,YAAA;YACA,SAAAnG,CAAA,MAA4BA,CAAA,GAAA0qB,EAAA,CAAA9f,OAAA,EAAsB5K,CAAA;cAClD,IAAAC,CAAA,GAAAF,CAAA,CAAA8R,GAAA,IAAA1R,CAAA,CAAAH,CAAA;gBACAuB,CAAA,GAAAxB,CAAA,CAAA8R,GAAA,IAAA1R,CAAA,CAAAH,CAAA;cACAD,CAAA,CAAA8R,GAAA,IAAA1R,CAAA,CAAAH,CAAA,KAAAuB,CAAA,GAAA/B,CAAA,EACAO,CAAA,CAAA8R,GAAA,IAAA1R,CAAA,CAAAH,CAAA,KAAAC,CAAA,GAAAT,CAAA;YAAA;YAEA,KAAAQ,CAAA,MAA4BA,CAAA,GAAA0qB,EAAA,CAAA7f,OAAA,EAAsB7K,CAAA,IAClD,SAAAE,CAAA,MAAoCA,CAAA,MAAYA,CAAA,IAChDD,CAAA,GAAAF,CAAA,CAAA8R,GAAA,IAAAtQ,CAAA,CAAAvB,CAAA,EAAAE,CAAA,GACAqB,CAAA,GAAAxB,CAAA,CAAA8R,GAAA,IAAAtQ,CAAA,CAAAvB,CAAA,EAAAE,CAAA,GACAH,CAAA,CAAA8R,GAAA,IAAAtQ,CAAA,CAAAvB,CAAA,EAAAE,CAAA,KAAAqB,CAAA,GAAA/B,CAAA,EACAO,CAAA,CAAA8R,GAAA,IAAAtQ,CAAA,CAAAvB,CAAA,EAAAE,CAAA,KAAAD,CAAA,GAAAT,CAAA;UAAA;QAAA,CAyxBA,CAAAD,CAAA,EAAAA,CAAA,CAAA2oB,YAAA,GAIA3oB,CAAA,CAAAgI,IAAA,IAAAC,QAAA,CAAAC,YAAA,KApxBA,UAAAlI,CAAA;UACA,SAAAC,CAAA,MAAwBA,CAAA,GAAAkrB,EAAA,CAAA9f,OAAA,EAAsBpL,CAAA,IAI9C,MAAAD,CAAA,CAAAsS,GAAA,IAAA1R,CAAA,CAAAX,CAAA,WAAAD,CAAA,CAAAsS,GAAA,IAAA1R,CAAA,CAAAX,CAAA,KACAD,CAAA,CAAAsS,GAAA,IAAA1R,CAAA,CAAAX,CAAA,WAAAD,CAAA,CAAAsS,GAAA,IAAA1R,CAAA,CAAAX,CAAA,IADA;YAGA,IAAAO,CAAA,GAAAR,CAAA,CAAA0S,KAAA,CAAAzS,CAAA,IAAAD,CAAA,CAAAuS,EAAA,IAAA3R,CAAA,CAAAX,CAAA;cACAQ,CAAA,GAAAmC,IAAA,CAAA6F,GAAA,CAAAzI,CAAA,CAAAsS,GAAA,IAAA1R,CAAA,CAAAX,CAAA,GACA2C,IAAA,CAAAyX,GAAA,CAAAra,CAAA,CAAAsS,GAAA,IAAA1R,CAAA,CAAAX,CAAA,GAAAO,CAAA;YAEAA,CAAA,GAAAR,CAAA,CAAA0S,KAAA,CAAAzS,CAAA,IAAAD,CAAA,CAAAuS,EAAA,IAAA3R,CAAA,CAAAX,CAAA;YACA,IAAAS,CAAA,GAAAkC,IAAA,CAAA6F,GAAA,CAAAzI,CAAA,CAAAsS,GAAA,IAAA1R,CAAA,CAAAX,CAAA,GACA2C,IAAA,CAAAyX,GAAA,CAAAra,CAAA,CAAAsS,GAAA,IAAA1R,CAAA,CAAAX,CAAA,GAAAO,CAAA;YACAR,CAAA,CAAAsS,GAAA,IAAA1R,CAAA,CAAAX,CAAA,IAAAQ,CAAA,EACAT,CAAA,CAAAsS,GAAA,IAAA1R,CAAA,CAAAX,CAAA,IAAAS,CAAA;UAAA;UAGA,KAAAT,CAAA,MAAwBA,CAAA,GAAAkrB,EAAA,CAAA7f,OAAA,EAAsBrL,CAAA,IAC9C,SAAA+B,CAAA,MAAgCA,CAAA,MAAYA,CAAA,IAC5ChC,CAAA,CAAAsS,GAAA,IAAAtQ,CAAA,CAAA/B,CAAA,EAAA+B,CAAA,WAAAhC,CAAA,CAAAsS,GAAA,IAAAtQ,CAAA,CAAA/B,CAAA,EAAA+B,CAAA,KACAhC,CAAA,CAAAsS,GAAA,IAAAtQ,CAAA,CAAA/B,CAAA,EAAA+B,CAAA,WAAAhC,CAAA,CAAAsS,GAAA,IAAAtQ,CAAA,CAAA/B,CAAA,EAAA+B,CAAA,MAEAxB,CAAA,GAAAR,CAAA,CAAA2S,KAAA,CAAA1S,CAAA,IAAAD,CAAA,CAAAuS,EAAA,IAAAvQ,CAAA,CAAA/B,CAAA,EAAA+B,CAAA,GACAvB,CAAA,GAAAmC,IAAA,CAAA6F,GAAA,CAAAzI,CAAA,CAAAsS,GAAA,IAAAtQ,CAAA,CAAA/B,CAAA,EAAA+B,CAAA,GACAY,IAAA,CAAAyX,GAAA,CAAAra,CAAA,CAAAsS,GAAA,IAAAtQ,CAAA,CAAA/B,CAAA,EAAA+B,CAAA,GAAAxB,CAAA,IAEAA,CAAA,GAAAR,CAAA,CAAA2S,KAAA,CAAA1S,CAAA,IAAAD,CAAA,CAAAuS,EAAA,IAAAvQ,CAAA,CAAA/B,CAAA,EAAA+B,CAAA,GACAtB,CAAA,GAAAkC,IAAA,CAAA6F,GAAA,CAAAzI,CAAA,CAAAsS,GAAA,IAAAtQ,CAAA,CAAA/B,CAAA,EAAA+B,CAAA,GACAY,IAAA,CAAAyX,GAAA,CAAAra,CAAA,CAAAsS,GAAA,IAAAtQ,CAAA,CAAA/B,CAAA,EAAA+B,CAAA,GAAAxB,CAAA,IAEAR,CAAA,CAAAsS,GAAA,IAAAtQ,CAAA,CAAA/B,CAAA,EAAA+B,CAAA,IAAAvB,CAAA,EACAT,CAAA,CAAAsS,GAAA,IAAAtQ,CAAA,CAAA/B,CAAA,EAAA+B,CAAA,IAAAtB,CAAA;QAAA,CAqvBA,CAAAiH,CAAA,GACAD,CAAA,GAAA1H,CAAA,CAAAooB,KAAA,EACA,IAAAxlB,IAAA,CAAAmc,GAAA,CAAArX,CAAA,KA7uBA,UAAA1H,CAAA,EAAAC,CAAA,EAAAO,CAAA;UACA,IAAAC,CAAA,GAAAR,CAAA;YACAS,CAAA,GAAAkC,IAAA,CAAAwd,GAAA,KAAA5f,CAAA;UAEAP,CAAA,OACAQ,CAAA;UACA,SAAAuB,CAAA,MAAwBA,CAAA,GAAAmpB,EAAA,CAAA9f,OAAA,EAAsBrJ,CAAA,IAE9CmB,CAAA,GAAAnD,CAAA,CAAAsI,GAAA,CAAAyjB,IAAA,CAAA/rB,CAAA,CAAA4S,IAAA,CAAA5Q,CAAA,KAAAtB,CAAA,GACAO,CAAA,GAAA2B,IAAA,CAAAyX,GAAA,CAAAzX,IAAA,CAAA6F,GAAA,CAAAzI,CAAA,CAAAsS,GAAA,IAAA1R,CAAA,CAAAoB,CAAA,GAAAmB,CAAA,GACAP,IAAA,CAAA6F,GAAA,CAAAzI,CAAA,CAAAsS,GAAA,IAAA1R,CAAA,CAAAoB,CAAA,GAAAmB,CAAA,MAGAlD,CAAA,IAFAuC,CAAA,GAAAI,IAAA,CAAA6F,GAAA,CAAAzI,CAAA,CAAAsS,GAAA,IAAA1R,CAAA,CAAAoB,CAAA,GAAAmB,CAAA,MACAvC,CAAA,GAAAgC,IAAA,CAAA6F,GAAA,CAAAzI,CAAA,CAAAsS,GAAA,IAAA1R,CAAA,CAAAoB,CAAA,GAAAmB,CAAA,MAKA+nB,EAAA,MAFA1oB,CAAA,IADAzB,CAAA,GAAAE,CAAA,GAAAR,CAAA,IAAA+B,CAAA,GAAA5B,CAAA,MAEAA,CAAA,IAAAG,CAAA,IAGAf,CAAA,CAAAsS,GAAA,IAAA1R,CAAA,CAAAoB,CAAA,IAAAY,IAAA,CAAAyX,GAAA,CAAA7X,CAAA,EAAAxC,CAAA,CAAAsS,GAAA,IAAA1R,CAAA,CAAAoB,CAAA,IACAhC,CAAA,CAAAsS,GAAA,IAAA1R,CAAA,CAAAoB,CAAA,IAAAY,IAAA,CAAAyX,GAAA,CAAAzZ,CAAA,EAAAZ,CAAA,CAAAsS,GAAA,IAAA1R,CAAA,CAAAoB,CAAA;UAIA,KADAtB,CAAA,IAAAyqB,EAAA,CAAAxf,SAAA,GAAAwf,EAAA,CAAAhkB,OAAA,EACAnF,CAAA,MAAwBA,CAAA,GAAAmpB,EAAA,CAAA7f,OAAA,EAAsBtJ,CAAA,IAC9C,SAAArB,CAAA,MAAgCA,CAAA,MAAYA,CAAA;YAC5C,IAAAM,CAAA,EAAAuB,CAAA,EAAA5B,CAAA,EAAAuC,CAAA,EAQApC,CAAA;YAPAoC,CAAA,GAAAnD,CAAA,CAAAsI,GAAA,CAAAwjB,IAAA,CAAA9rB,CAAA,CAAA8S,IAAA,CAAA9Q,CAAA,KAAAtB,CAAA,GACAO,CAAA,GAAA2B,IAAA,CAAAyX,GAAA,CAAAzX,IAAA,CAAA6F,GAAA,CAAAzI,CAAA,CAAAsS,GAAA,IAAAtQ,CAAA,CAAAA,CAAA,EAAArB,CAAA,GAAAwC,CAAA,GACAP,IAAA,CAAA6F,GAAA,CAAAzI,CAAA,CAAAsS,GAAA,IAAAtQ,CAAA,CAAAA,CAAA,EAAArB,CAAA,GAAAwC,CAAA,MAIAlD,CAAA,IAHAuC,CAAA,GAAAI,IAAA,CAAA6F,GAAA,CAAAzI,CAAA,CAAAsS,GAAA,IAAAtQ,CAAA,CAAAA,CAAA,EAAArB,CAAA,GAAAwC,CAAA,MACAvC,CAAA,GAAAgC,IAAA,CAAA6F,GAAA,CAAAzI,CAAA,CAAAsS,GAAA,IAAAtQ,CAAA,CAAAA,CAAA,EAAArB,CAAA,GAAAwC,CAAA,MAMA+nB,EAAA,MAFA1oB,CAAA,IADAzB,CAAA,GAAAE,CAAA,GAAAhB,CAAA,IAAAuC,CAAA,GAAA5B,CAAA,MAEAA,CAAA,IAAAG,CAAA,IAGAf,CAAA,CAAAsS,GAAA,IAAAtQ,CAAA,CAAAA,CAAA,EAAArB,CAAA,IAAAiC,IAAA,CAAAyX,GAAA,CAAAra,CAAA,CAAAsS,GAAA,IAAAtQ,CAAA,CAAAA,CAAA,EAAArB,CAAA,GACA6B,CAAA,GACAxC,CAAA,CAAAsS,GAAA,IAAAtQ,CAAA,CAAAA,CAAA,EAAArB,CAAA,IAAAiC,IAAA,CAAAyX,GAAA,CAAAra,CAAA,CAAAsS,GAAA,IAAAtQ,CAAA,CAAAA,CAAA,EAAArB,CAAA,GACAC,CAAA;UAAA;QAAA,CAosBA,CAAA+G,CAAA,EAAAD,CAAA,EAAA1H,CAAA,CAAAqgB,QAAA,GAAA1Y,CAAA,CAAAW,GAAA,CAAAK,MAAA,IA7iBA,UAAA3I,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA;UACA,IAAAC,CAAA,GAAAV,CAAA,CAAAuG,cAAA;UAEAvG,CAAA,CAAAunB,YAAA,IAAAsD,EAAA,CAAA7nB,mBAAA,IAIA,KAAA/C,CAAA,YAAAA,CAAA,QACAA,CAAA,MAAAA,CAAA;UAMA,SAAA+B,CAAA,MAAyBA,CAAA,GAAAtB,CAAA,CAAAkG,YAAA,EAAwB5E,CAAA,IACjDvB,CAAA,CAAAuB,CAAA,IAAAmpB,EAAA,CAAA9iB,SAAA,EAEArI,CAAA,CAAAunB,YAAA,IAAAsD,EAAA,CAAA5nB,qBAAA,KACAhD,CAAA,CAAA+B,CAAA,QACAhC,CAAA,CAAAunB,YAAA,IAAAsD,EAAA,CAAA3nB,kBAAA,KACAjD,CAAA,CAAA+B,CAAA,QAEA,KAAA/B,CAAA,CAAA+B,CAAA,KAEAkpB,EAAA,CAAAxqB,CAAA,CAAAoT,aAAA,CAAA9R,CAAA,KAAAmpB,EAAA,CAAAvf,UAAA,GACAlL,CAAA,CAAAoT,aAAA,CAAA9R,CAAA,KAAAmpB,EAAA,CAAAnkB,UAAA,KACAvG,CAAA,CAAAuB,CAAA,IAAAmpB,EAAA,CAAAtf,SAAA,MAGApL,CAAA,CAAAuB,CAAA,IAAAmpB,EAAA,CAAAnkB,UAAA,EACAtG,CAAA,CAAAoT,aAAA,CAAA9R,CAAA,KAAAmpB,EAAA,CAAA9iB,SAAA,KACA3H,CAAA,CAAAoT,aAAA,CAAA9R,CAAA,IAAAmpB,EAAA,CAAAvf,UAAA,GAEAlL,CAAA,CAAAoT,aAAA,CAAA9R,CAAA,KAAAmpB,EAAA,CAAAtf,SAAA,KACAnL,CAAA,CAAAoT,aAAA,CAAA9R,CAAA,IAAAmpB,EAAA,CAAAnkB,UAAA,IAGAxG,CAAA,CAAAwB,CAAA,IAAAtB,CAAA,CAAAoT,aAAA,CAAA9R,CAAA,GAEAtB,CAAA,CAAAoT,aAAA,CAAA9R,CAAA,IAAAvB,CAAA,CAAAuB,CAAA;QAAA,CA4gBA,CAAAhC,CAAA,EAAA6J,CAAA,EAAAjJ,CAAA,EAAAuI,CAAA,GAKApI,CAAA,MAAqBA,CAAA,GAAAoC,CAAA,EAAcpC,CAAA;UACnC,IAAAgsB,EAAA;YAEAC,EAAA;YACAC,EAAA;YAFAC,EAAA;UAWAD,EAAA,GAPA,IAAAlsB,CAAA,IACAgsB,EAAA,GAAA9rB,CAAA,EACAisB,EAAA,OACAF,EAAA,GAAA7B,EAAA,CAAA9iB,SAAA,EACAzH,CAAA,OAAAuqB,EAAA,CAAAnkB,UAAA,IACApG,CAAA,OAAAuqB,EAAA,CAAAnkB,UAAA,KACAgmB,EAAA,GAAA7B,EAAA,CAAAnkB,UAAA,GACAhF,CAAA,CAAAvB,CAAA,EAAAM,CAAA,UAEAgsB,EAAA,GAAApsB,CAAA,EACAusB,EAAA,MACAF,EAAA,GAAApsB,CAAA,CAAAG,CAAA,GACAL,CAAA,CAAAD,CAAA,EAAAM,CAAA,IAGAisB,EAAA,IAAA7B,EAAA,CAAAnkB,UAAA,GACA+lB,EAAA,CAAAG,EAAA,GAAAnsB,CAAA,IAAAqrB,EAAA,CAAAa,EAAA,EAAAtlB,CAAA,CAAA8I,aAAA,IAEAsc,EAAA,CAAAG,EAAA,GAAAnsB,CAAA,IAAAsrB,EAAA,CAAAY,EAAA,EAAAtlB,CAAA,CAAA8I,aAAA,GAEAzQ,CAAA,CAAAoJ,QAAA,KACAzB,CAAA,CAAA0B,KAAA,CAAAI,EAAA,CAAAhJ,CAAA,EAAAM,CAAA,IAAAgsB,EAAA,CAAAG,EAAA,GAAAnsB,CAAA;QAAA;QAGA;MAAA;MAwFA,IAAAoE,CAAA,mBACA,oCACA,mCACA;MA2LA,SAAAC,EAAApF,CAAA,EAAAC,CAAA,EAAAO,CAAA;QACA,SAAAA,CAAA,EACA,SAAAC,CAAA,MAA2BA,CAAA,GAAAT,CAAA,CAAAiT,OAAA,EAAiBxS,CAAA,IAC5CT,CAAA,CAAAkS,KAAA,CAAAjS,CAAA,EAAAQ,CAAA,IAAAT,CAAA,CAAAiS,KAAA,CAAAhS,CAAA,EAAAQ,CAAA,GACAT,CAAA,CAAAiS,KAAA,CAAAhS,CAAA,EAAAQ,CAAA;MAAA;MAKA,SAAA4E,EAAArF,CAAA,EAAAC,CAAA;QACA,SAAAO,CAAA,MAAuBA,CAAA,GAAAR,CAAA,CAAAgT,OAAA,EAAiBxS,CAAA,IACxCR,CAAA,CAAAgS,IAAA,CAAA/R,CAAA,EAAAO,CAAA,IAAAR,CAAA,CAAA+R,IAAA,CAAA9R,CAAA,EAAAO,CAAA,GACAR,CAAA,CAAA+R,IAAA,CAAA9R,CAAA,EAAAO,CAAA;MAAA;MAqEA,SAAA8E,EAAAtF,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA;QACA,IAEArB,CAAA;UAAAM,CAAA;UAAAuB,CAAA;UAFA5B,CAAA,GAAAZ,CAAA,CAAAuG,cAAA;UACApD,CAAA,OAAAgqB,KAAA,CAAAhC,EAAA,CAAAjgB,MAAA;UAAAnK,CAAA,GAAAgqB,EAAA,CAAAI,EAAA,CAAAjgB,MAAA;UAEA7E,CAAA,OAAA6iB,GAAA,CAAAiC,EAAA,CAAAjgB,MAAA;QAEA,KAAA1I,CAAA,GAAAvB,CAAA,MAAuBuB,CAAA,GAAA5B,CAAA,CAAAqS,OAAA,IAAiBzQ,CAAA;UACxC,IAAA8D,CAAA;YAAAvE,CAAA;YACAf,CAAA,GAAAJ,CAAA,CAAAwS,UAAA,CAAA5Q,CAAA;UACA,KAAA7B,CAAA,MAAuBA,CAAA,GAAAK,CAAA,IAAOL,CAAA,IAAAM,CAAA;YAC9B,IAAAuF,CAAA,GAAAvG,CAAA,CAAA+B,CAAA,EAAAf,CAAA;YACAqF,CAAA,IAAAE,CAAA,EACAzE,CAAA,GAAAyE,CAAA,KACAzE,CAAA,GAAAyE,CAAA;UAAA;UAEAhG,CAAA,CAAAgC,CAAA,IAAA8D,CAAA,EACA4kB,EAAA,MAAA5kB,CAAA,GACAnD,CAAA,CAAAX,CAAA,IAAAT,CAAA,EACAmpB,EAAA,KAAAlqB,CAAA,GACAD,CAAA,CAAAyB,CAAA,IAAA8D,CAAA,GAAAtF,CAAA,EACAkqB,EAAA,MAAAnqB,CAAA,CAAAyB,CAAA;QAAA;QAIA,KAFA0oB,EAAA,CAAA1oB,CAAA,IAAA5B,CAAA,CAAAqS,OAAA,GACAiY,EAAA,QAAAjqB,CAAA,GACcuB,CAAA,GAAA2oB,EAAA,CAAAjgB,MAAA,IAAoB1I,CAAA,EAClCW,CAAA,CAAAX,CAAA,OACAzB,CAAA,CAAAyB,CAAA;QAGA,KA9FA,UAAAxC,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA;UACA,IAAAC,CAAA,GAAAmrB,EAAA,CAAAvpB,MAAA;YACAN,CAAA;YACArB,CAAA,GAAAH,CAAA,CAAAwB,CAAA,IAAAxB,CAAA,CAAAwB,CAAA;UAiBA,KAhBAkpB,EAAA,MAAAvqB,CAAA,GAWAF,CAAA,CAAAuB,CAAA,IAVA,IAAArB,CAAA,KACAM,CAAA,GAAAhB,CAAA,CAAA+B,CAAA,KACA/B,CAAA,CAAA+B,CAAA,UACAf,CAAA,GAAAhB,CAAA,CAAA+B,CAAA,QACAkpB,EAAA,KAAAlrB,CAAA,CAAAoT,UAAA,CAAApR,CAAA,IAAAhC,CAAA,CAAAoT,UAAA,CAAApR,CAAA,YAIAtB,CAAA,IADA8B,CAAA,QAFA7B,CAAA,aAAAM,CAAA,GAAAN,CAAA,KACAA,CAAA,IAAAX,CAAA,CAAAoT,UAAA,CAAApR,CAAA,IAAAhC,CAAA,CAAAoT,UAAA,CAAApR,CAAA,kBAGAQ,CAAA,GAAA9B,CAAA,GACA8B,CAAA,IAEA,GAGAR,CAAA,MAAmBA,CAAA,GAAAhC,CAAA,CAAAiT,OAAA,MAAqBjR,CAAA;YAKxC,IAAAf,CAAA,EAUAuB,CAAA;YAdA7B,CAAA,GAAAH,CAAA,CAAAwB,CAAA,QAAAxB,CAAA,CAAAwB,CAAA,IAAAxB,CAAA,CAAAwB,CAAA,OACAkpB,EAAA,CAAAlpB,CAAA,OAAAhC,CAAA,CAAAiT,OAAA,GACAiY,EAAA,MAAAvqB,CAAA,GAeAF,CAAA,CAAAuB,CAAA,IAdA,IAAArB,CAAA,KACAM,CAAA,GAAAhB,CAAA,CAAA+B,CAAA,SACA/B,CAAA,CAAA+B,CAAA,MACAf,CAAA,GAAAhB,CAAA,CAAA+B,CAAA,IACAf,CAAA,GAAAhB,CAAA,CAAA+B,CAAA,UACAf,CAAA,GAAAhB,CAAA,CAAA+B,CAAA,QACAkpB,EAAA,KAAAlrB,CAAA,CAAAoT,UAAA,CAAApR,CAAA,QAAAhC,CAAA,CAAAoT,UAAA,CAAApR,CAAA,IAAAhC,CAAA,CAAAoT,UAAA,CAAApR,CAAA,YAMAtB,CAAA,IADA8B,CAAA,QAJA7B,CAAA,SACA,IAAAM,CAAA,GAAAN,CAAA,KACAA,CAAA,IAAAX,CAAA,CAAAoT,UAAA,CAAApR,CAAA,QAAAhC,CAAA,CAAAoT,UAAA,CAAApR,CAAA,IACAhC,CAAA,CAAAoT,UAAA,CAAApR,CAAA,kBAGAQ,CAAA,GAAA9B,CAAA,GACA8B,CAAA,IAEA;UAAA;UAGA0oB,EAAA,KAAAlpB,CAAA,GACAkpB,EAAA,CAAAlpB,CAAA,IAAAhC,CAAA,CAAAiT,OAAA,OAEAtS,CAAA,GAAAH,CAAA,CAAAwB,CAAA,QAAAxB,CAAA,CAAAwB,CAAA,GACAkpB,EAAA,MAAAvqB,CAAA,GAWAF,CAAA,CAAAuB,CAAA,IAVA,IAAArB,CAAA,KACAM,CAAA,GAAAhB,CAAA,CAAA+B,CAAA,SACA/B,CAAA,CAAA+B,CAAA,MACAf,CAAA,GAAAhB,CAAA,CAAA+B,CAAA,IACAkpB,EAAA,KAAAlrB,CAAA,CAAAoT,UAAA,CAAApR,CAAA,QAAAhC,CAAA,CAAAoT,UAAA,CAAApR,CAAA,QAIAtB,CAAA,IADA8B,CAAA,QAFA7B,CAAA,aAAAM,CAAA,GAAAN,CAAA,KACAA,CAAA,IAAAX,CAAA,CAAAoT,UAAA,CAAApR,CAAA,QAAAhC,CAAA,CAAAoT,UAAA,CAAApR,CAAA,cAGAQ,CAAA,GAAA9B,CAAA,GACA8B,CAAA,IAEA,GAEA0oB,EAAA,CAAAlpB,CAAA,IAAAhC,CAAA,CAAAiT,OAAA;QAAA,CA+BA,CAAArS,CAAA,EAAAuC,CAAA,EAAApC,CAAA,EAAAsF,CAAA,GACApF,CAAA,GAAAuB,CAAA,MAAuBA,CAAA,GAAA5B,CAAA,CAAAqS,OAAA,EAAiBzQ,CAAA;UACxC,IAEA1B,CAAA;YAAA2F,CAAA;YACAiB,CAAA;YAAAC,CAAA;YAAAC,CAAA;YAHAO,CAAA,GAAAvH,CAAA,CAAAuS,OAAA,CAAA3Q,CAAA;YACAwG,CAAA,GAAApI,CAAA,CAAAuS,OAAA,CAAA3Q,CAAA;UAQA,KALA1B,CAAA,GAAAuF,CAAA,CAAA8B,CAAA,GACA1B,CAAA,MACAkB,CAAA,GAAA/G,CAAA,CAAAuR,KAAA,CAAAlR,CAAA,IAAAT,CAAA,CAAA2H,CAAA,IAAA0jB,EAAA,CAAAxlB,CAAA,CAAA8B,CAAA,MACAlH,CAAA,IACAkH,CAAA,EACAA,CAAA,IAAAa,CAAA,GACAlI,CAAA,IAAAuF,CAAA,CAAA8B,CAAA,GACA1B,CAAA,OAEAkB,CAAA,GAAAsB,CAAA,CAAAtB,CAAA,EADAD,CAAA,GAAA9G,CAAA,CAAAuR,KAAA,CAAAlR,CAAA,IAAAT,CAAA,CAAA2H,CAAA,IAAA0jB,EAAA,CAAAxlB,CAAA,CAAA8B,CAAA,IACAA,CAAA,GAAA3F,CAAA,KACAvB,CAAA,IACAkH,CAAA;UAIAR,CAAA,IADAC,CAAA,QAAAikB,EAAA,CADA/qB,CAAA,YAAAA,CAAA,SAAA2F,CAAA,IAGAhG,CAAA,CAAA+B,CAAA,IAAAmF,CAAA,EACA/G,CAAA,CAAAsR,KAAA,CAAAxR,CAAA,EAAA8B,CAAA,IAAA5B,CAAA,CAAAqR,KAAA,CAAAvR,CAAA,EAAA8B,CAAA,GACA5B,CAAA,CAAAqR,KAAA,CAAAvR,CAAA,EAAA8B,CAAA,IAAAmF,CAAA,EAQAD,CAAA,GAAAvE,CAAA,CAAAX,CAAA,GACAkF,CAAA,IAAA9G,CAAA,CAAAkR,QAAA,CAAAtP,CAAA,GACAkF,CAAA,IAAAE,CAAA,EACAnH,CAAA,CAAA+B,CAAA,IAAAkF,CAAA,KACAjH,CAAA,CAAA+B,CAAA,IAAAkF,CAAA,GAGA,IAAA9G,CAAA,CAAA6P,aAAA,KACAhQ,CAAA,CAAA+B,CAAA,KAAA5B,CAAA,CAAA6P,aAAA,GAEAhQ,CAAA,CAAA+B,CAAA,IAAAhC,CAAA,CAAAgC,CAAA,MACA/B,CAAA,CAAA+B,CAAA,IAAAhC,CAAA,CAAAgC,CAAA,IAEA5B,CAAA,CAAA6P,aAAA,SACAhQ,CAAA,CAAA+B,CAAA,KAAA5B,CAAA,CAAA6P,aAAA,GAGAya,EAAA,MAAAzqB,CAAA,CAAA+B,CAAA;QAAA;QAEA,OAAcA,CAAA,GAAA2oB,EAAA,CAAAjgB,MAAA,IAAoB1I,CAAA,EAClChC,CAAA,CAAAgC,CAAA,OACA/B,CAAA,CAAA+B,CAAA;MAAA;MAIA,SAAA+C,EAAAvF,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA;QACA,IAEAsB,CAAA;UAFArB,CAAA,GAAAoqB,EAAA,CAAAI,EAAA,CAAAjgB,MAAA;UAAAjK,CAAA,GAAA8pB,EAAA,CAAAI,EAAA,CAAAjgB,MAAA;UACA1I,CAAA,GAAAyoB,EAAA,CAAAE,EAAA,CAAAjgB,MAAA;QAMAohB,EAAA,CAAAtsB,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAG,CAAA,EAAAM,CAAA,GACAsrB,EAAA,CAAAvsB,CAAA,EAAAW,CAAA,EAAAM,CAAA,EAAAuB,CAAA;QAMA,IAAA5B,CAAA;QACA,KAAAoB,CAAA,MAAmBA,CAAA,GAAAhC,CAAA,CAAAgT,OAAA,EAAiBhR,CAAA;UACpC,IAAAmB,CAAA;YAAApC,CAAA;YAAAsF,CAAA;YAEAC,CAAA,GAAAtG,CAAA,CAAAkT,KAAA,CAAAlR,CAAA;YACAD,CAAA,GAAA/B,CAAA,CAAAkT,KAAA,CAAAlR,CAAA;YACAhB,CAAA;YAAAwF,CAAA;UAMA,KALAxF,CAAA,GAAAwB,CAAA,CAAA8D,CAAA,GACAE,CAAA,OACAzF,CAAA,GAAAf,CAAA,CAAAoS,KAAA,CAAAxR,CAAA,IAAAJ,CAAA,CAAA8F,CAAA,IAAAulB,EAAA,CAAArpB,CAAA,CAAA8D,CAAA,MACA1F,CAAA,IACA0F,CAAA,EACAA,CAAA,IAAAvE,CAAA,GACAf,CAAA,IAAAwB,CAAA,CAAA8D,CAAA,GACAE,CAAA,OAGAzF,CAAA,GADAkI,CAAA,CAAAlI,CAAA,EADAoC,CAAA,GAAAnD,CAAA,CAAAoS,KAAA,CAAAxR,CAAA,IAAAJ,CAAA,CAAA8F,CAAA,IAAAulB,EAAA,CAAArpB,CAAA,CAAA8D,CAAA,IACAA,CAAA,GAAAtE,CAAA,KAEApB,CAAA,IACA0F,CAAA;UAoBA,IAhBAvF,CAAA,IADAsF,CAAA,QAAAwlB,EAAA,CADA7qB,CAAA,YAAAA,CAAA,SAAAwF,CAAA,IAkBAxG,CAAA,CAAA8T,aAAA,KAAApT,CAAA,KAAAyqB,EAAA,CAAAnkB,UAAA;YACA,IAAAlG,CAAA,GAAAsqB,EAAA,GAAAprB,CAAA,CAAA+R,IAAA,CAAArR,CAAA,EAAAsB,CAAA;YAEAvB,CAAA,CAAAuB,CAAA,IADA,IAAAlB,CAAA,GACA8B,IAAA,CAAAyX,GAAA,CAAAtZ,CAAA,EAAAD,CAAA,IAaA8B,IAAA,CAAAyX,GAAA,CAAAtZ,CAAA,EAAAP,CAAA,CAAAwB,CAAA,IAAAspB,EAAA;UAAA,OAEa;YACb,IAAA7kB,CAAA,GAAA4kB,EAAA,GAAArrB,CAAA,CAAAgS,IAAA,CAAAtR,CAAA,EAAAsB,CAAA;cACA0F,CAAA,GAAA0jB,EAAA,GAAAprB,CAAA,CAAA+R,IAAA,CAAArR,CAAA,EAAAsB,CAAA;YAEAyE,CAAA,UACAA,CAAA,GAAA1F,CAAA,GAEA2G,CAAA,UACAA,CAAA,GAAA3G,CAAA,GAGAD,CAAA,GADAd,CAAA,CAAA8T,aAAA,KAAApT,CAAA,KAAAyqB,EAAA,CAAA9iB,SAAA,GACAzF,IAAA,CAAAyX,GAAA,CAAA3S,CAAA,EAAAjB,CAAA,IAEAiB,CAAA,EAEAjH,CAAA,CAAAuB,CAAA,IAAAY,IAAA,CAAAyX,GAAA,CAAAtZ,CAAA,EAAAD,CAAA;UAAA;UAEAd,CAAA,CAAAgS,IAAA,CAAAtR,CAAA,EAAAsB,CAAA,IAAAhC,CAAA,CAAA+R,IAAA,CAAArR,CAAA,EAAAsB,CAAA,GACAhC,CAAA,CAAA+R,IAAA,CAAArR,CAAA,EAAAsB,CAAA,IAAAjB,CAAA,EAQAoC,CAAA,GAAAxC,CAAA,CAAAqB,CAAA,GACAmB,CAAA,IAAAnD,CAAA,CAAA6R,QAAA,CAAA7P,CAAA,GACAmB,CAAA,IAAAkD,CAAA,EACA5F,CAAA,CAAAuB,CAAA,IAAAmB,CAAA,KACA1C,CAAA,CAAAuB,CAAA,IAAAmB,CAAA,GAGA,IAAAnD,CAAA,CAAAyQ,aAAA,KACAhQ,CAAA,CAAAuB,CAAA,KAAAhC,CAAA,CAAAyQ,aAAA,GAEAhQ,CAAA,CAAAuB,CAAA,IAAAxB,CAAA,CAAAwB,CAAA,MACAvB,CAAA,CAAAuB,CAAA,IAAAxB,CAAA,CAAAwB,CAAA,IAEAhC,CAAA,CAAAyQ,aAAA,SACAhQ,CAAA,CAAAuB,CAAA,KAAAhC,CAAA,CAAAyQ,aAAA,GAEAya,EAAA,MAAAzqB,CAAA,CAAAuB,CAAA;QAAA;QAEA,OAAcA,CAAA,GAAAmpB,EAAA,CAAAjgB,MAAA,IAAoBlJ,CAAA,EAClCxB,CAAA,CAAAwB,CAAA,OACAvB,CAAA,CAAAuB,CAAA;MAAA;MA6DA,SAAA6iB,EAAA7kB,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA,EAAArB,CAAA;QAIA,KAHA,IAEAM,CAAA,EAAAuB,CAAA,EAFA5B,CAAA,OAAAoB,CAAA,EACAmB,CAAA,OAAAnB,CAAA,GAAAY,IAAA,CAAAwd,GAAA,KAAA1f,CAAA,OAEAK,CAAA,MAAuBA,CAAA,GAAAJ,CAAA,IAAOI,CAAA;UAC9B,IAAAsF,CAAA,GAAArG,CAAA,IAAAe,CAAA;YACAuF,CAAA,GAAAtG,CAAA,IAAAe,CAAA;YACAgB,CAAA,GAAA9B,CAAA,IAAAc,CAAA;YACAC,CAAA,GAAAf,CAAA,IAAAc,CAAA;YACAyF,CAAA,GAAAvG,CAAA,IAAAc,CAAA;YACAD,CAAA,GAAAb,CAAA,IAAAc,CAAA;UAGA,IAAAgB,CAAA,WAAAf,CAAA,IAAAA,CAAA,WAAAe,CAAA;YACA,IAAA0E,CAAA,GAAAjG,CAAA,CAAAO,CAAA,IAAAuF,CAAA;cACAoB,CAAA,GAAAlH,CAAA,CAAAO,CAAA,IAAAsF,CAAA;YACA7D,CAAA,GAAAI,IAAA,CAAA6F,GAAA,CAAAjC,CAAA,EAAA5D,IAAA,CAAAyX,GAAA,CAAAvZ,CAAA,EAAA2F,CAAA,IACAxF,CAAA,GAAA2B,IAAA,CAAA6F,GAAA,CAAA3H,CAAA,EAAA8B,IAAA,CAAAyX,GAAA,CAAA7T,CAAA,EAAAkB,CAAA;UAAA,OAEAlF,CAAA,GAAAgE,CAAA,EACAvF,CAAA,GAAAH,CAAA;UAEA,QAAAkB,CAAA;YAKA,IAAA2F,CAAA;cAAAC,CAAA;cACAO,CAAA,GAAA1H,CAAA,CAAAM,CAAA,IAAAoC,CAAA;YAKA,IAJAwE,CAAA,GAAA/E,IAAA,CAAAyX,GAAA,CAAAzX,IAAA,CAAA6F,GAAA,CAAA1G,CAAA,EAAAoG,CAAA,GAAAvF,IAAA,CAAA6F,GAAA,CAAAzH,CAAA,EAAAmH,CAAA,IAIA,KADAP,CAAA,IAFApB,CAAA,GAAA5D,IAAA,CAAA6F,GAAA,CAAAjG,CAAA,EAAA2F,CAAA,MACArH,CAAA,GAAA8B,IAAA,CAAA6F,GAAA,CAAAxH,CAAA,EAAAkH,CAAA,OAEAR,CAAA,GAAA/G,CAAA,GAAAgH,CAAA;cACA,IAAAoB,CAAA,GAAArB,CAAA,GAAA/G,CAAA,GAAAgH,CAAA;cACApB,CAAA,IAAAwC,CAAA,EACAlI,CAAA,IAAAkI,CAAA,EACAkiB,EAAA,KAAAtjB,CAAA;YAAA;YAEApF,CAAA,GAAAI,IAAA,CAAAyX,GAAA,CAAA7T,CAAA,EAAAhE,CAAA,GACAvB,CAAA,GAAA2B,IAAA,CAAAyX,GAAA,CAAAvZ,CAAA,EAAAG,CAAA;UAAA;UAEAoF,CAAA,GAAA7D,CAAA,KACAA,CAAA,GAAA6D,CAAA,GAEAC,CAAA,GAAArF,CAAA,KACAA,CAAA,GAAAqF,CAAA,GAEArG,CAAA,IAAAc,CAAA,IAAAyB,CAAA,EACAvC,CAAA,IAAAc,CAAA,IAAAE,CAAA;QAAA;MAAA;MAmMA,SAAAkH,EAAAnI,CAAA,EAAAC,CAAA;QACA,IAAAO,CAAA;QAOA,QAJAA,CAAA,GADA,KAFAR,CAAA,GAGA,MAHAA,CAAA,GAAAA,CAAA,GAKAC,CAAA,MAEA,KACA,IAEA2C,IAAA,CAAAwqB,GAAA,CAAA5sB,CAAA,GAAAmH,CAAA;MAAA;MAGA,SAAAqB,EAAAhJ,CAAA;QACA,IAAAC,CAAA;UAAAO,CAAA;UAkBAC,CAAA;UAAAC,CAAA;UAhBAsB,CAAA;QACA,KAAAA,CAAA,MAAuB,QAAAmG,CAAA,CAAAnG,CAAA,EAAAhC,CAAA,GAAgCgC,CAAA;QAIvD,KAFAvB,CAAA,GAAAuB,CAAA,EACAtB,CAAA,MACA,QAAAkC,IAAA,CAAAmc,GAAA,CAAAre,CAAA,GAAAD,CAAA,IAEA,IAAA0H,CAAA,CADAnG,CAAA,IAAAtB,CAAA,GAAAD,CAAA,OACAT,CAAA,IACAU,CAAA,GAAAsB,CAAA,GAEAvB,CAAA,GAAAuB,CAAA;QAOA,KAJA/B,CAAA,GAAAQ,CAAA,EAIAuB,CAAA,GADAA,CAAA,MACuB,QAAAmG,CAAA,CAAAnG,CAAA,EAAAhC,CAAA,GAAgCgC,CAAA;QAIvD,KAFAvB,CAAA,MACAC,CAAA,GAAAsB,CAAA,EACA,QAAAY,IAAA,CAAAmc,GAAA,CAAAre,CAAA,GAAAD,CAAA,IAEA,IAAA0H,CAAA,CADAnG,CAAA,IAAAtB,CAAA,GAAAD,CAAA,OACAT,CAAA,IACAS,CAAA,GAAAuB,CAAA,GAEAtB,CAAA,GAAAsB,CAAA;QAGAxB,CAAA,GAAAE,CAAA;QAGA,IAEAC,CAAA;UAFAM,CAAA;QAGA,KAAAN,CAAA,MAAuBA,CAAA,IAFvB,OAE+BA,CAAA,EAG/BM,CAAA,IADAkH,CAAA,CADAnG,CAAA,GAAA/B,CAAA,GAAAU,CAAA,IAAAH,CAAA,GAAAP,CAAA,IAHA,KAIAD,CAAA;QAMA,OAFA,QAAAiB,CAAA,IAAAT,CAAA,GAAAP,CAAA;MAAA;MAiDA,SAAA6F,EAAA9F,CAAA;QAKA,OAHAA,CAAA,SACAA,CAAA,OACAA,CAAA,UACA,KAAA4C,IAAA,CAAAyqB,IAAA,OAAArtB,CAAA,UACA4C,IAAA,CAAAyqB,IAAA,CAAArtB,CAAA,GAAAA,CAAA;MAAA;MAGA,SAAAgG,EAAAhG,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA,EAAArB,CAAA,EAAAM,CAAA,EAAAuB,CAAA,EAAA5B,CAAA,EAAAuC,CAAA,EAAApC,CAAA;QACA,IAGAsF,CAAA;UAHAC,CAAA,GAAAykB,EAAA,CAAAI,EAAA,CAAAjgB,MAAA;UACAnJ,CAAA,GAAAd,CAAA,SAAAF,CAAA;UACAC,CAAA,GAAAiqB,EAAA,CAAAE,EAAA,CAAA1f,QAAA;QAEAxK,CAAA,IAAAuB,CAAA;QACA,IAAAgE,CAAA;UACA1F,CAAA;QAGA,KAAAuF,CAAA,MAAmBA,CAAA,GAAA8kB,EAAA,CAAAjgB,MAAA,EAAoB7E,CAAA;UACvC,IACAI,CAAA;UAKA,KAJAoD,CAAA,GAAA/D,CAAA,CAAA7E,CAAA,GAAAuF,CAAA,GAEAF,CAAA,CAAAD,CAAA,IAAApF,CAAA,GAAAuF,CAAA,EAEAC,CAAA,GAAAD,CAAA,EAAwBV,CAAA,CAAA7E,CAAA,GAAAwF,CAAA,IAAAoD,CAAA,GAAArE,CAAA,IACxBiB,CAAA,IAAAjE,CAAA,MAAiCiE,CAAA;UAMjC,KAHAzG,CAAA,CAAAqG,CAAA,IAAAI,CAAA,GAAAD,CAAA,EACA1F,CAAA,GAAAuF,CAAA,MAEAG,CAAA,GAAAC,CAAA,GACAykB,EAAA,CAAA1kB,CAAA,GAAA2kB,EAAA,CAAA1f,QAAA,GACAzK,CAAA,CAAAwF,CAAA,MAAAH,CAAA;UAEA,IAAA7D,CAAA,OAAAgE,CAAA;YACAA,CAAA,GAAAhE,CAAA,QACA6D,CAAA;YACA;UAAA;QAAA;QAGA6kB,EAAA,CAAA7kB,CAAA,GAAA8kB,EAAA,CAAAjgB,MAAA,GACA5E,CAAA,CAAAD,CAAA,IAAApF,CAAA,GAAAuF,CAAA;QAEA,SAAAkB,CAAA,MAAyBA,CAAA,GAAA3G,CAAA,EAAa2G,CAAA;UACtC,IAAAC,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAa,CAAA,EACAC,CAAA;UACAd,CAAA,GAAAvH,CAAA,CAAA8G,CAAA,GACAsB,CAAA,GAAApI,CAAA,CAAA8G,CAAA,QAEAC,CAAA,OAAA/E,IAAA,CAAA+a,KAAA,MAAAxa,CAAA,IAAAgF,CAAA,WACA,MACAR,CAAA,OAGAnF,CAAA,QAFAoF,CAAA,OAAAhF,IAAA,CAAA+a,KAAA,MAAAxa,CAAA,IAAA6F,CAAA,aAGApB,CAAA,GAAApF,CAAA,OAEAhC,CAAA,CAAAkH,CAAA,KAAA1G,CAAA,CAAA2G,CAAA,IAAA3G,CAAA,CAAA4G,CAAA,QACA3H,CAAA,CAAAyH,CAAA,IAAA1G,CAAA,CAAA4G,CAAA;UACA,IAAAsB,CAAA,GAAAnH,CAAA,GAAAiH,CAAA;UAKArI,CAAA,CAAA+G,CAAA,KAAAwB,CAAA,GAAA5C,CAAA,CAAArG,CAAA,CAAAyH,CAAA,OACApB,CAAA,CAAArG,CAAA,CAAAyH,CAAA,SAAApB,CAAA,CAAArG,CAAA,CAAAyH,CAAA,KACA/G,CAAA,CAAA+G,CAAA,QACA/G,CAAA,CAAA+G,CAAA,QAEA,IAAA/G,CAAA,CAAA+G,CAAA,MACA/G,CAAA,CAAA+G,CAAA,QAKAuB,CAAA,GAAAnD,CAAA,CAAA7E,CAAA,GAAAL,CAAA,CAAA8G,CAAA,IAAAvE,CAAA,GACA8F,CAAA,GAAArG,IAAA,CAAAyX,GAAA,CAAApR,CAAA,gBAEAjH,CAAA,CAAA0F,CAAA,IAAA9E,IAAA,CAAAwd,GAAA,KACA,YAAAxd,IAAA,CAAAkkB,GAAA,CAAAlkB,IAAA,CAAAmkB,EAAA,GAAA9d,CAAA;QAAA;QAKA,SAAAE,CAAA,GADA3C,CAAA,MACuB2C,CAAA,GAAArI,CAAA,EAAQqI,CAAA;UAC/B,IACAU,CAAA;YAAAC,CAAA;YADAS,CAAA,GAAAvK,CAAA,CAAAmJ,CAAA;UAGAU,CAAA,GAAA/D,CAAA,CAAA7E,CAAA,GAAAuF,CAAA,GACAsD,CAAA,GAAAhE,CAAA,CAAA7E,CAAA,IAAAuF,CAAA,GAAA+D,CAAA,QACA9J,CAAA,CAAA0I,CAAA,UAAAU,CAAA,GAAAC,CAAA,GAEAD,CAAA,GAAA/D,CAAA,CAAA7E,CAAA,IAAAuF,CAAA,SACAsD,CAAA,GAAAhE,CAAA,CAAA7E,CAAA,IAAAuF,CAAA,GAAA+D,CAAA,SACA7J,CAAA,CAAAyI,CAAA,IAAAW,CAAA,GAAAD,CAAA,EACArD,CAAA,IAAA+D,CAAA;QAAA;QAGA,OAAAzJ,CAAA;MAAA;MAGA,SAAAmF,EAAAjG,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA;QACA,IAMArB,CAAA;UAtJAM,CAAA;UACAuB,CAAA;UAAA5B,CAAA;UAAAuC,CAAA;UAAApC,CAAA;UA+IAsF,CAAA,GAAA2kB,EAAA,EAAAG,EAAA,CAAAjgB,MAAA,EAAAigB,EAAA,CAAAjgB,MAAA;UAOA5E,CAAA;QAWA,IAAAtE,CAAA,EACA,SAAAD,CAAA,MAA2BA,CAAA,GAAA9B,CAAA,EAAW8B,CAAA,IACtC,KAAApB,CAAA,MAA2BA,CAAA,GAAAV,CAAA,EAAWU,CAAA;UACtC,IAAAK,CAAA,IArKAC,CAAA,GAqKAT,CAAA,CAAAuB,CAAA,IAAAvB,CAAA,CAAAG,CAAA,GApKAI,CAAA,GAAAoC,CAAA,GAAAvC,CAAA,GAAA4B,CAAA,WACAA,CAAA,GAAAvB,CAAA,EAQAL,CAAA,GAFA,OAJA4B,CAAA,IADA,KAAAA,CAAA,GACA,IAEA,QAEAA,CAAA,UAEA,MADAzB,CAAA,GAAAyB,CAAA,SACAzB,CAAA,OAAAA,CAAA,IAEA,KAEAoC,CAAA,sBADAX,CAAA,YACA,OACAI,IAAA,CAAA0qB,IAAA,KAAA9qB,CAAA,GAAAA,CAAA,OAEA,KACA,KAEAA,CAAA,GAAAI,IAAA,CAAAwqB,GAAA,EAAAxsB,CAAA,GAAAuC,CAAA,IAAAwE,CAAA,GAYAnF,CAAA,iBAqIA/B,CAAA,CAAAE,CAAA;UACA0F,CAAA,CAAAtE,CAAA,EAAApB,CAAA,IAAAK,CAAA,GAAAN,CAAA,CAAAqB,CAAA;QAAA,OAIA,KAAApB,CAAA,MAAuBA,CAAA,GAAAV,CAAA,EAAWU,CAAA,IAClC;UAAA,IAAA6F,CAAA,QAAA5D,IAAA,CAAAyX,GAAA,MAAA7Z,CAAA,CAAAG,CAAA;YACAG,CAAA,GAAAkI,CAAA,CAAAxC,CAAA;UACA,KAAAzE,CAAA,MAA+BA,CAAA,GAAA9B,CAAA,EAAW8B,CAAA,IAC1Cf,CAAA,GAAAF,CAAA,GACAqH,CAAA,CAAA3H,CAAA,CAAAuB,CAAA,IAAAvB,CAAA,CAAAG,CAAA,GAAA6F,CAAA,IACA/F,CAAA,CAAAE,CAAA,GACA0F,CAAA,CAAAtE,CAAA,EAAApB,CAAA,IAAAK,CAAA,GAAAN,CAAA,CAAAqB,CAAA;QAAA;QAIA,KAAAA,CAAA,MAAuBA,CAAA,GAAA9B,CAAA,EAAW8B,CAAA;UAClC,KAAApB,CAAA,MAAuBA,CAAA,GAAAV,CAAA,MACvB,IAAAoG,CAAA,CAAAtE,CAAA,EAAApB,CAAA,IADkCA,CAAA;UAMlC,KAFAX,CAAA,CAAA+B,CAAA,OAAApB,CAAA,EAEAA,CAAA,GAAAV,CAAA,MAA+B,IAAAU,CAAA,MAC/B,IAAA0F,CAAA,CAAAtE,CAAA,EAAApB,CAAA,IADsCA,CAAA;UAItCX,CAAA,CAAA+B,CAAA,OAAApB,CAAA,EACA2F,CAAA,IAAAtG,CAAA,CAAA+B,CAAA,OAAA/B,CAAA,CAAA+B,CAAA;QAAA;QAGA,IAAA0E,CAAA,GAAAskB,EAAA,CAAAzkB,CAAA;UACAoB,CAAA;QACA,KAAA3F,CAAA,MAAuBA,CAAA,GAAA9B,CAAA,EAAW8B,CAAA,IAClC,KAAApB,CAAA,GAAAX,CAAA,CAAA+B,CAAA,MAAiCpB,CAAA,IAAAX,CAAA,CAAA+B,CAAA,MAAkBpB,CAAA,IACnD8F,CAAA,CAAAiB,CAAA,MAAArB,CAAA,CAAAtE,CAAA,EAAApB,CAAA;QAEA,OAAA8F,CAAA;MAAA;MAGA,SAAAN,EAAAnG,CAAA;QAGA,IAAAC,CAAA,GAAA6F,CAAA,CAAA9F,CAAA;QAGA,OAFAC,CAAA,GAAA2C,IAAA,CAAAyX,GAAA,CAAApa,CAAA,gBAEA2C,IAAA,CAAAwd,GAAA,KACA,YAAAxd,IAAA,CAAAkkB,GAAA,CAAAlkB,IAAA,CAAAmkB,EAAA,GAAA9mB,CAAA;MAAA;MA0SA,SAAAQ,EAAAT,CAAA,EAAAC,CAAA;QAuCA,OAVAD,CAAA,WACAA,CAAA,UAGAA,CAAA,SACAA,CAAA,GAAA4C,IAAA,CAAA6F,GAAA,KAAAzI,CAAA,GACA,OAAA4C,IAAA,CAAAwd,GAAA,CAAApgB,CAAA,eACA4C,IAAA,CAAAwqB,GAAA,OAAAxqB,IAAA,CAAAwd,GAAA,CAAApgB,CAAA,kBACA4C,IAAA,CAAAwqB,GAAA,QAAAxqB,IAAA,CAAAwd,GAAA,CAAApgB,CAAA,cACA,mBAAAC,CAAA,IAAA2C,IAAA,CAAAwd,GAAA,CAAApgB,CAAA;MAAA;MAvyBA,KAAA8H,iBAAA,aAAA9H,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA,EAAArB,CAAA,EAAAM,CAAA,EAAAuB,CAAA,EAAA5B,CAAA;QACA,IAtlBAuC,CAAA;UAAApC,CAAA;UAAAsF,CAAA;UAAAC,CAAA;UACAvE,CAAA;UAqlBAf,CAAA,GAAAhB,CAAA,CAAAuG,cAAA;UAKAC,CAAA,GAAAukB,EAAA,CAAAI,EAAA,CAAA1f,QAAA;UACA3K,CAAA,GAAAkqB,EAAA,KAAAG,EAAA,CAAAzf,UAAA;UACAjF,CAAA,GAAAukB,EAAA,KAAAG,EAAA,CAAAhkB,OAAA;UACAO,CAAA,GAAAsjB,EAAA,QAAAG,EAAA,CAAAxf,SAAA;UACAhE,CAAA,GAAAqjB,EAAA,KAAAG,EAAA,CAAAjgB,MAAA;UAAAtD,CAAA,GAAAojB,EAAA,KAAAG,EAAA,CAAAjgB,MAAA;UACA/C,CAAA,GAAA6iB,EAAA;UAIAhiB,CAAA,8CACA;UACAC,CAAA,GAAAgiB,EAAA;UAKA/hB,CAAA,GAAAlJ,CAAA,CAAAgI,IAAA,IAAAC,QAAA,CAAAC,YAAA,OACAlH,CAAA,CAAA4F,YAAA;QAAA,CA1lBA,UAAA5G,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAsB,CAAA,EAAArB,CAAA,EAAAM,CAAA,EAAAuB,CAAA,EAAA5B,CAAA;UAQA,KAPA,IAAAuC,CAAA,GAAA6nB,EAAA,YACAjqB,CAAA,GAAAf,CAAA,CAAAuG,cAAA,EACAF,CAAA,GAAAtF,CAAA,CAAA6F,YAAA,EAEAN,CAAA,GAAAtG,CAAA,CAAAgI,IAAA,IAAAC,QAAA,CAAAC,YAAA,OAAA7B,CAAA,EAGAtE,CAAA,MAAyBA,CAAA,GAAAsE,CAAA,EAAiBtE,CAAA;YAE1CwrB,MAAA,GAAAttB,CAAA,CAAA8B,CAAA;YACA,IAAAf,CAAA,GAAAR,CAAA,eAAA+qB,EAAA;YACAL,EAAA,CAAA/lB,CAAA,CAAA7C,MAAA,KAAAipB,EAAA;YACA,SAAA/kB,CAAA,MAA2BA,CAAA,QAASA,CAAA;cACpC,IAAA1F,CAAA,EAAA2F,CAAA;cACA3F,CAAA,GAAAysB,MAAA,CAAAvsB,CAAA,GAAAwF,CAAA;cAEA,SAAAkB,CAAA,GADAjB,CAAA,MAC+BiB,CAAA,IAAA6jB,EAAA,eAA8B7jB,CAAA,OAC7D5G,CAAA,IAAAqE,CAAA,CAAAuC,CAAA,KACA6lB,MAAA,CAAAvsB,CAAA,GAAAwF,CAAA,GAAAkB,CAAA,IAAA6lB,MAAA,CAAAvsB,CAAA,GAAAwF,CAAA,GACA+kB,EAAA,GAAA7jB,CAAA,IACAjB,CAAA,IAAAtB,CAAA,CAAAuC,CAAA,SACA6lB,MAAA,CAAAvsB,CAAA,GAAAwF,CAAA,GAAAkB,CAAA,QAAA6lB,MAAA,CAAAvsB,CAAA,GACAwF,CAAA,GAAA+kB,EAAA,GAAA7jB,CAAA;cAEAvE,CAAA,CAAApB,CAAA,EAAAyE,CAAA,IAAA1F,CAAA,GAAA2F,CAAA;YAAA;YAEA/F,CAAA,CAAAD,CAAA,EAAAsB,CAAA,EAAAwQ,EAAA,CAAAqE,MAAA,CAAA7V,CAAA,CAAAwR,EAAA,CAAAxQ,CAAA,IACArB,CAAA,CAAAD,CAAA,EAAAsB,CAAA,EAAAuQ,GAAA,CAAAsE,MAAA,CAAA7V,CAAA,CAAAuR,GAAA,CAAAvQ,CAAA,IACA,IAAAuE,CAAA,KAGAtE,CAAA,CAAAvB,CAAA,EAAAsB,CAAA,EAAAwQ,EAAA,CAAAqE,MAAA,CAAA7V,CAAA,CAAAwR,EAAA,CAAAxQ,CAAA,QACAC,CAAA,CAAAvB,CAAA,EAAAsB,CAAA,EAAAuQ,GAAA,CAAAsE,MAAA,CAAA7V,CAAA,CAAAuR,GAAA,CAAAvQ,CAAA;UAAA;UAGA,KAAAA,CAAA,MAAyBA,CAAA,GAAAuE,CAAA,EAAiBvE,CAAA;YAC1C,IAAA4F,CAAA,GAAAojB,EAAA;cACAnjB,CAAA,GAAAmjB,EAAA;cACA5iB,CAAA;cACAa,CAAA,GAAA7F,CAAA,KAAApB,CAAA;cACAkH,CAAA;cACAC,CAAA,QAAAnH,CAAA,GAAAhB,CAAA,CAAAgJ,KAAA,CAAAue,YAAA,GACAvnB,CAAA,CAAAgJ,KAAA,CAAAse,UAAA;cACAlf,CAAA;YAEA,SAAApH,CAAA,EACA,KAAAyE,CAAA,MAAAkB,CAAA,QAAwC,IAAAA,CAAA,IAAOlB,CAAA,IAAAkB,CAAA;cAC/C,IAAAmC,CAAA,GAAA1G,CAAA,IAAAqD,CAAA;gBACAsD,CAAA,GAAA3G,CAAA,IAAAqD,CAAA;cACArD,CAAA,IAAAqD,CAAA,IAAAqD,CAAA,GAAAC,CAAA,EACA3G,CAAA,IAAAqD,CAAA,IAAAqD,CAAA,GAAAC,CAAA;YAAA;YAOA,KAAAtD,CAAA,MAA2BA,CAAA,MAAOA,CAAA,IAClCoB,CAAA,CAAApB,CAAA,IAAAzF,CAAA,CAAAgJ,KAAA,CAAA0iB,gBAAA,CAAA1qB,CAAA,EAAAyE,CAAA,OACA0kB,EAAA,KAAAnqB,CAAA,CAAAgJ,KAAA,CAAA0iB,gBAAA,CAAA1qB,CAAA,EAAAyE,CAAA,QACAmB,CAAA,CAAAnB,CAAA,IAAAoB,CAAA,CAAApB,CAAA,IACAzF,CAAA,CAAAgJ,KAAA,CAAA0iB,gBAAA,CAAA1qB,CAAA,EAAAyE,CAAA,OACA2B,CAAA,OAAAP,CAAA,CAAApB,CAAA;YAGA,KAAAA,CAAA,MAA2BA,CAAA,MAAOA,CAAA;cAGlC,KAFA,IAAA+D,CAAA,GAAAtB,CAAA,OACAzD,CAAA,MACsByD,CAAA,GAAAsB,CAAA,EAAatB,CAAA,IACnCzD,CAAA,GAAA5C,IAAA,CAAAmc,GAAA,CAAA/V,CAAA,CAAAC,CAAA,OACAzD,CAAA,GAAA5C,IAAA,CAAAmc,GAAA,CAAA/V,CAAA,CAAAC,CAAA;cAEAlI,CAAA,CAAAgJ,KAAA,CAAA0iB,gBAAA,CAAA1qB,CAAA,EAAAyE,CAAA,IAAAoB,CAAA,CAAApB,CAAA,QAAAhB,CAAA,EACA2C,CAAA,KAAA3B,CAAA,SAAAhB,CAAA,EACAA,CAAA,GAAAoC,CAAA,CAAApB,CAAA,aACA0kB,EAAA,KAAAtjB,CAAA,CAAApB,CAAA,YACAhB,CAAA,IAAAoC,CAAA,CAAApB,CAAA,aAGAhB,CAAA,GAFiBoC,CAAA,CAAApB,CAAA,iBAAAhB,CAAA,IACjB0lB,EAAA,KAAA1lB,CAAA,GACAoC,CAAA,CAAApB,CAAA,kBAAAhB,CAAA,KAEA,GAEAmC,CAAA,CAAAnB,CAAA,QAAAhB,CAAA;YAAA;YAGA,KAAAgB,CAAA,MAA2BA,CAAA,QAAOA,CAAA;cAClC,IAAAf,CAAA,GAAAmC,CAAA,KAAApB,CAAA,QACAoB,CAAA,KAAApB,CAAA,QAAAoB,CAAA,KAAApB,CAAA;gBACAb,CAAA;cACA,IAAAiC,CAAA,KAAApB,CAAA,QAAAf,CAAA,KACAE,CAAA,QACA,IAAAiC,CAAA,KAAApB,CAAA,QAAAf,CAAA,KACAE,CAAA,UAGA1E,CAAA,CAAAc,CAAA,EAAAyE,CAAA,IAAAb,CAAA;YAAA;YAGA,IAAA3F,CAAA,CAAAoJ,QAAA;cACA,IAAAvD,CAAA,GAAA8B,CAAA;cACA,KAAAnB,CAAA,MAA+BA,CAAA,OAAQA,CAAA,IACvCX,CAAA,GAAA8B,CAAA,CAAAnB,CAAA,MACAX,CAAA,GAAA8B,CAAA,CAAAnB,CAAA;cAGAzF,CAAA,CAAAsI,KAAA,CAAAM,GAAA,CAAAlJ,CAAA,EAAAsB,CAAA,IAAAhB,CAAA,CAAAsI,KAAA,CAAAqjB,QAAA,CAAA3qB,CAAA,GACAhB,CAAA,CAAAsI,KAAA,CAAAqjB,QAAA,CAAA3qB,CAAA,IAAA8D,CAAA;YAAA;YAIA,KAAAW,CAAA,MAA2BA,CAAA,OAAQA,CAAA,IACnC,KAAAhE,CAAA,CAAAT,CAAA,EAAAyE,CAAA,SACAmB,CAAA,CAAAnB,CAAA,IAAA0C,CAAA,KACA1G,CAAA,CAAAT,CAAA,EAAAyE,CAAA,QAAAA,CAAA;YAiBA,KAAAA,CAAA,MAA2BA,CAAA,MAAOA,CAAA;cAClC,IAAAV,CAAA,GAAAqC,CAAA,CAAA3B,CAAA;gBACAR,CAAA,GAAAmC,CAAA,CAAA3B,CAAA;cACA5D,IAAA,CAAA6F,GAAA,CAAA3C,CAAA,EAAAE,CAAA,IACA,OACAF,CAAA,SAAAE,CAAA,IAAAA,CAAA,SAAAF,CAAA,KACA,KAAAU,CAAA,IAAAhE,CAAA,CAAAT,CAAA,QAAAS,CAAA,CAAAT,CAAA,EAAAyE,CAAA,MACAhE,CAAA,CAAAT,CAAA,WAEAS,CAAA,CAAAT,CAAA,EAAAyE,CAAA;YAAA;YAKAhE,CAAA,CAAAT,CAAA,QAAAhB,CAAA,CAAAgJ,KAAA,CAAA4iB,WAAA,CAAA5qB,CAAA,MACAS,CAAA,CAAAT,CAAA,WAGA,KAAAhB,CAAA,CAAAgJ,KAAA,CAAA4iB,WAAA,CAAA5qB,CAAA,KACAS,CAAA,CAAAT,CAAA,OAAAS,CAAA,CAAAT,CAAA,OACAS,CAAA,CAAAT,CAAA,OAAAS,CAAA,CAAAT,CAAA,eACAoH,CAAA,SAEA3G,CAAA,CAAAT,CAAA,aAAAS,CAAA,CAAAT,CAAA,SACAS,CAAA,CAAAT,CAAA,WAEA,KAAAS,CAAA,CAAAT,CAAA,aAAAS,CAAA,CAAAT,CAAA,SACAS,CAAA,CAAAT,CAAA,WAEA,KAAAS,CAAA,CAAAT,CAAA,aAAAS,CAAA,CAAAT,CAAA,SACAS,CAAA,CAAAT,CAAA,YAGAA,CAAA,OACAnB,CAAA,CAAAmB,CAAA,IAAAoH,CAAA,GAEA,KAAAA,CAAA,KACAvI,CAAA,MAAAA,CAAA,UAQAD,CAAA,CAAAoB,CAAA,IAAAhB,CAAA,CAAAyR,QAAA,CAAAzQ,CAAA;UAAA;QAAA,CA2aA,CAAA/B,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA,EACAsB,CAAA,EAAAQ,CAAA,EAAA2F,CAAA,EAAAa,CAAA,EACAC,CAAA,GAzIA,UAAAjJ,CAAA,EAAAC,CAAA;UACA,IAAAO,CAAA,GAAAR,CAAA,CAAAuG,cAAA;UAEAvG,CAAA,CAAAunB,YAAA,IAAAsD,EAAA,CAAA7nB,mBAAA,IAIA,KAAA/C,CAAA,YAAAA,CAAA,QACAA,CAAA,MAAAA,CAAA;UAEA,SAAAQ,CAAA,MAAyBA,CAAA,GAAAD,CAAA,CAAAoG,YAAA,EAAwBnG,CAAA,IAEjDT,CAAA,CAAAunB,YAAA,IAAAsD,EAAA,CAAA5nB,qBAAA,KACAhD,CAAA,CAAAQ,CAAA,QAEAT,CAAA,CAAAunB,YAAA,IAAAsD,EAAA,CAAA3nB,kBAAA,KACAjD,CAAA,CAAAQ,CAAA;QAAA,CA2HA,CAAAT,CAAA,EAAAiJ,CAAA;QAIA,SAAAE,CAAA,MAA6BA,CAAA,GAAAD,CAAA,EAAiBC,CAAA,IAG9ClE,CAAA,CAAAjF,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAA2I,CAAA,EAAA1I,CAAA,EACA+F,CAAA,EAFAC,CAAA,EADAqD,CAAA,OAAAX,CAAA,GAvnBApI,CAAA,GA4nBAN,CAAA,EA5nBA4F,CAAA,GA4nBA8C,CAAA,EA5nBA7C,CAAA,GA6nBAE,CAAA,EA5nBAzE,CAAA,WAAAA,CAAA,IADAoB,CAAA,GA4nBAnD,CAAA,EA3nBAuG,cAAA,EACA,KAAApD,CAAA,CAAAslB,gBAAA,IAAApiB,CAAA,SAEAtE,CAAA,CAAAyG,WAAA,CAAAzH,CAAA,EAAAsF,CAAA,IAAAtE,CAAA,CAAA0Q,gBAAA,CAAApM,CAAA,GACAtE,CAAA,CAAA0Q,gBAAA,CAAApM,CAAA,IAAArB,CAAA,CAAAsB,CAAA,EAAAvE,CAAA,IA0nBA,KAAAkH,CAAA,CAAAa,CAAA,IACAvE,CAAA,CAAAvE,CAAA,EAAAwF,CAAA,EAAAmB,CAAA,CAAAwB,CAAA,GAAAvB,CAAA,CAAAuB,CAAA,GACAA,CAAA,IAEA9D,CAAA,CAAArE,CAAA,EAAAmI,CAAA;QAYA,KATAF,CAAA,MAAAA,CAAA,YAEAjJ,CAAA,CAAAgI,IAAA,IAAAC,QAAA,CAAAC,YAAA,IACA2c,CAAA,CAAAld,CAAA,EAAAC,CAAA,EAAA5G,CAAA,CAAAuS,QAAA,EACAvS,CAAA,CAAAsH,GAAA,CAAAyjB,IAAA,EAAA/rB,CAAA,CAAAqgB,QAAA,GAAArf,CAAA,CAAAsH,GAAA,CAAAK,MAAA,EACA3I,CAAA,CAAAooB,KAAA,EAAApnB,CAAA,CAAAgS,OAAA,GAIA7J,CAAA,MAA6BA,CAAA,GAAAD,CAAA,EAAiBC,CAAA,IAE9C,KAAAF,CAAA,CADAa,CAAA,OAAAX,CAAA,KAEA8iB,EAAA,CAAAjrB,CAAA,EAAA2G,CAAA,CAAAwB,CAAA,GAAAvB,CAAA,CAAAuB,CAAA,GAAAA,CAAA;QAOA,SAAAU,CAAA,MAAgCA,CAAA,MAAYA,CAAA;UAC5C,KAAAV,CAAA,MAAiCA,CAAA,GAAAD,CAAA,IAAiBC,CAAA,EAGlD,KAAAF,CAAA,CAFAa,CAAA,OAAAX,CAAA,IAGA/D,CAAA,CAAApE,CAAA,EAAAmI,CAAA,EAAAU,CAAA,KAIA3E,CAAA,CAAAlF,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAA2I,CAAA,EAAAU,CAAA,EACA/I,CAAA,EAFA4G,CAAA,EAEAoC,CAAA,GACAxE,CAAA,CAAAtF,CAAA,EAAAc,CAAA,EAAA6G,CAAA,CAAAwB,CAAA,GACAvB,CAAA,CAAAuB,CAAA,GAAAA,CAAA,EAAAU,CAAA;UAaA,KAVAZ,CAAA,MAAAA,CAAA,YAEAjJ,CAAA,CAAAgI,IAAA,IAAAC,QAAA,CAAAC,YAAA,IACA2c,CAAA,CAAAld,CAAA,EAAAC,CAAA,EAAA5G,CAAA,CAAAwS,QAAA,EACAxS,CAAA,CAAAsH,GAAA,CAAAwjB,IAAA,EAAA9rB,CAAA,CAAAqgB,QAAA,GAAArf,CAAA,CAAAsH,GAAA,CAAAK,MAAA,EACA3I,CAAA,CAAAooB,KAAA,EAAApnB,CAAA,CAAAiS,OAAA,GAKA9J,CAAA,MAAiCA,CAAA,GAAAD,CAAA,IAAiBC,CAAA,EAElD,KAAAF,CAAA,CADAa,CAAA,OAAAX,CAAA,KAEA6iB,EAAA,CAAAhrB,CAAA,EAAA2G,CAAA,CAAAwB,CAAA,GAAAvB,CAAA,CAAAuB,CAAA,GACAA,CAAA,EAAAU,CAAA;QAAA;QAMA,KAAAV,CAAA,MAA6BA,CAAA,GAAAD,CAAA,EAAiBC,CAAA;UAC9C,IAAAW,CAAA;UAEA,SAAAb,CAAA,CAFAa,CAAA,OAAAX,CAAA,GAKA,SAAAoB,CAAA,MAAgCA,CAAA,GAAA4gB,EAAA,CAAA7f,OAAA,EAAsBf,CAAA;YACtD,IAAA/E,CAAA,GAAAulB,EAAA;YACA,KAAAlhB,CAAA,MAAwCA,CAAA,MAAYA,CAAA;cACpD,IAAApE,CAAA,GAAAzE,CAAA,CAAAsR,GAAA,CAAAnJ,CAAA,EAAAnH,CAAA,CAAAuI,CAAA,EAAAV,CAAA;cAGA,IAFApE,CAAA,IAv8DA,IAy8DA,KAAAuD,CAAA,CAAAG,CAAA,EAAAU,CAAA,KACA,KAAAb,CAAA,CAAAG,CAAA,EAAAU,CAAA;gBACA,IAAAlE,CAAA,QAAAkE,CAAA,GAAAA,CAAA;kBACAhE,CAAA,GAAAsmB,EAAA,CAAAnrB,CAAA,CAAAsR,GAAA,CAAAnJ,CAAA,EAAAnH,CAAA,CAAAuI,CAAA,EAAA5E,CAAA,GAAAF,CAAA,EACA;gBACAA,CAAA,GAAA7C,IAAA,CAAAyX,GAAA,CAAA5U,CAAA,EAAAI,CAAA;cAAA,OACyB,KAAAmD,CAAA,CAAAG,CAAA,EAAAU,CAAA,KACzBlE,CAAA,QAAAkE,CAAA,GAAAA,CAAA,UACAhE,CAAA,GAAAsmB,EAAA,CAAAnrB,CAAA,CAAAsR,GAAA,CAAAnJ,CAAA,EAAAnH,CAAA,CAAAuI,CAAA,EAAA5E,CAAA,GAAAF,CAAA,EA/GA,KAgHA6lB,EAAA,GACA7lB,CAAA,GAAA7C,IAAA,CAAAyX,GAAA,CAAA5U,CAAA,EAAAI,CAAA,MACyB,KAAAgE,CAAA,SAAAb,CAAA,CAAAG,CAAA,EAAAU,CAAA,SACzB,KAAAA,CAAA,SAAA7I,CAAA,CAAA+I,KAAA,CAAA4iB,WAAA,CAAAxjB,CAAA,OACAxD,CAAA,QAAAkE,CAAA,GAAAA,CAAA,UACAhE,CAAA,GAAAsmB,EAAA,CAAAnrB,CAAA,CAAAsR,GAAA,CAAAnJ,CAAA,EAAAnH,CAAA,CAAAuI,CAAA,EAAA5E,CAAA,GAAAF,CAAA,EArHA,KAsHA6lB,EAAA,GACA7lB,CAAA,GAAA7C,IAAA,CAAAyX,GAAA,CAAA5U,CAAA,EAAAI,CAAA;cAIAJ,CAAA,IAAA0C,CAAA,CAAAgB,CAAA,EAAAU,CAAA,GAEArE,CAAA,CAAAqE,CAAA,IAAApE,CAAA;YAAA;YAEA,KAAAoE,CAAA,MAAwCA,CAAA,MAAYA,CAAA,IACpD7I,CAAA,CAAAsR,GAAA,CAAAnJ,CAAA,EAAAnH,CAAA,CAAAuI,CAAA,EAAAV,CAAA,IAAArE,CAAA,CAAAqE,CAAA;UAAA;QAAA;QAKA,KAAAV,CAAA,MAAyBA,CAAA,GAAAD,CAAA,EAAiBC,CAAA,IAC1CnI,CAAA,CAAA+I,KAAA,CAAA4iB,WAAA,CAAAxjB,CAAA,IAAAH,CAAA,CAAAG,CAAA;QAWA,KAtPA,UAAAnJ,CAAA,EAAAC,CAAA,EAAAO,CAAA;UAOA,KANA,IAAAC,CAAA,GAAAT,CAAA,CAAAuG,cAAA,EAMA7F,CAAA,MAAyBA,CAAA,GAAAD,CAAA,CAAAmG,YAAA,EAAwBlG,CAAA;YACjD,IAAAsB,CAAA,GAAAmpB,EAAA,CAAA9iB,SAAA;YAGA,KAAApI,CAAA,CAAAS,CAAA,KAEAwqB,EAAA,CAAAzqB,CAAA,CAAAqT,aAAA,CAAApT,CAAA,KAAAyqB,EAAA,CAAAvf,UAAA,GACAnL,CAAA,CAAAqT,aAAA,CAAApT,CAAA,KAAAyqB,EAAA,CAAAnkB,UAAA,KACAhF,CAAA,GAAAmpB,EAAA,CAAAtf,SAAA,MAGA7J,CAAA,GAAAmpB,EAAA,CAAAnkB,UAAA,EACAvG,CAAA,CAAAqT,aAAA,CAAApT,CAAA,KAAAyqB,EAAA,CAAA9iB,SAAA,KACA5H,CAAA,CAAAqT,aAAA,CAAApT,CAAA,IAAAyqB,EAAA,CAAAvf,UAAA,GAEAnL,CAAA,CAAAqT,aAAA,CAAApT,CAAA,KAAAyqB,EAAA,CAAAtf,SAAA,KACApL,CAAA,CAAAqT,aAAA,CAAApT,CAAA,IAAAyqB,EAAA,CAAAnkB,UAAA,IAGAxG,CAAA,CAAAE,CAAA,IAAAD,CAAA,CAAAqT,aAAA,CAAApT,CAAA,GAEAD,CAAA,CAAAqT,aAAA,CAAApT,CAAA,IAAAsB,CAAA;UAAA;QAAA,CAqNA,CAAAhC,CAAA,EAAAiJ,CAAA,EAAArI,CAAA,GAKAuI,CAAA,MAAyBA,CAAA,GAAAD,CAAA,EAAiBC,CAAA;UAC1C,IAAArD,CAAA,EACAE,CAAA,EACAC,CAAA,EACAE,CAAA;UASAA,CAAA,GAPA,IAAAgD,CAAA,IACArD,CAAA,GAAA7E,CAAA,EACA+E,CAAA,OACAC,CAAA,GAAAklB,EAAA,CAAA9iB,SAAA,EACAzH,CAAA,OAAAuqB,EAAA,CAAAnkB,UAAA,IACApG,CAAA,OAAAuqB,EAAA,CAAAnkB,UAAA,KACAf,CAAA,GAAAklB,EAAA,CAAAnkB,UAAA,GACAhF,CAAA,CAAAvB,CAAA,EAAA0I,CAAA,UAEArD,CAAA,GAAAnF,CAAA,EACAqF,CAAA,MACAC,CAAA,GAAArF,CAAA,CAAAuI,CAAA,GACAzI,CAAA,CAAAD,CAAA,EAAA0I,CAAA,IAGAlD,CAAA,IAAAklB,EAAA,CAAAnkB,UAAA,GACAlB,CAAA,CAAAE,CAAA,GAAAmD,CAAA,IAAAijB,EAAA,CAAAjmB,CAAA,EAAAnF,CAAA,CAAAyP,aAAA,IAEA3K,CAAA,CAAAE,CAAA,GAAAmD,CAAA,IAAAkjB,EAAA,CAAAlmB,CAAA,EAAAnF,CAAA,CAAAyP,aAAA,GAGAzQ,CAAA,CAAAoJ,QAAA,KACApI,CAAA,CAAAqI,KAAA,CAAAI,EAAA,CAAAhJ,CAAA,EAAA0I,CAAA,IAAArD,CAAA,CAAAE,CAAA,GAAAmD,CAAA;QAAA;QAGA;MAAA,GAmSA,KAAAqhB,aAAA,aAAAxqB,CAAA;QACA,IACAC,CAAA;UAwMAO,CAAA;UAzMAC,CAAA,GAAAT,CAAA,CAAAuG,cAAA;UAEA7F,CAAA;UACAsB,CAAA;UACArB,CAAA;UAAAM,CAAA;UACAuB,CAAA;UAAA5B,CAAA;UACAuC,CAAA,GAAA4nB,EAAA,CAAAI,EAAA,CAAAjgB,MAAA;UACAnK,CAAA,GAAAgqB,EAAA,CAAAI,EAAA,CAAAjgB,MAAA;UACA7E,CAAA,GAAA0kB,EAAA,CAAAI,EAAA,CAAAjgB,MAAA;UACA5E,CAAA,GAAAtG,CAAA,CAAAwH,cAAA;QAEA,QAAAxH,CAAA,CAAAwtB,aAAA;UACA;UACA;YACA9sB,CAAA;YACA;UACA;YACAA,CAAA,GAAAV,CAAA,CAAA6H,GAAA,IAAA+iB,EAAA,CAAAnnB,QAAA,IAAAzD,CAAA,CAAA6H,GAAA,IAAA+iB,EAAA,CAAAtnB,MAAA;YAEA;UACA;YACA5C,CAAA;YACA;UACA;YACAsB,CAAA,MACArB,CAAA,UACAM,CAAA,WACAuB,CAAA,UACA5B,CAAA;QAAA;QAOA,KAJAH,CAAA,CAAAoT,iBAAA,QACApT,CAAA,CAAAqT,aAAA,MAAArT,CAAA,CAAAqT,aAAA,MAAAqX,EAAA,CAAA9iB,SAAA,EAGApI,CAAA,MAAmBA,CAAA,QAAOA,CAAA;UAC1B,SAAA8B,CAAA,MAA2BA,CAAA,GAAAopB,EAAA,CAAAjgB,MAAA,IAAoBnJ,CAAA,EAC/CtB,CAAA,CAAAsR,IAAA,CAAA9R,CAAA,EAAA8B,CAAA,UACAtB,CAAA,CAAAuR,IAAA,CAAA/R,CAAA,EAAA8B,CAAA,UACAtB,CAAA,CAAAwR,KAAA,CAAAhS,CAAA,EAAA8B,CAAA,IAAAtB,CAAA,CAAAyR,KAAA,CAAAjS,CAAA,EAAA8B,CAAA;UAEA,SAAAf,CAAA,MAA4BA,CAAA,GAAAmqB,EAAA,CAAA9f,OAAA,EAAsBrK,CAAA,IAClDP,CAAA,CAAA8R,EAAA,CAAAtS,CAAA,EAAAW,CAAA,CAAAI,CAAA,UACAP,CAAA,CAAA6R,GAAA,CAAArS,CAAA,EAAAW,CAAA,CAAAI,CAAA;UAEA,KAAAe,CAAA,MAA2BA,CAAA,QAAOA,CAAA;YAClC,KAAAf,CAAA,MAAgCA,CAAA,GAAAmqB,EAAA,CAAA7f,OAAA,EAAsBtK,CAAA,IACtDP,CAAA,CAAA8R,EAAA,CAAAtS,CAAA,EAAA+B,CAAA,CAAAhB,CAAA,EAAAe,CAAA,UACAtB,CAAA,CAAA6R,GAAA,CAAArS,CAAA,EAAA+B,CAAA,CAAAhB,CAAA,EAAAe,CAAA;YAEAtB,CAAA,CAAAsJ,KAAA,CAAA4iB,WAAA,CAAA1sB,CAAA;UAAA;UAEA,KAAA8B,CAAA,MAA2BA,CAAA,MAAOA,CAAA,IAClCtB,CAAA,CAAAsJ,KAAA,CAAA0iB,gBAAA,CAAAxsB,CAAA,EAAA8B,CAAA;QAAA;QAiBA,KAbAtB,CAAA,CAAAgS,gBAAA,MAAAhS,CAAA,CAAAgS,gBAAA,SAOAhS,CAAA,CAAAuS,OAAA,GAAAhN,CAAA,CAAAvF,CAAA,CAAA4S,UAAA,EAAA5S,CAAA,CAAAoS,IAAA,EAAApS,CAAA,CAAAmS,IAAA,EAAAzP,CAAA,EACApC,CAAA,EAAAN,CAAA,CAAAiS,KAAA,EAAAjS,CAAA,CAAAuT,GAAA,CAAA0S,WAAA,EAAApgB,CAAA,EACA6kB,EAAA,CAAAhkB,OAAA,EAAA1G,CAAA,CAAAmR,aAAA,CAAAhR,CAAA,EAAAuqB,EAAA,CAAAhkB,OAAA,GACA,MAAAgkB,EAAA,CAAA9f,OAAA,GACA6f,EAAA,CAAAzqB,CAAA,CAAAuS,OAAA,GAAAmY,EAAA,CAAAjgB,MAAA,GAEAjL,CAAA,MAAmBA,CAAA,GAAAQ,CAAA,CAAAuS,OAAA,EAAiB/S,CAAA;UACpC,IAAAuG,CAAA,GAAA7F,CAAA;UACAwC,CAAA,CAAAlD,CAAA,KAAA+B,CAAA,KACAwE,CAAA,GAAAvF,CAAA,IAAAkC,CAAA,CAAAlD,CAAA,IAAA+B,CAAA,KAtEA,KAsEAA,CAAA,IAAArB,CAAA,IAtEA,KAuEAwC,CAAA,CAAAlD,CAAA,MAvEA,KAuEA+B,CAAA,IAEAqE,CAAA,CAAApG,CAAA,IAAA2C,IAAA,CAAAwd,GAAA,KAAA5Z,CAAA,QACA,IAAA/F,CAAA,CAAA4S,UAAA,CAAApT,CAAA,IACAQ,CAAA,CAAA6S,WAAA,CAAArT,CAAA,QAAAQ,CAAA,CAAA4S,UAAA,CAAApT,CAAA,IAEAQ,CAAA,CAAA6S,WAAA,CAAArT,CAAA;QAAA;QAQA,KALAQ,CAAA,CAAA2R,KAAA,GAAAnM,CAAA,CAAAxF,CAAA,CAAAyS,KAAA,EAAAzS,CAAA,CAAAuS,OAAA,EAAA7P,CAAA,EAAApC,CAAA,EACAsF,CAAA,EAAA3F,CAAA,GAIAT,CAAA,GADA8B,CAAA,MACmB9B,CAAA,GAAAQ,CAAA,CAAAuS,OAAA,EAAiB/S,CAAA;UAIpCyH,CAAA,GAAAod,CAAA,CAAA1hB,SAAA;UACA,SAAAtC,CAAA,MAA2BA,CAAA,GAAAL,CAAA,CAAA4S,UAAA,CAAApT,CAAA,GAAuBa,CAAA,IAAAiB,CAAA;YAClD,IAAA0E,CAAA,GAAAH,CAAA,GAAAvE,CAAA,UAAAopB,EAAA,CAAAhkB,OAAA;YAKAQ,CAAA,QAAAwY,UAAA,OAAA1Z,CAAA,EAAAzG,CAAA,QAEA2H,CAAA,GAAA/E,IAAA,CAAAwd,GAAA,UAAAzY,CAAA,IAEAA,CAAA,IAAAlH,CAAA,CAAA4S,UAAA,CAAApT,CAAA,KACAyH,CAAA,KACAA,CAAA,GAAAC,CAAA;UAAA;UAEAlH,CAAA,CAAA6H,GAAA,CAAAyjB,IAAA,CAAA9rB,CAAA,IAAAyH,CAAA,EAaA,KADAA,CAAA,QAAAvE,CAAA,CAAAlD,CAAA,iBAEAyH,CAAA,SAEAA,CAAA,WACAA,CAAA,SAEAA,CAAA,OACAjH,CAAA,CAAAoR,QAAA,CAAA5R,CAAA,IAAA2C,IAAA,CAAAwd,GAAA,KAAA1Y,CAAA,SAAAjH,CAAA,CAAA4S,UAAA,CAAApT,CAAA;QAAA;QAcA,KARAQ,CAAA,CAAAwS,OAAA,GAAAjN,CAAA,CAAAvF,CAAA,CAAA2S,UAAA,EAAA3S,CAAA,CAAAsS,IAAA,EAAAtS,CAAA,CAAAqS,IAAA,EAAA3P,CAAA,EACApC,CAAA,EAAAN,CAAA,CAAAkS,KAAA,EAAAlS,CAAA,CAAAuT,GAAA,CAAA2S,WAAA,EAAArgB,CAAA,EACA6kB,EAAA,CAAAxf,SAAA,EAAAlL,CAAA,CAAAmR,aAAA,CAAA5P,CAAA,EAAAmpB,EAAA,CAAAxf,SAAA,GACA,KAAAwf,EAAA,CAAA7f,OAAA,GACA4f,EAAA,CAAAzqB,CAAA,CAAAwS,OAAA,GAAAkY,EAAA,CAAAjgB,MAAA,GAIAjL,CAAA,GADA8B,CAAA,MACmB9B,CAAA,GAAAQ,CAAA,CAAAwS,OAAA,EAAiBhT,CAAA;UACpC,IAAAyH,CAAA;UAUA,KATAlB,CAAA,GAAAhE,CAAA,EACAW,CAAA,CAAAlD,CAAA,KAAA+B,CAAA,KACAwE,CAAA,GAAA5F,CAAA,IAAAuC,CAAA,CAAAlD,CAAA,IAAA+B,CAAA,KA9IA,KA8IAA,CAAA,IAAAQ,CAAA,IA9IA,KA+IAW,CAAA,CAAAlD,CAAA,MA/IA,KA+IA+B,CAAA,IAEAqE,CAAA,CAAApG,CAAA,IAAA2C,IAAA,CAAAwd,GAAA,KAAA5Z,CAAA,QAGAkB,CAAA,GAAAod,CAAA,CAAA1hB,SAAA,EACAtC,CAAA,MAA2BA,CAAA,GAAAL,CAAA,CAAA2S,UAAA,CAAAnT,CAAA,GAAuBa,CAAA,IAAAiB,CAAA;YAClD,IACA4F,CAAA;YADAlB,CAAA,GAAAH,CAAA,GAAAvE,CAAA,UAAAopB,EAAA,CAAAxf,SAAA,GAOAhE,CAAA,QAAAwY,UAAA,OAAA1Z,CAAA,EAAAzG,CAAA,QAEA2H,CAAA,GAAA/E,IAAA,CAAAwd,GAAA,UAAAzY,CAAA,IAEAA,CAAA,IAAAlH,CAAA,CAAA2S,UAAA,CAAAnT,CAAA,KACAyH,CAAA,KACAA,CAAA,GAAAC,CAAA;UAAA;UAEAlH,CAAA,CAAA6H,GAAA,CAAAwjB,IAAA,CAAA7rB,CAAA,IAAAyH,CAAA,EAOAA,CAAA,OAAAvE,CAAA,CAAAlD,CAAA,YACA,KAAAkD,CAAA,CAAAlD,CAAA,MACAyH,CAAA,cAAA9E,IAAA,CAAA6qB,GAAA,KAAA/lB,CAAA,IAEAvE,CAAA,CAAAlD,CAAA,WACAyH,CAAA,cAAA9E,IAAA,CAAA6qB,GAAA,KAAA/lB,CAAA,IAEAA,CAAA,WACAA,CAAA,SAEAA,CAAA,OACAjH,CAAA,CAAAqR,QAAA,CAAA7R,CAAA,IAAA2C,IAAA,CAAAwd,GAAA,KAAA1Y,CAAA,SACAjH,CAAA,CAAA2S,UAAA,CAAAnT,CAAA;QAAA;QAGAQ,CAAA,CAAA0R,KAAA,GAAAlM,CAAA,CAAAxF,CAAA,CAAA0S,OAAA,EAAA1S,CAAA,CAAAwS,OAAA,EAAA9P,CAAA,EAAApC,CAAA,EACAsF,CAAA,EAAA3F,CAAA,GApzEAmJ,CAAA,GAAAjH,IAAA,CAAAwd,GAAA,MAAA3a,CAAA,aACAqE,CAAA,GAAAlH,IAAA,CAAAwd,GAAA,MAAAza,CAAA,aACA4E,CAAA,GAAA3H,IAAA,CAAAwd,GAAA,KAAAva,CAAA,QAqzEAqD,CAAA,CAAAwkB,QAAA,CAAAjtB,CAAA,GAGAA,CAAA,CAAA4R,KAAA,GAAAzP,IAAA,CAAAwqB,GAAA,MAAAjkB,CAAA,IA7/EA,MA8/EA7C,CAAA,UAIA9F,CAAA,GA5/EA,KA6/EA,UAAAR,CAAA,CAAAwgB,aAAA,MACAhgB,CAAA,OACA,IAAAoC,IAAA,CAAAmc,GAAA,CAAA/e,CAAA,CAAAooB,KAAA,MACA5nB,CAAA,GAAAR,CAAA,CAAAooB,KAAA,GACApoB,CAAA,CAAAooB,KAAA,GAAA5nB,CAAA;QAMA,SAAAoH,CAAA,MAA2BA,CAAA,GAAAnH,CAAA,CAAAuS,OAAA,EAAiBpL,CAAA,IAC5CnH,CAAA,CAAAyS,KAAA,CAAAtL,CAAA,OAAAnH,CAAA,CAAAuS,OAAA,SACAvS,CAAA,CAAAyS,KAAA,CAAAtL,CAAA,OAAAnH,CAAA,CAAAuS,OAAA;QAOA,IAAA7K,CAAA,SAAA1H,CAAA,CAAAkG,OAAA,GAAAL,CAAA;QAUA,IATA7F,CAAA,CAAA6H,GAAA,CAAA+J,KAAA,GAAAzP,IAAA,CAAAwd,GAAA,YAAAjY,CAAA,GACA1H,CAAA,CAAA6H,GAAA,CAAAK,MAAA,QAEAlI,CAAA,CAAA6H,GAAA,CAAAM,WAAA,MAGAsiB,EAAA,CAAAzqB,CAAA,CAAAoS,IAAA,CAAAsY,EAAA,CAAA9f,OAAA,SAAA5K,CAAA,CAAAuS,OAAA,GACAkY,EAAA,CAAAzqB,CAAA,CAAAsS,IAAA,CAAAoY,EAAA,CAAA7f,OAAA,SAAA7K,CAAA,CAAAwS,OAAA,IAEA,KAAAjT,CAAA,CAAAwoB,OAAA;UAEA,IACAxf,CAAA,GAAAhJ,CAAA,CAAAwH,cAAA,GACA2jB,EAAA,CAAAhkB,OAAA;YACA8B,CAAA;UAEA,KAAAhJ,CAAA,GADAwG,CAAA,MACuBxG,CAAA,GAAAkrB,EAAA,CAAAhkB,OAAA,QAAyBlH,CAAA,EAGhDwG,CAAA,IAAAuC,CAAA,EACAvI,CAAA,CAAA6H,GAAA,CAAAkjB,KAAA,CAAAvrB,CAAA,QAAA2C,IAAA,CAAAwd,GAAA,UAAAD,UAAA,CAAA1Z,CAAA,EAAAzG,CAAA,SACAiJ,CAAA,IAAAxI,CAAA,CAAA6H,GAAA,CAAAkjB,KAAA,CAAAvrB,CAAA;UAGA,KADAgJ,CAAA,OAAAA,CAAA,EACAhJ,CAAA,GAAAkrB,EAAA,CAAAhkB,OAAA,MAAyC,OAAAlH,CAAA,GACzCQ,CAAA,CAAA6H,GAAA,CAAAkjB,KAAA,CAAAvrB,CAAA,KAAAgJ,CAAA;QAAA;QAIA,KAAArB,CAAA,GAAA7F,CAAA,MAA+B6F,CAAA,GAAAnH,CAAA,CAAAwS,OAAA,IAAiBrL,CAAA,EAChD,KAAA3H,CAAA,MAA2BA,CAAA,GAAAQ,CAAA,CAAA2S,UAAA,CAAAxL,CAAA,KAAuB3H,CAAA,IAClD8B,CAAA;QAIA,KADAmpB,EAAA,QAAAnpB,CAAA,GACA6F,CAAA,GAAA7F,CAAA,MAA+B6F,CAAA,GAAAnH,CAAA,CAAAuS,OAAA,IAAiBpL,CAAA,EAChD,KAAA3H,CAAA,MAA2BA,CAAA,GAAAQ,CAAA,CAAA4S,UAAA,CAAAzL,CAAA,KAAuB3H,CAAA,IAClD8B,CAAA;QAMA,KAHAmpB,EAAA,QAAAnpB,CAAA,GAGA9B,CAAA,GADA8B,CAAA,MACmB9B,CAAA,GAAAQ,CAAA,CAAAuS,OAAA,EAAiB/S,CAAA,IACpCwG,CAAA,GAAAH,CAAA,IAAAvE,CAAA,GAAAtB,CAAA,CAAA4S,UAAA,CAAApT,CAAA,cAAAkrB,EAAA,CAAAhkB,OAAA,GACA1G,CAAA,CAAA8S,QAAA,CAAAtT,CAAA,IAAAkG,CAAA,CAAAM,CAAA,GACA1E,CAAA,IAAAtB,CAAA,CAAA4S,UAAA,CAAApT,CAAA;QAEA,OAAcA,CAAA,GAAAkrB,EAAA,CAAAjgB,MAAA,IAAoBjL,CAAA,EAClCQ,CAAA,CAAA8S,QAAA,CAAAtT,CAAA;QAGA,KAAAA,CAAA,GADA8B,CAAA,MACmB9B,CAAA,GAAAQ,CAAA,CAAAwS,OAAA,EAAiBhT,CAAA,IACpCwG,CAAA,GAAAH,CAAA,IAAAvE,CAAA,GAAAtB,CAAA,CAAA2S,UAAA,CAAAnT,CAAA,cAAAkrB,EAAA,CAAAxf,SAAA,GACAlL,CAAA,CAAA+S,QAAA,CAAAvT,CAAA,IAAAkG,CAAA,CAAAM,CAAA,GACA1E,CAAA,IAAAtB,CAAA,CAAA2S,UAAA,CAAAnT,CAAA;QAEA,OAAcA,CAAA,GAAAkrB,EAAA,CAAAjgB,MAAA,IAAoBjL,CAAA,EAClCQ,CAAA,CAAA+S,QAAA,CAAAvT,CAAA;QAEA;MAAA,GAgDA,KAAAkgB,UAAA,aAAAngB,CAAA,EAAAC,CAAA;QACA,IAAAO,CAAA;QACA,QAAAP,CAAA,CAAAuoB,OAAA;UACA;YACAhoB,CAAA,GAAAC,CAAA,CAAAT,CAAA;YACA;UACA;YAEAQ,CAAA,GAAAC,CAAA,CAAAT,CAAA;YACA;UACA;YACAQ,CAAA,GAAAC,CAAA,CAAAT,CAAA;YACA;UACA;YAEAQ,CAAA,GAAAC,CAAA,CAAAT,CAAA;YACA;UACA;YACAQ,CAAA,GAAAC,CAAA,CAAAT,CAAA,EAAAC,CAAA,CAAA4nB,QAAA;YACA;UACA;YACArnB,CAAA,GAAAC,CAAA,CAAAT,CAAA;QAAA;QAGA,OAAAQ,CAAA;MAAA;IAAA;EAAA,aAAAR,CAAA,EAAAC,CAAA,EAAAO,CAAA;IC50FA,IAAAC,CAAA,GAAaD,CAAA,CAAQ;MAKrBsJ,CAAA,IAJArJ,CAAA,CAAAkD,MAAA,EACAlD,CAAA,CAAAmD,OAAA,EACAnD,CAAA,CAAAoD,KAAA,EACApD,CAAA,CAAAqD,UAAA,EACArD,CAAA,CAAAsD,IAAA;MAKArD,CAAA,IAJAD,CAAA,CAAAuD,MAAA,EACAvD,CAAA,CAAAwD,WAAA,EACAxD,CAAA,CAAA4D,QAAA,EACA5D,CAAA,CAAA8D,UAAA,EACA9D,CAAA,CAAAgE,SAAA;MAMAgC,CAAA,IALAhG,CAAA,CAAAiE,WAAA,EACAjE,CAAA,CAAAkE,OAAA,EACAlE,CAAA,CAAAmE,SAAA,EACAnE,CAAA,CAAAsE,MAAA,EAEcvE,CAAA,CAAQ;IAqOtBR,CAAA,CAAAE,OAAA,GAnOA;MAEA,IAAAoG,CAAA,GAAA5F,CAAA,CAAA+F,CAAA,CAAAU,OAAA;QACAnG,CAAA,GAAAN,CAAA,CAAA+F,CAAA,CAAAkF,SAAA;QAEA9B,CAAA,IACA,sCACA,sCACA,uCACA;MAGA,SAAArD,EAAAxG,CAAA,EAAAC,CAAA,EAAAO,CAAA;QACA,IACAC,CAAA;UACAC,CAAA;UACAsB,CAAA;UAHArB,CAAA;UAOAM,CAAA,GAAAhB,CAAA,IAFAO,CAAA;QAGAC,CAAA;QACA;UACA,IAAA+B,CAAA,EAAA5B,CAAA,EACAuC,CAAA,EAAApC,CAAA,EAAAsF,CAAA,EAAAC,CAAA,EAAAvE,CAAA;UAQA,KAPAA,CAAA,GAAAtB,CAAA,OAGA6F,CAAA,IADAD,CAAA,IADAtF,CAAA,GAAAN,CAAA,KACA,KACAM,CAAA,EACAN,CAAA,GAAA4F,CAAA,OAEArE,CAAA,IADAtB,CAAA,GAAAT,CAAA,IACA8B,CAAA,EAGA6F,CAAA,GAAA5H,CAAA,CAAAU,CAAA,QAAAV,CAAA,CAAAU,CAAA,GAAAK,CAAA,GACA4G,CAAA,GAAA3H,CAAA,CAAAU,CAAA,QAAAV,CAAA,CAAAU,CAAA,GAAAK,CAAA,GACAmI,CAAA,GAAAlJ,CAAA,CAAAU,CAAA,GAAA2F,CAAA,IAAArG,CAAA,CAAAU,CAAA,GAAA4F,CAAA,GACA0C,CAAA,GAAAhJ,CAAA,CAAAU,CAAA,GAAA2F,CAAA,IAAArG,CAAA,CAAAU,CAAA,GAAA4F,CAAA,GACAtG,CAAA,CAAAU,CAAA,GAAA2F,CAAA,IAAAsB,CAAA,GAAAqB,CAAA,EACAhJ,CAAA,CAAAU,CAAA,QAAAiH,CAAA,GAAAqB,CAAA,EACAhJ,CAAA,CAAAU,CAAA,GAAA4F,CAAA,IAAAsB,CAAA,GAAAsB,CAAA,EACAlJ,CAAA,CAAAU,CAAA,GAAAK,CAAA,IAAA6G,CAAA,GAAAsB,CAAA,EACAtB,CAAA,GAAA5H,CAAA,CAAAgC,CAAA,QAAAhC,CAAA,CAAAgC,CAAA,GAAAjB,CAAA,GACA4G,CAAA,GAAA3H,CAAA,CAAAgC,CAAA,QAAAhC,CAAA,CAAAgC,CAAA,GAAAjB,CAAA,GACAmI,CAAA,GAAAY,CAAA,CAAApH,KAAA,GAAA1C,CAAA,CAAAgC,CAAA,GAAAsE,CAAA,GACA0C,CAAA,GAAAc,CAAA,CAAApH,KAAA,GAAA1C,CAAA,CAAAgC,CAAA,GAAAqE,CAAA,GACArG,CAAA,CAAAgC,CAAA,GAAAqE,CAAA,IAAAsB,CAAA,GAAAqB,CAAA,EACAhJ,CAAA,CAAAgC,CAAA,QAAA2F,CAAA,GAAAqB,CAAA,EACAhJ,CAAA,CAAAgC,CAAA,GAAAsE,CAAA,IAAAsB,CAAA,GAAAsB,CAAA,EACAlJ,CAAA,CAAAgC,CAAA,GAAAjB,CAAA,IAAA6G,CAAA,GAAAsB,CAAA,EACAlH,CAAA,IAAAvB,CAAA,GACAC,CAAA,IAAAD,CAAA,IACaQ,CAAA;UAGb,KAFAL,CAAA,GAAAiJ,CAAA,CAAAlJ,CAAA,OACA6B,CAAA,GAAAqH,CAAA,CAAAlJ,CAAA,OACAwC,CAAA,MAAuBA,CAAA,GAAApB,CAAA,EAAQoB,CAAA;YAC/B,IAAAnC,CAAA,EAAAwF,CAAA;YACAxF,CAAA,WAAAwB,CAAA,GAAAA,CAAA,EACAgE,CAAA,OAAAhE,CAAA,GAAA5B,CAAA,EACAF,CAAA,GAAAT,CAAA,GAAAkD,CAAA,EACAnB,CAAA,GAAA/B,CAAA,GAAAc,CAAA,GAAAoC,CAAA;YACA;cACA,IAAArC,CAAA,EAAA2F,CAAA,EAAAiB,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAa,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA;cACA1C,CAAA,GAAAD,CAAA,GAAAxG,CAAA,CAAAU,CAAA,GAAAK,CAAA,IAAAC,CAAA,GAAAhB,CAAA,CAAAgC,CAAA,GAAAjB,CAAA,GACAD,CAAA,GAAAE,CAAA,GAAAhB,CAAA,CAAAU,CAAA,GAAAK,CAAA,IAAAyF,CAAA,GAAAxG,CAAA,CAAAgC,CAAA,GAAAjB,CAAA,GACA6G,CAAA,GAAA5H,CAAA,CAAAU,CAAA,QAAAI,CAAA,EACA6G,CAAA,GAAA3H,CAAA,CAAAU,CAAA,QAAAI,CAAA,EACAqH,CAAA,GAAAnI,CAAA,CAAAgC,CAAA,QAAAyE,CAAA,EACAiB,CAAA,GAAA1H,CAAA,CAAAgC,CAAA,QAAAyE,CAAA,EACAA,CAAA,GAAAD,CAAA,GAAAxG,CAAA,CAAAU,CAAA,GAAA4F,CAAA,IAAAtF,CAAA,GAAAhB,CAAA,CAAAgC,CAAA,GAAAsE,CAAA,GACAxF,CAAA,GAAAE,CAAA,GAAAhB,CAAA,CAAAU,CAAA,GAAA4F,CAAA,IAAAE,CAAA,GAAAxG,CAAA,CAAAgC,CAAA,GAAAsE,CAAA,GACA4C,CAAA,GAAAlJ,CAAA,CAAAU,CAAA,GAAA2F,CAAA,IAAAvF,CAAA,EACAkI,CAAA,GAAAhJ,CAAA,CAAAU,CAAA,GAAA2F,CAAA,IAAAvF,CAAA,EACAqI,CAAA,GAAAnJ,CAAA,CAAAgC,CAAA,GAAAqE,CAAA,IAAAI,CAAA,EACAwC,CAAA,GAAAjJ,CAAA,CAAAgC,CAAA,GAAAqE,CAAA,IAAAI,CAAA,EACAA,CAAA,GAAAjE,CAAA,GAAAwG,CAAA,GAAApI,CAAA,GAAAuI,CAAA,EACArI,CAAA,GAAAF,CAAA,GAAAoI,CAAA,GAAAxG,CAAA,GAAA2G,CAAA,EACAnJ,CAAA,CAAAU,CAAA,GAAA2F,CAAA,IAAAsB,CAAA,GAAA7G,CAAA,EACAd,CAAA,CAAAU,CAAA,QAAAiH,CAAA,GAAA7G,CAAA,EACAd,CAAA,CAAAgC,CAAA,GAAAsE,CAAA,IAAA6B,CAAA,GAAA1B,CAAA,EACAzG,CAAA,CAAAgC,CAAA,GAAAjB,CAAA,IAAAoH,CAAA,GAAA1B,CAAA,EACAA,CAAA,GAAA7F,CAAA,GAAAqI,CAAA,GAAAzG,CAAA,GAAA0G,CAAA,EACApI,CAAA,GAAA0B,CAAA,GAAAyG,CAAA,GAAArI,CAAA,GAAAsI,CAAA,EACAlJ,CAAA,CAAAgC,CAAA,GAAAqE,CAAA,IAAAqB,CAAA,GAAA5G,CAAA,EACAd,CAAA,CAAAgC,CAAA,QAAA0F,CAAA,GAAA5G,CAAA,EACAd,CAAA,CAAAU,CAAA,GAAA4F,CAAA,IAAAsB,CAAA,GAAAnB,CAAA,EACAzG,CAAA,CAAAU,CAAA,GAAAK,CAAA,IAAA6G,CAAA,GAAAnB,CAAA,EACAzE,CAAA,IAAAvB,CAAA,EACAC,CAAA,IAAAD,CAAA;YAAA,SACiBC,CAAA,GAAAO,CAAA;YAEjBL,CAAA,IADAI,CAAA,GAAAJ,CAAA,IACAiJ,CAAA,CAAAlJ,CAAA,QAAA6B,CAAA,GAAAqH,CAAA,CAAAlJ,CAAA,OACA6B,CAAA,GAAAxB,CAAA,GAAA6I,CAAA,CAAAlJ,CAAA,QAAA6B,CAAA,GAAAqH,CAAA,CAAAlJ,CAAA;UAAA;UAEAA,CAAA;QAAA,SACSF,CAAA,GAAAD,CAAA;MAAA;MAGT,IAAAM,CAAA,gBACA,2BACA,4BACA,0BACA,4BACA,2BACA,4BACA,2BACA,4BACA,4BACA,4BACA,0BACA,2BACA,4BACA,4BACA,2BACA,2BACA,4BACA,4BACA,2BACA,4BACA;MAEA,KAAA6qB,SAAA,aAAA3rB,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA;QACA,SAAAsB,CAAA,MAAuBA,CAAA,MAAOA,CAAA;UAC9B,IAAArB,CAAA,GAAA8F,CAAA,CAAAkF,SAAA;YACA1K,CAAA,kBAAAe,CAAA;YACAQ,CAAA,GAAAiE,CAAA,CAAAkF,SAAA;UACA;YACA,IAAA/K,CAAA;cAAAuC,CAAA;cAAApC,CAAA;cAAAsF,CAAA;cAAAC,CAAA;cACAvE,CAAA,SAAAjB,CAAA,CAAA0B,CAAA;YAIAW,CAAA,IAFAvC,CAAA,GAAAI,CAAA,CAAAe,CAAA,IAAAtB,CAAA,CAAAD,CAAA,EAAAE,CAAA,GAAAqB,CAAA,GAAAd,CAAA,MACAqF,CAAA,GAAAtF,CAAA,OAAAe,CAAA,IAAAtB,CAAA,CAAAD,CAAA,EAAAE,CAAA,GAAAqB,CAAA,GAAAd,CAAA,UAEAL,CAAA,IAAA0F,CAAA,EAGAD,CAAA,IAFAtF,CAAA,GAAAC,CAAA,CAAAe,CAAA,SAAAtB,CAAA,CAAAD,CAAA,EAAAE,CAAA,GAAAqB,CAAA,GAAAd,CAAA,WACAqF,CAAA,GAAAtF,CAAA,MAAAe,CAAA,IAAAtB,CAAA,CAAAD,CAAA,EAAAE,CAAA,GAAAqB,CAAA,GAAAd,CAAA,UAEAF,CAAA,IAAAuF,CAAA,EAEA3F,CAAA,OACAV,CAAA,CAAA+B,CAAA,EAAArB,CAAA,QAAAC,CAAA,GAAAG,CAAA,EACAd,CAAA,CAAA+B,CAAA,EAAArB,CAAA,QAAAC,CAAA,GAAAG,CAAA,EACAd,CAAA,CAAA+B,CAAA,EAAArB,CAAA,QAAAwC,CAAA,GAAAkD,CAAA,EACApG,CAAA,CAAA+B,CAAA,EAAArB,CAAA,QAAAwC,CAAA,GAAAkD,CAAA,EAIAlD,CAAA,IAFAvC,CAAA,GAAAI,CAAA,CAAAe,CAAA,QAAAtB,CAAA,CAAAD,CAAA,EAAAE,CAAA,GAAAqB,CAAA,GAAAd,CAAA,UACAqF,CAAA,GAAAtF,CAAA,OAAAe,CAAA,IAAAtB,CAAA,CAAAD,CAAA,EAAAE,CAAA,GAAAqB,CAAA,GAAAd,CAAA,UAEAL,CAAA,IAAA0F,CAAA,EAGAD,CAAA,IAFAtF,CAAA,GAAAC,CAAA,CAAAe,CAAA,SAAAtB,CAAA,CAAAD,CAAA,EAAAE,CAAA,GAAAqB,CAAA,GAAAd,CAAA,WACAqF,CAAA,GAAAtF,CAAA,MAAAe,CAAA,IAAAtB,CAAA,CAAAD,CAAA,EAAAE,CAAA,GAAAqB,CAAA,GAAAd,CAAA,UAEAF,CAAA,IAAAuF,CAAA,EAEArG,CAAA,CAAA+B,CAAA,EAAArB,CAAA,GAAA8F,CAAA,CAAAkF,SAAA,YAAA/K,CAAA,GAAAG,CAAA,EACAd,CAAA,CAAA+B,CAAA,EAAArB,CAAA,GAAA8F,CAAA,CAAAkF,SAAA,YAAA/K,CAAA,GAAAG,CAAA,EACAd,CAAA,CAAA+B,CAAA,EAAArB,CAAA,GAAA8F,CAAA,CAAAkF,SAAA,YAAAxI,CAAA,GAAAkD,CAAA,EACApG,CAAA,CAAA+B,CAAA,EAAArB,CAAA,GAAA8F,CAAA,CAAAkF,SAAA,YAAAxI,CAAA,GAAAkD,CAAA;UAAA,SACa,OAAA7D,CAAA;UAEbgE,CAAA,CAAAvG,CAAA,CAAA+B,CAAA,GAAArB,CAAA,EAAA8F,CAAA,CAAAkF,SAAA;QAAA;MAAA,GAMA,KAAA+f,QAAA,aAAA1rB,CAAA,EAAAC,CAAA,EAAAO,CAAA,EAAAC,CAAA,EAAAC,CAAA;QACA,IAAAsB,CAAA,GAAAyE,CAAA,CAAAU,OAAA;UACAxG,CAAA,GAAA8F,CAAA,CAAAU,OAAA;QAEA;UACA,IAAAlG,CAAA;YAAAuB,CAAA;YAAA5B,CAAA;YAAAuC,CAAA;YAAApC,CAAA;YACAsF,CAAA,SAAAvF,CAAA,CAAAkB,CAAA;UAGAQ,CAAA,IAFAvB,CAAA,GAAAqF,CAAA,CAAAD,CAAA,IAAA5F,CAAA,CAAAD,CAAA,EAAAE,CAAA,GAAA2F,CAAA,MACAtF,CAAA,GAAAuF,CAAA,CAAAD,CAAA,UAAA5F,CAAA,CAAAD,CAAA,EAAAE,CAAA,GAAA2F,CAAA,UAEApF,CAAA,IAAAF,CAAA,EAGAoC,CAAA,IAFAvC,CAAA,GAAA0F,CAAA,CAAAD,CAAA,UAAA5F,CAAA,CAAAD,CAAA,EAAAE,CAAA,GAAA2F,CAAA,YACAtF,CAAA,GAAAuF,CAAA,CAAAD,CAAA,UAAA5F,CAAA,CAAAD,CAAA,EAAAE,CAAA,GAAA2F,CAAA,UAEAzF,CAAA,IAAAG,CAAA,EAGAd,CAAA,MADAU,CAAA,UACAM,CAAA,GAAAL,CAAA,EACAX,CAAA,CAAAU,CAAA,QAAAM,CAAA,GAAAL,CAAA,EACAX,CAAA,CAAAU,CAAA,QAAA6B,CAAA,GAAAW,CAAA,EACAlD,CAAA,CAAAU,CAAA,QAAA6B,CAAA,GAAAW,CAAA,EAIAX,CAAA,IAFAvB,CAAA,GAAAqF,CAAA,CAAAD,CAAA,QAAA5F,CAAA,CAAAD,CAAA,EAAAE,CAAA,GAAA2F,CAAA,UACAtF,CAAA,GAAAuF,CAAA,CAAAD,CAAA,UAAA5F,CAAA,CAAAD,CAAA,EAAAE,CAAA,GAAA2F,CAAA,UAEApF,CAAA,IAAAF,CAAA,EAGAoC,CAAA,IAFAvC,CAAA,GAAA0F,CAAA,CAAAD,CAAA,UAAA5F,CAAA,CAAAD,CAAA,EAAAE,CAAA,GAAA2F,CAAA,YACAtF,CAAA,GAAAuF,CAAA,CAAAD,CAAA,UAAA5F,CAAA,CAAAD,CAAA,EAAAE,CAAA,GAAA2F,CAAA,UAEAzF,CAAA,IAAAG,CAAA,EAEAd,CAAA,CAAAU,CAAA,GAAA8F,CAAA,CAAAU,OAAA,YAAAlG,CAAA,GAAAL,CAAA,EACAX,CAAA,CAAAU,CAAA,GAAA8F,CAAA,CAAAU,OAAA,YAAAlG,CAAA,GAAAL,CAAA,EACAX,CAAA,CAAAU,CAAA,GAAA8F,CAAA,CAAAU,OAAA,YAAA3E,CAAA,GAAAW,CAAA,EACAlD,CAAA,CAAAU,CAAA,GAAA8F,CAAA,CAAAU,OAAA,YAAA3E,CAAA,GAAAW,CAAA;QAAA,SACS,OAAAnB,CAAA;QAETwE,CAAA,CAAAvG,CAAA,EAAAU,CAAA,EAAA8F,CAAA,CAAAU,OAAA;MAAA,GAIA,KAAAumB,QAAA,aAAA1tB,CAAA;QAMA,SAAAC,CAAA,MAAuBA,CAAA,GAAAwG,CAAA,CAAAU,OAAA,EAAqBlH,CAAA,IAE5CqG,CAAA,CAAArG,CAAA,eAAA2C,IAAA,CAAAkkB,GAAA,KAAAlkB,IAAA,CAAAmkB,EAAA,IAAA9mB,CAAA,SACAwG,CAAA,CAAAU,OAAA,UAAAvE,IAAA,CAAAkkB,GAAA,KAAAlkB,IAAA,CAAAmkB,EAAA,IAAA9mB,CAAA,SACAwG,CAAA,CAAAU,OAAA;QAEA,KAAAlH,CAAA,MAAuBA,CAAA,GAAAwG,CAAA,CAAAkF,SAAA,MAA2B1L,CAAA,IAClDe,CAAA,CAAAf,CAAA,cAAA2C,IAAA,CAAAkkB,GAAA,KAAAlkB,IAAA,CAAAmkB,EAAA,IACA9mB,CAAA,SAAAwG,CAAA,CAAAkF,SAAA;MAAA;IAAA;EAAA,aAAA3L,CAAA,EAAAC,CAAA,EAAAO,CAAA;ICjNA,IAAAC,CAAA,GAAaD,CAAA,CAAQ;MACrB4kB,CAAA,GAAA3kB,CAAA,CAAAkD,MAAA;MAIA2C,CAAA,IAHA7F,CAAA,CAAAmD,OAAA,EACAnD,CAAA,CAAAoD,KAAA,EACApD,CAAA,CAAAqD,UAAA,EACArD,CAAA,CAAAsD,IAAA;MACAshB,EAAA,GAAA5kB,CAAA,CAAAuD,MAAA;MAIA4oB,EAAA,IAHAnsB,CAAA,CAAAwD,WAAA,EACAxD,CAAA,CAAA4D,QAAA,EACA5D,CAAA,CAAA8D,UAAA,EACA9D,CAAA,CAAAgE,SAAA;MAMAooB,EAAA,IALApsB,CAAA,CAAAiE,WAAA,EACAjE,CAAA,CAAAkE,OAAA,EACAlE,CAAA,CAAAmE,SAAA,EACAnE,CAAA,CAAAsE,MAAA,EAEcvE,CAAA,CAAQ;IA6lCtBR,CAAA,CAAAE,OAAA,GA1lCA;MAEA,IAAAmG,CAAA,KACA,mBACA,oBACA,oBACA,mBACA,oBACA,oBACA,mBACA,oBACA,oBACA,mBACA,mBACA,mBACA,mBACA,oBACA,oBACA,mBACA,uCAEA,oBACA,oBACA,mBACA,kBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,kBACA,mBACA,oBACA,oBACA,oBACA,mBACA,uCAEA,oBACA,oBACA,oBACA,mBACA,mBACA,mBACA,oBACA,mBACA,mBACA,oBACA,mBACA,oBACA,oBACA,qBACA,qBACA,mBACA,uCAEA,oBACA,oBACA,oBACA,mBACA,oBACA,oBACA,mBACA,oBACA,oBACA,mBACA,mBACA,oBACA,oBACA,qBACA,qBACA,mBACA,uCAEA,mBACA,mBACA,mBACA,mBACA,oBACA,oBACA,mBACA,oBACA,oBACA,mBACA,mBACA,oBACA,mBACA,qBACA,oBACA,oBACA,uCAEA,oBACA,mBACA,mBACA,mBACA,oBACA,oBACA,oBACA,oBACA,mBACA,oBACA,mBACA,oBACA,oBACA,qBACA,qBACA,mBACA,uCAEA,oBACA,mBACA,mBACA,mBACA,mBACA,oBACA,oBACA,oBACA,mBACA,oBACA,oBACA,oBACA,mBACA,mBACA,oBACA,kBACA,uCAEA,oBACA,oBACA,mBACA,oBACA,oBACA,mBACA,oBACA,oBACA,oBACA,oBACA,mBACA,qBACA,oBACA,qBACA,qBACA,oBACA,oBACA,oBAEA,oBACA,oBACA,qBACA,oBACA,oBACA,mBACA,mBACA,oBACA,oBACA,mBACA,mBACA,oBACA,qBACA,oBACA,oBACA,oBACA,uCAEA,mBACA,kBACA,qBACA,mBACA,oBACA,oBACA,mBACA,oBACA,mBACA,mBACA,oBACA,qBACA,qBACA,qBACA,kBACA,oBACA,sCAEA,mBACA,mBACA,qBACA,mBACA,mBACA,oBACA,mBACA,oBACA,qBACA,kBACA,mBACA,oBACA,qBACA,qBACA,oBACA,mBACA,sCAEA,mBACA,mBACA,qBACA,mBACA,oBACA,oBACA,mBACA,oBACA,qBACA,oBACA,oBACA,qBACA,qBACA,qBACA,qBACA,mBACA,sCAEA,mBACA,mBACA,mBACA,oBACA,oBACA,oBACA,oBACA,oBACA,qBACA,oBACA,oBACA,qBACA,qBACA,oBACA,oBACA,mBACA,uCAEA,mBACA,kBACA,oBACA,oBACA,oBACA,mBACA,mBACA,oBACA,qBACA,oBACA,oBACA,oBACA,qBACA,qBACA,oBACA,mBACA,wCAEA,kBACA,mBACA,qBACA,mBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,mBACA,mBACA,qBACA,qBACA,qBACA,mBACA,uCAEA,aAAAC,CAAA,CAAA5D,KAAA,iBACA,aAAA4D,CAAA,CAAA5D,KAAA,iBACA,aAAA4D,CAAA,CAAA5D,KAAA,iBACA,aAAA4D,CAAA,CAAA5D,KAAA,iBACA,YAAA4D,CAAA,CAAA5D,KAAA,iBACA,YAAA4D,CAAA,CAAA5D,KAAA,iBACA,YAAA4D,CAAA,CAAA5D,KAAA,iBACA,WAAA4D,CAAA,CAAA5D,KAAA,iBAEA,wCACA,uCACA,yCACA;QAMA6C,CAAA,IACA,CACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,qBACA,sBACA,sBAEA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,uBAEA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBAEA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,sBACA,uBAEA,CACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAEA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,uBAEA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,sBACA,sBAEA,GACA,GACA,GACA,GACA,GACA,IACA,uBACA,uBACA,uBAEA,CACA,mBACA,kBACA,mBAEA,mBACA,mBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBAEA,kBACA,mBACA,mBACA,oBACA,oBACA,mBACA,mBACA,KAEA,oBACA,oBACA,oBACA,oBACA,qBACA,qBACA,qBACA,qBAEA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,oBAEA,CACA,GACA,GACA,GACA,GACA,GACA,GACA,sBACA,sBACA,sBAEA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,qBACA,uBAEA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBAEA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA;QAIAsf,CAAA,GAAAtf,CAAA,CAAAsnB,EAAA,CAAA7lB,UAAA;QACA8d,CAAA,GAAAvf,CAAA,CAAAsnB,EAAA,CAAA7lB,UAAA;QACA+d,CAAA,GAAAxf,CAAA,CAAAsnB,EAAA,CAAA7lB,UAAA;QACAge,CAAA,GAAAzf,CAAA,CAAAsnB,EAAA,CAAA7lB,UAAA;QAaAie,CAAA,IACA,0DACA;MAMA,SAAAC,EAAAllB,CAAA,EAAAC,CAAA,EAAAO,CAAA;QAKA,KAJA,IAuEAC,CAAA,EAAAC,CAAA,EA8BAsB,CAAA,EArGArB,CAAA,OAEAM,CAAA,GAAAhB,CAAA,mBAEAuC,CAAA,QAAmBA,CAAA,MAAOA,CAAA;U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"},"metadata":{},"sourceType":"script","externalDependencies":[]}