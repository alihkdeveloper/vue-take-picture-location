{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_recorder = _resolveComponent(\"recorder\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_recorder, {\n    onRecordingstop: $options.recordingStopped\n  }, null, 8 /* PROPS */, [\"onRecordingstop\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_recorder","onRecordingstop","$options","recordingStopped"],"sources":["D:\\Project\\Nerd_herd\\accounting\\accounting\\src\\components\\RecordVoice.vue"],"sourcesContent":["<template>\r\n\t<div>\r\n\t\t<recorder @recordingstop=\"recordingStopped\" />\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\nimport recorder from \"vue-audio-recorder-and-player\";\r\n\r\nexport default {\r\n\tdata() {\r\n\t\treturn {};\r\n\t},\r\n\tcomponents: {recorder},\r\n\tmethods: {\r\n\t\tasync recordingStopped(blob) {\r\n\t\t\tconst readBlobAsBase64 = (blob) => {\r\n\t\t\t\tvar reader = new FileReader();\r\n\t\t\t\treturn new Promise((resolve) => {\r\n\t\t\t\t\treader.addEventListener(\"load\", function () {\r\n\t\t\t\t\t\tresolve(reader.result);\r\n\t\t\t\t\t});\r\n\t\t\t\t\treader.readAsDataURL(blob);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\r\n\t\t\ttry {\r\n\t\t\t\tthis.audioURL = await readBlobAsBase64(blob);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.warn(e.message);\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log(\"here\", this.audioURL); // Audio blob as base 64 string\r\n\t\t},\r\n\t},\r\n};\r\n</script>\r\n"],"mappings":";;;uBACCA,mBAAA,CAEM,cADLC,YAAA,CAA8CC,mBAAA;IAAnCC,eAAa,EAAEC,QAAA,CAAAC;EAAgB,6C"},"metadata":{},"sourceType":"module","externalDependencies":[]}